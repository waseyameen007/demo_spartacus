/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { ÉµInlineCriticalCssProcessor as InlineCriticalCssProcessor } from '@nguniversal/common/engine';
import * as fs from 'fs';
import * as path from 'path';
let workerArgs;
let inlineCriticalCssProcessor;
export function setup(options) {
    workerArgs = options;
    if (workerArgs.inlineCriticalCss) {
        inlineCriticalCssProcessor = new InlineCriticalCssProcessor({
            deployUrl: workerArgs.deployUrl,
            minify: workerArgs.minifyCss,
        });
    }
}
/**
 * Renders each route in routes and writes them to <outputPath>/<route>/index.html.
 */
export function render(outputPath, serverBundlePath, route) {
    return __awaiter(this, void 0, void 0, function* () {
        const result = {};
        const browserIndexOutputPath = path.join(outputPath, workerArgs.indexFile);
        const outputFolderPath = path.join(outputPath, route);
        const outputIndexPath = path.join(outputFolderPath, 'index.html');
        const { renderModule, AppServerModule } = yield import(serverBundlePath);
        const indexBaseName = fs.existsSync(path.join(outputPath, 'index.original.html'))
            ? 'index.original.html'
            : workerArgs.indexFile;
        const browserIndexInputPath = path.join(outputPath, indexBaseName);
        let indexHtml = yield fs.promises.readFile(browserIndexInputPath, 'utf8');
        indexHtml = indexHtml.replace('</html>', '<!-- This page was prerendered with Angular Universal -->\n</html>');
        if (workerArgs.inlineCriticalCss) {
            // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
            indexHtml = indexHtml.replace(/ media=\"print\" onload=\"this\.media='all'"><noscript><link .+?><\/noscript>/g, '>');
        }
        let html = yield renderModule(AppServerModule, {
            document: indexHtml,
            url: route,
        });
        if (inlineCriticalCssProcessor) {
            const { content, warnings, errors } = yield inlineCriticalCssProcessor.process(html, {
                outputPath,
            });
            result.errors = errors;
            result.warnings = warnings;
            html = content;
        }
        // This case happens when we are prerendering "/".
        if (browserIndexOutputPath === outputIndexPath) {
            const browserIndexOutputPathOriginal = path.join(outputPath, 'index.original.html');
            fs.renameSync(browserIndexOutputPath, browserIndexOutputPathOriginal);
        }
        fs.mkdirSync(outputFolderPath, { recursive: true });
        fs.writeFileSync(outputIndexPath, html);
        return result;
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvcHJlcmVuZGVyL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7QUFFSCxPQUFPLEVBQUUsMkJBQTJCLElBQUksMEJBQTBCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN2RyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUN6QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQWM3QixJQUFJLFVBQTJCLENBQUM7QUFDaEMsSUFBSSwwQkFBa0UsQ0FBQztBQUV2RSxNQUFNLFVBQVUsS0FBSyxDQUFDLE9BQXdCO0lBQzVDLFVBQVUsR0FBRyxPQUFPLENBQUM7SUFDckIsSUFBSSxVQUFVLENBQUMsaUJBQWlCLEVBQUU7UUFDaEMsMEJBQTBCLEdBQUcsSUFBSSwwQkFBMEIsQ0FBQztZQUMxRCxTQUFTLEVBQUUsVUFBVSxDQUFDLFNBQVM7WUFDL0IsTUFBTSxFQUFFLFVBQVUsQ0FBQyxTQUFTO1NBQzdCLENBQUMsQ0FBQztLQUNKO0FBQ0gsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFnQixNQUFNLENBQzFCLFVBQWtCLEVBQ2xCLGdCQUF3QixFQUN4QixLQUFhOztRQUViLE1BQU0sTUFBTSxHQUFHLEVBQWtCLENBQUM7UUFDbEMsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0UsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN0RCxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRWxFLE1BQU0sRUFBRSxZQUFZLEVBQUUsZUFBZSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUV6RSxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLHFCQUFxQixDQUFDLENBQUM7WUFDL0UsQ0FBQyxDQUFDLHFCQUFxQjtZQUN2QixDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQztRQUN6QixNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ25FLElBQUksU0FBUyxHQUFHLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDMUUsU0FBUyxHQUFHLFNBQVMsQ0FBQyxPQUFPLENBQzNCLFNBQVMsRUFDVCxvRUFBb0UsQ0FDckUsQ0FBQztRQUNGLElBQUksVUFBVSxDQUFDLGlCQUFpQixFQUFFO1lBQ2hDLHdFQUF3RTtZQUN4RSxTQUFTLEdBQUcsU0FBUyxDQUFDLE9BQU8sQ0FDM0IsZ0ZBQWdGLEVBQ2hGLEdBQUcsQ0FDSixDQUFDO1NBQ0g7UUFFRCxJQUFJLElBQUksR0FBRyxNQUFNLFlBQVksQ0FBQyxlQUFlLEVBQUU7WUFDN0MsUUFBUSxFQUFFLFNBQVM7WUFDbkIsR0FBRyxFQUFFLEtBQUs7U0FDWCxDQUFDLENBQUM7UUFFSCxJQUFJLDBCQUEwQixFQUFFO1lBQzlCLE1BQU0sRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sMEJBQTBCLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtnQkFDbkYsVUFBVTthQUNYLENBQUMsQ0FBQztZQUNILE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1lBQ3ZCLE1BQU0sQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1lBQzNCLElBQUksR0FBRyxPQUFPLENBQUM7U0FDaEI7UUFFRCxrREFBa0Q7UUFDbEQsSUFBSSxzQkFBc0IsS0FBSyxlQUFlLEVBQUU7WUFDOUMsTUFBTSw4QkFBOEIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxxQkFBcUIsQ0FBQyxDQUFDO1lBQ3BGLEVBQUUsQ0FBQyxVQUFVLENBQUMsc0JBQXNCLEVBQUUsOEJBQThCLENBQUMsQ0FBQztTQUN2RTtRQUVELEVBQUUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNwRCxFQUFFLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4QyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgybVJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciBhcyBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciB9IGZyb20gJ0BuZ3VuaXZlcnNhbC9jb21tb24vZW5naW5lJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgV29ya2VyU2V0dXBBcmdzIHtcbiAgaW5kZXhGaWxlOiBzdHJpbmc7XG4gIGRlcGxveVVybDogc3RyaW5nO1xuICBpbmxpbmVDcml0aWNhbENzczogYm9vbGVhbjtcbiAgbWluaWZ5Q3NzOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJlbmRlclJlc3VsdCB7XG4gIGVycm9ycz86IHN0cmluZ1tdO1xuICB3YXJuaW5ncz86IHN0cmluZ1tdO1xufVxuXG5sZXQgd29ya2VyQXJnczogV29ya2VyU2V0dXBBcmdzO1xubGV0IGlubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yOiBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwKG9wdGlvbnM6IFdvcmtlclNldHVwQXJncyk6IHZvaWQge1xuICB3b3JrZXJBcmdzID0gb3B0aW9ucztcbiAgaWYgKHdvcmtlckFyZ3MuaW5saW5lQ3JpdGljYWxDc3MpIHtcbiAgICBpbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciA9IG5ldyBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3Nvcih7XG4gICAgICBkZXBsb3lVcmw6IHdvcmtlckFyZ3MuZGVwbG95VXJsLFxuICAgICAgbWluaWZ5OiB3b3JrZXJBcmdzLm1pbmlmeUNzcyxcbiAgICB9KTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbmRlcnMgZWFjaCByb3V0ZSBpbiByb3V0ZXMgYW5kIHdyaXRlcyB0aGVtIHRvIDxvdXRwdXRQYXRoPi88cm91dGU+L2luZGV4Lmh0bWwuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZW5kZXIoXG4gIG91dHB1dFBhdGg6IHN0cmluZyxcbiAgc2VydmVyQnVuZGxlUGF0aDogc3RyaW5nLFxuICByb3V0ZTogc3RyaW5nLFxuKTogUHJvbWlzZTxSZW5kZXJSZXN1bHQ+IHtcbiAgY29uc3QgcmVzdWx0ID0ge30gYXMgUmVuZGVyUmVzdWx0O1xuICBjb25zdCBicm93c2VySW5kZXhPdXRwdXRQYXRoID0gcGF0aC5qb2luKG91dHB1dFBhdGgsIHdvcmtlckFyZ3MuaW5kZXhGaWxlKTtcbiAgY29uc3Qgb3V0cHV0Rm9sZGVyUGF0aCA9IHBhdGguam9pbihvdXRwdXRQYXRoLCByb3V0ZSk7XG4gIGNvbnN0IG91dHB1dEluZGV4UGF0aCA9IHBhdGguam9pbihvdXRwdXRGb2xkZXJQYXRoLCAnaW5kZXguaHRtbCcpO1xuXG4gIGNvbnN0IHsgcmVuZGVyTW9kdWxlLCBBcHBTZXJ2ZXJNb2R1bGUgfSA9IGF3YWl0IGltcG9ydChzZXJ2ZXJCdW5kbGVQYXRoKTtcblxuICBjb25zdCBpbmRleEJhc2VOYW1lID0gZnMuZXhpc3RzU3luYyhwYXRoLmpvaW4ob3V0cHV0UGF0aCwgJ2luZGV4Lm9yaWdpbmFsLmh0bWwnKSlcbiAgICA/ICdpbmRleC5vcmlnaW5hbC5odG1sJ1xuICAgIDogd29ya2VyQXJncy5pbmRleEZpbGU7XG4gIGNvbnN0IGJyb3dzZXJJbmRleElucHV0UGF0aCA9IHBhdGguam9pbihvdXRwdXRQYXRoLCBpbmRleEJhc2VOYW1lKTtcbiAgbGV0IGluZGV4SHRtbCA9IGF3YWl0IGZzLnByb21pc2VzLnJlYWRGaWxlKGJyb3dzZXJJbmRleElucHV0UGF0aCwgJ3V0ZjgnKTtcbiAgaW5kZXhIdG1sID0gaW5kZXhIdG1sLnJlcGxhY2UoXG4gICAgJzwvaHRtbD4nLFxuICAgICc8IS0tIFRoaXMgcGFnZSB3YXMgcHJlcmVuZGVyZWQgd2l0aCBBbmd1bGFyIFVuaXZlcnNhbCAtLT5cXG48L2h0bWw+JyxcbiAgKTtcbiAgaWYgKHdvcmtlckFyZ3MuaW5saW5lQ3JpdGljYWxDc3MpIHtcbiAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vR29vZ2xlQ2hyb21lTGFicy9jcml0dGVycy9pc3N1ZXMvNjRcbiAgICBpbmRleEh0bWwgPSBpbmRleEh0bWwucmVwbGFjZShcbiAgICAgIC8gbWVkaWE9XFxcInByaW50XFxcIiBvbmxvYWQ9XFxcInRoaXNcXC5tZWRpYT0nYWxsJ1wiPjxub3NjcmlwdD48bGluayAuKz8+PFxcL25vc2NyaXB0Pi9nLFxuICAgICAgJz4nLFxuICAgICk7XG4gIH1cblxuICBsZXQgaHRtbCA9IGF3YWl0IHJlbmRlck1vZHVsZShBcHBTZXJ2ZXJNb2R1bGUsIHtcbiAgICBkb2N1bWVudDogaW5kZXhIdG1sLFxuICAgIHVybDogcm91dGUsXG4gIH0pO1xuXG4gIGlmIChpbmxpbmVDcml0aWNhbENzc1Byb2Nlc3Nvcikge1xuICAgIGNvbnN0IHsgY29udGVudCwgd2FybmluZ3MsIGVycm9ycyB9ID0gYXdhaXQgaW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzb3IucHJvY2VzcyhodG1sLCB7XG4gICAgICBvdXRwdXRQYXRoLFxuICAgIH0pO1xuICAgIHJlc3VsdC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgcmVzdWx0Lndhcm5pbmdzID0gd2FybmluZ3M7XG4gICAgaHRtbCA9IGNvbnRlbnQ7XG4gIH1cblxuICAvLyBUaGlzIGNhc2UgaGFwcGVucyB3aGVuIHdlIGFyZSBwcmVyZW5kZXJpbmcgXCIvXCIuXG4gIGlmIChicm93c2VySW5kZXhPdXRwdXRQYXRoID09PSBvdXRwdXRJbmRleFBhdGgpIHtcbiAgICBjb25zdCBicm93c2VySW5kZXhPdXRwdXRQYXRoT3JpZ2luYWwgPSBwYXRoLmpvaW4ob3V0cHV0UGF0aCwgJ2luZGV4Lm9yaWdpbmFsLmh0bWwnKTtcbiAgICBmcy5yZW5hbWVTeW5jKGJyb3dzZXJJbmRleE91dHB1dFBhdGgsIGJyb3dzZXJJbmRleE91dHB1dFBhdGhPcmlnaW5hbCk7XG4gIH1cblxuICBmcy5ta2RpclN5bmMob3V0cHV0Rm9sZGVyUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIGZzLndyaXRlRmlsZVN5bmMob3V0cHV0SW5kZXhQYXRoLCBodG1sKTtcblxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19