/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { spawn } from 'child_process';
import { createConnection, createServer } from 'net';
import { Observable, throwError, timer } from 'rxjs';
import { mergeMap, retryWhen } from 'rxjs/operators';
import * as treeKill from 'tree-kill';
export function getAvailablePort() {
    return new Promise((resolve, reject) => {
        const server = createServer();
        server
            .unref()
            .on('error', reject)
            .listen(0, () => {
            const { port } = server.address();
            server.close(() => resolve(port));
        });
    });
}
export function spawnAsObservable(command, args = [], options = {}) {
    return new Observable((obs) => {
        const proc = spawn(command, args, options);
        if (proc.stdout) {
            proc.stdout.on('data', (data) => obs.next({ stdout: data.toString() }));
        }
        if (proc.stderr) {
            proc.stderr.on('data', (data) => obs.next({ stderr: data.toString() }));
        }
        proc
            .on('error', (err) => obs.error(err))
            .on('close', (code) => {
            if (code !== 0) {
                obs.error(new Error(`${command} exited with ${code} code.`));
            }
            obs.complete();
        });
        return () => {
            if (!proc.killed) {
                treeKill(proc.pid, 'SIGTERM');
            }
        };
    });
}
export function waitUntilServerIsListening(port, host) {
    const allowedErrorCodes = ['ECONNREFUSED', 'ECONNRESET'];
    return new Observable((obs) => {
        const client = createConnection({ host, port }, () => {
            obs.next(undefined);
            obs.complete();
        }).on('error', (err) => obs.error(err));
        return () => {
            if (!client.destroyed) {
                client.destroy();
            }
        };
    }).pipe(retryWhen((err) => err.pipe(mergeMap((error, attempts) => {
        return attempts > 10 || !allowedErrorCodes.includes(error.code)
            ? throwError(error)
            : timer(100 * (attempts * 1));
    }))));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9zc3ItZGV2LXNlcnZlci91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBQWdCLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRCxPQUFPLEVBQWUsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLE1BQU0sS0FBSyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sS0FBSyxRQUFRLE1BQU0sV0FBVyxDQUFDO0FBRXRDLE1BQU0sVUFBVSxnQkFBZ0I7SUFDOUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxNQUFNLE1BQU0sR0FBRyxZQUFZLEVBQUUsQ0FBQztRQUM5QixNQUFNO2FBQ0gsS0FBSyxFQUFFO2FBQ1AsRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7YUFDbkIsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUU7WUFDZCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLE9BQU8sRUFBaUIsQ0FBQztZQUNqRCxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixPQUFlLEVBQ2YsT0FBaUIsRUFBRSxFQUNuQixVQUF3QixFQUFFO0lBRTFCLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFH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ZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7IFNwYXduT3B0aW9ucywgc3Bhd24gfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcbmltcG9ydCB7IEFkZHJlc3NJbmZvLCBjcmVhdGVDb25uZWN0aW9uLCBjcmVhdGVTZXJ2ZXIgfSBmcm9tICduZXQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgdGhyb3dFcnJvciwgdGltZXIgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1lcmdlTWFwLCByZXRyeVdoZW4gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgKiBhcyB0cmVlS2lsbCBmcm9tICd0cmVlLWtpbGwnO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXZhaWxhYmxlUG9ydCgpOiBQcm9taXNlPG51bWJlcj4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHNlcnZlciA9IGNyZWF0ZVNlcnZlcigpO1xuICAgIHNlcnZlclxuICAgICAgLnVucmVmKClcbiAgICAgIC5vbignZXJyb3InLCByZWplY3QpXG4gICAgICAubGlzdGVuKDAsICgpID0+IHtcbiAgICAgICAgY29uc3QgeyBwb3J0IH0gPSBzZXJ2ZXIuYWRkcmVzcygpIGFzIEFkZHJlc3NJbmZvO1xuICAgICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4gcmVzb2x2ZShwb3J0KSk7XG4gICAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcGF3bkFzT2JzZXJ2YWJsZShcbiAgY29tbWFuZDogc3RyaW5nLFxuICBhcmdzOiBzdHJpbmdbXSA9IFtdLFxuICBvcHRpb25zOiBTcGF3bk9wdGlvbnMgPSB7fSxcbik6IE9ic2VydmFibGU8eyBzdGRvdXQ/OiBzdHJpbmc7IHN0ZGVycj86IHN0cmluZyB9PiB7XG4gIHJldHVybiBuZXcgT2JzZXJ2YWJsZSgob2JzKSA9PiB7XG4gICAgY29uc3QgcHJvYyA9IHNwYXduKGNvbW1hbmQsIGFyZ3MsIG9wdGlvbnMpO1xuICAgIGlmIChwcm9jLnN0ZG91dCkge1xuICAgICAgcHJvYy5zdGRvdXQub24oJ2RhdGEnLCAoZGF0YSkgPT4gb2JzLm5leHQoeyBzdGRvdXQ6IGRhdGEudG9TdHJpbmcoKSB9KSk7XG4gICAgfVxuXG4gICAgaWYgKHByb2Muc3RkZXJyKSB7XG4gICAgICBwcm9jLnN0ZGVyci5vbignZGF0YScsIChkYXRhKSA9PiBvYnMubmV4dCh7IHN0ZGVycjogZGF0YS50b1N0cmluZygpIH0pKTtcbiAgICB9XG5cbiAgICBwcm9jXG4gICAgICAub24oJ2Vycm9yJywgKGVycikgPT4gb2JzLmVycm9yKGVycikpXG4gICAgICAub24oJ2Nsb3NlJywgKGNvZGUpID0+IHtcbiAgICAgICAgaWYgKGNvZGUgIT09IDApIHtcbiAgICAgICAgICBvYnMuZXJyb3IobmV3IEVycm9yKGAke2NvbW1hbmR9IGV4aXRlZCB3aXRoICR7Y29kZX0gY29kZS5gKSk7XG4gICAgICAgIH1cblxuICAgICAgICBvYnMuY29tcGxldGUoKTtcbiAgICAgIH0pO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlmICghcHJvYy5raWxsZWQpIHtcbiAgICAgICAgdHJlZUtpbGwocHJvYy5waWQsICdTSUdURVJNJyk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3YWl0VW50aWxTZXJ2ZXJJc0xpc3RlbmluZyhwb3J0OiBudW1iZXIsIGhvc3Q/OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVuZGVmaW5lZD4ge1xuICBjb25zdCBhbGxvd2VkRXJyb3JDb2RlcyA9IFsnRUNPTk5SRUZVU0VEJywgJ0VDT05OUkVTRVQnXTtcblxuICByZXR1cm4gbmV3IE9ic2VydmFibGU8dW5kZWZpbmVkPigob2JzKSA9PiB7XG4gICAgY29uc3QgY2xpZW50ID0gY3JlYXRlQ29ubmVjdGlvbih7IGhvc3QsIHBvcnQgfSwgKCkgPT4ge1xuICAgICAgb2JzLm5leHQodW5kZWZpbmVkKTtcbiAgICAgIG9icy5jb21wbGV0ZSgpO1xuICAgIH0pLm9uKCdlcnJvcicsIChlcnIpID0+IG9icy5lcnJvcihlcnIpKTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIWNsaWVudC5kZXN0cm95ZWQpIHtcbiAgICAgICAgY2xpZW50LmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9O1xuICB9KS5waXBlKFxuICAgIHJldHJ5V2hlbigoZXJyKSA9PlxuICAgICAgZXJyLnBpcGUoXG4gICAgICAgIG1lcmdlTWFwKChlcnJvciwgYXR0ZW1wdHMpID0+IHtcbiAgICAgICAgICByZXR1cm4gYXR0ZW1wdHMgPiAxMCB8fCAhYWxsb3dlZEVycm9yQ29kZXMuaW5jbHVkZXMoZXJyb3IuY29kZSlcbiAgICAgICAgICAgID8gdGhyb3dFcnJvcihlcnJvcilcbiAgICAgICAgICAgIDogdGltZXIoMTAwICogKGF0dGVtcHRzICogMSkpO1xuICAgICAgICB9KSxcbiAgICAgICksXG4gICAgKSxcbiAgKTtcbn1cbiJdfQ==