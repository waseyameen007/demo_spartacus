/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/ssr-dev-server/index", ["require", "exports", "@angular-devkit/architect", "@angular-devkit/core", "browser-sync", "http-proxy-middleware", "path", "rxjs", "rxjs/operators", "url", "@nguniversal/builders/src/ssr-dev-server/utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.execute = void 0;
    const architect_1 = require("@angular-devkit/architect");
    const core_1 = require("@angular-devkit/core");
    const browserSync = require("browser-sync");
    const http_proxy_middleware_1 = require("http-proxy-middleware");
    const path_1 = require("path");
    const rxjs_1 = require("rxjs");
    const operators_1 = require("rxjs/operators");
    const url = require("url");
    const utils_1 = require("@nguniversal/builders/src/ssr-dev-server/utils");
    /** Log messages to ignore and not rely to the logger */
    const IGNORED_STDOUT_MESSAGES = [
        'server listening on',
        'Angular is running in development mode. Call enableProdMode() to enable production mode.',
    ];
    function execute(options, context) {
        const browserTarget = architect_1.targetFromTargetString(options.browserTarget);
        const serverTarget = architect_1.targetFromTargetString(options.serverTarget);
        const getBaseUrl = (bs) => `${bs.getOption('scheme')}://${bs.getOption('host')}:${bs.getOption('port')}`;
        const browserTargetRun = context.scheduleTarget(browserTarget, {
            serviceWorker: false,
            watch: true,
            progress: options.progress,
        });
        const serverTargetRun = context.scheduleTarget(serverTarget, {
            watch: true,
            progress: options.progress,
        });
        const bsInstance = browserSync.create();
        context.logger.error(core_1.tags.stripIndents `
  ****************************************************************************************
  This is a simple server for use in testing or debugging Angular applications locally.
  It hasn't been reviewed for security issues.

  DON'T USE IT FOR PRODUCTION!
  ****************************************************************************************
 `);
        return rxjs_1.zip(browserTargetRun, serverTargetRun, utils_1.getAvailablePort()).pipe(operators_1.switchMap(([br, sr, nodeServerPort]) => {
            return rxjs_1.combineLatest([br.output, sr.output]).pipe(
            // This is needed so that if both server and browser emit close to each other
            // we only emit once. This typically happens on the first build.
            operators_1.debounceTime(120), operators_1.switchMap(([b, s]) => {
                if (!s.success || !b.success) {
                    return rxjs_1.of([b, s]);
                }
                return startNodeServer(s, nodeServerPort, context.logger, !!options.inspect).pipe(operators_1.mapTo([b, s]), operators_1.catchError((err) => {
                    context.logger.error(`A server error has occurred.\n${mapErrorToMessage(err)}`);
                    return rxjs_1.EMPTY;
                }));
            }), operators_1.map(([b, s]) => [
                {
                    success: b.success && s.success,
                    error: b.error || s.error,
                },
                nodeServerPort,
            ]), operators_1.tap(([builderOutput]) => {
                if (builderOutput.success) {
                    context.logger.info('\nCompiled successfully.');
                }
            }), operators_1.debounce(([builderOutput]) => builderOutput.success && !options.inspect
                ? utils_1.waitUntilServerIsListening(nodeServerPort)
                : rxjs_1.EMPTY));
        }), operators_1.concatMap(([builderOutput, nodeServerPort]) => {
            if (!builderOutput.success) {
                return rxjs_1.of(builderOutput);
            }
            if (bsInstance.active) {
                bsInstance.reload();
                return rxjs_1.of(builderOutput);
            }
            else {
                return rxjs_1.from(initBrowserSync(bsInstance, nodeServerPort, options, context)).pipe(operators_1.tap((bs) => {
                    const baseUrl = getBaseUrl(bs);
                    context.logger.info(core_1.tags.oneLine `
                **
                Angular Universal Live Development Server is listening on ${baseUrl},
                open your browser on ${baseUrl}
                **
              `);
                }), operators_1.mapTo(builderOutput));
            }
        }), operators_1.map((builderOutput) => ({
            success: builderOutput.success,
            error: builderOutput.error,
            baseUrl: bsInstance && getBaseUrl(bsInstance),
        })), operators_1.finalize(() => {
            if (bsInstance) {
                bsInstance.exit();
                bsInstance.cleanup();
            }
        }), operators_1.catchError((error) => rxjs_1.of({
            success: false,
            error: mapErrorToMessage(error),
        })));
    }
    exports.execute = execute;
    function startNodeServer(serverOutput, port, logger, inspectMode = false) {
        const outputPath = serverOutput.outputPath;
        const path = path_1.join(outputPath, 'main.js');
        const env = Object.assign(Object.assign({}, process.env), { PORT: '' + port });
        const args = [`"${path}"`];
        if (inspectMode) {
            args.unshift('--inspect-brk');
        }
        return rxjs_1.of(null).pipe(operators_1.delay(0), // Avoid EADDRINUSE error since it will cause the kill event to be finish.
        operators_1.switchMap(() => utils_1.spawnAsObservable('node', args, { env, shell: true })), operators_1.tap(({ stderr, stdout }) => {
            if (stderr) {
                logger.error(stderr);
            }
            if (stdout && !IGNORED_STDOUT_MESSAGES.some((x) => stdout.includes(x))) {
                logger.info(stdout);
            }
        }), operators_1.ignoreElements(), 
        // Emit a signal after the process has been started
        operators_1.startWith(undefined));
    }
    function initBrowserSync(browserSyncInstance, nodeServerPort, options, context) {
        return __awaiter(this, void 0, void 0, function* () {
            if (browserSyncInstance.active) {
                return browserSyncInstance;
            }
            const { port: browserSyncPort, open, host, publicHost, proxyConfig } = options;
            const bsPort = browserSyncPort || (yield utils_1.getAvailablePort());
            const bsOptions = {
                proxy: {
                    target: `localhost:${nodeServerPort}`,
                    proxyOptions: {
                        xfwd: true,
                    },
                    proxyRes: [
                        (proxyRes) => {
                            if ('headers' in proxyRes) {
                                proxyRes.headers['cache-control'] = undefined;
                            }
                        },
                    ],
                    // proxyOptions is not in the typings
                },
                host,
                port: bsPort,
                ui: false,
                server: false,
                notify: false,
                ghostMode: false,
                logLevel: 'silent',
                open,
                https: getSslConfig(context.workspaceRoot, options),
            };
            const publicHostNormalized = publicHost && publicHost.endsWith('/')
                ? publicHost.substring(0, publicHost.length - 1)
                : publicHost;
            if (publicHostNormalized) {
                const { protocol, hostname, port, pathname } = url.parse(publicHostNormalized);
                const defaultSocketIoPath = '/browser-sync/socket.io';
                const defaultNamespace = '/browser-sync';
                const hasPathname = !!(pathname && pathname !== '/');
                const namespace = hasPathname ? pathname + defaultNamespace : defaultNamespace;
                const path = hasPathname ? pathname + defaultSocketIoPath : defaultSocketIoPath;
                bsOptions.socket = {
                    namespace,
                    path,
                    domain: url.format({
                        protocol,
                        hostname,
                        port,
                    }),
                };
                // When having a pathname we also need to create a reverse proxy because socket.io
                // will be listening on: 'http://localhost:4200/ssr/browser-sync/socket.io'
                // However users will typically have a reverse proxy that will redirect all matching requests
                // ex: http://testinghost.com/ssr -> http://localhost:4200 which will result in a 404.
                if (hasPathname) {
                    // Remove leading slash
                    (bsOptions.scriptPath = (p) => p.substring(1)),
                        (bsOptions.middleware = [
                            http_proxy_middleware_1.createProxyMiddleware(defaultSocketIoPath, {
                                target: url.format({
                                    protocol: 'http',
                                    hostname: host,
                                    port: bsPort,
                                    pathname: path,
                                }),
                                ws: true,
                                logLevel: 'silent',
                            }),
                        ]);
                }
            }
            if (proxyConfig) {
                if (!bsOptions.middleware) {
                    bsOptions.middleware = [];
                }
                else if (!Array.isArray(bsOptions.middleware)) {
                    bsOptions.middleware = [bsOptions.middleware];
                }
                bsOptions.middleware = [
                    ...bsOptions.middleware,
                    ...getProxyConfig(context.workspaceRoot, proxyConfig),
                ];
            }
            return new Promise((resolve, reject) => {
                browserSyncInstance.init(bsOptions, (error, bs) => {
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(bs);
                    }
                });
            });
        });
    }
    function mapErrorToMessage(error) {
        if (error instanceof Error) {
            return error.message;
        }
        if (typeof error === 'string') {
            return error;
        }
        return '';
    }
    function getSslConfig(root, options) {
        const { ssl, sslCert, sslKey } = options;
        if (ssl && sslCert && sslKey) {
            return {
                key: path_1.resolve(root, sslKey),
                cert: path_1.resolve(root, sslCert),
            };
        }
        return ssl;
    }
    function getProxyConfig(root, proxyConfig) {
        const proxyPath = path_1.resolve(root, proxyConfig);
        let proxySettings;
        try {
            proxySettings = require(proxyPath);
        }
        catch (error) {
            if (error.code === 'MODULE_NOT_FOUND') {
                throw new Error(`Proxy config file ${proxyPath} does not exist.`);
            }
            throw error;
        }
        const proxies = Array.isArray(proxySettings) ? proxySettings : [proxySettings];
        const createdProxies = [];
        for (const proxy of proxies) {
            for (const [key, context] of Object.entries(proxy)) {
                if (typeof key === 'string') {
                    createdProxies.push(http_proxy_middleware_1.createProxyMiddleware(key.replace(/^\*$/, '**').replace(/\/\*$/, ''), context));
                }
                else {
                    createdProxies.push(http_proxy_middleware_1.createProxyMiddleware(key, context));
                }
            }
        }
        return createdProxies;
    }
    exports.default = architect_1.createBuilder(execute);
});
//# sourceMappingURL=data:application/json;base64,