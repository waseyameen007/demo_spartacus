/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/builders/src/ssr-dev-server/utils", ["require", "exports", "child_process", "net", "rxjs", "rxjs/operators", "tree-kill"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.waitUntilServerIsListening = exports.spawnAsObservable = exports.getAvailablePort = void 0;
    const child_process_1 = require("child_process");
    const net_1 = require("net");
    const rxjs_1 = require("rxjs");
    const operators_1 = require("rxjs/operators");
    const treeKill = require("tree-kill");
    function getAvailablePort() {
        return new Promise((resolve, reject) => {
            const server = net_1.createServer();
            server
                .unref()
                .on('error', reject)
                .listen(0, () => {
                const { port } = server.address();
                server.close(() => resolve(port));
            });
        });
    }
    exports.getAvailablePort = getAvailablePort;
    function spawnAsObservable(command, args = [], options = {}) {
        return new rxjs_1.Observable((obs) => {
            const proc = child_process_1.spawn(command, args, options);
            if (proc.stdout) {
                proc.stdout.on('data', (data) => obs.next({ stdout: data.toString() }));
            }
            if (proc.stderr) {
                proc.stderr.on('data', (data) => obs.next({ stderr: data.toString() }));
            }
            proc
                .on('error', (err) => obs.error(err))
                .on('close', (code) => {
                if (code !== 0) {
                    obs.error(new Error(`${command} exited with ${code} code.`));
                }
                obs.complete();
            });
            return () => {
                if (!proc.killed) {
                    treeKill(proc.pid, 'SIGTERM');
                }
            };
        });
    }
    exports.spawnAsObservable = spawnAsObservable;
    function waitUntilServerIsListening(port, host) {
        const allowedErrorCodes = ['ECONNREFUSED', 'ECONNRESET'];
        return new rxjs_1.Observable((obs) => {
            const client = net_1.createConnection({ host, port }, () => {
                obs.next(undefined);
                obs.complete();
            }).on('error', (err) => obs.error(err));
            return () => {
                if (!client.destroyed) {
                    client.destroy();
                }
            };
        }).pipe(operators_1.retryWhen((err) => err.pipe(operators_1.mergeMap((error, attempts) => {
            return attempts > 10 || !allowedErrorCodes.includes(error.code)
                ? rxjs_1.throwError(error)
                : rxjs_1.timer(100 * (attempts * 1));
        }))));
    }
    exports.waitUntilServerIsListening = waitUntilServerIsListening;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9zc3ItZGV2LXNlcnZlci91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7SUFFSCxpREFBb0Q7SUFDcEQsNkJBQWtFO0lBQ2xFLCtCQUFxRDtJQUNyRCw4Q0FBcUQ7SUFDckQsc0NBQXNDO0lBRXRDLFNBQWdCLGdCQUFnQjtRQUM5QixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLE1BQU0sTUFBTSxHQUFHLGtCQUFZLEVBQUUsQ0FBQztZQUM5QixNQUFNO2lCQUNILEtBQUssRUFBRTtpQkFDUCxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQztpQkFDbkIsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUU7Z0JBQ2QsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLE1BQU0sQ0FBQyxPQUFPLEVBQWlCLENBQUM7Z0JBQ2pELE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEMsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFYRCw0Q0FXQztJQUVELFNBQWdCLGlCQUFpQixDQUMvQixPQUFlLEVBQ2YsT0FBaUIsRUFBRSxFQUNuQixVQUF3QixFQUFFO1FBRTFCLE9BQU8sSUFBSSxpQkFBVSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDNUIsTUFBTSxJQUFJLEdBQUcscUJBQUssQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQzNDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3pFO1lBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDekU7WUFFRCxJQUFJO2lCQUNELEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ3BDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxJQUFJLEtBQUssQ0FBQyxFQUFFO29CQUNkLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxPQUFPLGdCQUFnQixJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUM7aUJBQzlEO2dCQUVELEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNqQixDQUFDLENBQUMsQ0FBQztZQUVMLE9BQU8sR0FBRyxFQUFFO2dCQUNWLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNoQixRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDL0I7WUFDSCxDQUFDLENBQUM7UUFDSixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUEvQkQsOENBK0JDO0lBRUQsU0FBZ0IsMEJBQTBCLENBQUMsSUFBWSxFQUFFLElBQWE7UUFDcEUsTUFBTSxpQkFBaUIsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUV6RCxPQUFPLElBQUksaUJBQVUsQ0FBWSxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ3ZDLE1BQU0sTUFBTSxHQUFHLHNCQUFnQixDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsRUFBRTtnQkFDbkQsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFDcEIsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ2pCLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUV4QyxPQUFPLEdBQUcsRUFBRTtnQkFDVixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtvQkFDckIsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUNsQjtZQUNILENBQUMsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDTCxxQkFBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FDaEIsR0FBRyxDQUFDLElBQUksQ0FDTixvQkFBUSxDQUFDLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQzNCLE9BQU8sUUFBUSxHQUFHLEVBQUUsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO2dCQUM3RCxDQUFDLENBQUMsaUJBQVUsQ0FBQyxLQUFLLENBQUM7Z0JBQ25CLENBQUMsQ0FBQyxZQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEMsQ0FBQyxDQUFDLENBQ0gsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBekJELGdFQXlCQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuXG5pbXBvcnQgeyBTcGF3bk9wdGlvbnMsIHNwYXduIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5pbXBvcnQgeyBBZGRyZXNzSW5mbywgY3JlYXRlQ29ubmVjdGlvbiwgY3JlYXRlU2VydmVyIH0gZnJvbSAnbmV0JztcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IsIHRpbWVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtZXJnZU1hcCwgcmV0cnlXaGVuIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0ICogYXMgdHJlZUtpbGwgZnJvbSAndHJlZS1raWxsJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEF2YWlsYWJsZVBvcnQoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBzZXJ2ZXIgPSBjcmVhdGVTZXJ2ZXIoKTtcbiAgICBzZXJ2ZXJcbiAgICAgIC51bnJlZigpXG4gICAgICAub24oJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgLmxpc3RlbigwLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHsgcG9ydCB9ID0gc2VydmVyLmFkZHJlc3MoKSBhcyBBZGRyZXNzSW5mbztcbiAgICAgICAgc2VydmVyLmNsb3NlKCgpID0+IHJlc29sdmUocG9ydCkpO1xuICAgICAgfSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Bhd25Bc09ic2VydmFibGUoXG4gIGNvbW1hbmQ6IHN0cmluZyxcbiAgYXJnczogc3RyaW5nW10gPSBbXSxcbiAgb3B0aW9uczogU3Bhd25PcHRpb25zID0ge30sXG4pOiBPYnNlcnZhYmxlPHsgc3Rkb3V0Pzogc3RyaW5nOyBzdGRlcnI/OiBzdHJpbmcgfT4ge1xuICByZXR1cm4gbmV3IE9ic2VydmFibGUoKG9icykgPT4ge1xuICAgIGNvbnN0IHByb2MgPSBzcGF3bihjb21tYW5kLCBhcmdzLCBvcHRpb25zKTtcbiAgICBpZiAocHJvYy5zdGRvdXQpIHtcbiAgICAgIHByb2Muc3Rkb3V0Lm9uKCdkYXRhJywgKGRhdGEpID0+IG9icy5uZXh0KHsgc3Rkb3V0OiBkYXRhLnRvU3RyaW5nKCkgfSkpO1xuICAgIH1cblxuICAgIGlmIChwcm9jLnN0ZGVycikge1xuICAgICAgcHJvYy5zdGRlcnIub24oJ2RhdGEnLCAoZGF0YSkgPT4gb2JzLm5leHQoeyBzdGRlcnI6IGRhdGEudG9TdHJpbmcoKSB9KSk7XG4gICAgfVxuXG4gICAgcHJvY1xuICAgICAgLm9uKCdlcnJvcicsIChlcnIpID0+IG9icy5lcnJvcihlcnIpKVxuICAgICAgLm9uKCdjbG9zZScsIChjb2RlKSA9PiB7XG4gICAgICAgIGlmIChjb2RlICE9PSAwKSB7XG4gICAgICAgICAgb2JzLmVycm9yKG5ldyBFcnJvcihgJHtjb21tYW5kfSBleGl0ZWQgd2l0aCAke2NvZGV9IGNvZGUuYCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgb2JzLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXByb2Mua2lsbGVkKSB7XG4gICAgICAgIHRyZWVLaWxsKHByb2MucGlkLCAnU0lHVEVSTScpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FpdFVudGlsU2VydmVySXNMaXN0ZW5pbmcocG9ydDogbnVtYmVyLCBob3N0Pzogc3RyaW5nKTogT2JzZXJ2YWJsZTx1bmRlZmluZWQ+IHtcbiAgY29uc3QgYWxsb3dlZEVycm9yQ29kZXMgPSBbJ0VDT05OUkVGVVNFRCcsICdFQ09OTlJFU0VUJ107XG5cbiAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlPHVuZGVmaW5lZD4oKG9icykgPT4ge1xuICAgIGNvbnN0IGNsaWVudCA9IGNyZWF0ZUNvbm5lY3Rpb24oeyBob3N0LCBwb3J0IH0sICgpID0+IHtcbiAgICAgIG9icy5uZXh0KHVuZGVmaW5lZCk7XG4gICAgICBvYnMuY29tcGxldGUoKTtcbiAgICB9KS5vbignZXJyb3InLCAoZXJyKSA9PiBvYnMuZXJyb3IoZXJyKSk7XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFjbGllbnQuZGVzdHJveWVkKSB7XG4gICAgICAgIGNsaWVudC5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkucGlwZShcbiAgICByZXRyeVdoZW4oKGVycikgPT5cbiAgICAgIGVyci5waXBlKFxuICAgICAgICBtZXJnZU1hcCgoZXJyb3IsIGF0dGVtcHRzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGF0dGVtcHRzID4gMTAgfHwgIWFsbG93ZWRFcnJvckNvZGVzLmluY2x1ZGVzKGVycm9yLmNvZGUpXG4gICAgICAgICAgICA/IHRocm93RXJyb3IoZXJyb3IpXG4gICAgICAgICAgICA6IHRpbWVyKDEwMCAqIChhdHRlbXB0cyAqIDEpKTtcbiAgICAgICAgfSksXG4gICAgICApLFxuICAgICksXG4gICk7XG59XG4iXX0=