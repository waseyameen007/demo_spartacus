/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { createBuilder, targetFromTargetString, } from '@angular-devkit/architect';
import { normalizeOptimization } from '@angular-devkit/build-angular/src/utils/normalize-optimization';
import { augmentAppWithServiceWorker } from '@angular-devkit/build-angular/src/utils/service-worker';
import { normalize, resolve } from '@angular-devkit/core';
import * as express from 'express';
import * as http from 'http';
import { Worker as JestWorker } from 'jest-worker';
import * as ora from 'ora';
import { cpus } from 'os';
import * as path from 'path';
import { promisify } from 'util';
import { getAvailablePort } from '../ssr-dev-server/utils';
import { getRoutes } from './utils';
/**
 * Builds the browser and server, then renders each route in options.routes
 * and writes them to prerender/<route>/index.html for each output path in
 * the browser result.
 */
export function execute(options, context) {
    return __awaiter(this, void 0, void 0, function* () {
        const browserTarget = targetFromTargetString(options.browserTarget);
        const browserOptions = (yield context.getTargetOptions(browserTarget));
        const routes = yield getRoutes(options, browserOptions.tsConfig, context);
        if (!routes.length) {
            throw new Error(`Could not find any routes to generate.`);
        }
        const { result } = yield context.scheduleTarget(browserTarget, {
            watch: false,
            serviceWorker: false,
        });
        const { success, error, outputPaths } = (yield result);
        if (!success) {
            return { success, error };
        }
        const worker = createWorker(browserOptions);
        try {
            for (const outputPath of outputPaths) {
                const spinner = ora(`Prerendering ${routes.length} route(s) to ${outputPath}...`).start();
                const staticServer = yield createStaticServer(outputPath);
                try {
                    yield Promise.all(routes.map((route) => worker.render({
                        outputPath,
                        route,
                        port: staticServer.port,
                    })));
                    spinner.succeed(`Prerendering routes to ${outputPath} complete.`);
                    if (browserOptions.serviceWorker) {
                        const swResult = yield generateServiceWorker(context, outputPath, browserOptions);
                        if (!swResult.success) {
                            return swResult;
                        }
                    }
                }
                catch (error) {
                    spinner.fail(`Prerendering routes to ${outputPath} failed.`);
                    return { success: false, error: error.message };
                }
                finally {
                    yield staticServer.close();
                }
            }
            return { success: true };
        }
        finally {
            // const _ = is a workaround to disable tsetse must use promises rule.
            // tslint:disable-next-line: no-floating-promises
            const _ = worker.end();
        }
    });
}
function createStaticServer(browserOutputRoot) {
    return __awaiter(this, void 0, void 0, function* () {
        const app = express();
        app.use(express.static(browserOutputRoot));
        const port = yield getAvailablePort();
        const server = new http.Server(app);
        yield new Promise((res) => server.listen(port, res));
        return {
            close: promisify(server.close.bind(server)),
            port,
        };
    });
}
function createWorker(browserOptions) {
    const { styles: normalizedStylesOptimization } = normalizeOptimization(browserOptions.optimization);
    const setupArgs = {
        inlineCriticalCss: normalizedStylesOptimization.inlineCritical,
    };
    const maxWorkers = Math.max(Math.min(cpus().length, 6) - 1, 1);
    const worker = new JestWorker(path.join(__dirname, 'worker.js'), {
        exposedMethods: ['render'],
        enableWorkerThreads: true,
        numWorkers: maxWorkers,
        setupArgs: [setupArgs],
    });
    worker.getStdout().pipe(process.stdout);
    worker.getStderr().pipe(process.stderr);
    return worker;
}
function generateServiceWorker(context, outputPath, browserOptions) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const spinner = ora(`Generating service worker for ${outputPath}...`).start();
        try {
            const projectName = (_a = context.target) === null || _a === void 0 ? void 0 : _a.project;
            if (!projectName) {
                throw new Error('The builder requires a target.');
            }
            const root = normalize(context.workspaceRoot);
            const projectMetadata = yield context.getProjectMetadata(projectName);
            const projectRoot = resolve(root, normalize((_b = projectMetadata.root) !== null && _b !== void 0 ? _b : ''));
            yield augmentAppWithServiceWorker(root, projectRoot, normalize(outputPath), browserOptions.baseHref || '/', browserOptions.ngswConfigPath);
            spinner.succeed(`Service worker generation for ${outputPath} complete.`);
            return { success: true };
        }
        catch (error) {
            spinner.fail(`Service worker generation for ${outputPath} failed.`);
            return { success: false, error: error.message };
        }
    });
}
export default createBuilder(execute);
//# sourceMappingURL=data:application/json;base64,