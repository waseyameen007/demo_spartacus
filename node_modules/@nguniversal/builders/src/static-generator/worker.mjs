/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Engine } from '@nguniversal/common/clover/server';
import { promises as fs } from 'fs';
import { join } from 'path';
let engine;
let sharedOptions;
export function setup(options) {
    engine = new Engine();
    sharedOptions = options;
}
export function render(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { outputPath, route, port } = options;
        const html = yield engine.render({
            publicPath: outputPath,
            inlineCriticalCss: sharedOptions.inlineCriticalCss,
            url: `http://localhost:${port}/${route}`,
        });
        // This case happens when we are prerendering "/".
        const outputFolderPath = join(outputPath, route);
        const outputIndexPath = join(outputFolderPath, 'index.html');
        if (route === '/') {
            const browserIndexOutputPathOriginal = join(outputPath, 'index-ssr.html');
            yield fs.rename(outputIndexPath, browserIndexOutputPathOriginal);
        }
        yield fs.mkdir(outputFolderPath, { recursive: true });
        yield fs.writeFile(outputIndexPath, html);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9idWlsZGVycy9zcmMvc3RhdGljLWdlbmVyYXRvci93b3JrZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HOzs7Ozs7Ozs7O0FBRUgsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQzNELE9BQU8sRUFBRSxRQUFRLElBQUksRUFBRSxFQUFFLE1BQU0sSUFBSSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFNNUIsSUFBSSxNQUFjLENBQUM7QUFDbkIsSUFBSSxhQUE4QixDQUFDO0FBRW5DLE1BQU0sVUFBVSxLQUFLLENBQUMsT0FBd0I7SUFDNUMsTUFBTSxHQUFHLElBQUksTUFBTSxFQUFFLENBQUM7SUFDdEIsYUFBYSxHQUFHLE9BQU8sQ0FBQztBQUMxQixDQUFDO0FBRUQsTUFBTSxVQUFnQixNQUFNLENBQUMsT0FJNUI7O1FBQ0MsTUFBTSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEdBQUcsT0FBTyxDQUFDO1FBQzVDLE1BQU0sSUFBSSxHQUFHLE1BQU0sTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMvQixVQUFVLEVBQUUsVUFBVTtZQUN0QixpQkFBaUIsRUFBRSxhQUFhLENBQUMsaUJBQWlCO1lBQ2xELEdBQUcsRUFBRSxvQkFBb0IsSUFBSSxJQUFJLEtBQUssRUFBRTtTQUN6QyxDQUFDLENBQUM7UUFFSCxrREFBa0Q7UUFDbEQsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2pELE1BQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM3RCxJQUFJLEtBQUssS0FBSyxHQUFHLEVBQUU7WUFDakIsTUFBTSw4QkFBOEIsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDMUUsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEQsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHsgRW5naW5lIH0gZnJvbSAnQG5ndW5pdmVyc2FsL2NvbW1vbi9jbG92ZXIvc2VydmVyJztcbmltcG9ydCB7IHByb21pc2VzIGFzIGZzIH0gZnJvbSAnZnMnO1xuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFdvcmtlclNldHVwQXJncyB7XG4gIGlubGluZUNyaXRpY2FsQ3NzPzogYm9vbGVhbjtcbn1cblxubGV0IGVuZ2luZTogRW5naW5lO1xubGV0IHNoYXJlZE9wdGlvbnM6IFdvcmtlclNldHVwQXJncztcblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwKG9wdGlvbnM6IFdvcmtlclNldHVwQXJncyk6IHZvaWQge1xuICBlbmdpbmUgPSBuZXcgRW5naW5lKCk7XG4gIHNoYXJlZE9wdGlvbnMgPSBvcHRpb25zO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVuZGVyKG9wdGlvbnM6IHtcbiAgb3V0cHV0UGF0aDogc3RyaW5nO1xuICByb3V0ZTogc3RyaW5nO1xuICBwb3J0OiBudW1iZXI7XG59KTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHsgb3V0cHV0UGF0aCwgcm91dGUsIHBvcnQgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IGh0bWwgPSBhd2FpdCBlbmdpbmUucmVuZGVyKHtcbiAgICBwdWJsaWNQYXRoOiBvdXRwdXRQYXRoLFxuICAgIGlubGluZUNyaXRpY2FsQ3NzOiBzaGFyZWRPcHRpb25zLmlubGluZUNyaXRpY2FsQ3NzLFxuICAgIHVybDogYGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fS8ke3JvdXRlfWAsXG4gIH0pO1xuXG4gIC8vIFRoaXMgY2FzZSBoYXBwZW5zIHdoZW4gd2UgYXJlIHByZXJlbmRlcmluZyBcIi9cIi5cbiAgY29uc3Qgb3V0cHV0Rm9sZGVyUGF0aCA9IGpvaW4ob3V0cHV0UGF0aCwgcm91dGUpO1xuICBjb25zdCBvdXRwdXRJbmRleFBhdGggPSBqb2luKG91dHB1dEZvbGRlclBhdGgsICdpbmRleC5odG1sJyk7XG4gIGlmIChyb3V0ZSA9PT0gJy8nKSB7XG4gICAgY29uc3QgYnJvd3NlckluZGV4T3V0cHV0UGF0aE9yaWdpbmFsID0gam9pbihvdXRwdXRQYXRoLCAnaW5kZXgtc3NyLmh0bWwnKTtcbiAgICBhd2FpdCBmcy5yZW5hbWUob3V0cHV0SW5kZXhQYXRoLCBicm93c2VySW5kZXhPdXRwdXRQYXRoT3JpZ2luYWwpO1xuICB9XG5cbiAgYXdhaXQgZnMubWtkaXIob3V0cHV0Rm9sZGVyUGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XG4gIGF3YWl0IGZzLndyaXRlRmlsZShvdXRwdXRJbmRleFBhdGgsIGh0bWwpO1xufVxuIl19