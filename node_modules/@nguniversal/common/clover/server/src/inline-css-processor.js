/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define("@nguniversal/common/clover/server/src/inline-css-processor", ["require", "exports", "tslib", "critters", "fs"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InlineCriticalCssProcessor = void 0;
    const tslib_1 = require("tslib");
    const critters_1 = tslib_1.__importDefault(require("critters"));
    const fs_1 = require("fs");
    class CrittersExtended extends critters_1.default {
        constructor(optionsExtended, resourceCache) {
            super({
                logger: {
                    warn: (s) => this.warnings.push(s),
                    error: (s) => this.errors.push(s),
                    info: () => { },
                },
                logLevel: 'warn',
                path: optionsExtended.outputPath,
                publicPath: optionsExtended.deployUrl,
                compress: !!optionsExtended.minify,
                pruneSource: false,
                reduceInlineStyles: false,
                mergeStylesheets: false,
                preload: 'media',
                noscriptFallback: true,
                inlineFonts: true,
            });
            this.optionsExtended = optionsExtended;
            this.resourceCache = resourceCache;
            this.warnings = [];
            this.errors = [];
        }
        readFile(path) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                let resourceContent = this.resourceCache.get(path);
                if (resourceContent === undefined) {
                    resourceContent = yield fs_1.promises.readFile(path);
                    this.resourceCache.set(path, resourceContent);
                }
                return resourceContent.toString();
            });
        }
    }
    class InlineCriticalCssProcessor {
        constructor(options, resourceCache) {
            this.options = options;
            this.resourceCache = resourceCache;
        }
        process(html, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const critters = new CrittersExtended(Object.assign(Object.assign({}, this.options), options), this.resourceCache);
                const content = yield critters.process(html);
                return {
                    content,
                    errors: critters.errors.length ? critters.errors : undefined,
                    warnings: critters.warnings.length ? critters.warnings : undefined,
                };
            });
        }
    }
    exports.InlineCriticalCssProcessor = InlineCriticalCssProcessor;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5saW5lLWNzcy1wcm9jZXNzb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2NvbW1vbi9jbG92ZXIvc2VydmVyL3NyYy9pbmxpbmUtY3NzLXByb2Nlc3Nvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7Ozs7Ozs7Ozs7Ozs7O0lBRUgsZ0VBQWdDO0lBQ2hDLDJCQUE4QjtJQWlCOUIsTUFBTSxnQkFBaUIsU0FBUSxrQkFBUTtRQUlyQyxZQUNtQixlQUNnQixFQUNoQixhQUFrQztZQUVuRCxLQUFLLENBQUM7Z0JBQ0osTUFBTSxFQUFFO29CQUNOLElBQUksRUFBRSxDQUFDLENBQVMsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUMxQyxLQUFLLEVBQUUsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDekMsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7aUJBQ2Y7Z0JBQ0QsUUFBUSxFQUFFLE1BQU07Z0JBQ2hCLElBQUksRUFBRSxlQUFlLENBQUMsVUFBVTtnQkFDaEMsVUFBVSxFQUFFLGVBQWUsQ0FBQyxTQUFTO2dCQUNyQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxNQUFNO2dCQUNsQyxXQUFXLEVBQUUsS0FBSztnQkFDbEIsa0JBQWtCLEVBQUUsS0FBSztnQkFDekIsZ0JBQWdCLEVBQUUsS0FBSztnQkFDdkIsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLGdCQUFnQixFQUFFLElBQUk7Z0JBQ3RCLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztZQXBCYyxvQkFBZSxHQUFmLGVBQWUsQ0FDQztZQUNoQixrQkFBYSxHQUFiLGFBQWEsQ0FBcUI7WUFONUMsYUFBUSxHQUFhLEVBQUUsQ0FBQztZQUN4QixXQUFNLEdBQWEsRUFBRSxDQUFDO1FBd0IvQixDQUFDO1FBRXFCLFFBQVEsQ0FBQyxJQUFZOztnQkFDekMsSUFBSSxlQUFlLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ25ELElBQUksZUFBZSxLQUFLLFNBQVMsRUFBRTtvQkFDakMsZUFBZSxHQUFHLE1BQU0sYUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDaEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO2lCQUMvQztnQkFFRCxPQUFPLGVBQWUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUNwQyxDQUFDO1NBQUE7S0FDRjtJQUVELE1BQWEsMEJBQTBCO1FBQ3JDLFlBQ3FCLE9BQTBDLEVBQzVDLGFBQWtDO1lBRGhDLFlBQU8sR0FBUCxPQUFPLENBQW1DO1lBQzVDLGtCQUFhLEdBQWIsYUFBYSxDQUFxQjtRQUNsRCxDQUFDO1FBRUUsT0FBTyxDQUNYLElBQVksRUFDWixPQUF3Qzs7Z0JBRXhDLE1BQU0sUUFBUSxHQUFHLElBQUksZ0JBQWdCLGlDQUFNLElBQUksQ0FBQyxPQUFPLEdBQUssT0FBTyxHQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDM0YsTUFBTSxPQUFPLEdBQUcsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUU3QyxPQUFPO29CQUNMLE9BQU87b0JBQ1AsTUFBTSxFQUFFLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxTQUFTO29CQUM1RCxRQUFRLEVBQUUsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVM7aUJBQ25FLENBQUM7WUFDSixDQUFDO1NBQUE7S0FDRjtJQW5CRCxnRUFtQkMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IENyaXR0ZXJzIGZyb20gJ2NyaXR0ZXJzJztcbmltcG9ydCB7IHByb21pc2VzIH0gZnJvbSAnZnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc09wdGlvbnMge1xuICBvdXRwdXRQYXRoPzogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yT3B0aW9ucyB7XG4gIG1pbmlmeT86IGJvb2xlYW47XG4gIGRlcGxveVVybD86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJbmxpbmVDcml0aWNhbENzc1Jlc3VsdCB7XG4gIGNvbnRlbnQ6IHN0cmluZztcbiAgd2FybmluZ3M/OiBzdHJpbmdbXTtcbiAgZXJyb3JzPzogc3RyaW5nW107XG59XG5cbmNsYXNzIENyaXR0ZXJzRXh0ZW5kZWQgZXh0ZW5kcyBDcml0dGVycyB7XG4gIHJlYWRvbmx5IHdhcm5pbmdzOiBzdHJpbmdbXSA9IFtdO1xuICByZWFkb25seSBlcnJvcnM6IHN0cmluZ1tdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zRXh0ZW5kZWQ6IElubGluZUNyaXRpY2FsQ3NzUHJvY2Vzc29yT3B0aW9ucyAmXG4gICAgICBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NPcHRpb25zLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzb3VyY2VDYWNoZTogTWFwPHN0cmluZywgQnVmZmVyPixcbiAgKSB7XG4gICAgc3VwZXIoe1xuICAgICAgbG9nZ2VyOiB7XG4gICAgICAgIHdhcm46IChzOiBzdHJpbmcpID0+IHRoaXMud2FybmluZ3MucHVzaChzKSxcbiAgICAgICAgZXJyb3I6IChzOiBzdHJpbmcpID0+IHRoaXMuZXJyb3JzLnB1c2gocyksXG4gICAgICAgIGluZm86ICgpID0+IHt9LFxuICAgICAgfSxcbiAgICAgIGxvZ0xldmVsOiAnd2FybicsXG4gICAgICBwYXRoOiBvcHRpb25zRXh0ZW5kZWQub3V0cHV0UGF0aCxcbiAgICAgIHB1YmxpY1BhdGg6IG9wdGlvbnNFeHRlbmRlZC5kZXBsb3lVcmwsXG4gICAgICBjb21wcmVzczogISFvcHRpb25zRXh0ZW5kZWQubWluaWZ5LFxuICAgICAgcHJ1bmVTb3VyY2U6IGZhbHNlLFxuICAgICAgcmVkdWNlSW5saW5lU3R5bGVzOiBmYWxzZSxcbiAgICAgIG1lcmdlU3R5bGVzaGVldHM6IGZhbHNlLFxuICAgICAgcHJlbG9hZDogJ21lZGlhJyxcbiAgICAgIG5vc2NyaXB0RmFsbGJhY2s6IHRydWUsXG4gICAgICBpbmxpbmVGb250czogdHJ1ZSxcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBvdmVycmlkZSBhc3luYyByZWFkRmlsZShwYXRoOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIGxldCByZXNvdXJjZUNvbnRlbnQgPSB0aGlzLnJlc291cmNlQ2FjaGUuZ2V0KHBhdGgpO1xuICAgIGlmIChyZXNvdXJjZUNvbnRlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzb3VyY2VDb250ZW50ID0gYXdhaXQgcHJvbWlzZXMucmVhZEZpbGUocGF0aCk7XG4gICAgICB0aGlzLnJlc291cmNlQ2FjaGUuc2V0KHBhdGgsIHJlc291cmNlQ29udGVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc291cmNlQ29udGVudC50b1N0cmluZygpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByZWFkb25seSBvcHRpb25zOiBJbmxpbmVDcml0aWNhbENzc1Byb2Nlc3Nvck9wdGlvbnMsXG4gICAgcHJpdmF0ZSByZWFkb25seSByZXNvdXJjZUNhY2hlOiBNYXA8c3RyaW5nLCBCdWZmZXI+LFxuICApIHt9XG5cbiAgYXN5bmMgcHJvY2VzcyhcbiAgICBodG1sOiBzdHJpbmcsXG4gICAgb3B0aW9uczogSW5saW5lQ3JpdGljYWxDc3NQcm9jZXNzT3B0aW9ucyxcbiAgKTogUHJvbWlzZTxJbmxpbmVDcml0aWNhbENzc1Jlc3VsdD4ge1xuICAgIGNvbnN0IGNyaXR0ZXJzID0gbmV3IENyaXR0ZXJzRXh0ZW5kZWQoeyAuLi50aGlzLm9wdGlvbnMsIC4uLm9wdGlvbnMgfSwgdGhpcy5yZXNvdXJjZUNhY2hlKTtcbiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgY3JpdHRlcnMucHJvY2VzcyhodG1sKTtcblxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50LFxuICAgICAgZXJyb3JzOiBjcml0dGVycy5lcnJvcnMubGVuZ3RoID8gY3JpdHRlcnMuZXJyb3JzIDogdW5kZWZpbmVkLFxuICAgICAgd2FybmluZ3M6IGNyaXR0ZXJzLndhcm5pbmdzLmxlbmd0aCA/IGNyaXR0ZXJzLndhcm5pbmdzIDogdW5kZWZpbmVkLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==