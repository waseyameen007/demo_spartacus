(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/compiler'), require('@angular/core'), require('@angular/platform-server'), require('fs'), require('path'), require('url'), require('pretty-bytes'), require('parse5'), require('css-select'), require('parse5-htmlparser2-tree-adapter'), require('postcss'), require('chalk')) :
    typeof define === 'function' && define.amd ? define('@nguniversal/common/engine', ['exports', '@angular/compiler', '@angular/core', '@angular/platform-server', 'fs', 'path', 'url', 'pretty-bytes', 'parse5', 'css-select', 'parse5-htmlparser2-tree-adapter', 'postcss', 'chalk'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.nguniversal = global.nguniversal || {}, global.nguniversal.common = global.nguniversal.common || {}, global.nguniversal.common.engine = {}), global.ng.compiler, global.ng.core, global.ng.platformServer, global.fs, global.path, global.url, global.prettyBytes, global.parse5, global.cssSselect, global.parse5, global.postcss, global.chalk));
}(this, (function (exports, compiler, core, platformServer, fs, path, url, prettyBytes, parse5, cssSelect, treeAdapter, postcss, chalk) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
    var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
    var prettyBytes__default = /*#__PURE__*/_interopDefaultLegacy(prettyBytes);
    var parse5__default = /*#__PURE__*/_interopDefaultLegacy(parse5);
    var treeAdapter__default = /*#__PURE__*/_interopDefaultLegacy(treeAdapter);
    var chalk__default = /*#__PURE__*/_interopDefaultLegacy(chalk);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /** ResourceLoader implementation for loading files */
    var FileLoader = /** @class */ (function () {
        function FileLoader() {
        }
        FileLoader.prototype.get = function (url) {
            return fs__namespace.promises.readFile(url, 'utf-8');
        };
        return FileLoader;
    }());

    /**
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License"); you may not
     * use this file except in compliance with the License. You may obtain a copy of
     * the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
     * License for the specific language governing permissions and limitations under
     * the License.
     */
    var PARSE5_OPTS = {
        treeAdapter: treeAdapter__default['default']
    };
    /**
     * Parse HTML into a mutable, serializable DOM Document.
     * The DOM implementation is an htmlparser2 DOM enhanced with basic DOM mutation methods.
     * @param {String} html   HTML to parse into a Document instance
     */
    function createDocument(html) {
        var document = 
        /** @type {HTMLDocument} */
        parse5__default['default'].parse(html, PARSE5_OPTS);
        defineProperties(document, DocumentExtensions); // Extend Element.prototype with DOM manipulation methods.
        var scratch = document.createElement('div'); // Get a reference to the base Node class - used by createTextNode()
        document.$$Node = scratch.constructor;
        var elementProto = Object.getPrototypeOf(scratch);
        defineProperties(elementProto, ElementExtensions);
        elementProto.ownerDocument = document;
        return document;
    }
    /**
     * Serialize a Document to an HTML String
     * @param {HTMLDocument} document   A Document, such as one created via `createDocument()`
     */
    function serializeDocument(document) {
        return parse5__default['default'].serialize(document, PARSE5_OPTS);
    }
    /** @typedef {treeAdapter.Document & typeof ElementExtensions} HTMLDocument */
    /**
     * Methods and descriptors to mix into Element.prototype
     * @private
     */
    var ElementExtensions = {
        /** @extends treeAdapter.Element.prototype */
        nodeName: {
            get: function () {
                return this.tagName.toUpperCase();
            }
        },
        id: reflectedProperty('id'),
        className: reflectedProperty('class'),
        insertBefore: function (child, referenceNode) {
            if (!referenceNode)
                return this.appendChild(child);
            treeAdapter__default['default'].insertBefore(this, child, referenceNode);
            return child;
        },
        appendChild: function (child) {
            treeAdapter__default['default'].appendChild(this, child);
            return child;
        },
        removeChild: function (child) {
            treeAdapter__default['default'].detachNode(child);
        },
        remove: function () {
            treeAdapter__default['default'].detachNode(this);
        },
        textContent: {
            get: function () {
                return getText(this);
            },
            set: function (text) {
                this.children = [];
                treeAdapter__default['default'].insertText(this, text);
            }
        },
        setAttribute: function (name, value) {
            if (this.attribs == null)
                this.attribs = {};
            if (value == null)
                value = '';
            this.attribs[name] = value;
        },
        removeAttribute: function (name) {
            if (this.attribs != null) {
                delete this.attribs[name];
            }
        },
        getAttribute: function (name) {
            return this.attribs != null && this.attribs[name];
        },
        hasAttribute: function (name) {
            return this.attribs != null && this.attribs[name] != null;
        },
        getAttributeNode: function (name) {
            var value = this.getAttribute(name);
            if (value != null)
                return {
                    specified: true,
                    value: value
                };
        }
    };
    /**
     * Methods and descriptors to mix into the global document instance
     * @private
     */
    var DocumentExtensions = {
        /** @extends treeAdapter.Document.prototype */
        // document is just an Element in htmlparser2, giving it a nodeType of ELEMENT_NODE.
        // TODO: verify if these are needed for css-select
        nodeType: {
            get: function () {
                return 9;
            }
        },
        contentType: {
            get: function () {
                return 'text/html';
            }
        },
        nodeName: {
            get: function () {
                return '#document';
            }
        },
        documentElement: {
            get: function () {
                // Find the first <html> element within the document
                return this.childNodes.filter(function (child) { return String(child.tagName).toLowerCase() === 'html'; });
            }
        },
        compatMode: {
            get: function () {
                var compatMode = {
                    'no-quirks': 'CSS1Compat',
                    quirks: 'BackCompat',
                    'limited-quirks': 'CSS1Compat'
                };
                return compatMode[treeAdapter__default['default'].getDocumentMode(this)];
            }
        },
        body: {
            get: function () {
                return this.querySelector('body');
            }
        },
        createElement: function (name) {
            return treeAdapter__default['default'].createElement(name, null, []);
        },
        createTextNode: function (text) {
            // there is no dedicated createTextNode equivalent exposed in htmlparser2's DOM
            var Node = this.$$Node;
            return new Node({
                type: 'text',
                data: text,
                parent: null,
                prev: null,
                next: null
            });
        },
        querySelector: function (sel) {
            return cssSelect.selectOne(sel, this.documentElement);
        },
        querySelectorAll: function (sel) {
            if (sel === ':root') {
                return this;
            }
            return cssSelect.selectAll(sel, this.documentElement);
        }
    };
    /**
     * Essentially `Object.defineProperties()`, except function values are assigned as value descriptors for convenience.
     * @private
     */
    function defineProperties(obj, properties) {
        for (var i in properties) {
            var value = properties[i];
            Object.defineProperty(obj, i, typeof value === 'function' ? {
                value: value
            } : value);
        }
    }
    /**
     * Create a property descriptor defining a getter/setter pair alias for a named attribute.
     * @private
     */
    function reflectedProperty(attributeName) {
        return {
            get: function () {
                return this.getAttribute(attributeName);
            },
            set: function (value) {
                this.setAttribute(attributeName, value);
            }
        };
    }
    /**
     * Helper to get the text content of a node
     * https://github.com/fb55/domutils/blob/master/src/stringify.ts#L21
     * @private
     */
    function getText(node) {
        if (Array.isArray(node))
            return node.map(getText).join('');
        if (treeAdapter__default['default'].isElementNode(node))
            return node.name === 'br' ? '\n' : getText(node.children);
        if (treeAdapter__default['default'].isTextNode(node))
            return node.data;
        return '';
    }
    /**
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License"); you may not
     * use this file except in compliance with the License. You may obtain a copy of
     * the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
     * License for the specific language governing permissions and limitations under
     * the License.
     */
    /**
     * Parse a textual CSS Stylesheet into a Stylesheet instance.
     * Stylesheet is a mutable postcss AST with format similar to CSSOM.
     * @see https://github.com/postcss/postcss/
     * @private
     * @param {String} stylesheet
     * @returns {css.Stylesheet} ast
     */
    function parseStylesheet(stylesheet) {
        return postcss.parse(stylesheet);
    }
    /**
     * Serialize a postcss Stylesheet to a String of CSS.
     * @private
     * @param {css.Stylesheet} ast          A Stylesheet to serialize, such as one returned from `parseStylesheet()`
     * @param {Object} options              Options used by the stringify logic
     * @param {Boolean} [options.compress]  Compress CSS output (removes comments, whitespace, etc)
     */
    function serializeStylesheet(ast, options) {
        var cssStr = '';
        postcss.stringify(ast, function (result, node, type) {
            var _node$raws;
            if (!options.compress) {
                cssStr += result;
                return;
            } // Simple minification logic
            if ((node == null ? void 0 : node.type) === 'comment')
                return;
            if ((node == null ? void 0 : node.type) === 'decl') {
                var prefix = node.prop + node.raws.between;
                cssStr += result.replace(prefix, prefix.trim());
                return;
            }
            if (type === 'start') {
                if (node.type === 'rule' && node.selectors) {
                    cssStr += node.selectors.join(',') + '{';
                }
                else {
                    cssStr += result.replace(/\s\{$/, '{');
                }
                return;
            }
            if (type === 'end' && result === '}' && node != null && (_node$raws = node.raws) != null && _node$raws.semicolon) {
                cssStr = cssStr.slice(0, -1);
            }
            cssStr += result.trim();
        });
        return cssStr;
    }
    /**
     * Converts a walkStyleRules() iterator to mark nodes with `.$$remove=true` instead of actually removing them.
     * This means they can be removed in a second pass, allowing the first pass to be nondestructive (eg: to preserve mirrored sheets).
     * @private
     * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.
     * @returns {(rule) => void} nonDestructiveIterator
     */
    function markOnly(predicate) {
        return function (rule) {
            var sel = rule.selectors;
            if (predicate(rule) === false) {
                rule.$$remove = true;
            }
            rule.$$markedSelectors = rule.selectors;
            if (rule._other) {
                rule._other.$$markedSelectors = rule._other.selectors;
            }
            rule.selectors = sel;
        };
    }
    /**
     * Apply filtered selectors to a rule from a previous markOnly run.
     * @private
     * @param {css.Rule} rule The Rule to apply marked selectors to (if they exist).
     */
    function applyMarkedSelectors(rule) {
        if (rule.$$markedSelectors) {
            rule.selectors = rule.$$markedSelectors;
        }
        if (rule._other) {
            applyMarkedSelectors(rule._other);
        }
    }
    /**
     * Recursively walk all rules in a stylesheet.
     * @private
     * @param {css.Rule} node       A Stylesheet or Rule to descend into.
     * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node.
     */
    function walkStyleRules(node, iterator) {
        node.nodes = node.nodes.filter(function (rule) {
            if (hasNestedRules(rule)) {
                walkStyleRules(rule, iterator);
            }
            rule._other = undefined;
            rule.filterSelectors = filterSelectors;
            return iterator(rule) !== false;
        });
    }
    /**
     * Recursively walk all rules in two identical stylesheets, filtering nodes into one or the other based on a predicate.
     * @private
     * @param {css.Rule} node       A Stylesheet or Rule to descend into.
     * @param {css.Rule} node2      A second tree identical to `node`
     * @param {Function} iterator   Invoked on each node in the tree. Return `false` to remove that node from the first tree, true to remove it from the second.
     */
    function walkStyleRulesWithReverseMirror(node, node2, iterator) {
        var _a;
        if (node2 === null)
            return walkStyleRules(node, iterator);
        _a = __read(splitFilter(node.nodes, node2.nodes, function (rule, index, rules, rules2) {
            var rule2 = rules2[index];
            if (hasNestedRules(rule)) {
                walkStyleRulesWithReverseMirror(rule, rule2, iterator);
            }
            rule._other = rule2;
            rule.filterSelectors = filterSelectors;
            return iterator(rule) !== false;
        }), 2), node.nodes = _a[0], node2.nodes = _a[1];
    } // Checks if a node has nested rules, like @media
    // @keyframes are an exception since they are evaluated as a whole
    function hasNestedRules(rule) {
        return rule.nodes && rule.nodes.length && rule.nodes.some(function (n) { return n.type === 'rule' || n.type === 'atrule'; }) && rule.name !== 'keyframes';
    } // Like [].filter(), but applies the opposite filtering result to a second copy of the Array without a second pass.
    // This is just a quicker version of generating the compliment of the set returned from a filter operation.
    function splitFilter(a, b, predicate) {
        var aOut = [];
        var bOut = [];
        for (var index = 0; index < a.length; index++) {
            if (predicate(a[index], index, a, b)) {
                aOut.push(a[index]);
            }
            else {
                bOut.push(a[index]);
            }
        }
        return [aOut, bOut];
    } // can be invoked on a style rule to subset its selectors (with reverse mirroring)
    function filterSelectors(predicate) {
        if (this._other) {
            var _a = __read(splitFilter(this.selectors, this._other.selectors, predicate), 2), a = _a[0], b = _a[1];
            this.selectors = a;
            this._other.selectors = b;
        }
        else {
            this.selectors = this.selectors.filter(predicate);
        }
    }
    var LOG_LEVELS = ['trace', 'debug', 'info', 'warn', 'error', 'silent'];
    var defaultLogger = {
        trace: function (msg) {
            console.trace(msg);
        },
        debug: function (msg) {
            console.debug(msg);
        },
        warn: function (msg) {
            console.warn(chalk__default['default'].yellow(msg));
        },
        error: function (msg) {
            console.error(chalk__default['default'].bold.red(msg));
        },
        info: function (msg) {
            console.info(chalk__default['default'].bold.blue(msg));
        },
        silent: function () { }
    };
    function createLogger(logLevel) {
        var logLevelIdx = LOG_LEVELS.indexOf(logLevel);
        return LOG_LEVELS.reduce(function (logger, type, index) {
            if (index >= logLevelIdx) {
                logger[type] = defaultLogger[type];
            }
            else {
                logger[type] = defaultLogger.silent;
            }
            return logger;
        }, {});
    }
    /**
     * Copyright 2018 Google LLC
     *
     * Licensed under the Apache License, Version 2.0 (the "License"); you may not
     * use this file except in compliance with the License. You may obtain a copy of
     * the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
     * License for the specific language governing permissions and limitations under
     * the License.
     */
    /**
     * The mechanism to use for lazy-loading stylesheets.
     *
     * Note: <kbd>JS</kbd> indicates a strategy requiring JavaScript (falls back to `<noscript>` unless disabled).
     *
     * - **default:** Move stylesheet links to the end of the document and insert preload meta tags in their place.
     * - **"body":** Move all external stylesheet links to the end of the document.
     * - **"media":** Load stylesheets asynchronously by adding `media="not x"` and removing once loaded. <kbd>JS</kbd>
     * - **"swap":** Convert stylesheet links to preloads that swap to `rel="stylesheet"` once loaded ([details](https://www.filamentgroup.com/lab/load-css-simpler/#the-code)). <kbd>JS</kbd>
     * - **"swap-high":** Use `<link rel="alternate stylesheet preload">` and swap to `rel="stylesheet"` once loaded ([details](http://filamentgroup.github.io/loadCSS/test/new-high.html)). <kbd>JS</kbd>
     * - **"js":** Inject an asynchronous CSS loader similar to [LoadCSS](https://github.com/filamentgroup/loadCSS) and use it to load stylesheets. <kbd>JS</kbd>
     * - **"js-lazy":** Like `"js"`, but the stylesheet is disabled until fully loaded.
     * @typedef {(default|'body'|'media'|'swap'|'swap-high'|'js'|'js-lazy')} PreloadStrategy
     * @public
     */
    /**
     * Controls which keyframes rules are inlined.
     *
     * - **"critical":** _(default)_ inline keyframes rules that are used by the critical CSS.
     * - **"all":** Inline all keyframes rules.
     * - **"none":** Remove all keyframes rules.
     * @typedef {('critical'|'all'|'none')} KeyframeStrategy
     * @private
     * @property {String} keyframes     Which {@link KeyframeStrategy keyframe strategy} to use (default: `critical`)_
     */
    /**
     * Controls log level of the plugin. Specifies the level the logger should use. A logger will
     * not produce output for any log level beneath the specified level. Available levels and order
     * are:
     *
     * - **"info"** _(default)_
     * - **"warn"**
     * - **"error"**
     * - **"trace"**
     * - **"debug"**
     * - **"silent"**
     * @typedef {('info'|'warn'|'error'|'trace'|'debug'|'silent')} LogLevel
     * @public
     */
    /**
     * Custom logger interface:
     * @typedef {object} Logger
     * @public
     * @property {function(String)} trace - Prints a trace message
     * @property {function(String)} debug - Prints a debug message
     * @property {function(String)} info - Prints an information message
     * @property {function(String)} warn - Prints a warning message
     * @property {function(String)} error - Prints an error message
     */
    /**
     * All optional. Pass them to `new Critters({ ... })`.
     * @public
     * @typedef Options
     * @property {String} path     Base path location of the CSS files _(default: `''`)_
     * @property {String} publicPath     Public path of the CSS resources. This prefix is removed from the href _(default: `''`)_
     * @property {Boolean} external     Inline styles from external stylesheets _(default: `true`)_
     * @property {Number} inlineThreshold Inline external stylesheets smaller than a given size _(default: `0`)_
     * @property {Number} minimumExternalSize If the non-critical external stylesheet would be below this size, just inline it _(default: `0`)_
     * @property {Boolean} pruneSource  Remove inlined rules from the external stylesheet _(default: `false`)_
     * @property {Boolean} mergeStylesheets Merged inlined stylesheets into a single <style> tag _(default: `true`)_
     * @property {String[]} additionalStylesheets Glob for matching other stylesheets to be used while looking for critical CSS _(default: ``)_.
     * @property {String} preload       Which {@link PreloadStrategy preload strategy} to use
     * @property {Boolean} noscriptFallback Add `<noscript>` fallback to JS-based strategies
     * @property {Boolean} inlineFonts  Inline critical font-face rules _(default: `false`)_
     * @property {Boolean} preloadFonts Preloads critical fonts _(default: `true`)_
     * @property {Boolean} fonts        Shorthand for setting `inlineFonts`+`preloadFonts`
     *  - Values:
     *  - `true` to inline critical font-face rules and preload the fonts
     *  - `false` to don't inline any font-face rules and don't preload fonts
     * @property {String} keyframes     Controls which keyframes rules are inlined.
     *  - Values:
     *  - `"critical"`: _(default)_ inline keyframes rules used by the critical CSS
     *  - `"all"` inline all keyframes rules
     *  - `"none"` remove all keyframes rules
     * @property {Boolean} compress     Compress resulting critical CSS _(default: `true`)_
     * @property {String} logLevel      Controls {@link LogLevel log level} of the plugin _(default: `"info"`)_
     * @property {object} logger        Provide a custom logger interface {@link Logger logger}
     */
    var Critters = /** @class */ (function () {
        /** @private */
        function Critters(options) {
            this.options = Object.assign({
                logLevel: 'info',
                path: '',
                publicPath: '',
                reduceInlineStyles: true,
                pruneSource: false,
                additionalStylesheets: []
            }, options || {});
            this.urlFilter = this.options.filter;
            if (this.urlFilter instanceof RegExp) {
                this.urlFilter = this.urlFilter.test.bind(this.urlFilter);
            }
            this.logger = this.options.logger || createLogger(this.options.logLevel);
        }
        /**
         * Read the contents of a file from the specified filesystem or disk
         */
        Critters.prototype.readFile = function (filename) {
            var fs = this.fs;
            return new Promise(function (resolve, reject) {
                var callback = function (err, data) {
                    if (err)
                        reject(err);
                    else
                        resolve(data);
                };
                if (fs && fs.readFile) {
                    fs.readFile(filename, callback);
                }
                else {
                    require('fs').readFile(filename, 'utf8', callback);
                }
            });
        };
        /**
         * Apply critical CSS processing to the html
         */
        Critters.prototype.process = function (html) {
            return __awaiter(this, void 0, void 0, function () {
                var start, document, externalSheets, styles, output, end;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            start = process.hrtime.bigint();
                            document = createDocument(html);
                            if (this.options.additionalStylesheets.length > 0) {
                                this.embedAdditionalStylesheet(document);
                            } // `external:false` skips processing of external sheets
                            if (!(this.options.external !== false)) return [3 /*break*/, 2];
                            externalSheets = [].slice.call(document.querySelectorAll('link[rel="stylesheet"]'));
                            return [4 /*yield*/, Promise.all(externalSheets.map(function (link) { return _this.embedLinkedStylesheet(link, document); }))];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            styles = this.getAffectedStyleTags(document);
                            return [4 /*yield*/, Promise.all(styles.map(function (style) { return _this.processStyle(style, document); }))];
                        case 3:
                            _a.sent();
                            if (!(this.options.mergeStylesheets !== false && styles.length !== 0)) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.mergeStylesheets(document)];
                        case 4:
                            _a.sent();
                            _a.label = 5;
                        case 5:
                            output = serializeDocument(document);
                            end = process.hrtime.bigint();
                            this.logger.info('Time ' + parseFloat(end - start) / 1000000.0);
                            return [2 /*return*/, output];
                    }
                });
            });
        };
        /**
         * Get the style tags that need processing
         */
        Critters.prototype.getAffectedStyleTags = function (document) {
            var styles = [].slice.call(document.querySelectorAll('style')); // `inline:false` skips processing of inline stylesheets
            if (this.options.reduceInlineStyles === false) {
                return styles.filter(function (style) { return style.$$external; });
            }
            return styles;
        };
        Critters.prototype.mergeStylesheets = function (document) {
            return __awaiter(this, void 0, void 0, function () {
                var styles, first, sheet, i, node;
                return __generator(this, function (_a) {
                    styles = this.getAffectedStyleTags(document);
                    if (styles.length === 0) {
                        this.logger.warn('Merging inline stylesheets into a single <style> tag skipped, no inline stylesheets to merge');
                        return [2 /*return*/];
                    }
                    first = styles[0];
                    sheet = first.textContent;
                    for (i = 1; i < styles.length; i++) {
                        node = styles[i];
                        sheet += node.textContent;
                        node.remove();
                    }
                    first.textContent = sheet;
                    return [2 /*return*/];
                });
            });
        };
        /**
         * Given href, find the corresponding CSS asset
         */
        Critters.prototype.getCssAsset = function (href) {
            return __awaiter(this, void 0, void 0, function () {
                var outputPath, publicPath, normalizedPath, pathPrefix, filename, sheet, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            outputPath = this.options.path;
                            publicPath = this.options.publicPath;
                            normalizedPath = href.replace(/^\//, '');
                            pathPrefix = (publicPath || '').replace(/(^\/|\/$)/g, '') + '/';
                            if (normalizedPath.indexOf(pathPrefix) === 0) {
                                normalizedPath = normalizedPath.substring(pathPrefix.length).replace(/^\//, '');
                            } // Ignore remote stylesheets
                            if (/^https:\/\//.test(normalizedPath) || href.startsWith('//')) {
                                return [2 /*return*/, undefined];
                            }
                            filename = path__default['default'].resolve(outputPath, normalizedPath);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.readFile(filename)];
                        case 2:
                            sheet = _a.sent();
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            this.logger.warn("Unable to locate stylesheet: " + filename);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/, sheet];
                    }
                });
            });
        };
        Critters.prototype.checkInlineThreshold = function (link, style, sheet) {
            if (this.options.inlineThreshold && sheet.length < this.options.inlineThreshold) {
                var href = style.$$name;
                style.$$reduce = false;
                this.logger.info("\u001B[32mInlined all of " + href + " (" + sheet.length + " was below the threshold of " + this.options.inlineThreshold + ")\u001B[39m");
                link.remove();
                return true;
            }
            return false;
        };
        /**
         * Inline the stylesheets from options.additionalStylesheets (assuming it passes `options.filter`)
         */
        Critters.prototype.embedAdditionalStylesheet = function (document) {
            return __awaiter(this, void 0, void 0, function () {
                var styleSheetsIncluded, sources;
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            styleSheetsIncluded = [];
                            return [4 /*yield*/, Promise.all(this.options.additionalStylesheets.map(function (cssFile) {
                                    if (styleSheetsIncluded.includes(cssFile)) {
                                        return;
                                    }
                                    styleSheetsIncluded.push(cssFile);
                                    var style = document.createElement('style');
                                    style.$$external = true;
                                    return _this.getCssAsset(cssFile, style).then(function (sheet) { return [sheet, style]; });
                                }))];
                        case 1:
                            sources = _a.sent();
                            sources.forEach(function (_a) {
                                var _b = __read(_a, 2), sheet = _b[0], style = _b[1];
                                if (!sheet)
                                    return;
                                style.textContent = sheet;
                                document.head.appendChild(style);
                            });
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Inline the target stylesheet referred to by a <link rel="stylesheet"> (assuming it passes `options.filter`)
         */
        Critters.prototype.embedLinkedStylesheet = function (link, document) {
            return __awaiter(this, void 0, void 0, function () {
                var href, media, preloadMode, style, sheet, cssLoaderPreamble, lazy, noscriptFallback, script, js, bodyLink, noscript, noscriptLink;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            href = link.getAttribute('href');
                            media = link.getAttribute('media');
                            preloadMode = this.options.preload;
                            if (this.urlFilter ? this.urlFilter(href) : !(href || '').match(/\.css$/)) {
                                return [2 /*return*/, Promise.resolve()];
                            } // the reduced critical CSS gets injected into a new <style> tag
                            style = document.createElement('style');
                            style.$$external = true;
                            return [4 /*yield*/, this.getCssAsset(href, style)];
                        case 1:
                            sheet = _a.sent();
                            if (!sheet) {
                                return [2 /*return*/];
                            }
                            style.textContent = sheet;
                            style.$$name = href;
                            style.$$links = [link];
                            link.parentNode.insertBefore(style, link);
                            if (this.checkInlineThreshold(link, style, sheet)) {
                                return [2 /*return*/];
                            } // CSS loader is only injected for the first sheet, then this becomes an empty string
                            cssLoaderPreamble = "function $loadcss(u,m,l){(l=document.createElement('link')).rel='stylesheet';l.href=u;document.head.appendChild(l)}";
                            lazy = preloadMode === 'js-lazy';
                            if (lazy) {
                                cssLoaderPreamble = cssLoaderPreamble.replace('l.href', "l.media='print';l.onload=function(){l.media=m};l.href");
                            } // Allow disabling any mutation of the stylesheet link:
                            if (preloadMode === false)
                                return [2 /*return*/];
                            noscriptFallback = false;
                            if (preloadMode === 'body') {
                                document.body.appendChild(link);
                            }
                            else {
                                link.setAttribute('rel', 'preload');
                                link.setAttribute('as', 'style');
                                if (preloadMode === 'js' || preloadMode === 'js-lazy') {
                                    script = document.createElement('script');
                                    js = cssLoaderPreamble + "$loadcss(" + JSON.stringify(href) + (lazy ? ',' + JSON.stringify(media || 'all') : '') + ")";
                                    script.textContent = js;
                                    link.parentNode.insertBefore(script, link.nextSibling);
                                    style.$$links.push(script);
                                    cssLoaderPreamble = '';
                                    noscriptFallback = true;
                                }
                                else if (preloadMode === 'media') {
                                    // @see https://github.com/filamentgroup/loadCSS/blob/af1106cfe0bf70147e22185afa7ead96c01dec48/src/loadCSS.js#L26
                                    link.setAttribute('rel', 'stylesheet');
                                    link.removeAttribute('as');
                                    link.setAttribute('media', 'print');
                                    link.setAttribute('onload', "this.media='" + (media || 'all') + "'");
                                    noscriptFallback = true;
                                }
                                else if (preloadMode === 'swap-high') {
                                    // @see http://filamentgroup.github.io/loadCSS/test/new-high.html
                                    link.setAttribute('rel', 'alternate stylesheet preload');
                                    link.setAttribute('title', 'styles');
                                    link.setAttribute('onload', "this.title='';this.rel='stylesheet'");
                                    noscriptFallback = true;
                                }
                                else if (preloadMode === 'swap') {
                                    link.setAttribute('onload', "this.rel='stylesheet'");
                                    noscriptFallback = true;
                                }
                                else {
                                    bodyLink = document.createElement('link');
                                    bodyLink.setAttribute('rel', 'stylesheet');
                                    if (media)
                                        bodyLink.setAttribute('media', media);
                                    bodyLink.setAttribute('href', href);
                                    document.body.appendChild(bodyLink);
                                    style.$$links.push(bodyLink);
                                }
                            }
                            if (this.options.noscriptFallback !== false && noscriptFallback) {
                                noscript = document.createElement('noscript');
                                noscriptLink = document.createElement('link');
                                noscriptLink.setAttribute('rel', 'stylesheet');
                                noscriptLink.setAttribute('href', href);
                                if (media)
                                    noscriptLink.setAttribute('media', media);
                                noscript.appendChild(noscriptLink);
                                link.parentNode.insertBefore(noscript, link.nextSibling);
                                style.$$links.push(noscript);
                            }
                            return [2 /*return*/];
                    }
                });
            });
        };
        /**
         * Prune the source CSS files
         */
        Critters.prototype.pruneSource = function (style, before, sheetInverse) {
            var e_2, _a;
            // if external stylesheet would be below minimum size, just inline everything
            var minSize = this.options.minimumExternalSize;
            var name = style.$$name;
            if (minSize && sheetInverse.length < minSize) {
                this.logger.info("\u001B[32mInlined all of " + name + " (non-critical external stylesheet would have been " + sheetInverse.length + "b, which was below the threshold of " + minSize + ")\u001B[39m");
                style.textContent = before; // remove any associated external resources/loaders:
                if (style.$$links) {
                    try {
                        for (var _b = __values(style.$$links), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var link = _c.value;
                            var parent = link.parentNode;
                            if (parent)
                                parent.removeChild(link);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                return true;
            }
            return false;
        };
        /**
         * Parse the stylesheet within a <style> element, then reduce it to contain only rules used by the document.
         */
        Critters.prototype.processStyle = function (style, document) {
            return __awaiter(this, void 0, void 0, function () {
                var name, options, head, keyframesMode, sheet, before, ast, astInverse, criticalFonts, failedSelectors, criticalKeyframeNames, shouldPreloadFonts, shouldInlineFonts, preloadedFonts, afterText, styleInlinedCompletely, sheetInverse, percent_1, percent;
                return __generator(this, function (_a) {
                    if (style.$$reduce === false)
                        return [2 /*return*/];
                    name = style.$$name ? style.$$name.replace(/^\//, '') : 'inline CSS';
                    options = this.options;
                    head = document.querySelector('head');
                    keyframesMode = options.keyframes || 'critical';
                    if (keyframesMode === true)
                        keyframesMode = 'all';
                    if (keyframesMode === false)
                        keyframesMode = 'none';
                    sheet = style.textContent;
                    before = sheet;
                    if (!sheet)
                        return [2 /*return*/];
                    ast = parseStylesheet(sheet);
                    astInverse = options.pruneSource ? parseStylesheet(sheet) : null;
                    criticalFonts = '';
                    failedSelectors = [];
                    criticalKeyframeNames = [];
                    // This first pass is also used to collect font and keyframe usage used in the second pass.
                    walkStyleRules(ast, markOnly(function (rule) {
                        if (rule.type === 'rule') {
                            // Filter the selector list down to only those match
                            rule.filterSelectors(function (sel) {
                                // Strip pseudo-elements and pseudo-classes, since we only care that their associated elements exist.
                                // This means any selector for a pseudo-element or having a pseudo-class will be inlined if the rest of the selector matches.
                                if (sel === ':root' || sel.match(/^::?(before|after)$/)) {
                                    return true;
                                }
                                sel = sel.replace(/(?<!\\)::?[a-z-]+(?![a-z-(])/gi, '').replace(/::?not\(\s*\)/g, '').trim();
                                if (!sel)
                                    return false;
                                try {
                                    return document.querySelector(sel) != null;
                                }
                                catch (e) {
                                    failedSelectors.push(sel + ' -> ' + e.message);
                                    return false;
                                }
                            }); // If there are no matched selectors, remove the rule:
                            if (!rule.selector) {
                                return false;
                            }
                            if (rule.nodes) {
                                for (var i = 0; i < rule.nodes.length; i++) {
                                    var decl = rule.nodes[i]; // detect used fonts
                                    if (decl.prop && decl.prop.match(/\bfont(-family)?\b/i)) {
                                        criticalFonts += ' ' + decl.value;
                                    } // detect used keyframes
                                    if (decl.prop === 'animation' || decl.prop === 'animation-name') {
                                        // @todo: parse animation declarations and extract only the name. for now we'll do a lazy match.
                                        var names = decl.value.split(/\s+/);
                                        for (var j = 0; j < names.length; j++) {
                                            var name_1 = names[j].trim();
                                            if (name_1)
                                                criticalKeyframeNames.push(name_1);
                                        }
                                    }
                                }
                            }
                        } // keep font rules, they're handled in the second pass:
                        if (rule.type === 'atrule' && rule.name === 'font-face')
                            return; // If there are no remaining rules, remove the whole rule:
                        var rules = rule.nodes && rule.nodes.filter(function (rule) { return !rule.$$remove; });
                        return !rules || rules.length !== 0;
                    }));
                    if (failedSelectors.length !== 0) {
                        this.logger.warn(failedSelectors.length + " rules skipped due to selector errors:\n  " + failedSelectors.join('\n  '));
                    }
                    shouldPreloadFonts = options.fonts === true || options.preloadFonts === true;
                    shouldInlineFonts = options.fonts !== false && options.inlineFonts === true;
                    preloadedFonts = [];
                    walkStyleRulesWithReverseMirror(ast, astInverse, function (rule) {
                        // remove any rules marked in the first pass
                        if (rule.$$remove === true)
                            return false;
                        applyMarkedSelectors(rule); // prune @keyframes rules
                        if (rule.type === 'atrule' && rule.name === 'keyframes') {
                            if (keyframesMode === 'none')
                                return false;
                            if (keyframesMode === 'all')
                                return true;
                            return criticalKeyframeNames.indexOf(rule.params) !== -1;
                        } // prune @font-face rules
                        if (rule.type === 'atrule' && rule.name === 'font-face') {
                            var family = void 0, src = void 0;
                            for (var i = 0; i < rule.nodes.length; i++) {
                                var decl = rule.nodes[i];
                                if (decl.prop === 'src') {
                                    // @todo parse this properly and generate multiple preloads with type="font/woff2" etc
                                    src = (decl.value.match(/url\s*\(\s*(['"]?)(.+?)\1\s*\)/) || [])[2];
                                }
                                else if (decl.prop === 'font-family') {
                                    family = decl.value;
                                }
                            }
                            if (src && shouldPreloadFonts && preloadedFonts.indexOf(src) === -1) {
                                preloadedFonts.push(src);
                                var preload = document.createElement('link');
                                preload.setAttribute('rel', 'preload');
                                preload.setAttribute('as', 'font');
                                preload.setAttribute('crossorigin', 'anonymous');
                                preload.setAttribute('href', src.trim());
                                head.appendChild(preload);
                            } // if we're missing info, if the font is unused, or if critical font inlining is disabled, remove the rule:
                            if (!family || !src || criticalFonts.indexOf(family) === -1 || !shouldInlineFonts) {
                                return false;
                            }
                        }
                    });
                    sheet = serializeStylesheet(ast, {
                        compress: this.options.compress !== false
                    }); // If all rules were removed, get rid of the style element entirely
                    if (sheet.trim().length === 0) {
                        if (style.parentNode) {
                            style.remove();
                        }
                        return [2 /*return*/];
                    }
                    afterText = '';
                    styleInlinedCompletely = false;
                    if (options.pruneSource) {
                        sheetInverse = serializeStylesheet(astInverse, {
                            compress: this.options.compress !== false
                        });
                        styleInlinedCompletely = this.pruneSource(style, before, sheetInverse);
                        if (styleInlinedCompletely) {
                            percent_1 = sheetInverse.length / before.length * 100;
                            afterText = ", reducing non-inlined size " + (percent_1 | 0) + "% to " + prettyBytes__default['default'](sheetInverse.length);
                        }
                    } // replace the inline stylesheet with its critical'd counterpart
                    if (!styleInlinedCompletely) {
                        style.textContent = sheet;
                    } // output stats
                    percent = sheet.length / before.length * 100 | 0;
                    this.logger.info('\u001b[32mInlined ' + prettyBytes__default['default'](sheet.length) + ' (' + percent + '% of original ' + prettyBytes__default['default'](before.length) + ') of ' + name + afterText + '.\u001b[39m');
                    return [2 /*return*/];
                });
            });
        };
        return Critters;
    }());

    var CrittersExtended = /** @class */ (function (_super) {
        __extends(CrittersExtended, _super);
        function CrittersExtended(optionsExtended, resourceCache) {
            var _this = _super.call(this, {
                logger: {
                    warn: function (s) { return _this.warnings.push(s); },
                    error: function (s) { return _this.errors.push(s); },
                    info: function () { },
                },
                logLevel: 'warn',
                path: optionsExtended.outputPath,
                publicPath: optionsExtended.deployUrl,
                compress: !!optionsExtended.minify,
                pruneSource: false,
                reduceInlineStyles: false,
                mergeStylesheets: false,
                preload: 'media',
                noscriptFallback: true,
                inlineFonts: true,
            }) || this;
            _this.optionsExtended = optionsExtended;
            _this.resourceCache = resourceCache;
            _this.warnings = [];
            _this.errors = [];
            return _this;
        }
        CrittersExtended.prototype.readFile = function (path) {
            return __awaiter(this, void 0, void 0, function () {
                var resourceContent;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            resourceContent = this.resourceCache.get(path);
                            if (!(resourceContent === undefined)) return [3 /*break*/, 2];
                            return [4 /*yield*/, fs__namespace.promises.readFile(path, 'utf-8')];
                        case 1:
                            resourceContent = _a.sent();
                            this.resourceCache.set(path, resourceContent);
                            _a.label = 2;
                        case 2: return [2 /*return*/, resourceContent];
                    }
                });
            });
        };
        return CrittersExtended;
    }(Critters));
    var InlineCriticalCssProcessor = /** @class */ (function () {
        function InlineCriticalCssProcessor(options) {
            this.options = options;
            this.resourceCache = new Map();
        }
        InlineCriticalCssProcessor.prototype.process = function (html, options) {
            return __awaiter(this, void 0, void 0, function () {
                var critters, content;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            critters = new CrittersExtended(Object.assign(Object.assign({}, this.options), options), this.resourceCache);
                            return [4 /*yield*/, critters.process(html)];
                        case 1:
                            content = _a.sent();
                            return [2 /*return*/, {
                                    content: content,
                                    errors: critters.errors.length ? critters.errors : undefined,
                                    warnings: critters.warnings.length ? critters.warnings : undefined,
                                }];
                    }
                });
            });
        };
        return InlineCriticalCssProcessor;
    }());

    /**
     * A common rendering engine utility. This abstracts the logic
     * for handling the platformServer compiler, the module cache, and
     * the document loader
     */
    var CommonEngine = /** @class */ (function () {
        function CommonEngine(moduleOrFactory, providers) {
            if (providers === void 0) { providers = []; }
            this.moduleOrFactory = moduleOrFactory;
            this.providers = providers;
            this.factoryCacheMap = new Map();
            this.templateCache = new Map();
            this.pageExists = new Map();
            this.inlineCriticalCssProcessor = new InlineCriticalCssProcessor({
                minify: true,
            });
        }
        /**
         * Render an HTML document for a specific URL with specified
         * render options
         */
        CommonEngine.prototype.render = function (opts) {
            var _a;
            return __awaiter(this, void 0, void 0, function () {
                var _b, inlineCriticalCss, url$1, pathname, pagePath, pageExists, extraProviders, doc, moduleOrFactory, factory, html, _c, content, errors, warnings;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _b = opts.inlineCriticalCss, inlineCriticalCss = _b === void 0 ? true : _b;
                            if (!(opts.publicPath && opts.documentFilePath && opts.url !== undefined)) return [3 /*break*/, 3];
                            url$1 = new url.URL(opts.url);
                            pathname = url$1.pathname.substring(1);
                            pagePath = path.resolve(opts.publicPath, pathname, 'index.html');
                            if (!(pagePath !== path.resolve(opts.documentFilePath))) return [3 /*break*/, 3];
                            pageExists = this.pageExists.get(pagePath);
                            if (!(pageExists === undefined)) return [3 /*break*/, 2];
                            return [4 /*yield*/, exists(pagePath)];
                        case 1:
                            pageExists = _d.sent();
                            this.pageExists.set(pagePath, pageExists);
                            _d.label = 2;
                        case 2:
                            if (pageExists) {
                                // Serve pre-rendered page.
                                return [2 /*return*/, fs__namespace.promises.readFile(pagePath, 'utf-8')];
                            }
                            _d.label = 3;
                        case 3:
                            extraProviders = __spreadArray(__spreadArray([], __read((opts.providers || []))), __read((this.providers || [])));
                            doc = opts.document;
                            if (!(!doc && opts.documentFilePath)) return [3 /*break*/, 5];
                            return [4 /*yield*/, this.getDocument(opts.documentFilePath)];
                        case 4:
                            doc = _d.sent();
                            _d.label = 5;
                        case 5:
                            if (doc) {
                                extraProviders.push({
                                    provide: platformServer.INITIAL_CONFIG,
                                    useValue: {
                                        document: inlineCriticalCss
                                            ? // Workaround for https://github.com/GoogleChromeLabs/critters/issues/64
                                                doc.replace(/ media=\"print\" onload=\"this\.media='all'"><noscript><link .+?><\/noscript>/g, '>')
                                            : doc,
                                        url: opts.url,
                                    },
                                });
                            }
                            moduleOrFactory = this.moduleOrFactory || opts.bootstrap;
                            return [4 /*yield*/, this.getFactory(moduleOrFactory)];
                        case 6:
                            factory = _d.sent();
                            return [4 /*yield*/, platformServer.renderModuleFactory(factory, { extraProviders: extraProviders })];
                        case 7:
                            html = _d.sent();
                            if (!inlineCriticalCss) {
                                return [2 /*return*/, html];
                            }
                            return [4 /*yield*/, this.inlineCriticalCssProcessor.process(html, {
                                    outputPath: (_a = opts.publicPath) !== null && _a !== void 0 ? _a : (opts.documentFilePath ? path.dirname(opts.documentFilePath) : undefined),
                                })];
                        case 8:
                            _c = _d.sent(), content = _c.content, errors = _c.errors, warnings = _c.warnings;
                            // tslint:disable-next-line: no-console
                            warnings === null || warnings === void 0 ? void 0 : warnings.forEach(function (m) { return console.warn(m); });
                            // tslint:disable-next-line: no-console
                            errors === null || errors === void 0 ? void 0 : errors.forEach(function (m) { return console.error(m); });
                            return [2 /*return*/, content];
                    }
                });
            });
        };
        /** Return the factory for a given engine instance */
        CommonEngine.prototype.getFactory = function (moduleOrFactory) {
            return __awaiter(this, void 0, void 0, function () {
                var moduleFactory, factory;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (!(moduleOrFactory instanceof core.NgModuleFactory)) return [3 /*break*/, 1];
                            return [2 /*return*/, moduleOrFactory];
                        case 1:
                            moduleFactory = this.factoryCacheMap.get(moduleOrFactory);
                            // If module factory is cached
                            if (moduleFactory) {
                                return [2 /*return*/, moduleFactory];
                            }
                            return [4 /*yield*/, this.getCompiler().compileModuleAsync(moduleOrFactory)];
                        case 2:
                            factory = _b.sent();
                            this.factoryCacheMap.set(moduleOrFactory, factory);
                            return [2 /*return*/, factory];
                    }
                });
            });
        };
        /** Retrieve the document from the cache or the filesystem */
        CommonEngine.prototype.getDocument = function (filePath) {
            return __awaiter(this, void 0, void 0, function () {
                var doc;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            doc = this.templateCache.get(filePath);
                            if (!!doc) return [3 /*break*/, 2];
                            return [4 /*yield*/, fs__namespace.promises.readFile(filePath, 'utf-8')];
                        case 1:
                            doc = _b.sent();
                            this.templateCache.set(filePath, doc);
                            _b.label = 2;
                        case 2: return [2 /*return*/, doc];
                    }
                });
            });
        };
        /** Return an instance of the platformServer compiler */
        CommonEngine.prototype.getCompiler = function () {
            var compilerFactory = platformServer.platformDynamicServer().injector.get(core.CompilerFactory);
            return compilerFactory.createCompiler([
                { providers: [{ provide: compiler.ResourceLoader, useClass: FileLoader, deps: [] }] },
            ]);
        };
        return CommonEngine;
    }());
    function exists(path) {
        return __awaiter(this, void 0, void 0, function () {
            var _a_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, fs__namespace.promises.access(path, fs__namespace.constants.F_OK)];
                    case 1:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 2:
                        _a_1 = _b.sent();
                        return [2 /*return*/, false];
                    case 3: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * @license
     * Copyright Google LLC All Rights Reserved.
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://angular.io/license
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CommonEngine = CommonEngine;
    exports.ɵInlineCriticalCssProcessor = InlineCriticalCssProcessor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=common-engine.umd.js.map
