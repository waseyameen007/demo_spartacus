var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { basename, normalize, split } from '@angular-devkit/core';
import { SchematicsException, apply, applyTemplates, chain, mergeWith, move, noop, url, } from '@angular-devkit/schematics';
import { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';
import { addImportToModule, findNode, getDecoratorMetadata, } from '@schematics/angular/utility/ast-utils';
import { InsertChange, applyToUpdateRecorder } from '@schematics/angular/utility/change';
import { NodeDependencyType, addPackageJsonDependency, } from '@schematics/angular/utility/dependencies';
import { findBootstrapModulePath } from '@schematics/angular/utility/ng-ast-utils';
import { getWorkspace, updateWorkspace } from '@schematics/angular/utility/workspace';
import { posix } from 'path';
import * as ts from 'typescript';
export default function (options) {
    return (host, context) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield getWorkspace(host);
        const project = workspace.projects.get(options.project);
        if (project.extensions.projectType !== 'application') {
            throw new SchematicsException(`Universal requires a project type of "application".`);
        }
        const clientBuildTarget = project.targets.get('build');
        if (!clientBuildTarget) {
            throw new SchematicsException(`Project target "build" not found.`);
        }
        if (!options.skipInstall) {
            context.addTask(new NodePackageInstallTask());
        }
        return chain([
            augmentAppModuleRule(project, clientBuildTarget, options),
            options.ssr ? addSSRRule(project, clientBuildTarget) : noop(),
            options.prerender ? addPreRenderRule() : noop(),
            addScriptsRule(options),
            updateWorkspaceRule(options),
        ]);
    });
}
function addPreRenderRule() {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        addPackageJsonDependency(host, {
            name: '@nguniversal/builders',
            type: NodeDependencyType.Dev,
            version: '~12.1.3',
        });
    });
}
function addSSRRule(project, buildTarget) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        var _a;
        addPackageJsonDependency(host, {
            type: NodeDependencyType.Default,
            name: 'express',
            version: '^4.15.2',
        });
        addPackageJsonDependency(host, {
            type: NodeDependencyType.Dev,
            name: '@types/express',
            version: '^4.17.0',
        });
        const templateSource = apply(url('./files/src'), [
            applyTemplates({}),
            move((_a = project.sourceRoot) !== null && _a !== void 0 ? _a : '/src'),
        ]);
        const rootSource = apply(url('./files/root'), [
            applyTemplates({
                tsConfigExtends: basename(normalize(buildTarget.options.tsConfig)),
                relativePathToWorkspaceRoot: relativePathToWorkspaceRoot(project.root),
            }),
            move(project.root),
        ]);
        return chain([mergeWith(templateSource), mergeWith(rootSource)]);
    });
}
function addScriptsRule(options) {
    return (host) => __awaiter(this, void 0, void 0, function* () {
        const pkgPath = '/package.json';
        const buffer = host.read(pkgPath);
        if (!buffer) {
            throw new SchematicsException('Could not find package.json');
        }
        const pkg = JSON.parse(buffer.toString());
        if (options.prerender) {
            pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'prerender': `ng run ${options.project}:prerender` });
        }
        if (options.ssr) {
            pkg.scripts = Object.assign(Object.assign({}, pkg.scripts), { 'build:client-and-server': `ng build ${options.project} && ng run ${options.project}:server`, 'build:server': `ng run ${options.project}:server`, 'serve:ssr': `node dist/${options.project}/server/main.js` });
        }
        host.overwrite(pkgPath, JSON.stringify(pkg, null, 2));
    });
}
function updateWorkspaceRule(options) {
    return updateWorkspace((workspace) => {
        var _a, _b;
        const project = workspace.projects.get(options.project);
        if (options.ssr) {
            project.targets.add({
                name: 'server',
                builder: '@angular-devkit/build-angular:server',
                options: {
                    outputPath: `dist/${options.project}/server`,
                    main: posix.join((_a = project.sourceRoot) !== null && _a !== void 0 ? _a : '', 'server.ts'),
                    tsConfig: posix.join(project.root, 'tsconfig.server.json'),
                    bundleDependencies: false,
                    optimization: false,
                },
            });
            const buildTarget = project.targets.get('build');
            if ((_b = project.targets.get('build')) === null || _b === void 0 ? void 0 : _b.options) {
                buildTarget.options.outputPath = `dist/${options.project}/browser`;
            }
        }
        if (options.prerender) {
            project.targets.add({
                name: 'prerender',
                builder: '@nguniversal/builders:static-generator',
                defaultConfiguration: 'production',
                options: {},
                configurations: {
                    production: {
                        browserTarget: `${options.project}:build:production`,
                    },
                    development: {
                        browserTarget: `${options.project}:build:development`,
                    },
                },
            });
        }
    });
}
function augmentAppModuleRule(project, buildTarget, options) {
    return (host) => {
        const bootstrapModuleRelativePath = findBootstrapModulePath(host, buildTarget.options.main);
        const bootstrapModulePath = normalize(`/${project.sourceRoot}/${bootstrapModuleRelativePath}.ts`);
        // Add BrowserModule.withServerTransition()
        const browserModuleImport = findBrowserModuleImport(host, bootstrapModulePath);
        const transitionCall = `.withServerTransition({ appId: '${options.appId}' })`;
        const position = browserModuleImport.pos + browserModuleImport.getFullText().length;
        const transitionCallChange = new InsertChange(bootstrapModulePath, position, transitionCall);
        const transitionCallRecorder = host.beginUpdate(bootstrapModulePath);
        transitionCallRecorder.insertLeft(transitionCallChange.pos, transitionCallChange.toAdd);
        host.commitUpdate(transitionCallRecorder);
        // Add @nguniversal/common/clover
        let changes = addImportToModule(getSourceFile(host, bootstrapModulePath), bootstrapModulePath, 'RendererModule.forRoot()', '@nguniversal/common/clover');
        let recorder = host.beginUpdate(bootstrapModulePath);
        applyToUpdateRecorder(recorder, changes);
        host.commitUpdate(recorder);
        changes = addImportToModule(getSourceFile(host, bootstrapModulePath), bootstrapModulePath, 'TransferHttpCacheModule', '@nguniversal/common/clover');
        recorder = host.beginUpdate(bootstrapModulePath);
        applyToUpdateRecorder(recorder, changes);
        host.commitUpdate(recorder);
    };
}
function relativePathToWorkspaceRoot(projectRoot) {
    const normalizedPath = split(normalize(projectRoot || ''));
    if (normalizedPath.length === 0 || !normalizedPath[0]) {
        return '.';
    }
    else {
        return normalizedPath.map(() => '..').join('/');
    }
}
function findBrowserModuleImport(host, modulePath) {
    const source = getSourceFile(host, modulePath);
    const decoratorMetadata = getDecoratorMetadata(source, 'NgModule', '@angular/core')[0];
    const browserModuleNode = findNode(decoratorMetadata, ts.SyntaxKind.Identifier, 'BrowserModule');
    if (!browserModuleNode) {
        throw new SchematicsException(`Cannot find BrowserModule import in ${modulePath}`);
    }
    return browserModuleNode;
}
function getSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new SchematicsException(`Could not find ${path}.`);
    }
    const content = buffer.toString();
    const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
    return source;
}
//# sourceMappingURL=data:application/json;base64,