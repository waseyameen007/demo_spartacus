(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/core'), require('@angular/router'), require('@angular/common'), require('@angular/forms'), require('rxjs/operators'), require('@spartacus/order/root'), require('@spartacus/storefront'), require('@ng-bootstrap/ng-bootstrap'), require('@ng-select/ng-select'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@spartacus/order/components', ['exports', '@angular/core', '@spartacus/core', '@angular/router', '@angular/common', '@angular/forms', 'rxjs/operators', '@spartacus/order/root', '@spartacus/storefront', '@ng-bootstrap/ng-bootstrap', '@ng-select/ng-select', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.order = global.spartacus.order || {}, global.spartacus.order.components = {}), global.ng.core, global.core, global.ng.router, global.ng.common, global.ng.forms, global.rxjs.operators, global.spartacus.order.root, global.storefront, global.i1$1, global.ngSelect, global.rxjs));
}(this, (function (exports, i0, i1, i3, i4, i5, operators, i2, i3$1, i1$1, ngSelect, rxjs) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);

    var AmendOrderActionsComponent = /** @class */ (function () {
        function AmendOrderActionsComponent(routingService) {
            this.routingService = routingService;
            this.styles = 'row';
        }
        AmendOrderActionsComponent.prototype.continue = function (event) {
            if (this.amendOrderForm.valid) {
                this.routingService.go({
                    cxRoute: this.forwardRoute,
                    params: { code: this.orderCode },
                });
            }
            else {
                this.amendOrderForm.markAllAsTouched();
                event.stopPropagation();
            }
        };
        return AmendOrderActionsComponent;
    }());
    AmendOrderActionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderActionsComponent, deps: [{ token: i1__namespace.RoutingService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    AmendOrderActionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: AmendOrderActionsComponent, selector: "cx-amend-order-actions", inputs: { orderCode: "orderCode", amendOrderForm: "amendOrderForm", backRoute: "backRoute", forwardRoute: "forwardRoute" }, host: { properties: { "class": "this.styles" } }, ngImport: i0__namespace, template: "<div class=\"col-xs-12 col-md-4 col-lg-3\">\n  <a\n    [routerLink]=\"\n      {\n        cxRoute: backRoute,\n        params: { code: orderCode }\n      } | cxUrl\n    \"\n    class=\"btn btn-block btn-action\"\n  >\n    {{ 'common.back' | cxTranslate }}\n  </a>\n</div>\n<div class=\"col-xs-12 col-md-4 col-lg-3\">\n  <button\n    *ngIf=\"forwardRoute\"\n    class=\"btn btn-block btn-primary\"\n    (click)=\"continue($event)\"\n  >\n    {{ 'common.continue' | cxTranslate }}\n  </button>\n\n  <button *ngIf=\"!forwardRoute\" class=\"btn btn-block btn-primary\" type=\"submit\">\n    {{ 'orderDetails.cancellationAndReturn.submit' | cxTranslate }}\n  </button>\n</div>\n", directives: [{ type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxUrl": i1__namespace.UrlPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderActionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-amend-order-actions',
                        templateUrl: './amend-order-actions.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RoutingService }]; }, propDecorators: { orderCode: [{
                    type: i0.Input
                }], amendOrderForm: [{
                    type: i0.Input
                }], backRoute: [{
                    type: i0.Input
                }], forwardRoute: [{
                    type: i0.Input
                }], styles: [{
                    type: i0.HostBinding,
                    args: ['class']
                }] } });

    var AmendOrderActionsModule = /** @class */ (function () {
        function AmendOrderActionsModule() {
        }
        return AmendOrderActionsModule;
    }());
    AmendOrderActionsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderActionsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AmendOrderActionsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderActionsModule, declarations: [AmendOrderActionsComponent], imports: [i4.CommonModule, i3.RouterModule, i1.UrlModule, i1.I18nModule], exports: [AmendOrderActionsComponent] });
    AmendOrderActionsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderActionsModule, imports: [[i4.CommonModule, i3.RouterModule, i1.UrlModule, i1.I18nModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderActionsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i4.CommonModule, i3.RouterModule, i1.UrlModule, i1.I18nModule],
                        declarations: [AmendOrderActionsComponent],
                        exports: [AmendOrderActionsComponent],
                    }]
            }] });

    exports.AmendOrderType = void 0;
    (function (AmendOrderType) {
        AmendOrderType[AmendOrderType["CANCEL"] = 0] = "CANCEL";
        AmendOrderType[AmendOrderType["RETURN"] = 1] = "RETURN";
    })(exports.AmendOrderType || (exports.AmendOrderType = {}));

    var OrderDetailsService = /** @class */ (function () {
        function OrderDetailsService(userOrderService, routingService) {
            var _this = this;
            this.userOrderService = userOrderService;
            this.routingService = routingService;
            this.orderCode$ = this.routingService.getRouterState().pipe(operators.map(function (routingData) { return routingData.state.params.orderCode; }), operators.distinctUntilChanged());
            this.orderLoad$ = this.orderCode$.pipe(operators.tap(function (orderCode) {
                if (orderCode) {
                    _this.userOrderService.loadOrderDetails(orderCode);
                }
                else {
                    _this.userOrderService.clearOrderDetails();
                }
            }), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        OrderDetailsService.prototype.getOrderDetails = function () {
            var _this = this;
            return this.orderLoad$.pipe(operators.switchMap(function () { return _this.userOrderService.getOrderDetails(); }));
        };
        return OrderDetailsService;
    }());
    OrderDetailsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsService, deps: [{ token: i2__namespace.OrderFacade }, { token: i1__namespace.RoutingService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderDetailsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.OrderFacade }, { type: i1__namespace.RoutingService }]; } });

    function ValidateQuantityToCancel(control) {
        if (!control.value) {
            return null;
        }
        var quantity = Object.values(control.value).reduce(function (acc, val) { return acc + val; }, 0);
        return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };
    }
    var OrderAmendService = /** @class */ (function () {
        function OrderAmendService(orderDetailsService) {
            this.orderDetailsService = orderDetailsService;
        }
        /**
         * Returns entries with an amended quantity.
         */
        OrderAmendService.prototype.getAmendedEntries = function () {
            var _this = this;
            return this.getForm().pipe(operators.switchMap(function (form) {
                return _this.getEntries().pipe(operators.map(function (entries) { return entries.filter(function (entry) { return _this.getFormControl(form, entry).value > 0; }); }));
            }));
        };
        OrderAmendService.prototype.getOrder = function () {
            return this.orderDetailsService.getOrderDetails();
        };
        /**
         * returns the form with form data at runtime
         */
        OrderAmendService.prototype.getForm = function () {
            var _this = this;
            return this.getOrder().pipe(operators.tap(function (order) {
                var _a;
                if (!_this.form || ((_a = _this.form.get('orderCode')) === null || _a === void 0 ? void 0 : _a.value) !== order.code) {
                    _this.buildForm(order);
                }
            }), operators.map(function () { return _this.form; }));
        };
        OrderAmendService.prototype.buildForm = function (order) {
            var _this = this;
            this.form = new i5.FormGroup({});
            this.form.addControl('orderCode', new i5.FormControl(order.code));
            var entryGroup = new i5.FormGroup({}, { validators: [ValidateQuantityToCancel] });
            this.form.addControl('entries', entryGroup);
            (order.entries || []).forEach(function (entry) {
                var _a, _b;
                var key = (_b = (_a = entry === null || entry === void 0 ? void 0 : entry.entryNumber) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '';
                entryGroup.addControl(key, new i5.FormControl(0, {
                    validators: [
                        i5.Validators.min(0),
                        i5.Validators.max(_this.getMaxAmendQuantity(entry)),
                    ],
                }));
            });
        };
        OrderAmendService.prototype.getFormControl = function (form, entry) {
            var _a, _b, _c;
            return ((_a = form.get('entries')) === null || _a === void 0 ? void 0 : _a.get((_c = (_b = entry.entryNumber) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : ''));
        };
        /**
         * As discussed, this calculation is moved to SPA side.
         * The calculation and validation should be in backend facade layer.
         */
        OrderAmendService.prototype.getAmendedPrice = function (entry) {
            var _a, _b, _c;
            var amendedQuantity = this.getFormControl(this.form, entry).value;
            var amendedPrice = Object.assign({}, entry.basePrice);
            amendedPrice.value =
                Math.round(((_b = (_a = entry.basePrice) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : 0) * amendedQuantity * 100) / 100;
            amendedPrice.formattedValue = i4.formatCurrency(amendedPrice.value, 
            // TODO: user current language
            'en', i4.getCurrencySymbol((_c = amendedPrice.currencyIso) !== null && _c !== void 0 ? _c : '', 'narrow'), amendedPrice.currencyIso);
            return amendedPrice;
        };
        OrderAmendService.prototype.getMaxAmendQuantity = function (entry) {
            return ((this.isCancellation()
                ? entry.cancellableQuantity
                : entry.returnableQuantity) ||
                entry.quantity ||
                0);
        };
        OrderAmendService.prototype.isCancellation = function () {
            return this.amendType === exports.AmendOrderType.CANCEL;
        };
        return OrderAmendService;
    }());
    OrderAmendService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderAmendService, deps: [{ token: OrderDetailsService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderAmendService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderAmendService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderAmendService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: OrderDetailsService }]; } });

    var CancelOrReturnItemsComponent = /** @class */ (function () {
        function CancelOrReturnItemsComponent(orderAmendService) {
            this.orderAmendService = orderAmendService;
            this.isConfirmation = false;
            this.form$ = this.orderAmendService.getForm();
        }
        CancelOrReturnItemsComponent.prototype.getControl = function (form, entry) {
            var _a, _b, _c;
            var control = ((_a = form.get('entries')) === null || _a === void 0 ? void 0 : _a.get((_c = (_b = entry.entryNumber) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : ''));
            return control;
        };
        CancelOrReturnItemsComponent.prototype.setAll = function (form) {
            var _this = this;
            this.entries.forEach(function (entry) { return _this.getControl(form, entry).setValue(_this.getMaxAmendQuantity(entry)); });
        };
        CancelOrReturnItemsComponent.prototype.getItemPrice = function (entry) {
            return this.orderAmendService.getAmendedPrice(entry);
        };
        CancelOrReturnItemsComponent.prototype.getMaxAmendQuantity = function (entry) {
            return this.orderAmendService.getMaxAmendQuantity(entry);
        };
        CancelOrReturnItemsComponent.prototype.isCancellation = function () {
            return this.orderAmendService.isCancellation();
        };
        return CancelOrReturnItemsComponent;
    }());
    CancelOrReturnItemsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrReturnItemsComponent, deps: [{ token: OrderAmendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CancelOrReturnItemsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CancelOrReturnItemsComponent, selector: "cx-amend-order-items", inputs: { entries: "entries", isConfirmation: "isConfirmation" }, ngImport: i0__namespace, template: "<div *ngIf=\"form$ | async as form\">\n  <button\n    *ngIf=\"!isConfirmation\"\n    class=\"btn btn-link cx-action-link\"\n    (click)=\"setAll(form)\"\n  >\n    {{ 'orderDetails.cancellationAndReturn.setAll' | cxTranslate }}\n  </button>\n\n  <div class=\"d-none d-md-block cx-item-list-header\">\n    <div class=\"row\">\n      <div class=\"text-left col-6\">\n        {{ 'orderDetails.cancellationAndReturn.item' | cxTranslate }}\n      </div>\n      <div class=\"text-center col-2\">\n        {{ 'orderDetails.cancellationAndReturn.itemPrice' | cxTranslate }}\n      </div>\n      <div *ngIf=\"!isConfirmation\" class=\"text-center col-2\">\n        {{ 'orderDetails.cancellationAndReturn.quantity' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-qty col-2 text-right\">\n        {{\n          (isCancellation()\n            ? 'orderDetails.cancellationAndReturn.cancelQty'\n            : 'orderDetails.cancellationAndReturn.returnQty'\n          ) | cxTranslate\n        }}\n      </div>\n      <div *ngIf=\"isConfirmation\" class=\"cx-item-list-total col-2\">\n        {{ 'orderDetails.cancellationAndReturn.totalPrice' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"cx-item-list-row\" *ngFor=\"let item of entries; let i = index\">\n    <div class=\"row cx-item-list-items\">\n      <!-- Item Image -->\n      <cx-media\n        class=\"col-2\"\n        [container]=\"item.product.images?.PRIMARY\"\n        format=\"thumbnail\"\n      ></cx-media>\n\n      <!-- Item Information -->\n      <div class=\"cx-info col-10\">\n        <div class=\"cx-info-container row\">\n          <!-- Item Description -->\n          <div class=\"col-md-4 col-xl-5 cx-list-item-desc\">\n            <div *ngIf=\"item.product.name\" class=\"cx-name\">\n              {{ item.product.name }}\n            </div>\n            <div *ngIf=\"item.product.code\" class=\"cx-code\">\n              {{ 'cartItems.id' | cxTranslate }} {{ item.product.code }}\n            </div>\n            <!-- Variants -->\n            <ng-container *ngIf=\"item.product.baseOptions?.length\">\n              <div\n                *ngFor=\"\n                  let variant of item.product.baseOptions[0]?.selected\n                    ?.variantOptionQualifiers\n                \"\n                class=\"cx-property\"\n              >\n                <div class=\"cx-label\" *ngIf=\"variant.name\">\n                  {{ variant.name }}:\n                </div>\n                <div class=\"cx-value\" *ngIf=\"variant.value\">\n                  {{ variant.value }}\n                </div>\n              </div>\n            </ng-container>\n          </div>\n          <!-- Price -->\n          <div\n            *ngIf=\"item.basePrice\"\n            class=\"cx-price col-md-3 col-lg-3 col-xl-2\"\n          >\n            <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n              {{ 'orderDetails.cancellationAndReturn.itemPrice' | cxTranslate }}\n            </div>\n            <div *ngIf=\"item.basePrice\" class=\"cx-value\">\n              {{ item.basePrice?.formattedValue }}\n            </div>\n          </div>\n          <!-- item Quantity -->\n          <div *ngIf=\"!isConfirmation\" class=\"cx-request-qty col-md-3\">\n            <div\n              class=\"cx-label d-block d-md-none d-lg-none d-xl-none\"\n              placement=\"left\"\n              title=\"{{ 'cartItems.quantityTitle' | cxTranslate }}\"\n            >\n              {{ 'orderDetails.cancellationAndReturn.quantity' | cxTranslate }}\n            </div>\n            <div class=\"cx-value\">\n              {{ getMaxAmendQuantity(item) }}\n            </div>\n          </div>\n          <!-- Amended Quantity -->\n          <div class=\"cx-quantity col-xs-12 col-md-2 col-sm-12\">\n            <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n              {{\n                (isCancellation()\n                  ? 'orderDetails.cancellationAndReturn.cancelQty'\n                  : 'orderDetails.cancellationAndReturn.returnQty'\n                ) | cxTranslate\n              }}\n            </div>\n\n            <div\n              *ngIf=\"isConfirmation\"\n              class=\"w-100 text-center cx-order-quantity-value\"\n            >\n              {{ getControl(form, item).value }}\n            </div>\n            <cx-item-counter\n              *ngIf=\"!isConfirmation\"\n              [min]=\"0\"\n              [max]=\"getMaxAmendQuantity(item)\"\n              [control]=\"getControl(form, item)\"\n            >\n            </cx-item-counter>\n          </div>\n          <!-- Total Price -->\n          <div *ngIf=\"isConfirmation\" class=\"cx-total col-3\">\n            <div class=\"cx-label d-block d-md-none\">\n              {{\n                'orderDetails.cancellationAndReturn.totalPrice' | cxTranslate\n              }}\n            </div>\n            <div class=\"cx-value\">\n              {{ getItemPrice(item)?.formattedValue }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", components: [{ type: i3__namespace$1.MediaComponent, selector: "cx-media", inputs: ["container", "format", "alt", "role", "loading"], outputs: ["loaded"] }, { type: i3__namespace$1.ItemCounterComponent, selector: "cx-item-counter", inputs: ["control", "min", "max", "step", "allowZero", "readonly"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrReturnItemsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-amend-order-items',
                        templateUrl: './amend-order-items.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: OrderAmendService }]; }, propDecorators: { entries: [{
                    type: i0.Input
                }], isConfirmation: [{
                    type: i0.Input
                }] } });

    var AmendOrderItemsModule = /** @class */ (function () {
        function AmendOrderItemsModule() {
        }
        return AmendOrderItemsModule;
    }());
    AmendOrderItemsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderItemsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    AmendOrderItemsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderItemsModule, declarations: [CancelOrReturnItemsComponent], imports: [i4.CommonModule,
            i5.ReactiveFormsModule,
            i1.I18nModule,
            i3$1.MediaModule,
            i3$1.ItemCounterModule,
            i1.FeaturesConfigModule,
            i3$1.FormErrorsModule], exports: [CancelOrReturnItemsComponent] });
    AmendOrderItemsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderItemsModule, imports: [[
                i4.CommonModule,
                i5.ReactiveFormsModule,
                i1.I18nModule,
                i3$1.MediaModule,
                i3$1.ItemCounterModule,
                i1.FeaturesConfigModule,
                i3$1.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: AmendOrderItemsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i5.ReactiveFormsModule,
                            i1.I18nModule,
                            i3$1.MediaModule,
                            i3$1.ItemCounterModule,
                            i1.FeaturesConfigModule,
                            i3$1.FormErrorsModule,
                        ],
                        declarations: [CancelOrReturnItemsComponent],
                        exports: [CancelOrReturnItemsComponent],
                    }]
            }] });

    var CancelOrderConfirmationComponent = /** @class */ (function () {
        function CancelOrderConfirmationComponent(orderAmendService) {
            var _this = this;
            this.orderAmendService = orderAmendService;
            this.form$ = this.orderAmendService
                .getForm()
                .pipe(operators.tap(function (form) { return (_this.orderCode = form.value.orderCode); }));
            this.entries$ = this.orderAmendService.getAmendedEntries();
        }
        CancelOrderConfirmationComponent.prototype.submit = function (form) {
            if (form.valid) {
                this.orderAmendService.save();
            }
            else {
                form.markAllAsTouched();
            }
        };
        return CancelOrderConfirmationComponent;
    }());
    CancelOrderConfirmationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderConfirmationComponent, deps: [{ token: OrderAmendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CancelOrderConfirmationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CancelOrderConfirmationComponent, selector: "cx-cancel-order-confirmation", ngImport: i0__namespace, template: "<form\n  *ngIf=\"form$ | async as form\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"submit(form)\"\n>\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items\n    *ngIf=\"entries$ | async as entries\"\n    [entries]=\"entries\"\n    [isConfirmation]=\"true\"\n  >\n  </cx-amend-order-items>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderCancel\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</form>\n", components: [{ type: CancelOrReturnItemsComponent, selector: "cx-amend-order-items", inputs: ["entries", "isConfirmation"] }, { type: AmendOrderActionsComponent, selector: "cx-amend-order-actions", inputs: ["orderCode", "amendOrderForm", "backRoute", "forwardRoute"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderConfirmationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-cancel-order-confirmation',
                        templateUrl: './cancel-order-confirmation.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: OrderAmendService }]; } });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var OrderCancellationService = /** @class */ (function (_super) {
        __extends(OrderCancellationService, _super);
        function OrderCancellationService(orderDetailsService, userOrderService, routing, globalMessageService) {
            var _this = _super.call(this, orderDetailsService) || this;
            _this.orderDetailsService = orderDetailsService;
            _this.userOrderService = userOrderService;
            _this.routing = routing;
            _this.globalMessageService = globalMessageService;
            _this.amendType = exports.AmendOrderType.CANCEL;
            return _this;
        }
        /**
         * Return cancellable order entries.
         */
        OrderCancellationService.prototype.getEntries = function () {
            return this.getOrder().pipe(operators.filter(function (order) { return !!(order === null || order === void 0 ? void 0 : order.entries); }), operators.map(function (order) {
                var _a, _b;
                return (_b = (_a = order.entries) === null || _a === void 0 ? void 0 : _a.filter(function (entry) { return entry.entryNumber !== -1 &&
                    entry.cancellableQuantity &&
                    entry.cancellableQuantity > 0; })) !== null && _b !== void 0 ? _b : [];
            }));
        };
        OrderCancellationService.prototype.save = function () {
            var _this = this;
            var orderCode = this.form.value.orderCode;
            var entries = this.form.value.entries;
            var inputs = Object.keys(entries)
                .filter(function (entryNumber) { return entries[entryNumber] > 0; })
                .map(function (entryNumber) { return ({
                orderEntryNumber: Number(entryNumber),
                quantity: entries[entryNumber],
            }); });
            this.form.reset();
            this.userOrderService.cancelOrder(orderCode, {
                cancellationRequestEntryInputs: inputs,
            });
            this.userOrderService
                .getCancelOrderSuccess()
                .pipe(operators.first(Boolean))
                .subscribe(function () { return _this.afterSave(orderCode); });
        };
        OrderCancellationService.prototype.afterSave = function (orderCode) {
            this.userOrderService.resetCancelOrderProcessState();
            this.globalMessageService.add({
                key: 'orderDetails.cancellationAndReturn.cancelSuccess',
                params: { orderCode: orderCode },
            }, i1.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.routing.go({
                cxRoute: 'orders',
            });
        };
        return OrderCancellationService;
    }(OrderAmendService));
    OrderCancellationService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationService, deps: [{ token: OrderDetailsService }, { token: i2__namespace.OrderFacade }, { token: i1__namespace.RoutingService }, { token: i1__namespace.GlobalMessageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderCancellationService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: OrderDetailsService }, { type: i2__namespace.OrderFacade }, { type: i1__namespace.RoutingService }, { type: i1__namespace.GlobalMessageService }]; } });

    var OrderCancellationGuard = /** @class */ (function () {
        function OrderCancellationGuard(orderAmendService, semanticPathService, router) {
            this.orderAmendService = orderAmendService;
            this.semanticPathService = semanticPathService;
            this.router = router;
        }
        OrderCancellationGuard.prototype.canActivate = function () {
            var _this = this;
            return this.orderAmendService.getForm().pipe(operators.map(function (form) {
                if (!form.valid) {
                    // the order code is not available in the route
                    // as long as we're inside a guard, hence we redirect
                    // to the common orders page.
                    return _this.router.parseUrl(_this.semanticPathService.get('orders'));
                }
                else {
                    return true;
                }
            }));
        };
        return OrderCancellationGuard;
    }());
    OrderCancellationGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationGuard, deps: [{ token: OrderCancellationService }, { token: i1__namespace.SemanticPathService }, { token: i3__namespace.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderCancellationGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: OrderCancellationService }, { type: i1__namespace.SemanticPathService }, { type: i3__namespace.Router }]; } });

    var CancelOrderConfirmationModule = /** @class */ (function () {
        function CancelOrderConfirmationModule() {
        }
        return CancelOrderConfirmationModule;
    }());
    CancelOrderConfirmationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderConfirmationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CancelOrderConfirmationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderConfirmationModule, declarations: [CancelOrderConfirmationComponent], imports: [i4.CommonModule,
            i5.ReactiveFormsModule,
            AmendOrderItemsModule,
            AmendOrderActionsModule], exports: [CancelOrderConfirmationComponent] });
    CancelOrderConfirmationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderConfirmationModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CancelOrderConfirmationComponent: {
                        component: CancelOrderConfirmationComponent,
                        guards: [i1.AuthGuard, OrderCancellationGuard],
                        providers: [
                            {
                                provide: OrderAmendService,
                                useExisting: OrderCancellationService,
                            },
                        ],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                i5.ReactiveFormsModule,
                AmendOrderItemsModule,
                AmendOrderActionsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderConfirmationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i5.ReactiveFormsModule,
                            AmendOrderItemsModule,
                            AmendOrderActionsModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CancelOrderConfirmationComponent: {
                                        component: CancelOrderConfirmationComponent,
                                        guards: [i1.AuthGuard, OrderCancellationGuard],
                                        providers: [
                                            {
                                                provide: OrderAmendService,
                                                useExisting: OrderCancellationService,
                                            },
                                        ],
                                    },
                                },
                            }),
                        ],
                        declarations: [CancelOrderConfirmationComponent],
                        exports: [CancelOrderConfirmationComponent],
                    }]
            }] });

    var CancelOrderComponent = /** @class */ (function () {
        function CancelOrderComponent(orderAmendService) {
            var _this = this;
            this.orderAmendService = orderAmendService;
            this.form$ = this.orderAmendService
                .getForm()
                .pipe(operators.tap(function (form) { return (_this.orderCode = form.value.orderCode); }));
            this.entries$ = this.orderAmendService.getEntries();
        }
        return CancelOrderComponent;
    }());
    CancelOrderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderComponent, deps: [{ token: OrderAmendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CancelOrderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CancelOrderComponent, selector: "cx-cancel-order", ngImport: i0__namespace, template: "<ng-container *ngIf=\"form$ | async as form\">\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items *ngIf=\"entries$ | async as entries\" [entries]=\"entries\">\n  </cx-amend-order-items>\n\n  <cx-form-errors\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    [control]=\"form.get('entries')\"\n  ></cx-form-errors>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderDetails\"\n      forwardRoute=\"orderCancelConfirmation\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</ng-container>\n", components: [{ type: CancelOrReturnItemsComponent, selector: "cx-amend-order-items", inputs: ["entries", "isConfirmation"] }, { type: i3__namespace$1.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: AmendOrderActionsComponent, selector: "cx-amend-order-actions", inputs: ["orderCode", "amendOrderForm", "backRoute", "forwardRoute"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-cancel-order',
                        templateUrl: './cancel-order.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: OrderAmendService }]; } });

    var CancelOrderModule = /** @class */ (function () {
        function CancelOrderModule() {
        }
        return CancelOrderModule;
    }());
    CancelOrderModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CancelOrderModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderModule, declarations: [CancelOrderComponent], imports: [i4.CommonModule,
            AmendOrderItemsModule,
            AmendOrderActionsModule,
            i3$1.FormErrorsModule], exports: [CancelOrderComponent] });
    CancelOrderModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CancelOrderComponent: {
                        component: CancelOrderComponent,
                        guards: [i1.AuthGuard],
                        providers: [
                            {
                                provide: OrderAmendService,
                                useExisting: OrderCancellationService,
                            },
                        ],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                AmendOrderItemsModule,
                AmendOrderActionsModule,
                i3$1.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CancelOrderModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            AmendOrderItemsModule,
                            AmendOrderActionsModule,
                            i3$1.FormErrorsModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CancelOrderComponent: {
                                        component: CancelOrderComponent,
                                        guards: [i1.AuthGuard],
                                        providers: [
                                            {
                                                provide: OrderAmendService,
                                                useExisting: OrderCancellationService,
                                            },
                                        ],
                                    },
                                },
                            }),
                        ],
                        declarations: [CancelOrderComponent],
                        exports: [CancelOrderComponent],
                    }]
            }] });

    var OrderCancellationModule = /** @class */ (function () {
        function OrderCancellationModule() {
        }
        return OrderCancellationModule;
    }());
    OrderCancellationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrderCancellationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationModule, imports: [CancelOrderModule, CancelOrderConfirmationModule] });
    OrderCancellationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationModule, imports: [[CancelOrderModule, CancelOrderConfirmationModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderCancellationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [CancelOrderModule, CancelOrderConfirmationModule],
                    }]
            }] });

    var OrderReturnService = /** @class */ (function (_super) {
        __extends(OrderReturnService, _super);
        function OrderReturnService(orderDetailsService, returnRequestService, routing, globalMessageService) {
            var _this = _super.call(this, orderDetailsService) || this;
            _this.orderDetailsService = orderDetailsService;
            _this.returnRequestService = returnRequestService;
            _this.routing = routing;
            _this.globalMessageService = globalMessageService;
            _this.amendType = exports.AmendOrderType.RETURN;
            return _this;
        }
        OrderReturnService.prototype.getEntries = function () {
            return this.getOrder().pipe(operators.filter(function (order) { return !!order.entries; }), operators.map(function (order) {
                var _a, _b;
                return (_b = (_a = order.entries) === null || _a === void 0 ? void 0 : _a.filter(function (entry) { return entry.entryNumber !== -1 &&
                    entry.returnableQuantity &&
                    entry.returnableQuantity > 0; })) !== null && _b !== void 0 ? _b : [];
            }));
        };
        OrderReturnService.prototype.save = function () {
            var _this = this;
            var orderCode = this.form.value.orderCode;
            var entries = this.form.value.entries;
            var inputs = Object.keys(entries)
                .filter(function (entryNumber) { return entries[entryNumber] > 0; })
                .map(function (entryNumber) { return ({
                orderEntryNumber: Number(entryNumber),
                quantity: entries[entryNumber],
            }); });
            this.form.reset();
            this.returnRequestService.createOrderReturnRequest({
                orderCode: orderCode,
                returnRequestEntryInputs: inputs,
            });
            this.returnRequestService
                .getReturnRequestSuccess()
                .pipe(operators.first(Boolean))
                .subscribe(function () { return _this.afterSave(); });
        };
        OrderReturnService.prototype.afterSave = function () {
            var _this = this;
            this.returnRequestService
                .getOrderReturnRequest()
                .pipe(operators.first(function (r) { return !!r; }))
                .subscribe(function (returnRequest) {
                var rma = returnRequest.rma;
                _this.globalMessageService.add({
                    key: 'orderDetails.cancellationAndReturn.returnSuccess',
                    params: { rma: rma },
                }, i1.GlobalMessageType.MSG_TYPE_CONFIRMATION);
                _this.routing.go({
                    cxRoute: 'returnRequestDetails',
                    params: { rma: rma },
                });
            });
        };
        return OrderReturnService;
    }(OrderAmendService));
    OrderReturnService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnService, deps: [{ token: OrderDetailsService }, { token: i2__namespace.OrderReturnRequestFacade }, { token: i1__namespace.RoutingService }, { token: i1__namespace.GlobalMessageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderReturnService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: OrderDetailsService }, { type: i2__namespace.OrderReturnRequestFacade }, { type: i1__namespace.RoutingService }, { type: i1__namespace.GlobalMessageService }]; } });

    var OrderReturnGuard = /** @class */ (function () {
        function OrderReturnGuard(orderAmendService, semanticPathService, router) {
            this.orderAmendService = orderAmendService;
            this.semanticPathService = semanticPathService;
            this.router = router;
        }
        OrderReturnGuard.prototype.canActivate = function () {
            var _this = this;
            return this.orderAmendService.getForm().pipe(operators.map(function (form) {
                if (!form.valid) {
                    // the order code is not available in the route
                    // as long as we're inside a guard, hence we redirect
                    // to the common orders page.
                    return _this.router.parseUrl(_this.semanticPathService.get('orders'));
                }
                else {
                    return true;
                }
            }));
        };
        return OrderReturnGuard;
    }());
    OrderReturnGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnGuard, deps: [{ token: OrderReturnService }, { token: i1__namespace.SemanticPathService }, { token: i3__namespace.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderReturnGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: OrderReturnService }, { type: i1__namespace.SemanticPathService }, { type: i3__namespace.Router }]; } });

    var ReturnOrderConfirmationComponent = /** @class */ (function () {
        function ReturnOrderConfirmationComponent(orderAmendService) {
            var _this = this;
            this.orderAmendService = orderAmendService;
            this.form$ = this.orderAmendService
                .getForm()
                .pipe(operators.tap(function (form) { return (_this.orderCode = form.value.orderCode); }));
            this.entries$ = this.orderAmendService.getAmendedEntries();
        }
        ReturnOrderConfirmationComponent.prototype.submit = function (form) {
            form.disable();
            this.orderAmendService.save();
        };
        return ReturnOrderConfirmationComponent;
    }());
    ReturnOrderConfirmationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderConfirmationComponent, deps: [{ token: OrderAmendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReturnOrderConfirmationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReturnOrderConfirmationComponent, selector: "cx-return-order-confirmation", ngImport: i0__namespace, template: "<form\n  *ngIf=\"form$ | async as form\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"submit(form)\"\n>\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items\n    *ngIf=\"entries$ | async as entries\"\n    [entries]=\"entries\"\n    [isConfirmation]=\"true\"\n  >\n  </cx-amend-order-items>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderReturn\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</form>\n", components: [{ type: CancelOrReturnItemsComponent, selector: "cx-amend-order-items", inputs: ["entries", "isConfirmation"] }, { type: AmendOrderActionsComponent, selector: "cx-amend-order-actions", inputs: ["orderCode", "amendOrderForm", "backRoute", "forwardRoute"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5__namespace.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5__namespace.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5__namespace.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderConfirmationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-return-order-confirmation',
                        templateUrl: './return-order-confirmation.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: OrderAmendService }]; } });

    var ReturnOrderConfirmationModule = /** @class */ (function () {
        function ReturnOrderConfirmationModule() {
        }
        return ReturnOrderConfirmationModule;
    }());
    ReturnOrderConfirmationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderConfirmationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReturnOrderConfirmationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderConfirmationModule, declarations: [ReturnOrderConfirmationComponent], imports: [i4.CommonModule,
            AmendOrderItemsModule,
            i1.I18nModule,
            i5.ReactiveFormsModule,
            AmendOrderActionsModule], exports: [ReturnOrderConfirmationComponent] });
    ReturnOrderConfirmationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderConfirmationModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    ReturnOrderConfirmationComponent: {
                        component: ReturnOrderConfirmationComponent,
                        guards: [i1.AuthGuard, OrderReturnGuard],
                        providers: [
                            {
                                provide: OrderAmendService,
                                useExisting: OrderReturnService,
                            },
                        ],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                AmendOrderItemsModule,
                i1.I18nModule,
                i5.ReactiveFormsModule,
                AmendOrderActionsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderConfirmationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            AmendOrderItemsModule,
                            i1.I18nModule,
                            i5.ReactiveFormsModule,
                            AmendOrderActionsModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    ReturnOrderConfirmationComponent: {
                                        component: ReturnOrderConfirmationComponent,
                                        guards: [i1.AuthGuard, OrderReturnGuard],
                                        providers: [
                                            {
                                                provide: OrderAmendService,
                                                useExisting: OrderReturnService,
                                            },
                                        ],
                                    },
                                },
                            }),
                        ],
                        declarations: [ReturnOrderConfirmationComponent],
                        exports: [ReturnOrderConfirmationComponent],
                    }]
            }] });

    var ReturnOrderComponent = /** @class */ (function () {
        function ReturnOrderComponent(orderAmendService) {
            var _this = this;
            this.orderAmendService = orderAmendService;
            this.form$ = this.orderAmendService
                .getForm()
                .pipe(operators.tap(function (form) { return (_this.orderCode = form.value.orderCode); }));
            this.entries$ = this.orderAmendService.getEntries();
        }
        return ReturnOrderComponent;
    }());
    ReturnOrderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderComponent, deps: [{ token: OrderAmendService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReturnOrderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReturnOrderComponent, selector: "cx-return-order", ngImport: i0__namespace, template: "<ng-container *ngIf=\"form$ | async as form\">\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items *ngIf=\"entries$ | async as entries\" [entries]=\"entries\">\n  </cx-amend-order-items>\n\n  <cx-form-errors\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    [control]=\"form.get('entries')\"\n  ></cx-form-errors>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderDetails\"\n      forwardRoute=\"orderReturnConfirmation\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</ng-container>\n", components: [{ type: CancelOrReturnItemsComponent, selector: "cx-amend-order-items", inputs: ["entries", "isConfirmation"] }, { type: i3__namespace$1.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: AmendOrderActionsComponent, selector: "cx-amend-order-actions", inputs: ["orderCode", "amendOrderForm", "backRoute", "forwardRoute"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i4__namespace.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-return-order',
                        templateUrl: './return-order.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: OrderAmendService }]; } });

    var ReturnOrderModule = /** @class */ (function () {
        function ReturnOrderModule() {
        }
        return ReturnOrderModule;
    }());
    ReturnOrderModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReturnOrderModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderModule, declarations: [ReturnOrderComponent], imports: [i4.CommonModule,
            AmendOrderItemsModule,
            AmendOrderActionsModule,
            i3$1.FormErrorsModule], exports: [ReturnOrderComponent] });
    ReturnOrderModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    ReturnOrderComponent: {
                        component: ReturnOrderComponent,
                        guards: [i1.AuthGuard],
                        providers: [
                            {
                                provide: OrderAmendService,
                                useExisting: OrderReturnService,
                            },
                        ],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                AmendOrderItemsModule,
                AmendOrderActionsModule,
                i3$1.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnOrderModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            AmendOrderItemsModule,
                            AmendOrderActionsModule,
                            i3$1.FormErrorsModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    ReturnOrderComponent: {
                                        component: ReturnOrderComponent,
                                        guards: [i1.AuthGuard],
                                        providers: [
                                            {
                                                provide: OrderAmendService,
                                                useExisting: OrderReturnService,
                                            },
                                        ],
                                    },
                                },
                            }),
                        ],
                        declarations: [ReturnOrderComponent],
                        exports: [ReturnOrderComponent],
                    }]
            }] });

    var OrderReturnModule = /** @class */ (function () {
        function OrderReturnModule() {
        }
        return OrderReturnModule;
    }());
    OrderReturnModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrderReturnModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnModule, imports: [ReturnOrderModule, ReturnOrderConfirmationModule] });
    OrderReturnModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnModule, imports: [[ReturnOrderModule, ReturnOrderConfirmationModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [ReturnOrderModule, ReturnOrderConfirmationModule],
                    }]
            }] });

    var OrderDetailActionsComponent = /** @class */ (function () {
        function OrderDetailActionsComponent(orderDetailsService) {
            this.orderDetailsService = orderDetailsService;
            this.order$ = this.orderDetailsService.getOrderDetails();
        }
        return OrderDetailActionsComponent;
    }());
    OrderDetailActionsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailActionsComponent, deps: [{ token: OrderDetailsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderDetailActionsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderDetailActionsComponent, selector: "cx-order-details-actions", ngImport: i0__namespace, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"cx-nav row\">\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <button\n        [routerLink]=\"{ cxRoute: 'orders' } | cxUrl\"\n        class=\"btn btn-block btn-action\"\n      >\n        {{ 'common.back' | cxTranslate }}\n      </button>\n    </div>\n\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <a\n        *ngIf=\"order.cancellable\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orderCancel',\n            params: order\n          } | cxUrl\n        \"\n        class=\"btn btn-block btn-action\"\n      >\n        {{ 'orderDetails.cancellationAndReturn.cancelAction' | cxTranslate }}\n      </a>\n\n      <a\n        *ngIf=\"order.returnable\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orderReturn',\n            params: order\n          } | cxUrl\n        \"\n        class=\"btn btn-block btn-action\"\n      >\n        {{ 'orderDetails.cancellationAndReturn.returnAction' | cxTranslate }}\n      </a>\n    </div>\n  </div>\n</ng-container>\n", directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxUrl": i1__namespace.UrlPipe, "cxTranslate": i1__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailActionsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-details-actions',
                        templateUrl: './order-detail-actions.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: OrderDetailsService }]; } });

    var TrackingEventsComponent = /** @class */ (function () {
        function TrackingEventsComponent(activeModal, userOrderService) {
            this.activeModal = activeModal;
            this.userOrderService = userOrderService;
        }
        TrackingEventsComponent.prototype.ngOnDestroy = function () {
            this.userOrderService.clearConsignmentTracking();
        };
        return TrackingEventsComponent;
    }());
    TrackingEventsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: TrackingEventsComponent, deps: [{ token: i1__namespace$1.NgbActiveModal }, { token: i2__namespace.OrderFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TrackingEventsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: TrackingEventsComponent, selector: "cx-tracking-events", ngImport: i0__namespace, template: "<div class=\"cx-consignment-tracking-dialog\">\n  <!-- Modal Header -->\n  <ng-container *ngIf=\"tracking$ | async as consignmentTracking; else loading\">\n    <div class=\"header modal-header\">\n      <div class=\"title modal-title\">\n        {{ 'orderDetails.consignmentTracking.dialog.header' | cxTranslate }}\n      </div>\n      <button\n        type=\"button\"\n        class=\"close\"\n        [attr.aria-label]=\"'common.close' | cxTranslate\"\n        (click)=\"activeModal.dismiss('Cross click')\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <!-- Modal Body -->\n    <!-- shipment header -->\n    <ng-container\n      *ngIf=\"\n        consignmentTracking?.carrierDetails && consignmentTracking?.trackingID;\n        else noTracking\n      \"\n    >\n      <div class=\"shipment-heading\">\n        <div class=\"row\">\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.shipped' | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              {{ shipDate | cxDate: 'medium' }}\n            </div>\n          </div>\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.estimate' | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              {{ consignmentTracking?.targetArrivalDate | cxDate: 'medium' }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.carrier' | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              {{ consignmentTracking?.carrierDetails?.name }}\n            </div>\n          </div>\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.trackingId'\n                  | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              <ng-container *ngIf=\"consignmentTracking?.trackingUrl\">\n                <a target=\"_blank\" [href]=\"consignmentTracking.trackingUrl\">{{\n                  consignmentTracking?.trackingID\n                }}</a>\n              </ng-container>\n              <ng-container *ngIf=\"!consignmentTracking?.trackingUrl\">\n                <label>\n                  {{ consignmentTracking?.trackingID }}\n                </label>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- tracking events -->\n    <div class=\"events modal-body\">\n      <ng-container\n        *ngFor=\"let consignmentEvent of consignmentTracking.trackingEvents\"\n      >\n        <div class=\"event-body\">\n          <div class=\"event-content\">\n            {{ consignmentEvent.eventDate | cxDate: 'medium' }}\n          </div>\n          <div class=\"event-title\">\n            {{ consignmentEvent.referenceCode }}\n          </div>\n          <div class=\"event-content\">{{ consignmentEvent.detail }}</div>\n          <div class=\"event-city\">\n            location: {{ consignmentEvent.location }}\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <ng-template #noTracking>\n    <div class=\"no-tracking-heading\">\n      <div class=\"shipment-content\">\n        {{ 'orderDetails.consignmentTracking.dialog.noTracking' | cxTranslate }}\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #loading>\n    <div class=\"tracking-loading\">\n      <div class=\"header modal-header\">\n        <div class=\"title modal-title\">\n          {{\n            'orderDetails.consignmentTracking.dialog.loadingHeader'\n              | cxTranslate\n          }}\n        </div>\n        <button\n          type=\"button\"\n          class=\"close btn-dismiss\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"activeModal.dismiss('Cross click')\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"body modal-body\">\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            <cx-spinner></cx-spinner>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</div>\n", components: [{ type: i3__namespace$1.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe, "cxDate": i1__namespace.CxDatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: TrackingEventsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-tracking-events',
                        templateUrl: './tracking-events.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.NgbActiveModal }, { type: i2__namespace.OrderFacade }]; } });

    var ConsignmentTrackingComponent = /** @class */ (function () {
        function ConsignmentTrackingComponent(userOrderService, modalService) {
            this.userOrderService = userOrderService;
            this.modalService = modalService;
            this.consignmentStatus = [
                'SHIPPED',
                'IN_TRANSIT',
                'DELIVERY_COMPLETED',
                'DELIVERY_REJECTED',
                'DELIVERING',
            ];
        }
        ConsignmentTrackingComponent.prototype.ngOnInit = function () {
            this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();
        };
        ConsignmentTrackingComponent.prototype.openTrackingDialog = function (consignment) {
            if (consignment.code) {
                this.userOrderService.loadConsignmentTracking(this.orderCode, consignment.code);
            }
            var modalInstance;
            this.modalRef = this.modalService.open(TrackingEventsComponent, {
                centered: true,
                size: 'lg',
            });
            modalInstance = this.modalRef.componentInstance;
            modalInstance.tracking$ = this.consignmentTracking$;
            modalInstance.shipDate = consignment.statusDate;
            modalInstance.consignmentCode = consignment.code;
        };
        ConsignmentTrackingComponent.prototype.ngOnDestroy = function () {
            this.userOrderService.clearConsignmentTracking();
        };
        return ConsignmentTrackingComponent;
    }());
    ConsignmentTrackingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConsignmentTrackingComponent, deps: [{ token: i2__namespace.OrderFacade }, { token: i3__namespace$1.ModalService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ConsignmentTrackingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ConsignmentTrackingComponent, selector: "cx-consignment-tracking", inputs: { consignment: "consignment", orderCode: "orderCode" }, ngImport: i0__namespace, template: "<ng-container *ngIf=\"consignment && consignment.status\">\n  <div *ngIf=\"consignmentStatus.includes(consignment.status)\">\n    <button\n      (click)=\"openTrackingDialog(consignment)\"\n      class=\"btn btn-action btn-track\"\n      type=\"button\"\n    >\n      {{ 'orderDetails.consignmentTracking.action' | cxTranslate }}\n    </button>\n  </div>\n</ng-container>\n", directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ConsignmentTrackingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-consignment-tracking',
                        templateUrl: './consignment-tracking.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.OrderFacade }, { type: i3__namespace$1.ModalService }]; }, propDecorators: { consignment: [{
                    type: i0.Input
                }], orderCode: [{
                    type: i0.Input
                }] } });

    var OrderConsignedEntriesComponent = /** @class */ (function () {
        function OrderConsignedEntriesComponent() {
            this.promotionLocation = i1.PromotionLocation.Order;
        }
        OrderConsignedEntriesComponent.prototype.getConsignmentProducts = function (consignment) {
            var _a;
            var products = [];
            (_a = consignment.entries) === null || _a === void 0 ? void 0 : _a.forEach(function (element) {
                if (element.orderEntry) {
                    products.push(element.orderEntry);
                }
            });
            return products;
        };
        return OrderConsignedEntriesComponent;
    }());
    OrderConsignedEntriesComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConsignedEntriesComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderConsignedEntriesComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderConsignedEntriesComponent, selector: "cx-order-consigned-entries", inputs: { consignments: "consignments", order: "order" }, ngImport: i0__namespace, template: "<div *ngFor=\"let consignment of consignments\" class=\"cx-list row\">\n  <div class=\"cx-list-header col-12\">\n    <div class=\"cx-list-status\">\n      <span *ngIf=\"consignment\">\n        {{ 'orderDetails.deliveryStatus_' + consignment?.status | cxTranslate }}\n      </span>\n    </div>\n    <div *ngIf=\"consignment?.statusDate\" class=\"cx-list-date\">\n      <div>{{ consignment?.statusDate | cxDate }}</div>\n    </div>\n\n    <cx-consignment-tracking\n      [orderCode]=\"order.code\"\n      [consignment]=\"consignment\"\n      *cxFeature=\"'consignmentTracking'\"\n    >\n    </cx-consignment-tracking>\n  </div>\n  <div class=\"cx-list-item col-12\">\n    <cx-cart-item-list\n      [items]=\"consignment.entries\"\n      [readonly]=\"true\"\n      [promotionLocation]=\"promotionLocation\"\n    ></cx-cart-item-list>\n  </div>\n</div>\n", components: [{ type: ConsignmentTrackingComponent, selector: "cx-consignment-tracking", inputs: ["consignment", "orderCode"] }, { type: i3__namespace$1.CartItemListComponent, selector: "cx-cart-item-list", inputs: ["readonly", "hasHeader", "options", "cartId", "items", "promotionLocation", "cartIsLoading"] }], directives: [{ type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1__namespace.FeatureDirective, selector: "[cxFeature]", inputs: ["cxFeature"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe, "cxDate": i1__namespace.CxDatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConsignedEntriesComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-consigned-entries',
                        templateUrl: './order-consigned-entries.component.html',
                    }]
            }], propDecorators: { consignments: [{
                    type: i0.Input
                }], order: [{
                    type: i0.Input
                }] } });

    var completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];
    var cancelledValues = ['CANCELLED'];

    var OrderDetailItemsComponent = /** @class */ (function () {
        function OrderDetailItemsComponent(orderDetailsService) {
            this.orderDetailsService = orderDetailsService;
            this.promotionLocation = i1.PromotionLocation.Order;
            this.order$ = this.orderDetailsService.getOrderDetails();
        }
        OrderDetailItemsComponent.prototype.ngOnInit = function () {
            this.others$ = this.getOtherStatus.apply(this, __spreadArray(__spreadArray([], __read(completedValues)), __read(cancelledValues)));
            this.completed$ = this.getExactStatus(completedValues);
            this.cancel$ = this.getExactStatus(cancelledValues);
        };
        OrderDetailItemsComponent.prototype.getExactStatus = function (consignmentStatus) {
            return this.order$.pipe(operators.map(function (order) {
                var _a;
                if (Boolean(order.consignments)) {
                    return (_a = order.consignments) === null || _a === void 0 ? void 0 : _a.filter(function (consignment) { return consignment.status &&
                        consignmentStatus.includes(consignment.status); });
                }
            }));
        };
        OrderDetailItemsComponent.prototype.getOtherStatus = function () {
            var consignmentStatus = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                consignmentStatus[_i] = arguments[_i];
            }
            return this.order$.pipe(operators.map(function (order) {
                var _a;
                if (Boolean(order.consignments)) {
                    return (_a = order.consignments) === null || _a === void 0 ? void 0 : _a.filter(function (consignment) { return consignment.status &&
                        !consignmentStatus.includes(consignment.status); });
                }
            }));
        };
        return OrderDetailItemsComponent;
    }());
    OrderDetailItemsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailItemsComponent, deps: [{ token: OrderDetailsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderDetailItemsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderDetailItemsComponent, selector: "cx-order-details-items", ngImport: i0__namespace, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <ng-container\n    *ngIf=\"\n      order.consignments?.length ||\n      order.unconsignedEntries?.length ||\n      order.replenishmentOrderCode\n    \"\n  >\n    <cx-promotions\n      [promotions]=\"order.appliedOrderPromotions || []\"\n    ></cx-promotions>\n  </ng-container>\n\n  <!-- consigned entries -->\n  <ng-container *ngIf=\"order.consignments?.length\">\n    <cx-order-consigned-entries\n      *ngIf=\"others$ | async as others\"\n      [order]=\"order\"\n      [consignments]=\"others\"\n    ></cx-order-consigned-entries>\n\n    <cx-order-consigned-entries\n      *ngIf=\"completed$ | async as completed\"\n      [order]=\"order\"\n      [consignments]=\"completed\"\n    ></cx-order-consigned-entries>\n\n    <cx-order-consigned-entries\n      *ngIf=\"cancel$ | async as cancel\"\n      [order]=\"order\"\n      [consignments]=\"cancel\"\n    ></cx-order-consigned-entries>\n  </ng-container>\n\n  <!-- unconsigned entries OR any entries -->\n  <ng-container\n    *ngIf=\"\n      order?.unconsignedEntries?.length ||\n      (order?.entries && order?.replenishmentOrderCode)\n    \"\n  >\n    <div class=\"cx-list row\">\n      <div *ngIf=\"order?.statusDisplay\" class=\"cx-list-header col-12\">\n        <div class=\"cx-list-status\">\n          {{\n            'orderDetails.statusDisplay_' + order?.statusDisplay | cxTranslate\n          }}\n        </div>\n      </div>\n      <div class=\"cx-list-item col-12\">\n        <cx-cart-item-list\n          [items]=\"\n            order?.unconsignedEntries ? order.unconsignedEntries : order.entries\n          \"\n          [readonly]=\"true\"\n          [promotionLocation]=\"promotionLocation\"\n        ></cx-cart-item-list>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n", components: [{ type: i3__namespace$1.PromotionsComponent, selector: "cx-promotions", inputs: ["promotions"] }, { type: OrderConsignedEntriesComponent, selector: "cx-order-consigned-entries", inputs: ["consignments", "order"] }, { type: i3__namespace$1.CartItemListComponent, selector: "cx-cart-item-list", inputs: ["readonly", "hasHeader", "options", "cartId", "items", "promotionLocation", "cartIsLoading"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailItemsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-details-items',
                        templateUrl: './order-detail-items.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: OrderDetailsService }]; } });

    var OrderDetailShippingComponent = /** @class */ (function () {
        function OrderDetailShippingComponent(orderDetailsService) {
            this.orderDetailsService = orderDetailsService;
        }
        OrderDetailShippingComponent.prototype.ngOnInit = function () {
            this.order$ = this.orderDetailsService.getOrderDetails();
        };
        return OrderDetailShippingComponent;
    }());
    OrderDetailShippingComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailShippingComponent, deps: [{ token: OrderDetailsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderDetailShippingComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderDetailShippingComponent, selector: "cx-order-details-shipping", ngImport: i0__namespace, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <cx-order-overview [order]=\"order\"></cx-order-overview>\n</ng-container>\n", components: [{ type: i3__namespace$1.OrderOverviewComponent, selector: "cx-order-overview", inputs: ["order"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailShippingComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-details-shipping',
                        templateUrl: './order-detail-shipping.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: OrderDetailsService }]; } });

    var OrderDetailTotalsComponent = /** @class */ (function () {
        function OrderDetailTotalsComponent(orderDetailsService) {
            this.orderDetailsService = orderDetailsService;
        }
        OrderDetailTotalsComponent.prototype.ngOnInit = function () {
            this.order$ = this.orderDetailsService.getOrderDetails();
        };
        return OrderDetailTotalsComponent;
    }());
    OrderDetailTotalsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailTotalsComponent, deps: [{ token: OrderDetailsService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderDetailTotalsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderDetailTotalsComponent, selector: "cx-order-details-totals", ngImport: i0__namespace, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"row justify-content-end\">\n    <div class=\"cx-summary col-sm-12 col-md-6 col-lg-5 col-xl-4\">\n      <cx-order-summary [cart]=\"order\"></cx-order-summary>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i3__namespace$1.OrderSummaryComponent, selector: "cx-order-summary", inputs: ["cart"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailTotalsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-details-totals',
                        templateUrl: './order-detail-totals.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: OrderDetailsService }]; } });

    var moduleComponents$1 = [
        OrderDetailActionsComponent,
        OrderDetailItemsComponent,
        OrderDetailTotalsComponent,
        OrderDetailShippingComponent,
        TrackingEventsComponent,
        ConsignmentTrackingComponent,
        OrderConsignedEntriesComponent,
    ];
    var OrderDetailsModule = /** @class */ (function () {
        function OrderDetailsModule() {
        }
        return OrderDetailsModule;
    }());
    OrderDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrderDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsModule, declarations: [OrderDetailActionsComponent,
            OrderDetailItemsComponent,
            OrderDetailTotalsComponent,
            OrderDetailShippingComponent,
            TrackingEventsComponent,
            ConsignmentTrackingComponent,
            OrderConsignedEntriesComponent], imports: [i3$1.CartSharedModule,
            i3$1.CardModule,
            i4.CommonModule,
            i1.I18nModule,
            i1.FeaturesConfigModule,
            i3$1.PromotionsModule,
            i3$1.OrderOverviewModule,
            i1.UrlModule,
            i3$1.SpinnerModule,
            i3.RouterModule], exports: [OrderDetailActionsComponent,
            OrderDetailItemsComponent,
            OrderDetailTotalsComponent,
            OrderDetailShippingComponent,
            TrackingEventsComponent,
            ConsignmentTrackingComponent,
            OrderConsignedEntriesComponent] });
    OrderDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    AccountOrderDetailsActionsComponent: {
                        component: OrderDetailActionsComponent,
                    },
                    AccountOrderDetailsItemsComponent: {
                        component: OrderDetailItemsComponent,
                    },
                    AccountOrderDetailsTotalsComponent: {
                        component: OrderDetailTotalsComponent,
                    },
                    AccountOrderDetailsShippingComponent: {
                        component: OrderDetailShippingComponent,
                    },
                },
                features: {
                    consignmentTracking: '1.2',
                },
            }),
            {
                provide: i3$1.OrderDetailsServiceTransitionalToken,
                useExisting: OrderDetailsService,
            },
        ], imports: [[
                i3$1.CartSharedModule,
                i3$1.CardModule,
                i4.CommonModule,
                i1.I18nModule,
                i1.FeaturesConfigModule,
                i3$1.PromotionsModule,
                i3$1.OrderOverviewModule,
                i1.UrlModule,
                i3$1.SpinnerModule,
                i3.RouterModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$1.CartSharedModule,
                            i3$1.CardModule,
                            i4.CommonModule,
                            i1.I18nModule,
                            i1.FeaturesConfigModule,
                            i3$1.PromotionsModule,
                            i3$1.OrderOverviewModule,
                            i1.UrlModule,
                            i3$1.SpinnerModule,
                            i3.RouterModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    AccountOrderDetailsActionsComponent: {
                                        component: OrderDetailActionsComponent,
                                    },
                                    AccountOrderDetailsItemsComponent: {
                                        component: OrderDetailItemsComponent,
                                    },
                                    AccountOrderDetailsTotalsComponent: {
                                        component: OrderDetailTotalsComponent,
                                    },
                                    AccountOrderDetailsShippingComponent: {
                                        component: OrderDetailShippingComponent,
                                    },
                                },
                                features: {
                                    consignmentTracking: '1.2',
                                },
                            }),
                            {
                                provide: i3$1.OrderDetailsServiceTransitionalToken,
                                useExisting: OrderDetailsService,
                            },
                        ],
                        declarations: __spreadArray([], __read(moduleComponents$1)),
                        exports: __spreadArray([], __read(moduleComponents$1)),
                    }]
            }] });

    var OrderHistoryComponent = /** @class */ (function () {
        function OrderHistoryComponent(routing, userOrderService, translation, userReplenishmentOrderService) {
            var _this = this;
            this.routing = routing;
            this.userOrderService = userOrderService;
            this.translation = translation;
            this.userReplenishmentOrderService = userReplenishmentOrderService;
            this.PAGE_SIZE = 5;
            this.orders$ = this.userOrderService
                .getOrderHistoryList(this.PAGE_SIZE)
                .pipe(operators.tap(function (orders) {
                var _a;
                if ((_a = orders === null || orders === void 0 ? void 0 : orders.pagination) === null || _a === void 0 ? void 0 : _a.sort) {
                    _this.sortType = orders.pagination.sort;
                }
            }));
            this.hasReplenishmentOrder$ = this.userReplenishmentOrderService
                .getReplenishmentOrderDetails()
                .pipe(operators.map(function (order) { return order && Object.keys(order).length !== 0; }));
            this.isLoaded$ = this.userOrderService.getOrderHistoryListLoaded();
            /**
             * When "Order Return" feature is enabled, this component becomes one tab in
             * TabParagraphContainerComponent. This can be read from TabParagraphContainer.
             */
            this.tabTitleParam$ = this.orders$.pipe(operators.map(function (order) { var _a; return (_a = order === null || order === void 0 ? void 0 : order.pagination) === null || _a === void 0 ? void 0 : _a.totalResults; }), operators.filter(i1.isNotUndefined), operators.take(1));
        }
        OrderHistoryComponent.prototype.ngOnDestroy = function () {
            this.userOrderService.clearOrderList();
        };
        OrderHistoryComponent.prototype.changeSortCode = function (sortCode) {
            var event = {
                sortCode: sortCode,
                currentPage: 0,
            };
            this.sortType = sortCode;
            this.fetchOrders(event);
        };
        OrderHistoryComponent.prototype.pageChange = function (page) {
            var event = {
                sortCode: this.sortType,
                currentPage: page,
            };
            this.fetchOrders(event);
        };
        OrderHistoryComponent.prototype.goToOrderDetail = function (order) {
            this.routing.go({
                cxRoute: 'orderDetails',
                params: order,
            });
        };
        OrderHistoryComponent.prototype.getSortLabels = function () {
            return rxjs.combineLatest([
                this.translation.translate('sorting.date'),
                this.translation.translate('sorting.orderNumber'),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), textByDate = _c[0], textByOrderNumber = _c[1];
                return {
                    byDate: textByDate,
                    byOrderNumber: textByOrderNumber,
                };
            }));
        };
        OrderHistoryComponent.prototype.fetchOrders = function (event) {
            this.userOrderService.loadOrderList(this.PAGE_SIZE, event.currentPage, event.sortCode);
        };
        return OrderHistoryComponent;
    }());
    OrderHistoryComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderHistoryComponent, deps: [{ token: i1__namespace.RoutingService }, { token: i2__namespace.OrderFacade }, { token: i1__namespace.TranslationService }, { token: i2__namespace.ReplenishmentOrderFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderHistoryComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderHistoryComponent, selector: "cx-order-history", ngImport: i0__namespace, template: "<ng-container\n  *ngIf=\"{\n    orderHistory: orders$ | async,\n    replenishmentOrder: hasReplenishmentOrder$ | async\n  } as type\"\n>\n  <ng-container *ngIf=\"type.orderHistory\">\n    <div [ngClass]=\"type.replenishmentOrder ? '' : 'container'\">\n      <!-- HEADER -->\n      <div\n        [ngClass]=\"\n          type.replenishmentOrder\n            ? 'cx-replenishment-details-order-history-header'\n            : 'cx-order-history-header'\n        \"\n      >\n        <h4 *ngIf=\"type.replenishmentOrder\">\n          {{ 'orderHistory.replenishmentHistory' | cxTranslate }}\n        </h4>\n        <h3 *ngIf=\"!type.replenishmentOrder\">\n          {{ 'orderHistory.orderHistory' | cxTranslate }}\n        </h3>\n      </div>\n\n      <!-- BODY -->\n      <div class=\"cx-order-history-body\">\n        <ng-container\n          *ngIf=\"type.orderHistory.pagination.totalResults > 0; else noOrder\"\n        >\n          <!-- Select Form and Pagination Top -->\n          <div class=\"cx-order-history-sort top row\">\n            <label\n              class=\"\n                cx-order-history-form-group\n                form-group\n                col-sm-12 col-md-4 col-lg-4\n              \"\n              ><span>\n                {{ 'orderHistory.sortBy' | cxTranslate }}\n              </span>\n              <cx-sorting\n                [sortOptions]=\"type.orderHistory.sorts\"\n                [sortLabels]=\"getSortLabels() | async\"\n                (sortListEvent)=\"changeSortCode($event)\"\n                [selectedOption]=\"type.orderHistory.pagination.sort\"\n                placeholder=\"{{ 'orderHistory.sortBy' | cxTranslate }}\"\n              ></cx-sorting>\n            </label>\n            <div\n              *ngIf=\"type.orderHistory.pagination.totalPages > 1\"\n              class=\"cx-order-history-pagination\"\n            >\n              <cx-pagination\n                [pagination]=\"type.orderHistory.pagination\"\n                (viewPageEvent)=\"pageChange($event)\"\n              ></cx-pagination>\n            </div>\n          </div>\n          <!-- TABLE -->\n          <table class=\"table cx-order-history-table\">\n            <thead class=\"cx-order-history-thead-mobile\">\n              <th scope=\"col\">\n                {{ 'orderHistory.orderId' | cxTranslate }}\n              </th>\n              <th scope=\"col\">{{ 'orderHistory.date' | cxTranslate }}</th>\n              <th scope=\"col\">\n                {{ 'orderHistory.status' | cxTranslate }}\n              </th>\n              <th scope=\"col\">{{ 'orderHistory.total' | cxTranslate }}</th>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let order of type.orderHistory.orders\"\n                (click)=\"goToOrderDetail(order)\"\n              >\n                <td class=\"cx-order-history-code\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.orderId' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                  >\n                    {{ order?.code }}</a\n                  >\n                </td>\n                <td class=\"cx-order-history-placed\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.date' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                    >{{ order?.placed | cxDate: 'longDate' }}</a\n                  >\n                </td>\n                <td class=\"cx-order-history-status\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.status' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                  >\n                    {{\n                      'orderDetails.statusDisplay_' + order?.statusDisplay\n                        | cxTranslate\n                    }}</a\n                  >\n                </td>\n                <td class=\"cx-order-history-total\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.total' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                  >\n                    {{ order?.total.formattedValue }}</a\n                  >\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- Select Form and Pagination Bottom -->\n          <div class=\"cx-order-history-sort bottom row\">\n            <div\n              *ngIf=\"type.orderHistory.pagination.totalPages > 1\"\n              class=\"cx-order-history-pagination\"\n            >\n              <cx-pagination\n                [pagination]=\"type.orderHistory.pagination\"\n                (viewPageEvent)=\"pageChange($event)\"\n              ></cx-pagination>\n            </div>\n          </div>\n        </ng-container>\n\n        <!-- NO ORDER CONTAINER -->\n        <ng-template #noOrder>\n          <div\n            *ngIf=\"isLoaded$ | async\"\n            [ngClass]=\"\n              type.replenishmentOrder\n                ? 'cx-replenishment-details-order-history-no-order row'\n                : 'cx-order-history-no-order row'\n            \"\n          >\n            <div\n              [ngClass]=\"\n                type.replenishmentOrder ? '' : 'col-sm-12 col-md-6 col-lg-4'\n              \"\n            >\n              <ng-container *ngIf=\"type.replenishmentOrder; else otherOrder\">\n                <div>{{ 'orderHistory.notFound' | cxTranslate }}</div>\n              </ng-container>\n\n              <ng-template #otherOrder>\n                <div>{{ 'orderHistory.noOrders' | cxTranslate }}</div>\n                <a\n                  [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n                  routerLinkActive=\"active\"\n                  class=\"btn btn-primary btn-block\"\n                  >{{ 'orderHistory.startShopping' | cxTranslate }}</a\n                >\n              </ng-template>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n", components: [{ type: i3__namespace$1.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { type: i3__namespace$1.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i3__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe, "cxUrl": i1__namespace.UrlPipe, "cxDate": i1__namespace.CxDatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderHistoryComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-history',
                        templateUrl: './order-history.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RoutingService }, { type: i2__namespace.OrderFacade }, { type: i1__namespace.TranslationService }, { type: i2__namespace.ReplenishmentOrderFacade }]; } });

    var OrderHistoryModule = /** @class */ (function () {
        function OrderHistoryModule() {
        }
        return OrderHistoryModule;
    }());
    OrderHistoryModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderHistoryModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrderHistoryModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderHistoryModule, declarations: [OrderHistoryComponent], imports: [i4.CommonModule,
            i3.RouterModule,
            i5.FormsModule,
            ngSelect.NgSelectModule,
            i3$1.ListNavigationModule,
            i1.UrlModule,
            i1.I18nModule], exports: [OrderHistoryComponent] });
    OrderHistoryModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderHistoryModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    AccountOrderHistoryComponent: {
                        component: OrderHistoryComponent,
                        guards: [i1.AuthGuard],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                i3.RouterModule,
                i5.FormsModule,
                ngSelect.NgSelectModule,
                i3$1.ListNavigationModule,
                i1.UrlModule,
                i1.I18nModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderHistoryModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i3.RouterModule,
                            i5.FormsModule,
                            ngSelect.NgSelectModule,
                            i3$1.ListNavigationModule,
                            i1.UrlModule,
                            i1.I18nModule,
                        ],
                        declarations: [OrderHistoryComponent],
                        exports: [OrderHistoryComponent],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    AccountOrderHistoryComponent: {
                                        component: OrderHistoryComponent,
                                        guards: [i1.AuthGuard],
                                    },
                                },
                            }),
                        ],
                    }]
            }] });

    var ReplenishmentOrderCancellationDialogComponent = /** @class */ (function () {
        function ReplenishmentOrderCancellationDialogComponent(userReplenishmentOrderService, globalMessageService, launchDialogService, el) {
            this.userReplenishmentOrderService = userReplenishmentOrderService;
            this.globalMessageService = globalMessageService;
            this.launchDialogService = launchDialogService;
            this.el = el;
            this.subscription = new rxjs.Subscription();
            this.focusConfig = {
                trap: true,
                block: true,
                autofocus: 'button',
                focusOnEscape: true,
            };
        }
        ReplenishmentOrderCancellationDialogComponent.prototype.handleClick = function (event) {
            // Close on click outside the dialog window
            if (event.target.tagName === this.el.nativeElement.tagName) {
                this.close('Cross click');
            }
        };
        ReplenishmentOrderCancellationDialogComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription.add(rxjs.combineLatest([
                this.userReplenishmentOrderService
                    .getReplenishmentOrderDetails()
                    .pipe(operators.startWith(null)),
                this.launchDialogService.data$,
            ]).subscribe(function (_a) {
                var _b = __read(_a, 2), replenishmentOrder = _b[0], code = _b[1];
                _this.replenishmentOrderCode =
                    code || (replenishmentOrder === null || replenishmentOrder === void 0 ? void 0 : replenishmentOrder.replenishmentOrderCode);
            }));
            this.subscription.add(this.userReplenishmentOrderService
                .getCancelReplenishmentOrderSuccess()
                .subscribe(function (value) { return _this.onSuccess(value); }));
        };
        ReplenishmentOrderCancellationDialogComponent.prototype.onSuccess = function (value) {
            if (value) {
                this.launchDialogService.closeDialog('Successffully cancelled replenishment');
                this.globalMessageService.add({
                    key: 'orderDetails.cancelReplenishment.cancelSuccess',
                    params: {
                        replenishmentOrderCode: this.replenishmentOrderCode,
                    },
                }, i1.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            }
            this.userReplenishmentOrderService.clearCancelReplenishmentOrderProcessState();
        };
        ReplenishmentOrderCancellationDialogComponent.prototype.close = function (reason) {
            this.launchDialogService.closeDialog(reason);
        };
        ReplenishmentOrderCancellationDialogComponent.prototype.cancelReplenishment = function () {
            this.userReplenishmentOrderService.cancelReplenishmentOrder(this.replenishmentOrderCode);
        };
        ReplenishmentOrderCancellationDialogComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return ReplenishmentOrderCancellationDialogComponent;
    }());
    ReplenishmentOrderCancellationDialogComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationDialogComponent, deps: [{ token: i2__namespace.ReplenishmentOrderFacade }, { token: i1__namespace.GlobalMessageService }, { token: i3__namespace$1.LaunchDialogService }, { token: i0__namespace.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReplenishmentOrderCancellationDialogComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReplenishmentOrderCancellationDialogComponent, selector: "cx-replenishment-order-cancellation-dialog", host: { listeners: { "click": "handleClick($event)" } }, ngImport: i0__namespace, template: "<div\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"close('Escape clicked')\"\n  class=\"cx-cancel-replenishment-dialog-foreground\"\n>\n  <div class=\"cx-cancel-replenishment-dialog-content\">\n    <div class=\"cx-cancel-replenishment-dialog-header\">\n      <h3>\n        {{ 'orderDetails.cancelReplenishment.title' | cxTranslate }}\n      </h3>\n    </div>\n    <div class=\"cx-cancel-replenishment-dialog-description\">\n      {{ 'orderDetails.cancelReplenishment.description' | cxTranslate }}\n    </div>\n\n    <div class=\"cx-cancel-replenishment-dialog-body\">\n      <div class=\"cx-cancel-replenishment-btns row\">\n        <div class=\"col-md-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"close('Close Replenishment Dialog')\"\n          >\n            {{ 'orderDetails.cancelReplenishment.reject' | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-6\">\n          <button\n            class=\"btn btn-block btn-primary\"\n            (click)=\"cancelReplenishment()\"\n          >\n            {{ 'orderDetails.cancelReplenishment.accept' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i3__namespace$1.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationDialogComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-replenishment-order-cancellation-dialog',
                        templateUrl: './replenishment-order-cancellation-dialog.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ReplenishmentOrderFacade }, { type: i1__namespace.GlobalMessageService }, { type: i3__namespace$1.LaunchDialogService }, { type: i0__namespace.ElementRef }]; }, propDecorators: { handleClick: [{
                    type: i0.HostListener,
                    args: ['click', ['$event']]
                }] } });

    var ReplenishmentOrderCancellationDialogModule = /** @class */ (function () {
        function ReplenishmentOrderCancellationDialogModule() {
        }
        return ReplenishmentOrderCancellationDialogModule;
    }());
    ReplenishmentOrderCancellationDialogModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationDialogModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReplenishmentOrderCancellationDialogModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationDialogModule, declarations: [ReplenishmentOrderCancellationDialogComponent], imports: [i4.CommonModule, i1.I18nModule, i3$1.KeyboardFocusModule], exports: [ReplenishmentOrderCancellationDialogComponent] });
    ReplenishmentOrderCancellationDialogModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationDialogModule, imports: [[i4.CommonModule, i1.I18nModule, i3$1.KeyboardFocusModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationDialogModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i4.CommonModule, i1.I18nModule, i3$1.KeyboardFocusModule],
                        declarations: [ReplenishmentOrderCancellationDialogComponent],
                        exports: [ReplenishmentOrderCancellationDialogComponent],
                    }]
            }] });

    var defaultReplenishmentOrderCancellationLayoutConfig = {
        launch: {
            REPLENISHMENT_ORDER: {
                inline: true,
                component: ReplenishmentOrderCancellationDialogComponent,
                dialogType: i3$1.DIALOG_TYPE.DIALOG,
            },
        },
    };

    var ReplenishmentOrderCancellationComponent = /** @class */ (function () {
        function ReplenishmentOrderCancellationComponent(userReplenishmentOrderService, vcr, launchDialogService) {
            this.userReplenishmentOrderService = userReplenishmentOrderService;
            this.vcr = vcr;
            this.launchDialogService = launchDialogService;
            this.subscription = new rxjs.Subscription();
            this.replenishmentOrder$ = this.userReplenishmentOrderService.getReplenishmentOrderDetails();
        }
        ReplenishmentOrderCancellationComponent.prototype.openDialog = function () {
            var dialog = this.launchDialogService.openDialog("REPLENISHMENT_ORDER" /* REPLENISHMENT_ORDER */, this.element, this.vcr);
            if (dialog) {
                this.subscription.add(dialog.pipe(operators.take(1)).subscribe());
            }
        };
        ReplenishmentOrderCancellationComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
            this.userReplenishmentOrderService.clearReplenishmentOrderDetails();
        };
        return ReplenishmentOrderCancellationComponent;
    }());
    ReplenishmentOrderCancellationComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationComponent, deps: [{ token: i2__namespace.ReplenishmentOrderFacade }, { token: i0__namespace.ViewContainerRef }, { token: i3__namespace$1.LaunchDialogService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReplenishmentOrderCancellationComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReplenishmentOrderCancellationComponent, selector: "cx-replenishment-order-cancellation", viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"cx-cancel-replenishment-btns row\">\n  <div class=\"col-xs-12 col-md-5 col-lg-4\">\n    <a\n      class=\"btn btn-block btn-action\"\n      [routerLink]=\"\n        {\n          cxRoute: 'replenishmentOrders'\n        } | cxUrl\n      \"\n    >\n      {{ 'common.back' | cxTranslate }}\n    </a>\n  </div>\n  <div\n    *ngIf=\"(replenishmentOrder$ | async)?.active\"\n    class=\"col-xs-12 col-md-5 col-lg-4\"\n  >\n    <button #element class=\"btn btn-block btn-action\" (click)=\"openDialog()\">\n      {{ 'orderDetails.cancelReplenishment.title' | cxTranslate }}\n    </button>\n  </div>\n</div>\n", directives: [{ type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxUrl": i1__namespace.UrlPipe, "cxTranslate": i1__namespace.TranslatePipe, "async": i4__namespace.AsyncPipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderCancellationComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-replenishment-order-cancellation',
                        templateUrl: './replenishment-order-cancellation.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.ReplenishmentOrderFacade }, { type: i0__namespace.ViewContainerRef }, { type: i3__namespace$1.LaunchDialogService }]; }, propDecorators: { element: [{
                    type: i0.ViewChild,
                    args: ['element']
                }] } });

    var ReplenishmentOrderDetailsService = /** @class */ (function () {
        function ReplenishmentOrderDetailsService(routingService, userReplenishmentOrderService) {
            var _this = this;
            this.routingService = routingService;
            this.userReplenishmentOrderService = userReplenishmentOrderService;
            this.replenishmentOrderCode$ = this.routingService.getRouterState().pipe(operators.map(function (routingData) { return routingData.state.params.replenishmentOrderCode; }), operators.distinctUntilChanged());
            this.replenishmentOrderLoad$ = this.replenishmentOrderCode$.pipe(operators.tap(function (replenishmentOrderCode) {
                if (Boolean(replenishmentOrderCode)) {
                    _this.userReplenishmentOrderService.loadReplenishmentOrderDetails(replenishmentOrderCode);
                }
                else {
                    _this.userReplenishmentOrderService.clearReplenishmentOrderDetails();
                }
            }), operators.shareReplay({ bufferSize: 1, refCount: true }));
        }
        ReplenishmentOrderDetailsService.prototype.getOrderDetails = function () {
            var _this = this;
            return this.replenishmentOrderLoad$.pipe(operators.switchMap(function (_) { return _this.userReplenishmentOrderService.getReplenishmentOrderDetails(); }));
        };
        return ReplenishmentOrderDetailsService;
    }());
    ReplenishmentOrderDetailsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsService, deps: [{ token: i1__namespace.RoutingService }, { token: i2__namespace.ReplenishmentOrderFacade }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ReplenishmentOrderDetailsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RoutingService }, { type: i2__namespace.ReplenishmentOrderFacade }]; } });

    var moduleComponents = [ReplenishmentOrderCancellationComponent];
    var ReplenishmentOrderDetailsModule = /** @class */ (function () {
        function ReplenishmentOrderDetailsModule() {
        }
        return ReplenishmentOrderDetailsModule;
    }());
    ReplenishmentOrderDetailsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReplenishmentOrderDetailsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsModule, declarations: [ReplenishmentOrderCancellationComponent], imports: [i3$1.CartSharedModule,
            i3$1.CardModule,
            i4.CommonModule,
            i1.I18nModule,
            i3$1.PromotionsModule,
            i1.UrlModule,
            ReplenishmentOrderCancellationDialogModule,
            i3$1.SpinnerModule,
            i3$1.ListNavigationModule,
            i3.RouterModule], exports: [ReplenishmentOrderCancellationComponent] });
    ReplenishmentOrderDetailsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsModule, providers: [
            i1.provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),
            i1.provideDefaultConfig({
                cmsComponents: {
                    ReplenishmentDetailItemsComponent: {
                        component: OrderDetailItemsComponent,
                        providers: [
                            {
                                provide: OrderDetailsService,
                                useExisting: ReplenishmentOrderDetailsService,
                            },
                        ],
                    },
                    ReplenishmentDetailTotalsComponent: {
                        component: OrderDetailTotalsComponent,
                        providers: [
                            {
                                provide: OrderDetailsService,
                                useExisting: ReplenishmentOrderDetailsService,
                            },
                        ],
                    },
                    ReplenishmentDetailShippingComponent: {
                        component: OrderDetailShippingComponent,
                        providers: [
                            {
                                provide: OrderDetailsService,
                                useExisting: ReplenishmentOrderDetailsService,
                            },
                        ],
                    },
                    ReplenishmentDetailActionsComponent: {
                        component: ReplenishmentOrderCancellationComponent,
                    },
                    ReplenishmentDetailOrderHistoryComponent: {
                        component: OrderHistoryComponent,
                    },
                },
            }),
        ], imports: [[
                i3$1.CartSharedModule,
                i3$1.CardModule,
                i4.CommonModule,
                i1.I18nModule,
                i3$1.PromotionsModule,
                i1.UrlModule,
                ReplenishmentOrderCancellationDialogModule,
                i3$1.SpinnerModule,
                i3$1.ListNavigationModule,
                i3.RouterModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderDetailsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$1.CartSharedModule,
                            i3$1.CardModule,
                            i4.CommonModule,
                            i1.I18nModule,
                            i3$1.PromotionsModule,
                            i1.UrlModule,
                            ReplenishmentOrderCancellationDialogModule,
                            i3$1.SpinnerModule,
                            i3$1.ListNavigationModule,
                            i3.RouterModule,
                        ],
                        providers: [
                            i1.provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    ReplenishmentDetailItemsComponent: {
                                        component: OrderDetailItemsComponent,
                                        providers: [
                                            {
                                                provide: OrderDetailsService,
                                                useExisting: ReplenishmentOrderDetailsService,
                                            },
                                        ],
                                    },
                                    ReplenishmentDetailTotalsComponent: {
                                        component: OrderDetailTotalsComponent,
                                        providers: [
                                            {
                                                provide: OrderDetailsService,
                                                useExisting: ReplenishmentOrderDetailsService,
                                            },
                                        ],
                                    },
                                    ReplenishmentDetailShippingComponent: {
                                        component: OrderDetailShippingComponent,
                                        providers: [
                                            {
                                                provide: OrderDetailsService,
                                                useExisting: ReplenishmentOrderDetailsService,
                                            },
                                        ],
                                    },
                                    ReplenishmentDetailActionsComponent: {
                                        component: ReplenishmentOrderCancellationComponent,
                                    },
                                    ReplenishmentDetailOrderHistoryComponent: {
                                        component: OrderHistoryComponent,
                                    },
                                },
                            }),
                        ],
                        declarations: __spreadArray([], __read(moduleComponents)),
                        exports: __spreadArray([], __read(moduleComponents)),
                    }]
            }] });

    var ReplenishmentOrderHistoryComponent = /** @class */ (function () {
        function ReplenishmentOrderHistoryComponent(routing, userReplenishmentOrderService, translation, vcr, launchDialogService) {
            var _this = this;
            this.routing = routing;
            this.userReplenishmentOrderService = userReplenishmentOrderService;
            this.translation = translation;
            this.vcr = vcr;
            this.launchDialogService = launchDialogService;
            this.subscription = new rxjs.Subscription();
            this.PAGE_SIZE = 5;
            this.replenishmentOrders$ = this.userReplenishmentOrderService
                .getReplenishmentOrderHistoryList(this.PAGE_SIZE)
                .pipe(operators.tap(function (replenishmentOrders) {
                var _a;
                if ((_a = replenishmentOrders === null || replenishmentOrders === void 0 ? void 0 : replenishmentOrders.pagination) === null || _a === void 0 ? void 0 : _a.sort) {
                    _this.sortType = replenishmentOrders.pagination.sort;
                }
            }));
            this.isLoaded$ = this.userReplenishmentOrderService.getReplenishmentOrderHistoryListSuccess();
        }
        ReplenishmentOrderHistoryComponent.prototype.changeSortCode = function (sortCode) {
            var event = {
                sortCode: sortCode,
                currentPage: 0,
            };
            this.sortType = sortCode;
            this.fetchReplenishmentOrders(event);
        };
        ReplenishmentOrderHistoryComponent.prototype.pageChange = function (page) {
            var event = {
                sortCode: this.sortType,
                currentPage: page,
            };
            this.fetchReplenishmentOrders(event);
        };
        ReplenishmentOrderHistoryComponent.prototype.goToOrderDetail = function (order) {
            this.routing.go({
                cxRoute: 'replenishmentDetails',
                params: order,
            });
        };
        ReplenishmentOrderHistoryComponent.prototype.getSortLabels = function () {
            return rxjs.combineLatest([
                this.translation.translate('sorting.date'),
                this.translation.translate('sorting.replenishmentNumber'),
                this.translation.translate('sorting.nextOrderDate'),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 3), textByDate = _c[0], textByOrderNumber = _c[1], textbyNextOrderDate = _c[2];
                return {
                    byDate: textByDate,
                    byReplenishmentNumber: textByOrderNumber,
                    byNextOrderDate: textbyNextOrderDate,
                };
            }));
        };
        ReplenishmentOrderHistoryComponent.prototype.openDialog = function (event, replenishmentOrderCode) {
            var dialog = this.launchDialogService.openDialog("REPLENISHMENT_ORDER" /* REPLENISHMENT_ORDER */, this.element, this.vcr, replenishmentOrderCode);
            if (dialog) {
                this.subscription.add(dialog.pipe(operators.take(1)).subscribe());
            }
            event.stopPropagation();
        };
        ReplenishmentOrderHistoryComponent.prototype.fetchReplenishmentOrders = function (event) {
            this.userReplenishmentOrderService.loadReplenishmentOrderList(this.PAGE_SIZE, event.currentPage, event.sortCode);
        };
        ReplenishmentOrderHistoryComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
            this.userReplenishmentOrderService.clearReplenishmentOrderList();
        };
        return ReplenishmentOrderHistoryComponent;
    }());
    ReplenishmentOrderHistoryComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderHistoryComponent, deps: [{ token: i1__namespace.RoutingService }, { token: i2__namespace.ReplenishmentOrderFacade }, { token: i1__namespace.TranslationService }, { token: i0__namespace.ViewContainerRef }, { token: i3__namespace$1.LaunchDialogService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReplenishmentOrderHistoryComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReplenishmentOrderHistoryComponent, selector: "cx-replenishment-order-history", viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true }], ngImport: i0__namespace, template: "<ng-container *ngIf=\"replenishmentOrders$ | async as replenishmentOrders\">\n  <div class=\"container\">\n    <!-- HEADER -->\n    <div class=\"cx-replenishment-order-history-header\">\n      <h3>\n        {{ 'orderHistory.replenishmentOrderHistory' | cxTranslate }}\n      </h3>\n    </div>\n\n    <!-- BODY -->\n    <div class=\"cx-replenishment-order-history-body\">\n      <ng-container\n        *ngIf=\"replenishmentOrders.pagination.totalResults > 0; else noOrder\"\n      >\n        <!-- Select Form and Pagination Top -->\n        <div class=\"cx-replenishment-order-history-sort top row\">\n          <label\n            class=\"\n              cx-replenishment-order-history-form-group\n              form-group\n              col-sm-12 col-md-4 col-lg-4\n            \"\n          >\n            <span>{{ 'orderHistory.sortBy' | cxTranslate }}</span>\n            <cx-sorting\n              [sortOptions]=\"replenishmentOrders.sorts\"\n              [sortLabels]=\"getSortLabels() | async\"\n              (sortListEvent)=\"changeSortCode($event)\"\n              [selectedOption]=\"replenishmentOrders.pagination.sort\"\n              placeholder=\"{{ 'orderHistory.sortBy' | cxTranslate }}\"\n            ></cx-sorting>\n          </label>\n          <div\n            class=\"cx-replenishment-order-history-pagination\"\n            *ngIf=\"replenishmentOrders.pagination.totalPages > 1\"\n          >\n            <cx-pagination\n              [pagination]=\"replenishmentOrders.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n            ></cx-pagination>\n          </div>\n        </div>\n        <!-- TABLE -->\n        <table class=\"table cx-replenishment-order-history-table\">\n          <thead class=\"cx-replenishment-order-history-thead-mobile\">\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.replenishmentOrderId' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.purchaseOrderNumber' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.startOn' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.frequency' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.nextOrderDate' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\" class=\"cx-replenishment-order-history-total\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.total' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\"></th>\n          </thead>\n          <tbody>\n            <tr\n              *ngFor=\"let order of replenishmentOrders.replenishmentOrders\"\n              (click)=\"goToOrderDetail(order)\"\n            >\n              <td class=\"cx-replenishment-order-history-code\">\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.replenishmentOrderId' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.replenishmentOrderCode }}</a\n                >\n              </td>\n              <td>\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.purchaseOrderNumber' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"\n                    cx-replenishment-order-history-value\n                    cx-purchase-order-number\n                  \"\n                >\n                  {{\n                    order?.purchaseOrderNumber?.length > 0\n                      ? order?.purchaseOrderNumber\n                      : ('orderHistory.emptyPurchaseOrderId' | cxTranslate)\n                  }}\n                </a>\n              </td>\n              <td>\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.startOn' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.firstDate | cxDate: 'M/d/yyyy' }}</a\n                >\n              </td>\n              <td class=\"cx-replenishment-order-history-frequency\">\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.frequency' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.trigger.displayTimeTable | slice: 0:-12 }}\n                </a>\n              </td>\n              <td>\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.nextOrderDate' | cxTranslate }}\n                </div>\n\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"\n                    cx-replenishment-order-history-value cx-next-order-date\n                  \"\n                >\n                  {{\n                    order?.active\n                      ? (order?.trigger.activationTime | cxDate: 'M/d/yyyy')\n                      : ('orderHistory.cancelled' | cxTranslate)\n                  }}\n                </a>\n              </td>\n              <td class=\"cx-replenishment-order-history-total\">\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.total' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.totalPriceWithTax.formattedValue }}</a\n                >\n              </td>\n              <td class=\"cx-replenishment-order-history-cancel\">\n                <div\n                  class=\"d-md-none cx-replenishment-order-history-label\"\n                ></div>\n                <button\n                  (click)=\"openDialog($event, order?.replenishmentOrderCode)\"\n                  class=\"cx-order-cancel btn btn-link\"\n                  #element\n                  *ngIf=\"order?.active\"\n                >\n                  {{ 'orderHistory.cancel' | cxTranslate }}\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <!-- Select Form and Pagination Bottom -->\n        <div class=\"cx-replenishment-order-history-sort bottom row\">\n          <div class=\"cx-replenishment-order-history-pagination\">\n            <cx-pagination\n              [pagination]=\"replenishmentOrders.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n              *ngIf=\"replenishmentOrders.pagination.totalPages > 1\"\n            ></cx-pagination>\n          </div>\n        </div>\n      </ng-container>\n\n      <!-- NO ORDER CONTAINER -->\n      <ng-template #noOrder>\n        <div\n          class=\"cx-replenishment-order-history-no-order row\"\n          *ngIf=\"isLoaded$ | async\"\n        >\n          <div class=\"col-sm-12 col-md-6 col-lg-4\">\n            <div>{{ 'orderHistory.noReplenishmentOrders' | cxTranslate }}</div>\n            <a\n              [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n              routerLinkActive=\"active\"\n              class=\"btn btn-primary btn-block\"\n              >{{ 'orderHistory.startShopping' | cxTranslate }}</a\n            >\n          </div>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i3__namespace$1.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { type: i3__namespace$1.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i3__namespace.RouterLinkActive, selector: "[routerLinkActive]", inputs: ["routerLinkActiveOptions", "routerLinkActive"], exportAs: ["routerLinkActive"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe, "cxUrl": i1__namespace.UrlPipe, "cxDate": i1__namespace.CxDatePipe, "slice": i4__namespace.SlicePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderHistoryComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-replenishment-order-history',
                        templateUrl: './replenishment-order-history.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RoutingService }, { type: i2__namespace.ReplenishmentOrderFacade }, { type: i1__namespace.TranslationService }, { type: i0__namespace.ViewContainerRef }, { type: i3__namespace$1.LaunchDialogService }]; }, propDecorators: { element: [{
                    type: i0.ViewChild,
                    args: ['element']
                }] } });

    var ReplenishmentOrderHistoryModule = /** @class */ (function () {
        function ReplenishmentOrderHistoryModule() {
        }
        return ReplenishmentOrderHistoryModule;
    }());
    ReplenishmentOrderHistoryModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderHistoryModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReplenishmentOrderHistoryModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderHistoryModule, declarations: [ReplenishmentOrderHistoryComponent], imports: [i4.CommonModule,
            i3.RouterModule,
            i3$1.ListNavigationModule,
            i1.UrlModule,
            i1.I18nModule], exports: [ReplenishmentOrderHistoryComponent] });
    ReplenishmentOrderHistoryModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderHistoryModule, providers: [
            i1.provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),
            i1.provideDefaultConfig({
                cmsComponents: {
                    AccountReplenishmentHistoryComponent: {
                        component: ReplenishmentOrderHistoryComponent,
                        guards: [i1.AuthGuard],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                i3.RouterModule,
                i3$1.ListNavigationModule,
                i1.UrlModule,
                i1.I18nModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderHistoryModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i3.RouterModule,
                            i3$1.ListNavigationModule,
                            i1.UrlModule,
                            i1.I18nModule,
                        ],
                        providers: [
                            i1.provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    AccountReplenishmentHistoryComponent: {
                                        component: ReplenishmentOrderHistoryComponent,
                                        guards: [i1.AuthGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [ReplenishmentOrderHistoryComponent],
                        exports: [ReplenishmentOrderHistoryComponent],
                    }]
            }] });

    var ReturnRequestService = /** @class */ (function () {
        function ReturnRequestService(routingService, returnRequestService, globalMessageService) {
            this.routingService = routingService;
            this.returnRequestService = returnRequestService;
            this.globalMessageService = globalMessageService;
        }
        Object.defineProperty(ReturnRequestService.prototype, "isCancelling$", {
            get: function () {
                return this.returnRequestService.getCancelReturnRequestLoading();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReturnRequestService.prototype, "isCancelSuccess$", {
            get: function () {
                return this.returnRequestService.getCancelReturnRequestSuccess();
            },
            enumerable: false,
            configurable: true
        });
        ReturnRequestService.prototype.getReturnRequest = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.routingService.getRouterState(),
                this.returnRequestService.getOrderReturnRequest(),
                this.returnRequestService.getReturnRequestLoading(),
            ]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 3), routingState = _b[0], returnRequest = _b[1], isLoading = _b[2];
                return [
                    routingState.state.params['returnCode'],
                    returnRequest,
                    isLoading,
                ];
            }), operators.filter(function (_a) {
                var _b = __read(_a, 1), returnCode = _b[0];
                return Boolean(returnCode);
            }), operators.tap(function (_a) {
                var _b = __read(_a, 3), returnCode = _b[0], returnRequest = _b[1], isLoading = _b[2];
                if ((returnRequest === undefined || returnRequest.rma !== returnCode) &&
                    !isLoading) {
                    _this.returnRequestService.loadOrderReturnRequestDetail(returnCode);
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], returnRequest = _b[1];
                return returnRequest;
            }), operators.filter(function (returnRequest) { return Boolean(returnRequest); }), operators.distinctUntilChanged());
        };
        ReturnRequestService.prototype.clearReturnRequest = function () {
            this.returnRequestService.clearOrderReturnRequestDetail();
        };
        ReturnRequestService.prototype.cancelReturnRequest = function (returnRequestCode) {
            this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {
                status: 'CANCELLING',
            });
        };
        ReturnRequestService.prototype.cancelSuccess = function (rma) {
            this.returnRequestService.resetCancelReturnRequestProcessState();
            this.globalMessageService.add({
                key: 'returnRequest.cancelSuccess',
                params: { rma: rma },
            }, i1.GlobalMessageType.MSG_TYPE_CONFIRMATION);
            this.routingService.go({
                cxRoute: 'orders',
            });
        };
        ReturnRequestService.prototype.backToList = function () {
            this.routingService.go({ cxRoute: 'orders' }, {
                state: {
                    activeTab: 1,
                },
            });
        };
        return ReturnRequestService;
    }());
    ReturnRequestService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestService, deps: [{ token: i1__namespace.RoutingService }, { token: i2__namespace.OrderReturnRequestFacade }, { token: i1__namespace.GlobalMessageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ReturnRequestService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RoutingService }, { type: i2__namespace.OrderReturnRequestFacade }, { type: i1__namespace.GlobalMessageService }]; } });

    var ReturnRequestItemsComponent = /** @class */ (function () {
        function ReturnRequestItemsComponent(returnRequestService) {
            this.returnRequestService = returnRequestService;
            this.returnRequest$ = this.returnRequestService.getReturnRequest();
        }
        return ReturnRequestItemsComponent;
    }());
    ReturnRequestItemsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestItemsComponent, deps: [{ token: ReturnRequestService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReturnRequestItemsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReturnRequestItemsComponent, selector: "cx-return-request-items", ngImport: i0__namespace, template: "<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"d-none d-md-block d-lg-block d-xl-block\">\n    <div class=\"cx-item-list-header row\">\n      <div class=\"cx-item-list-desc col-md-5 col-lg-5 col-xl-6\">\n        {{ 'returnRequest.item' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-price col-md-2 col-lg-2 col-xl-2\">\n        {{ 'returnRequest.itemPrice' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-qty col-md-3 col-lg-3 col-xl-2\">\n        {{ 'returnRequest.returnQty' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\n        {{ 'returnRequest.total' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"cx-item-list-row\"\n    *ngFor=\"let returnEntry of returnRequest.returnEntries; let i = index\"\n  >\n    <div class=\"cx-item-list-items\">\n      <div class=\"row\">\n        <!-- Item Image -->\n        <div class=\"col-2 cx-image-container\">\n          <cx-media\n            [container]=\"returnEntry.orderEntry?.product.images?.PRIMARY\"\n            format=\"thumbnail\"\n          ></cx-media>\n        </div>\n        <!-- Item Information -->\n        <div class=\"cx-info col-10\">\n          <div class=\"cx-info-container row\">\n            <!-- Item Description -->\n            <div class=\"col-md-3 col-lg-4 col-xl-5\">\n              <div *ngIf=\"returnEntry.orderEntry?.product.name\" class=\"cx-name\">\n                {{ returnEntry.orderEntry?.product.name }}\n              </div>\n              <div *ngIf=\"returnEntry.orderEntry?.product.code\" class=\"cx-code\">\n                {{ 'cartItems.id' | cxTranslate }}\n                {{ returnEntry.orderEntry?.product.code }}\n              </div>\n              <!-- Variants -->\n              <div\n                *ngFor=\"\n                  let variant of (returnEntry.orderEntry?.product\n                    .baseOptions)[0]?.selected?.variantOptionQualifiers\n                \"\n                class=\"cx-property\"\n              >\n                <div class=\"cx-label\" *ngIf=\"variant.name\">\n                  {{ variant.name }}:\n                </div>\n                <div class=\"cx-value\" *ngIf=\"variant.value\">\n                  {{ variant.value }}\n                </div>\n              </div>\n            </div>\n            <!-- Item Price -->\n            <div\n              *ngIf=\"returnEntry.orderEntry?.basePrice\"\n              class=\"cx-price col-md-3 col-lg-2 col-xl-2\"\n            >\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.itemPrice' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.orderEntry?.basePrice?.formattedValue }}\n              </div>\n            </div>\n            <!-- return Quantity -->\n            <div class=\"cx-quantity col-md-3 col-lg-3 col-xl-3\">\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.returnQty' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.expectedQuantity }}\n              </div>\n            </div>\n            <!-- Total Price -->\n            <div class=\"cx-total col-md-3 col-lg-3 col-xl-2\">\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.total' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.refundAmount?.formattedValue }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i3__namespace$1.MediaComponent, selector: "cx-media", inputs: ["container", "format", "alt", "role", "loading"], outputs: ["loaded"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestItemsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-return-request-items',
                        templateUrl: './return-request-items.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ReturnRequestService }]; } });

    var ReturnRequestOverviewComponent = /** @class */ (function () {
        function ReturnRequestOverviewComponent(returnRequestService) {
            var _this = this;
            this.returnRequestService = returnRequestService;
            this.returnRequest$ = this.returnRequestService
                .getReturnRequest()
                .pipe(operators.tap(function (returnRequest) { var _a; return (_this.rma = (_a = returnRequest.rma) !== null && _a !== void 0 ? _a : ''); }));
            this.isCancelling$ = this.returnRequestService.isCancelling$;
        }
        ReturnRequestOverviewComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(function (success) {
                if (success) {
                    _this.returnRequestService.cancelSuccess(_this.rma);
                }
            });
        };
        ReturnRequestOverviewComponent.prototype.cancelReturn = function (returnRequestCode) {
            this.returnRequestService.cancelReturnRequest(returnRequestCode);
        };
        ReturnRequestOverviewComponent.prototype.back = function () {
            this.returnRequestService.backToList();
        };
        ReturnRequestOverviewComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return ReturnRequestOverviewComponent;
    }());
    ReturnRequestOverviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestOverviewComponent, deps: [{ token: ReturnRequestService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReturnRequestOverviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReturnRequestOverviewComponent, selector: "cx-return-request-overview", ngImport: i0__namespace, template: "<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"cx-nav row\">\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <button (click)=\"back()\" class=\"btn btn-block btn-action\">\n        {{ 'common.back' | cxTranslate }}\n      </button>\n    </div>\n\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <button\n        *ngIf=\"returnRequest.cancellable\"\n        class=\"btn btn-block btn-primary\"\n        (click)=\"cancelReturn(returnRequest.rma)\"\n        [disabled]=\"isCancelling$ | async\"\n      >\n        {{ 'returnRequest.cancel' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"cx-header row\">\n    <div class=\"cx-detail col-sm-12 col-md-4\">\n      <div class=\"cx-detail-label\">\n        {{ 'returnRequest.returnRequestId' | cxTranslate }}\n      </div>\n      <div class=\"cx-detail-value\">{{ returnRequest.rma }}</div>\n    </div>\n    <div class=\"cx-detail col-sm-12 col-md-4\">\n      <div class=\"cx-detail-label\">\n        {{ 'returnRequest.orderCode' | cxTranslate }}\n      </div>\n      <div class=\"cx-detail-value\">{{ returnRequest.order?.code }}</div>\n    </div>\n    <div class=\"cx-detail col-sm-12 col-md-4\">\n      <div class=\"cx-detail-label\">\n        {{ 'returnRequest.status' | cxTranslate }}\n      </div>\n      <div class=\"cx-detail-value\">\n        {{\n          'returnRequestList.statusDisplay_' + returnRequest?.status\n            | cxTranslate\n        }}\n      </div>\n    </div>\n  </div>\n</ng-container>\n", directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestOverviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-return-request-overview',
                        templateUrl: './return-request-overview.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ReturnRequestService }]; } });

    var ReturnRequestTotalsComponent = /** @class */ (function () {
        function ReturnRequestTotalsComponent(returnRequestService) {
            this.returnRequestService = returnRequestService;
            this.returnRequest$ = this.returnRequestService.getReturnRequest();
        }
        ReturnRequestTotalsComponent.prototype.ngOnDestroy = function () {
            this.returnRequestService.clearReturnRequest();
        };
        return ReturnRequestTotalsComponent;
    }());
    ReturnRequestTotalsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestTotalsComponent, deps: [{ token: ReturnRequestService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReturnRequestTotalsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReturnRequestTotalsComponent, selector: "cx-return-request-totals", ngImport: i0__namespace, template: "<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"row justify-content-end\">\n    <div class=\"cx-summary col-sm-12 col-md-6 col-lg-5 col-xl-4\">\n      <h4>{{ 'returnRequest.summary' | cxTranslate }}</h4>\n      <div class=\"cx-summary-row\">\n        <div class=\"col-6 cx-summary-label\">\n          {{ 'returnRequest.subtotal' | cxTranslate }}\n        </div>\n        <div class=\"col-6 cx-summary-amount\">\n          {{ returnRequest.subTotal?.formattedValue }}\n        </div>\n      </div>\n      <div class=\"cx-summary-row\">\n        <div class=\"col-6 cx-summary-label\">\n          {{ 'returnRequest.deliveryCode' | cxTranslate }}\n        </div>\n        <div class=\"col-6 cx-summary-amount\">\n          {{ returnRequest.deliveryCost?.formattedValue }}\n        </div>\n      </div>\n      <div class=\"cx-summary-row cx-summary-total\">\n        <div class=\"col-6 cx-summary-label\">\n          {{ 'returnRequest.estimatedRefund' | cxTranslate }}\n        </div>\n        <div class=\"col-6 cx-summary-amount\">\n          {{ returnRequest.totalPrice?.formattedValue }}\n        </div>\n      </div>\n      <div class=\"cx-summary-row cx-footnote\">\n        {{ 'returnRequest.note' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n</ng-container>\n", directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestTotalsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-return-request-totals',
                        templateUrl: './return-request-totals.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: ReturnRequestService }]; } });

    var components = [
        ReturnRequestOverviewComponent,
        ReturnRequestItemsComponent,
        ReturnRequestTotalsComponent,
    ];
    var ReturnRequestDetailModule = /** @class */ (function () {
        function ReturnRequestDetailModule() {
        }
        return ReturnRequestDetailModule;
    }());
    ReturnRequestDetailModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestDetailModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReturnRequestDetailModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestDetailModule, declarations: [ReturnRequestOverviewComponent,
            ReturnRequestItemsComponent,
            ReturnRequestTotalsComponent], imports: [i4.CommonModule,
            i3.RouterModule,
            i1.UrlModule,
            i1.I18nModule,
            i3$1.MediaModule,
            i1.FeaturesConfigModule], exports: [ReturnRequestOverviewComponent,
            ReturnRequestItemsComponent,
            ReturnRequestTotalsComponent] });
    ReturnRequestDetailModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestDetailModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    ReturnRequestOverviewComponent: {
                        component: ReturnRequestOverviewComponent,
                    },
                    ReturnRequestItemsComponent: {
                        component: ReturnRequestItemsComponent,
                    },
                    ReturnRequestTotalsComponent: {
                        component: ReturnRequestTotalsComponent,
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                i3.RouterModule,
                i1.UrlModule,
                i1.I18nModule,
                i3$1.MediaModule,
                i1.FeaturesConfigModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestDetailModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i3.RouterModule,
                            i1.UrlModule,
                            i1.I18nModule,
                            i3$1.MediaModule,
                            i1.FeaturesConfigModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    ReturnRequestOverviewComponent: {
                                        component: ReturnRequestOverviewComponent,
                                    },
                                    ReturnRequestItemsComponent: {
                                        component: ReturnRequestItemsComponent,
                                    },
                                    ReturnRequestTotalsComponent: {
                                        component: ReturnRequestTotalsComponent,
                                    },
                                },
                            }),
                        ],
                        declarations: __spreadArray([], __read(components)),
                        exports: __spreadArray([], __read(components)),
                    }]
            }] });

    var OrderReturnRequestListComponent = /** @class */ (function () {
        function OrderReturnRequestListComponent(returnRequestService, translation) {
            var _this = this;
            this.returnRequestService = returnRequestService;
            this.translation = translation;
            this.PAGE_SIZE = 5;
            this.returnRequests$ = this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(operators.tap(function (requestList) {
                var _a;
                if ((_a = requestList === null || requestList === void 0 ? void 0 : requestList.pagination) === null || _a === void 0 ? void 0 : _a.sort) {
                    _this.sortType = requestList.pagination.sort;
                }
            }));
            /**
             * When "Order Return" feature is enabled, this component becomes one tab in
             * TabParagraphContainerComponent. This can be read from TabParagraphContainer.
             */
            this.tabTitleParam$ = this.returnRequests$.pipe(operators.map(function (returnRequests) { var _a; return (_a = returnRequests === null || returnRequests === void 0 ? void 0 : returnRequests.pagination) === null || _a === void 0 ? void 0 : _a.totalResults; }), operators.filter(i1.isNotUndefined), operators.take(1));
        }
        OrderReturnRequestListComponent.prototype.ngOnDestroy = function () {
            this.returnRequestService.clearOrderReturnRequestList();
        };
        OrderReturnRequestListComponent.prototype.changeSortCode = function (sortCode) {
            var event = {
                sortCode: sortCode,
                currentPage: 0,
            };
            this.sortType = sortCode;
            this.fetchReturnRequests(event);
        };
        OrderReturnRequestListComponent.prototype.pageChange = function (page) {
            var event = {
                sortCode: this.sortType,
                currentPage: page,
            };
            this.fetchReturnRequests(event);
        };
        OrderReturnRequestListComponent.prototype.getSortLabels = function () {
            return rxjs.combineLatest([
                this.translation.translate('sorting.date'),
                this.translation.translate('sorting.rma'),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), textByDate = _c[0], textByRma = _c[1];
                return {
                    byDate: textByDate,
                    byRMA: textByRma,
                };
            }));
        };
        OrderReturnRequestListComponent.prototype.fetchReturnRequests = function (event) {
            this.returnRequestService.loadOrderReturnRequestList(this.PAGE_SIZE, event.currentPage, event.sortCode);
        };
        return OrderReturnRequestListComponent;
    }());
    OrderReturnRequestListComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnRequestListComponent, deps: [{ token: i2__namespace.OrderReturnRequestFacade }, { token: i1__namespace.TranslationService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderReturnRequestListComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderReturnRequestListComponent, selector: "cx-order-return-request-list", ngImport: i0__namespace, template: "<ng-container *ngIf=\"returnRequests$ | async as returnRequests\">\n  <div class=\"container\">\n    <!-- BODY -->\n    <div class=\"cx-order-history-body\">\n      <ng-container *ngIf=\"returnRequests.pagination.totalResults > 0\">\n        <!-- Select Form and Pagination Top -->\n        <div class=\"cx-order-history-sort top row\">\n          <label\n            class=\"\n              cx-order-history-form-group\n              form-group\n              col-sm-12 col-md-4 col-lg-4\n            \"\n            ><span>{{ 'returnRequestList.sortBy' | cxTranslate }}</span>\n            <cx-sorting\n              [sortOptions]=\"returnRequests.sorts\"\n              [sortLabels]=\"getSortLabels() | async\"\n              (sortListEvent)=\"changeSortCode($event)\"\n              [selectedOption]=\"returnRequests.pagination.sort\"\n            ></cx-sorting>\n          </label>\n          <div class=\"cx-order-history-pagination\">\n            <cx-pagination\n              [pagination]=\"returnRequests.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n            ></cx-pagination>\n          </div>\n        </div>\n        <!-- TABLE -->\n        <table class=\"table cx-order-history-table\">\n          <thead class=\"cx-order-history-thead-mobile\">\n            <th scope=\"col\">\n              {{ 'returnRequestList.returnRequestId' | cxTranslate }}\n            </th>\n            <th scope=\"col\">{{ 'returnRequestList.orderId' | cxTranslate }}</th>\n            <th scope=\"col\">\n              {{ 'returnRequestList.date' | cxTranslate }}\n            </th>\n            <th scope=\"col\">{{ 'returnRequestList.status' | cxTranslate }}</th>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let return of returnRequests.returnRequests\">\n              <td class=\"cx-order-history-code\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.returnRequestId' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'returnRequestDetails',\n                      params: return\n                    } | cxUrl\n                  \"\n                  class=\"cx-order-history-value\"\n                >\n                  {{ return?.rma }}</a\n                >\n              </td>\n              <td class=\"cx-order-history-code\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.orderId' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'orderDetails',\n                      params: return?.order\n                    } | cxUrl\n                  \"\n                  class=\"cx-order-history-value\"\n                >\n                  {{ return?.order?.code }}</a\n                >\n              </td>\n\n              <td class=\"cx-order-history-placed\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.date' | cxTranslate }}\n                </div>\n                {{ return?.creationTime | cxDate: 'longDate' }}\n              </td>\n              <td class=\"cx-order-history-status\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.status' | cxTranslate }}\n                </div>\n                {{\n                  'returnRequestList.statusDisplay_' + return?.status\n                    | cxTranslate\n                }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <!-- Select Form and Pagination Bottom -->\n        <div class=\"cx-order-history-sort bottom row\">\n          <label\n            class=\"\n              cx-order-history-form-group\n              form-group\n              col-sm-12 col-md-4 col-lg-4\n            \"\n            ><span>{{ 'returnRequestList.sortBy' | cxTranslate }}</span>\n            <cx-sorting\n              [sortOptions]=\"returnRequests.sorts\"\n              [sortLabels]=\"getSortLabels() | async\"\n              (sortListEvent)=\"changeSortCode($event)\"\n              [selectedOption]=\"returnRequests.pagination.sort\"\n            ></cx-sorting>\n          </label>\n          <div class=\"cx-order-history-pagination\">\n            <cx-pagination\n              [pagination]=\"returnRequests.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n            ></cx-pagination>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i3__namespace$1.SortingComponent, selector: "cx-sorting", inputs: ["sortOptions", "selectedOption", "placeholder", "sortLabels"], outputs: ["sortListEvent"] }, { type: i3__namespace$1.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }], directives: [{ type: i4__namespace.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4__namespace.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i4__namespace.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe, "cxUrl": i1__namespace.UrlPipe, "cxDate": i1__namespace.CxDatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderReturnRequestListComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-return-request-list',
                        templateUrl: './order-return-request-list.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.OrderReturnRequestFacade }, { type: i1__namespace.TranslationService }]; } });

    var ReturnRequestListModule = /** @class */ (function () {
        function ReturnRequestListModule() {
        }
        return ReturnRequestListModule;
    }());
    ReturnRequestListModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestListModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReturnRequestListModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestListModule, declarations: [OrderReturnRequestListComponent], imports: [i4.CommonModule,
            i3.RouterModule,
            i3$1.ListNavigationModule,
            i1.UrlModule,
            i1.I18nModule], exports: [OrderReturnRequestListComponent] });
    ReturnRequestListModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestListModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    OrderReturnRequestListComponent: {
                        component: OrderReturnRequestListComponent,
                        guards: [i1.AuthGuard],
                    },
                },
            }),
        ], imports: [[
                i4.CommonModule,
                i3.RouterModule,
                i3$1.ListNavigationModule,
                i1.UrlModule,
                i1.I18nModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReturnRequestListModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.CommonModule,
                            i3.RouterModule,
                            i3$1.ListNavigationModule,
                            i1.UrlModule,
                            i1.I18nModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    OrderReturnRequestListComponent: {
                                        component: OrderReturnRequestListComponent,
                                        guards: [i1.AuthGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [OrderReturnRequestListComponent],
                        exports: [OrderReturnRequestListComponent],
                    }]
            }] });

    var OrderComponentsModule = /** @class */ (function () {
        function OrderComponentsModule() {
        }
        return OrderComponentsModule;
    }());
    OrderComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrderComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderComponentsModule, imports: [OrderHistoryModule,
            OrderDetailsModule,
            ReplenishmentOrderDetailsModule,
            OrderCancellationModule,
            OrderReturnModule,
            ReplenishmentOrderHistoryModule,
            ReturnRequestListModule,
            ReturnRequestDetailModule] });
    OrderComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderComponentsModule, imports: [[
                OrderHistoryModule,
                OrderDetailsModule,
                ReplenishmentOrderDetailsModule,
                OrderCancellationModule,
                OrderReturnModule,
                ReplenishmentOrderHistoryModule,
                ReturnRequestListModule,
                ReturnRequestDetailModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            OrderHistoryModule,
                            OrderDetailsModule,
                            ReplenishmentOrderDetailsModule,
                            OrderCancellationModule,
                            OrderReturnModule,
                            ReplenishmentOrderHistoryModule,
                            ReturnRequestListModule,
                            ReturnRequestDetailModule,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AmendOrderActionsComponent = AmendOrderActionsComponent;
    exports.AmendOrderActionsModule = AmendOrderActionsModule;
    exports.AmendOrderItemsModule = AmendOrderItemsModule;
    exports.CancelOrReturnItemsComponent = CancelOrReturnItemsComponent;
    exports.CancelOrderComponent = CancelOrderComponent;
    exports.CancelOrderConfirmationComponent = CancelOrderConfirmationComponent;
    exports.CancelOrderConfirmationModule = CancelOrderConfirmationModule;
    exports.CancelOrderModule = CancelOrderModule;
    exports.ConsignmentTrackingComponent = ConsignmentTrackingComponent;
    exports.OrderAmendService = OrderAmendService;
    exports.OrderCancellationGuard = OrderCancellationGuard;
    exports.OrderCancellationModule = OrderCancellationModule;
    exports.OrderCancellationService = OrderCancellationService;
    exports.OrderComponentsModule = OrderComponentsModule;
    exports.OrderConsignedEntriesComponent = OrderConsignedEntriesComponent;
    exports.OrderDetailActionsComponent = OrderDetailActionsComponent;
    exports.OrderDetailItemsComponent = OrderDetailItemsComponent;
    exports.OrderDetailShippingComponent = OrderDetailShippingComponent;
    exports.OrderDetailTotalsComponent = OrderDetailTotalsComponent;
    exports.OrderDetailsModule = OrderDetailsModule;
    exports.OrderDetailsService = OrderDetailsService;
    exports.OrderHistoryComponent = OrderHistoryComponent;
    exports.OrderHistoryModule = OrderHistoryModule;
    exports.OrderReturnGuard = OrderReturnGuard;
    exports.OrderReturnModule = OrderReturnModule;
    exports.OrderReturnRequestListComponent = OrderReturnRequestListComponent;
    exports.OrderReturnService = OrderReturnService;
    exports.ReplenishmentOrderCancellationComponent = ReplenishmentOrderCancellationComponent;
    exports.ReplenishmentOrderCancellationDialogComponent = ReplenishmentOrderCancellationDialogComponent;
    exports.ReplenishmentOrderCancellationDialogModule = ReplenishmentOrderCancellationDialogModule;
    exports.ReplenishmentOrderDetailsModule = ReplenishmentOrderDetailsModule;
    exports.ReplenishmentOrderDetailsService = ReplenishmentOrderDetailsService;
    exports.ReplenishmentOrderHistoryComponent = ReplenishmentOrderHistoryComponent;
    exports.ReplenishmentOrderHistoryModule = ReplenishmentOrderHistoryModule;
    exports.ReturnOrderComponent = ReturnOrderComponent;
    exports.ReturnOrderConfirmationComponent = ReturnOrderConfirmationComponent;
    exports.ReturnOrderConfirmationModule = ReturnOrderConfirmationModule;
    exports.ReturnOrderModule = ReturnOrderModule;
    exports.ReturnRequestDetailModule = ReturnRequestDetailModule;
    exports.ReturnRequestItemsComponent = ReturnRequestItemsComponent;
    exports.ReturnRequestListModule = ReturnRequestListModule;
    exports.ReturnRequestOverviewComponent = ReturnRequestOverviewComponent;
    exports.ReturnRequestTotalsComponent = ReturnRequestTotalsComponent;
    exports.TrackingEventsComponent = TrackingEventsComponent;
    exports.defaultReplenishmentOrderCancellationLayoutConfig = defaultReplenishmentOrderCancellationLayoutConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-order-components.umd.js.map
