{"version":3,"file":"spartacus-order-components.js","sources":["../../../feature-libs/order/components/amend-order/amend-order-actions/amend-order-actions.component.ts","../../../feature-libs/order/components/amend-order/amend-order-actions/amend-order-actions.component.html","../../../feature-libs/order/components/amend-order/amend-order-actions/amend-order-actions.module.ts","../../../feature-libs/order/components/amend-order/amend-order.model.ts","../../../feature-libs/order/components/order-details/order-details.service.ts","../../../feature-libs/order/components/amend-order/amend-order.service.ts","../../../feature-libs/order/components/amend-order/amend-order-items/amend-order-items.component.ts","../../../feature-libs/order/components/amend-order/amend-order-items/amend-order-items.component.html","../../../feature-libs/order/components/amend-order/amend-order-items/amend-order-items.module.ts","../../../feature-libs/order/components/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.ts","../../../feature-libs/order/components/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.component.html","../../../feature-libs/order/components/amend-order/cancellations/order-cancellation.service.ts","../../../feature-libs/order/components/amend-order/cancellations/order-cancellation.guard.ts","../../../feature-libs/order/components/amend-order/cancellations/cancel-order-confirmation/cancel-order-confirmation.module.ts","../../../feature-libs/order/components/amend-order/cancellations/cancel-order/cancel-order.component.ts","../../../feature-libs/order/components/amend-order/cancellations/cancel-order/cancel-order.component.html","../../../feature-libs/order/components/amend-order/cancellations/cancel-order/cancel-order.module.ts","../../../feature-libs/order/components/amend-order/cancellations/order-cancellation.module.ts","../../../feature-libs/order/components/amend-order/returns/order-return.service.ts","../../../feature-libs/order/components/amend-order/returns/order-return.guard.ts","../../../feature-libs/order/components/amend-order/returns/return-order-confirmation/return-order-confirmation.component.ts","../../../feature-libs/order/components/amend-order/returns/return-order-confirmation/return-order-confirmation.component.html","../../../feature-libs/order/components/amend-order/returns/return-order-confirmation/return-order-confirmation.module.ts","../../../feature-libs/order/components/amend-order/returns/return-order/return-order.component.ts","../../../feature-libs/order/components/amend-order/returns/return-order/return-order.component.html","../../../feature-libs/order/components/amend-order/returns/return-order/return-order.module.ts","../../../feature-libs/order/components/amend-order/returns/order-return.module.ts","../../../feature-libs/order/components/order-details/order-detail-actions/order-detail-actions.component.ts","../../../feature-libs/order/components/order-details/order-detail-actions/order-detail-actions.component.html","../../../feature-libs/order/components/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.ts","../../../feature-libs/order/components/order-details/order-detail-items/consignment-tracking/tracking-events/tracking-events.component.html","../../../feature-libs/order/components/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.ts","../../../feature-libs/order/components/order-details/order-detail-items/consignment-tracking/consignment-tracking.component.html","../../../feature-libs/order/components/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.ts","../../../feature-libs/order/components/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.component.html","../../../feature-libs/order/components/order-details/order-detail-items/order-consigned-entries/order-consigned-entries.model.ts","../../../feature-libs/order/components/order-details/order-detail-items/order-detail-items.component.ts","../../../feature-libs/order/components/order-details/order-detail-items/order-detail-items.component.html","../../../feature-libs/order/components/order-details/order-detail-shipping/order-detail-shipping.component.ts","../../../feature-libs/order/components/order-details/order-detail-shipping/order-detail-shipping.component.html","../../../feature-libs/order/components/order-details/order-detail-totals/order-detail-totals.component.ts","../../../feature-libs/order/components/order-details/order-detail-totals/order-detail-totals.component.html","../../../feature-libs/order/components/order-details/order-details.module.ts","../../../feature-libs/order/components/order-history/order-history.component.ts","../../../feature-libs/order/components/order-history/order-history.component.html","../../../feature-libs/order/components/order-history/order-history.module.ts","../../../feature-libs/order/components/replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.component.ts","../../../feature-libs/order/components/replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.component.html","../../../feature-libs/order/components/replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.module.ts","../../../feature-libs/order/components/replenishment-order-details/default-replenishment-order-cancellation-layout.config.ts","../../../feature-libs/order/components/replenishment-order-details/replenishment-order-cancellation/replenishment-order-cancellation.component.ts","../../../feature-libs/order/components/replenishment-order-details/replenishment-order-cancellation/replenishment-order-cancellation.component.html","../../../feature-libs/order/components/replenishment-order-details/replenishment-order-details.service.ts","../../../feature-libs/order/components/replenishment-order-details/replenishment-order-details.module.ts","../../../feature-libs/order/components/replenishment-order-history/replenishment-order-history.component.ts","../../../feature-libs/order/components/replenishment-order-history/replenishment-order-history.component.html","../../../feature-libs/order/components/replenishment-order-history/replenishment-order-history.module.ts","../../../feature-libs/order/components/return-request-detail/return-request.service.ts","../../../feature-libs/order/components/return-request-detail/return-request-items/return-request-items.component.ts","../../../feature-libs/order/components/return-request-detail/return-request-items/return-request-items.component.html","../../../feature-libs/order/components/return-request-detail/return-request-overview/return-request-overview.component.ts","../../../feature-libs/order/components/return-request-detail/return-request-overview/return-request-overview.component.html","../../../feature-libs/order/components/return-request-detail/return-request-totals/return-request-totals.component.ts","../../../feature-libs/order/components/return-request-detail/return-request-totals/return-request-totals.component.html","../../../feature-libs/order/components/return-request-detail/return-request-detail.module.ts","../../../feature-libs/order/components/return-request-list/order-return-request-list.component.ts","../../../feature-libs/order/components/return-request-list/order-return-request-list.component.html","../../../feature-libs/order/components/return-request-list/order-return-request-list.module.ts","../../../feature-libs/order/components/order-components.module.ts","../../../feature-libs/order/components/spartacus-order-components.ts"],"sourcesContent":["import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n} from '@angular/core';\nimport { RoutingService } from '@spartacus/core';\nimport { FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'cx-amend-order-actions',\n  templateUrl: './amend-order-actions.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AmendOrderActionsComponent {\n  @Input() orderCode: string;\n  @Input() amendOrderForm: FormGroup;\n  @Input() backRoute: string;\n  @Input() forwardRoute: string;\n\n  @HostBinding('class') styles = 'row';\n\n  constructor(protected routingService: RoutingService) {}\n\n  continue(event: Event): void {\n    if (this.amendOrderForm.valid) {\n      this.routingService.go({\n        cxRoute: this.forwardRoute,\n        params: { code: this.orderCode },\n      });\n    } else {\n      this.amendOrderForm.markAllAsTouched();\n      event.stopPropagation();\n    }\n  }\n}\n","<div class=\"col-xs-12 col-md-4 col-lg-3\">\n  <a\n    [routerLink]=\"\n      {\n        cxRoute: backRoute,\n        params: { code: orderCode }\n      } | cxUrl\n    \"\n    class=\"btn btn-block btn-action\"\n  >\n    {{ 'common.back' | cxTranslate }}\n  </a>\n</div>\n<div class=\"col-xs-12 col-md-4 col-lg-3\">\n  <button\n    *ngIf=\"forwardRoute\"\n    class=\"btn btn-block btn-primary\"\n    (click)=\"continue($event)\"\n  >\n    {{ 'common.continue' | cxTranslate }}\n  </button>\n\n  <button *ngIf=\"!forwardRoute\" class=\"btn btn-block btn-primary\" type=\"submit\">\n    {{ 'orderDetails.cancellationAndReturn.submit' | cxTranslate }}\n  </button>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { I18nModule, UrlModule } from '@spartacus/core';\nimport { AmendOrderActionsComponent } from './amend-order-actions.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, I18nModule],\n  declarations: [AmendOrderActionsComponent],\n  exports: [AmendOrderActionsComponent],\n})\nexport class AmendOrderActionsModule {}\n","export enum AmendOrderType {\n  CANCEL,\n  RETURN,\n}\n","import { Injectable } from '@angular/core';\nimport { Order, RoutingService } from '@spartacus/core';\nimport { OrderFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderDetailsService {\n  orderCode$: Observable<string>;\n  orderLoad$: Observable<{}>;\n\n  constructor(\n    private userOrderService: OrderFacade,\n    private routingService: RoutingService\n  ) {\n    this.orderCode$ = this.routingService.getRouterState().pipe(\n      map((routingData) => routingData.state.params.orderCode),\n      distinctUntilChanged()\n    );\n\n    this.orderLoad$ = this.orderCode$.pipe(\n      tap((orderCode) => {\n        if (orderCode) {\n          this.userOrderService.loadOrderDetails(orderCode);\n        } else {\n          this.userOrderService.clearOrderDetails();\n        }\n      }),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  getOrderDetails(): Observable<Order> {\n    return this.orderLoad$.pipe(\n      switchMap(() => this.userOrderService.getOrderDetails())\n    );\n  }\n}\n","import { formatCurrency, getCurrencySymbol } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport {\n  AbstractControl,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport { Order, OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { AmendOrderType } from './amend-order.model';\n\nfunction ValidateQuantityToCancel(control: AbstractControl) {\n  if (!control.value) {\n    return null;\n  }\n  const quantity = Object.values(control.value as number).reduce(\n    (acc: number, val: number) => acc + val,\n    0\n  );\n  return quantity > 0 ? null : { cxNoSelectedItemToCancel: true };\n}\n\n@Injectable()\nexport abstract class OrderAmendService {\n  protected amendType: AmendOrderType;\n  protected form: FormGroup;\n\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  /**\n   * Returns entries for the given order.\n   */\n  abstract getEntries(): Observable<OrderEntry[]>;\n\n  /**\n   * Returns entries with an amended quantity.\n   */\n  getAmendedEntries(): Observable<OrderEntry[]> {\n    return this.getForm().pipe(\n      switchMap((form) => {\n        return this.getEntries().pipe(\n          map((entries) =>\n            entries.filter(\n              (entry) => this.getFormControl(form, entry).value > 0\n            )\n          )\n        );\n      })\n    );\n  }\n\n  /**\n   * Submits the amended order.\n   */\n  abstract save(): void;\n\n  getOrder(): Observable<Order> {\n    return this.orderDetailsService.getOrderDetails();\n  }\n\n  /**\n   * returns the form with form data at runtime\n   */\n  getForm(): Observable<FormGroup> {\n    return this.getOrder().pipe(\n      tap((order) => {\n        if (!this.form || this.form.get('orderCode')?.value !== order.code) {\n          this.buildForm(order);\n        }\n      }),\n      map(() => this.form)\n    );\n  }\n\n  private buildForm(order: Order): void {\n    this.form = new FormGroup({});\n    this.form.addControl('orderCode', new FormControl(order.code));\n\n    const entryGroup = new FormGroup(\n      {},\n      { validators: [ValidateQuantityToCancel] }\n    );\n    this.form.addControl('entries', entryGroup);\n\n    (order.entries || []).forEach((entry) => {\n      const key = entry?.entryNumber?.toString() ?? '';\n      entryGroup.addControl(\n        key,\n        new FormControl(0, {\n          validators: [\n            Validators.min(0),\n            Validators.max(this.getMaxAmendQuantity(entry)),\n          ],\n        })\n      );\n    });\n  }\n\n  protected getFormControl(form: FormGroup, entry: OrderEntry): FormControl {\n    return <FormControl>(\n      form.get('entries')?.get(entry.entryNumber?.toString() ?? '')\n    );\n  }\n\n  /**\n   * As discussed, this calculation is moved to SPA side.\n   * The calculation and validation should be in backend facade layer.\n   */\n  getAmendedPrice(entry: OrderEntry): Price {\n    const amendedQuantity = this.getFormControl(this.form, entry).value;\n    const amendedPrice = Object.assign({}, entry.basePrice);\n    amendedPrice.value =\n      Math.round((entry.basePrice?.value ?? 0) * amendedQuantity * 100) / 100;\n\n    amendedPrice.formattedValue = formatCurrency(\n      amendedPrice.value,\n      // TODO: user current language\n      'en',\n      getCurrencySymbol(amendedPrice.currencyIso ?? '', 'narrow'),\n      amendedPrice.currencyIso\n    );\n\n    return amendedPrice;\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry): number {\n    return (\n      (this.isCancellation()\n        ? entry.cancellableQuantity\n        : entry.returnableQuantity) ||\n      entry.quantity ||\n      0\n    );\n  }\n\n  isCancellation(): boolean {\n    return this.amendType === AmendOrderType.CANCEL;\n  }\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport { OrderEntry, Price } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Component({\n  selector: 'cx-amend-order-items',\n  templateUrl: './amend-order-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrReturnItemsComponent {\n  @Input() entries: OrderEntry[];\n  @Input() isConfirmation = false;\n\n  form$: Observable<FormGroup> = this.orderAmendService.getForm();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  getControl(form: FormGroup, entry: OrderEntry): FormControl {\n    const control = <FormControl>(\n      form.get('entries')?.get(entry.entryNumber?.toString() ?? '')\n    );\n    return control;\n  }\n\n  setAll(form: FormGroup): void {\n    this.entries.forEach((entry) =>\n      this.getControl(form, entry).setValue(this.getMaxAmendQuantity(entry))\n    );\n  }\n\n  getItemPrice(entry: OrderEntry): Price {\n    return this.orderAmendService.getAmendedPrice(entry);\n  }\n\n  getMaxAmendQuantity(entry: OrderEntry) {\n    return this.orderAmendService.getMaxAmendQuantity(entry);\n  }\n\n  isCancellation() {\n    return this.orderAmendService.isCancellation();\n  }\n}\n","<div *ngIf=\"form$ | async as form\">\n  <button\n    *ngIf=\"!isConfirmation\"\n    class=\"btn btn-link cx-action-link\"\n    (click)=\"setAll(form)\"\n  >\n    {{ 'orderDetails.cancellationAndReturn.setAll' | cxTranslate }}\n  </button>\n\n  <div class=\"d-none d-md-block cx-item-list-header\">\n    <div class=\"row\">\n      <div class=\"text-left col-6\">\n        {{ 'orderDetails.cancellationAndReturn.item' | cxTranslate }}\n      </div>\n      <div class=\"text-center col-2\">\n        {{ 'orderDetails.cancellationAndReturn.itemPrice' | cxTranslate }}\n      </div>\n      <div *ngIf=\"!isConfirmation\" class=\"text-center col-2\">\n        {{ 'orderDetails.cancellationAndReturn.quantity' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-qty col-2 text-right\">\n        {{\n          (isCancellation()\n            ? 'orderDetails.cancellationAndReturn.cancelQty'\n            : 'orderDetails.cancellationAndReturn.returnQty'\n          ) | cxTranslate\n        }}\n      </div>\n      <div *ngIf=\"isConfirmation\" class=\"cx-item-list-total col-2\">\n        {{ 'orderDetails.cancellationAndReturn.totalPrice' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n\n  <div class=\"cx-item-list-row\" *ngFor=\"let item of entries; let i = index\">\n    <div class=\"row cx-item-list-items\">\n      <!-- Item Image -->\n      <cx-media\n        class=\"col-2\"\n        [container]=\"item.product.images?.PRIMARY\"\n        format=\"thumbnail\"\n      ></cx-media>\n\n      <!-- Item Information -->\n      <div class=\"cx-info col-10\">\n        <div class=\"cx-info-container row\">\n          <!-- Item Description -->\n          <div class=\"col-md-4 col-xl-5 cx-list-item-desc\">\n            <div *ngIf=\"item.product.name\" class=\"cx-name\">\n              {{ item.product.name }}\n            </div>\n            <div *ngIf=\"item.product.code\" class=\"cx-code\">\n              {{ 'cartItems.id' | cxTranslate }} {{ item.product.code }}\n            </div>\n            <!-- Variants -->\n            <ng-container *ngIf=\"item.product.baseOptions?.length\">\n              <div\n                *ngFor=\"\n                  let variant of item.product.baseOptions[0]?.selected\n                    ?.variantOptionQualifiers\n                \"\n                class=\"cx-property\"\n              >\n                <div class=\"cx-label\" *ngIf=\"variant.name\">\n                  {{ variant.name }}:\n                </div>\n                <div class=\"cx-value\" *ngIf=\"variant.value\">\n                  {{ variant.value }}\n                </div>\n              </div>\n            </ng-container>\n          </div>\n          <!-- Price -->\n          <div\n            *ngIf=\"item.basePrice\"\n            class=\"cx-price col-md-3 col-lg-3 col-xl-2\"\n          >\n            <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n              {{ 'orderDetails.cancellationAndReturn.itemPrice' | cxTranslate }}\n            </div>\n            <div *ngIf=\"item.basePrice\" class=\"cx-value\">\n              {{ item.basePrice?.formattedValue }}\n            </div>\n          </div>\n          <!-- item Quantity -->\n          <div *ngIf=\"!isConfirmation\" class=\"cx-request-qty col-md-3\">\n            <div\n              class=\"cx-label d-block d-md-none d-lg-none d-xl-none\"\n              placement=\"left\"\n              title=\"{{ 'cartItems.quantityTitle' | cxTranslate }}\"\n            >\n              {{ 'orderDetails.cancellationAndReturn.quantity' | cxTranslate }}\n            </div>\n            <div class=\"cx-value\">\n              {{ getMaxAmendQuantity(item) }}\n            </div>\n          </div>\n          <!-- Amended Quantity -->\n          <div class=\"cx-quantity col-xs-12 col-md-2 col-sm-12\">\n            <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n              {{\n                (isCancellation()\n                  ? 'orderDetails.cancellationAndReturn.cancelQty'\n                  : 'orderDetails.cancellationAndReturn.returnQty'\n                ) | cxTranslate\n              }}\n            </div>\n\n            <div\n              *ngIf=\"isConfirmation\"\n              class=\"w-100 text-center cx-order-quantity-value\"\n            >\n              {{ getControl(form, item).value }}\n            </div>\n            <cx-item-counter\n              *ngIf=\"!isConfirmation\"\n              [min]=\"0\"\n              [max]=\"getMaxAmendQuantity(item)\"\n              [control]=\"getControl(form, item)\"\n            >\n            </cx-item-counter>\n          </div>\n          <!-- Total Price -->\n          <div *ngIf=\"isConfirmation\" class=\"cx-total col-3\">\n            <div class=\"cx-label d-block d-md-none\">\n              {{\n                'orderDetails.cancellationAndReturn.totalPrice' | cxTranslate\n              }}\n            </div>\n            <div class=\"cx-value\">\n              {{ getItemPrice(item)?.formattedValue }}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FeaturesConfigModule, I18nModule } from '@spartacus/core';\nimport {\n  FormErrorsModule,\n  ItemCounterModule,\n  MediaModule,\n} from '@spartacus/storefront';\nimport { CancelOrReturnItemsComponent } from './amend-order-items.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    I18nModule,\n    MediaModule,\n    ItemCounterModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  declarations: [CancelOrReturnItemsComponent],\n  exports: [CancelOrReturnItemsComponent],\n})\nexport class AmendOrderItemsModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order-confirmation',\n  templateUrl: './cancel-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> =\n    this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup) {\n    if (form.valid) {\n      this.orderAmendService.save();\n    } else {\n      form.markAllAsTouched();\n    }\n  }\n}\n","<form\n  *ngIf=\"form$ | async as form\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"submit(form)\"\n>\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items\n    *ngIf=\"entries$ | async as entries\"\n    [entries]=\"entries\"\n    [isConfirmation]=\"true\"\n  >\n  </cx-amend-order-items>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderCancel\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</form>\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n} from '@spartacus/core';\nimport { OrderFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationService extends OrderAmendService {\n  amendType = AmendOrderType.CANCEL;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected userOrderService: OrderFacade,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n  /**\n   * Return cancellable order entries.\n   */\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order?.entries),\n      map(\n        (order) =>\n          order.entries?.filter(\n            (entry) =>\n              entry.entryNumber !== -1 &&\n              entry.cancellableQuantity &&\n              entry.cancellableQuantity > 0\n          ) ?? []\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.userOrderService.cancelOrder(orderCode, {\n      cancellationRequestEntryInputs: inputs,\n    });\n\n    this.userOrderService\n      .getCancelOrderSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave(orderCode));\n  }\n\n  private afterSave(orderCode: string): void {\n    this.userOrderService.resetCancelOrderProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'orderDetails.cancellationAndReturn.cancelSuccess',\n        params: { orderCode },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routing.go({\n      cxRoute: 'orders',\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderCancellationService } from './order-cancellation.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderCancellationGuard implements CanActivate {\n  constructor(\n    protected orderAmendService: OrderCancellationService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationGuard } from '../order-cancellation.guard';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderConfirmationComponent } from './cancel-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderConfirmationComponent: {\n          component: CancelOrderConfirmationComponent,\n          guards: [AuthGuard, OrderCancellationGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderConfirmationComponent],\n  exports: [CancelOrderConfirmationComponent],\n})\nexport class CancelOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-cancel-order',\n  templateUrl: './cancel-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CancelOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","<ng-container *ngIf=\"form$ | async as form\">\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items *ngIf=\"entries$ | async as entries\" [entries]=\"entries\">\n  </cx-amend-order-items>\n\n  <cx-form-errors\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    [control]=\"form.get('entries')\"\n  ></cx-form-errors>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderDetails\"\n      forwardRoute=\"orderCancelConfirmation\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { FormErrorsModule } from '@spartacus/storefront';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderCancellationService } from '../order-cancellation.service';\nimport { CancelOrderComponent } from './cancel-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CancelOrderComponent: {\n          component: CancelOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderCancellationService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [CancelOrderComponent],\n  exports: [CancelOrderComponent],\n})\nexport class CancelOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { CancelOrderConfirmationModule } from './cancel-order-confirmation/cancel-order-confirmation.module';\nimport { CancelOrderModule } from './cancel-order/cancel-order.module';\n\n@NgModule({\n  imports: [CancelOrderModule, CancelOrderConfirmationModule],\n})\nexport class OrderCancellationModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  CancelOrReturnRequestEntryInput,\n  GlobalMessageService,\n  GlobalMessageType,\n  OrderEntry,\n  RoutingService,\n} from '@spartacus/core';\nimport { OrderReturnRequestFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { filter, first, map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../../order-details/order-details.service';\nimport { AmendOrderType } from '../amend-order.model';\nimport { OrderAmendService } from '../amend-order.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnService extends OrderAmendService {\n  amendType = AmendOrderType.RETURN;\n\n  constructor(\n    protected orderDetailsService: OrderDetailsService,\n    protected returnRequestService: OrderReturnRequestFacade,\n    protected routing: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {\n    super(orderDetailsService);\n  }\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.getOrder().pipe(\n      filter((order) => !!order.entries),\n      map(\n        (order) =>\n          order.entries?.filter(\n            (entry) =>\n              entry.entryNumber !== -1 &&\n              entry.returnableQuantity &&\n              entry.returnableQuantity > 0\n          ) ?? []\n      )\n    );\n  }\n\n  save(): void {\n    const orderCode = this.form.value.orderCode;\n    const entries = this.form.value.entries;\n    const inputs: CancelOrReturnRequestEntryInput[] = Object.keys(entries)\n      .filter((entryNumber) => <number>entries[entryNumber] > 0)\n      .map(\n        (entryNumber) =>\n          ({\n            orderEntryNumber: Number(entryNumber),\n            quantity: <number>entries[entryNumber],\n          } as CancelOrReturnRequestEntryInput)\n      );\n\n    this.form.reset();\n\n    this.returnRequestService.createOrderReturnRequest({\n      orderCode,\n      returnRequestEntryInputs: inputs,\n    });\n\n    this.returnRequestService\n      .getReturnRequestSuccess()\n      .pipe(first(Boolean))\n      .subscribe(() => this.afterSave());\n  }\n\n  private afterSave(): void {\n    this.returnRequestService\n      .getOrderReturnRequest()\n      .pipe(first((r) => !!r))\n      .subscribe((returnRequest) => {\n        const rma = returnRequest.rma;\n        this.globalMessageService.add(\n          {\n            key: 'orderDetails.cancellationAndReturn.returnSuccess',\n            params: { rma },\n          },\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n        this.routing.go({\n          cxRoute: 'returnRequestDetails',\n          params: { rma },\n        });\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderReturnService } from './order-return.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderReturnGuard implements CanActivate {\n  constructor(\n    protected orderAmendService: OrderReturnService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.orderAmendService.getForm().pipe(\n      map((form) => {\n        if (!form.valid) {\n          // the order code is not available in the route\n          // as long as we're inside a guard, hence we redirect\n          // to the common orders page.\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        } else {\n          return true;\n        }\n      })\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order-confirmation',\n  templateUrl: './return-order-confirmation.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderConfirmationComponent {\n  orderCode: string;\n\n  form$ = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> =\n    this.orderAmendService.getAmendedEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n\n  submit(form: FormGroup): void {\n    form.disable();\n    this.orderAmendService.save();\n  }\n}\n","<form\n  *ngIf=\"form$ | async as form\"\n  [formGroup]=\"form\"\n  (ngSubmit)=\"submit(form)\"\n>\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items\n    *ngIf=\"entries$ | async as entries\"\n    [entries]=\"entries\"\n    [isConfirmation]=\"true\"\n  >\n  </cx-amend-order-items>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderReturn\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnGuard } from '../order-return.guard';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderConfirmationComponent } from './return-order-confirmation.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AmendOrderItemsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    AmendOrderActionsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderConfirmationComponent: {\n          component: ReturnOrderConfirmationComponent,\n          guards: [AuthGuard, OrderReturnGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderConfirmationComponent],\n  exports: [ReturnOrderConfirmationComponent],\n})\nexport class ReturnOrderConfirmationModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { OrderEntry } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { OrderAmendService } from '../../amend-order.service';\n\n@Component({\n  selector: 'cx-return-order',\n  templateUrl: './return-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnOrderComponent {\n  orderCode: string;\n\n  form$: Observable<FormGroup> = this.orderAmendService\n    .getForm()\n    .pipe(tap((form) => (this.orderCode = form.value.orderCode)));\n\n  entries$: Observable<OrderEntry[]> = this.orderAmendService.getEntries();\n\n  constructor(protected orderAmendService: OrderAmendService) {}\n}\n","<ng-container *ngIf=\"form$ | async as form\">\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <cx-amend-order-items *ngIf=\"entries$ | async as entries\" [entries]=\"entries\">\n  </cx-amend-order-items>\n\n  <cx-form-errors\n    aria-live=\"assertive\"\n    aria-atomic=\"true\"\n    [control]=\"form.get('entries')\"\n  ></cx-form-errors>\n\n  <ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n  <ng-template #actions>\n    <cx-amend-order-actions\n      *ngIf=\"orderCode\"\n      [orderCode]=\"orderCode\"\n      [amendOrderForm]=\"form\"\n      backRoute=\"orderDetails\"\n      forwardRoute=\"orderReturnConfirmation\"\n    ></cx-amend-order-actions>\n  </ng-template>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { AuthGuard, CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { FormErrorsModule } from '@spartacus/storefront';\nimport { AmendOrderActionsModule } from '../../amend-order-actions/amend-order-actions.module';\nimport { AmendOrderItemsModule } from '../../amend-order-items/amend-order-items.module';\nimport { OrderAmendService } from '../../amend-order.service';\nimport { OrderReturnService } from '../order-return.service';\nimport { ReturnOrderComponent } from './return-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    AmendOrderItemsModule,\n    AmendOrderActionsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnOrderComponent: {\n          component: ReturnOrderComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: OrderAmendService,\n              useExisting: OrderReturnService,\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ReturnOrderComponent],\n  exports: [ReturnOrderComponent],\n})\nexport class ReturnOrderModule {}\n","import { NgModule } from '@angular/core';\nimport { ReturnOrderConfirmationModule } from './return-order-confirmation/return-order-confirmation.module';\nimport { ReturnOrderModule } from './return-order/return-order.module';\n\n@NgModule({\n  imports: [ReturnOrderModule, ReturnOrderConfirmationModule],\n})\nexport class OrderReturnModule {}\n","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-actions',\n  templateUrl: './order-detail-actions.component.html',\n})\nexport class OrderDetailActionsComponent {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<any> = this.orderDetailsService.getOrderDetails();\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"cx-nav row\">\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <button\n        [routerLink]=\"{ cxRoute: 'orders' } | cxUrl\"\n        class=\"btn btn-block btn-action\"\n      >\n        {{ 'common.back' | cxTranslate }}\n      </button>\n    </div>\n\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <a\n        *ngIf=\"order.cancellable\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orderCancel',\n            params: order\n          } | cxUrl\n        \"\n        class=\"btn btn-block btn-action\"\n      >\n        {{ 'orderDetails.cancellationAndReturn.cancelAction' | cxTranslate }}\n      </a>\n\n      <a\n        *ngIf=\"order.returnable\"\n        [routerLink]=\"\n          {\n            cxRoute: 'orderReturn',\n            params: order\n          } | cxUrl\n        \"\n        class=\"btn btn-block btn-action\"\n      >\n        {{ 'orderDetails.cancellationAndReturn.returnAction' | cxTranslate }}\n      </a>\n    </div>\n  </div>\n</ng-container>\n","import { Component, OnDestroy } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\nimport { ConsignmentTracking, OrderFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-tracking-events',\n  templateUrl: './tracking-events.component.html',\n})\nexport class TrackingEventsComponent implements OnDestroy {\n  tracking$: Observable<ConsignmentTracking>;\n  shipDate: Date;\n  consignmentCode: string;\n\n  constructor(\n    public activeModal: NgbActiveModal,\n    private userOrderService: OrderFacade\n  ) {}\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","<div class=\"cx-consignment-tracking-dialog\">\n  <!-- Modal Header -->\n  <ng-container *ngIf=\"tracking$ | async as consignmentTracking; else loading\">\n    <div class=\"header modal-header\">\n      <div class=\"title modal-title\">\n        {{ 'orderDetails.consignmentTracking.dialog.header' | cxTranslate }}\n      </div>\n      <button\n        type=\"button\"\n        class=\"close\"\n        [attr.aria-label]=\"'common.close' | cxTranslate\"\n        (click)=\"activeModal.dismiss('Cross click')\"\n      >\n        <span aria-hidden=\"true\">&times;</span>\n      </button>\n    </div>\n    <!-- Modal Body -->\n    <!-- shipment header -->\n    <ng-container\n      *ngIf=\"\n        consignmentTracking?.carrierDetails && consignmentTracking?.trackingID;\n        else noTracking\n      \"\n    >\n      <div class=\"shipment-heading\">\n        <div class=\"row\">\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.shipped' | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              {{ shipDate | cxDate: 'medium' }}\n            </div>\n          </div>\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.estimate' | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              {{ consignmentTracking?.targetArrivalDate | cxDate: 'medium' }}\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.carrier' | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              {{ consignmentTracking?.carrierDetails?.name }}\n            </div>\n          </div>\n          <div class=\"col-sm-12 col-md-6\">\n            <div class=\"shipment-title\">\n              {{\n                'orderDetails.consignmentTracking.dialog.trackingId'\n                  | cxTranslate\n              }}\n            </div>\n            <div class=\"shipment-content\">\n              <ng-container *ngIf=\"consignmentTracking?.trackingUrl\">\n                <a target=\"_blank\" [href]=\"consignmentTracking.trackingUrl\">{{\n                  consignmentTracking?.trackingID\n                }}</a>\n              </ng-container>\n              <ng-container *ngIf=\"!consignmentTracking?.trackingUrl\">\n                <label>\n                  {{ consignmentTracking?.trackingID }}\n                </label>\n              </ng-container>\n            </div>\n          </div>\n        </div>\n      </div>\n    </ng-container>\n\n    <!-- tracking events -->\n    <div class=\"events modal-body\">\n      <ng-container\n        *ngFor=\"let consignmentEvent of consignmentTracking.trackingEvents\"\n      >\n        <div class=\"event-body\">\n          <div class=\"event-content\">\n            {{ consignmentEvent.eventDate | cxDate: 'medium' }}\n          </div>\n          <div class=\"event-title\">\n            {{ consignmentEvent.referenceCode }}\n          </div>\n          <div class=\"event-content\">{{ consignmentEvent.detail }}</div>\n          <div class=\"event-city\">\n            location: {{ consignmentEvent.location }}\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </ng-container>\n\n  <ng-template #noTracking>\n    <div class=\"no-tracking-heading\">\n      <div class=\"shipment-content\">\n        {{ 'orderDetails.consignmentTracking.dialog.noTracking' | cxTranslate }}\n      </div>\n    </div>\n  </ng-template>\n\n  <ng-template #loading>\n    <div class=\"tracking-loading\">\n      <div class=\"header modal-header\">\n        <div class=\"title modal-title\">\n          {{\n            'orderDetails.consignmentTracking.dialog.loadingHeader'\n              | cxTranslate\n          }}\n        </div>\n        <button\n          type=\"button\"\n          class=\"close btn-dismiss\"\n          [attr.aria-label]=\"'common.close' | cxTranslate\"\n          (click)=\"activeModal.dismiss('Cross click')\"\n        >\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <!-- Modal Body -->\n      <div class=\"body modal-body\">\n        <div class=\"row\">\n          <div class=\"col-sm-12\">\n            <cx-spinner></cx-spinner>\n          </div>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</div>\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\nimport { Consignment } from '@spartacus/core';\nimport { ConsignmentTracking, OrderFacade } from '@spartacus/order/root';\nimport { ModalRef, ModalService } from '@spartacus/storefront';\nimport { Observable } from 'rxjs';\nimport { TrackingEventsComponent } from './tracking-events/tracking-events.component';\n\n@Component({\n  selector: 'cx-consignment-tracking',\n  templateUrl: './consignment-tracking.component.html',\n})\nexport class ConsignmentTrackingComponent implements OnInit, OnDestroy {\n  consignmentStatus: string[] = [\n    'SHIPPED',\n    'IN_TRANSIT',\n    'DELIVERY_COMPLETED',\n    'DELIVERY_REJECTED',\n    'DELIVERING',\n  ];\n  modalRef: ModalRef;\n\n  @Input()\n  consignment: Consignment;\n  @Input()\n  orderCode: string;\n  consignmentTracking$: Observable<ConsignmentTracking>;\n\n  constructor(\n    private userOrderService: OrderFacade,\n    private modalService: ModalService\n  ) {}\n\n  ngOnInit() {\n    this.consignmentTracking$ = this.userOrderService.getConsignmentTracking();\n  }\n\n  openTrackingDialog(consignment: Consignment) {\n    if (consignment.code) {\n      this.userOrderService.loadConsignmentTracking(\n        this.orderCode,\n        consignment.code\n      );\n    }\n    let modalInstance: any;\n    this.modalRef = this.modalService.open(TrackingEventsComponent, {\n      centered: true,\n      size: 'lg',\n    });\n\n    modalInstance = this.modalRef.componentInstance;\n    modalInstance.tracking$ = this.consignmentTracking$;\n    modalInstance.shipDate = consignment.statusDate;\n    modalInstance.consignmentCode = consignment.code;\n  }\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearConsignmentTracking();\n  }\n}\n","<ng-container *ngIf=\"consignment && consignment.status\">\n  <div *ngIf=\"consignmentStatus.includes(consignment.status)\">\n    <button\n      (click)=\"openTrackingDialog(consignment)\"\n      class=\"btn btn-action btn-track\"\n      type=\"button\"\n    >\n      {{ 'orderDetails.consignmentTracking.action' | cxTranslate }}\n    </button>\n  </div>\n</ng-container>\n","import { Component, Input } from '@angular/core';\nimport {\n  Consignment,\n  Order,\n  OrderEntry,\n  PromotionLocation,\n} from '@spartacus/core';\n\n@Component({\n  selector: 'cx-order-consigned-entries',\n  templateUrl: './order-consigned-entries.component.html',\n})\nexport class OrderConsignedEntriesComponent {\n  @Input() consignments: Consignment[];\n  @Input() order: Order;\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n\n  getConsignmentProducts(consignment: Consignment): OrderEntry[] {\n    const products: OrderEntry[] = [];\n    consignment.entries?.forEach((element) => {\n      if (element.orderEntry) {\n        products.push(element.orderEntry);\n      }\n    });\n\n    return products;\n  }\n}\n","<div *ngFor=\"let consignment of consignments\" class=\"cx-list row\">\n  <div class=\"cx-list-header col-12\">\n    <div class=\"cx-list-status\">\n      <span *ngIf=\"consignment\">\n        {{ 'orderDetails.deliveryStatus_' + consignment?.status | cxTranslate }}\n      </span>\n    </div>\n    <div *ngIf=\"consignment?.statusDate\" class=\"cx-list-date\">\n      <div>{{ consignment?.statusDate | cxDate }}</div>\n    </div>\n\n    <cx-consignment-tracking\n      [orderCode]=\"order.code\"\n      [consignment]=\"consignment\"\n      *cxFeature=\"'consignmentTracking'\"\n    >\n    </cx-consignment-tracking>\n  </div>\n  <div class=\"cx-list-item col-12\">\n    <cx-cart-item-list\n      [items]=\"consignment.entries\"\n      [readonly]=\"true\"\n      [promotionLocation]=\"promotionLocation\"\n    ></cx-cart-item-list>\n  </div>\n</div>\n","export const completedValues = ['DELIVERY_COMPLETED', 'PICKUP_COMPLETE'];\nexport const cancelledValues = ['CANCELLED'];\n","import { Component, OnInit } from '@angular/core';\nimport { Consignment, Order, PromotionLocation } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { OrderDetailsService } from '../order-details.service';\nimport {\n  cancelledValues,\n  completedValues,\n} from './order-consigned-entries/order-consigned-entries.model';\n\n@Component({\n  selector: 'cx-order-details-items',\n  templateUrl: './order-detail-items.component.html',\n})\nexport class OrderDetailItemsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  promotionLocation: PromotionLocation = PromotionLocation.Order;\n  order$: Observable<Order> = this.orderDetailsService.getOrderDetails();\n  others$: Observable<Consignment[] | undefined>;\n  completed$: Observable<Consignment[] | undefined>;\n  cancel$: Observable<Consignment[] | undefined>;\n\n  ngOnInit() {\n    this.others$ = this.getOtherStatus(...completedValues, ...cancelledValues);\n    this.completed$ = this.getExactStatus(completedValues);\n    this.cancel$ = this.getExactStatus(cancelledValues);\n  }\n\n  private getExactStatus(\n    consignmentStatus: string[]\n  ): Observable<Consignment[] | undefined> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments?.filter(\n            (consignment) =>\n              consignment.status &&\n              consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n\n  private getOtherStatus(\n    ...consignmentStatus: string[]\n  ): Observable<Consignment[] | undefined> {\n    return this.order$.pipe(\n      map((order) => {\n        if (Boolean(order.consignments)) {\n          return order.consignments?.filter(\n            (consignment) =>\n              consignment.status &&\n              !consignmentStatus.includes(consignment.status)\n          );\n        }\n      })\n    );\n  }\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <ng-container\n    *ngIf=\"\n      order.consignments?.length ||\n      order.unconsignedEntries?.length ||\n      order.replenishmentOrderCode\n    \"\n  >\n    <cx-promotions\n      [promotions]=\"order.appliedOrderPromotions || []\"\n    ></cx-promotions>\n  </ng-container>\n\n  <!-- consigned entries -->\n  <ng-container *ngIf=\"order.consignments?.length\">\n    <cx-order-consigned-entries\n      *ngIf=\"others$ | async as others\"\n      [order]=\"order\"\n      [consignments]=\"others\"\n    ></cx-order-consigned-entries>\n\n    <cx-order-consigned-entries\n      *ngIf=\"completed$ | async as completed\"\n      [order]=\"order\"\n      [consignments]=\"completed\"\n    ></cx-order-consigned-entries>\n\n    <cx-order-consigned-entries\n      *ngIf=\"cancel$ | async as cancel\"\n      [order]=\"order\"\n      [consignments]=\"cancel\"\n    ></cx-order-consigned-entries>\n  </ng-container>\n\n  <!-- unconsigned entries OR any entries -->\n  <ng-container\n    *ngIf=\"\n      order?.unconsignedEntries?.length ||\n      (order?.entries && order?.replenishmentOrderCode)\n    \"\n  >\n    <div class=\"cx-list row\">\n      <div *ngIf=\"order?.statusDisplay\" class=\"cx-list-header col-12\">\n        <div class=\"cx-list-status\">\n          {{\n            'orderDetails.statusDisplay_' + order?.statusDisplay | cxTranslate\n          }}\n        </div>\n      </div>\n      <div class=\"cx-list-item col-12\">\n        <cx-cart-item-list\n          [items]=\"\n            order?.unconsignedEntries ? order.unconsignedEntries : order.entries\n          \"\n          [readonly]=\"true\"\n          [promotionLocation]=\"promotionLocation\"\n        ></cx-cart-item-list>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-shipping',\n  templateUrl: './order-detail-shipping.component.html',\n})\nexport class OrderDetailShippingComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<any>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <cx-order-overview [order]=\"order\"></cx-order-overview>\n</ng-container>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OrderDetailsService } from '../order-details.service';\n\n@Component({\n  selector: 'cx-order-details-totals',\n  templateUrl: './order-detail-totals.component.html',\n})\nexport class OrderDetailTotalsComponent implements OnInit {\n  constructor(protected orderDetailsService: OrderDetailsService) {}\n\n  order$: Observable<any>;\n\n  ngOnInit() {\n    this.order$ = this.orderDetailsService.getOrderDetails();\n  }\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"row justify-content-end\">\n    <div class=\"cx-summary col-sm-12 col-md-6 col-lg-5 col-xl-4\">\n      <cx-order-summary [cart]=\"order\"></cx-order-summary>\n    </div>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  CardModule,\n  CartSharedModule,\n  OrderDetailsServiceTransitionalToken,\n  OrderOverviewModule,\n  PromotionsModule,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { OrderDetailActionsComponent } from './order-detail-actions/order-detail-actions.component';\nimport { ConsignmentTrackingComponent } from './order-detail-items/consignment-tracking/consignment-tracking.component';\nimport { TrackingEventsComponent } from './order-detail-items/consignment-tracking/tracking-events/tracking-events.component';\nimport { OrderConsignedEntriesComponent } from './order-detail-items/order-consigned-entries/order-consigned-entries.component';\nimport { OrderDetailItemsComponent } from './order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from './order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from './order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from './order-details.service';\n\nconst moduleComponents = [\n  OrderDetailActionsComponent,\n  OrderDetailItemsComponent,\n  OrderDetailTotalsComponent,\n  OrderDetailShippingComponent,\n  TrackingEventsComponent,\n  ConsignmentTrackingComponent,\n  OrderConsignedEntriesComponent,\n];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    FeaturesConfigModule,\n    PromotionsModule,\n    OrderOverviewModule,\n    UrlModule,\n    SpinnerModule,\n    RouterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig | FeaturesConfig>{\n      cmsComponents: {\n        AccountOrderDetailsActionsComponent: {\n          component: OrderDetailActionsComponent,\n        },\n        AccountOrderDetailsItemsComponent: {\n          component: OrderDetailItemsComponent,\n        },\n        AccountOrderDetailsTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n        },\n        AccountOrderDetailsShippingComponent: {\n          component: OrderDetailShippingComponent,\n        },\n      },\n      features: {\n        consignmentTracking: '1.2',\n      },\n    }),\n    {\n      provide: OrderDetailsServiceTransitionalToken,\n      useExisting: OrderDetailsService,\n    },\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n})\nexport class OrderDetailsModule {}\n","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport {\n  isNotUndefined,\n  Order,\n  OrderHistoryList,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { OrderFacade, ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-history',\n  templateUrl: './order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderHistoryComponent implements OnDestroy {\n  constructor(\n    protected routing: RoutingService,\n    protected userOrderService: OrderFacade,\n    protected translation: TranslationService,\n    protected userReplenishmentOrderService: ReplenishmentOrderFacade\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  orders$: Observable<OrderHistoryList | undefined> = this.userOrderService\n    .getOrderHistoryList(this.PAGE_SIZE)\n    .pipe(\n      tap((orders: OrderHistoryList | undefined) => {\n        if (orders?.pagination?.sort) {\n          this.sortType = orders.pagination.sort;\n        }\n      })\n    );\n\n  hasReplenishmentOrder$: Observable<boolean> =\n    this.userReplenishmentOrderService\n      .getReplenishmentOrderDetails()\n      .pipe(map((order) => order && Object.keys(order).length !== 0));\n\n  isLoaded$: Observable<boolean> =\n    this.userOrderService.getOrderHistoryListLoaded();\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.orders$.pipe(\n    map((order) => order?.pagination?.totalResults),\n    filter(isNotUndefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.userOrderService.clearOrderList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchOrders(event);\n  }\n\n  goToOrderDetail(order: Order): void {\n    this.routing.go({\n      cxRoute: 'orderDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byOrderNumber: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.orderNumber'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber]) => {\n        return {\n          byDate: textByDate,\n          byOrderNumber: textByOrderNumber,\n        };\n      })\n    );\n  }\n\n  private fetchOrders(event: { sortCode: string; currentPage: number }): void {\n    this.userOrderService.loadOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","<ng-container\n  *ngIf=\"{\n    orderHistory: orders$ | async,\n    replenishmentOrder: hasReplenishmentOrder$ | async\n  } as type\"\n>\n  <ng-container *ngIf=\"type.orderHistory\">\n    <div [ngClass]=\"type.replenishmentOrder ? '' : 'container'\">\n      <!-- HEADER -->\n      <div\n        [ngClass]=\"\n          type.replenishmentOrder\n            ? 'cx-replenishment-details-order-history-header'\n            : 'cx-order-history-header'\n        \"\n      >\n        <h4 *ngIf=\"type.replenishmentOrder\">\n          {{ 'orderHistory.replenishmentHistory' | cxTranslate }}\n        </h4>\n        <h3 *ngIf=\"!type.replenishmentOrder\">\n          {{ 'orderHistory.orderHistory' | cxTranslate }}\n        </h3>\n      </div>\n\n      <!-- BODY -->\n      <div class=\"cx-order-history-body\">\n        <ng-container\n          *ngIf=\"type.orderHistory.pagination.totalResults > 0; else noOrder\"\n        >\n          <!-- Select Form and Pagination Top -->\n          <div class=\"cx-order-history-sort top row\">\n            <label\n              class=\"\n                cx-order-history-form-group\n                form-group\n                col-sm-12 col-md-4 col-lg-4\n              \"\n              ><span>\n                {{ 'orderHistory.sortBy' | cxTranslate }}\n              </span>\n              <cx-sorting\n                [sortOptions]=\"type.orderHistory.sorts\"\n                [sortLabels]=\"getSortLabels() | async\"\n                (sortListEvent)=\"changeSortCode($event)\"\n                [selectedOption]=\"type.orderHistory.pagination.sort\"\n                placeholder=\"{{ 'orderHistory.sortBy' | cxTranslate }}\"\n              ></cx-sorting>\n            </label>\n            <div\n              *ngIf=\"type.orderHistory.pagination.totalPages > 1\"\n              class=\"cx-order-history-pagination\"\n            >\n              <cx-pagination\n                [pagination]=\"type.orderHistory.pagination\"\n                (viewPageEvent)=\"pageChange($event)\"\n              ></cx-pagination>\n            </div>\n          </div>\n          <!-- TABLE -->\n          <table class=\"table cx-order-history-table\">\n            <thead class=\"cx-order-history-thead-mobile\">\n              <th scope=\"col\">\n                {{ 'orderHistory.orderId' | cxTranslate }}\n              </th>\n              <th scope=\"col\">{{ 'orderHistory.date' | cxTranslate }}</th>\n              <th scope=\"col\">\n                {{ 'orderHistory.status' | cxTranslate }}\n              </th>\n              <th scope=\"col\">{{ 'orderHistory.total' | cxTranslate }}</th>\n            </thead>\n            <tbody>\n              <tr\n                *ngFor=\"let order of type.orderHistory.orders\"\n                (click)=\"goToOrderDetail(order)\"\n              >\n                <td class=\"cx-order-history-code\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.orderId' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                  >\n                    {{ order?.code }}</a\n                  >\n                </td>\n                <td class=\"cx-order-history-placed\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.date' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                    >{{ order?.placed | cxDate: 'longDate' }}</a\n                  >\n                </td>\n                <td class=\"cx-order-history-status\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.status' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                  >\n                    {{\n                      'orderDetails.statusDisplay_' + order?.statusDisplay\n                        | cxTranslate\n                    }}</a\n                  >\n                </td>\n                <td class=\"cx-order-history-total\">\n                  <div class=\"d-md-none cx-order-history-label\">\n                    {{ 'orderHistory.total' | cxTranslate }}\n                  </div>\n                  <a\n                    [routerLink]=\"\n                      {\n                        cxRoute: 'orderDetails',\n                        params: order\n                      } | cxUrl\n                    \"\n                    class=\"cx-order-history-value\"\n                  >\n                    {{ order?.total.formattedValue }}</a\n                  >\n                </td>\n              </tr>\n            </tbody>\n          </table>\n          <!-- Select Form and Pagination Bottom -->\n          <div class=\"cx-order-history-sort bottom row\">\n            <div\n              *ngIf=\"type.orderHistory.pagination.totalPages > 1\"\n              class=\"cx-order-history-pagination\"\n            >\n              <cx-pagination\n                [pagination]=\"type.orderHistory.pagination\"\n                (viewPageEvent)=\"pageChange($event)\"\n              ></cx-pagination>\n            </div>\n          </div>\n        </ng-container>\n\n        <!-- NO ORDER CONTAINER -->\n        <ng-template #noOrder>\n          <div\n            *ngIf=\"isLoaded$ | async\"\n            [ngClass]=\"\n              type.replenishmentOrder\n                ? 'cx-replenishment-details-order-history-no-order row'\n                : 'cx-order-history-no-order row'\n            \"\n          >\n            <div\n              [ngClass]=\"\n                type.replenishmentOrder ? '' : 'col-sm-12 col-md-6 col-lg-4'\n              \"\n            >\n              <ng-container *ngIf=\"type.replenishmentOrder; else otherOrder\">\n                <div>{{ 'orderHistory.notFound' | cxTranslate }}</div>\n              </ng-container>\n\n              <ng-template #otherOrder>\n                <div>{{ 'orderHistory.noOrders' | cxTranslate }}</div>\n                <a\n                  [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n                  routerLinkActive=\"active\"\n                  class=\"btn btn-primary btn-block\"\n                  >{{ 'orderHistory.startShopping' | cxTranslate }}</a\n                >\n              </ng-template>\n            </div>\n          </div>\n        </ng-template>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '@spartacus/storefront';\nimport { OrderHistoryComponent } from './order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    FormsModule,\n    NgSelectModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  declarations: [OrderHistoryComponent],\n  exports: [OrderHistoryComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class OrderHistoryModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  HostListener,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { GlobalMessageService, GlobalMessageType } from '@spartacus/core';\nimport { ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport { FocusConfig, LaunchDialogService } from '@spartacus/storefront';\nimport { combineLatest, Subscription } from 'rxjs';\nimport { startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-replenishment-order-cancellation-dialog',\n  templateUrl: './replenishment-order-cancellation-dialog.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReplenishmentOrderCancellationDialogComponent\n  implements OnInit, OnDestroy\n{\n  private subscription = new Subscription();\n\n  replenishmentOrderCode: string;\n\n  focusConfig: FocusConfig = {\n    trap: true,\n    block: true,\n    autofocus: 'button',\n    focusOnEscape: true,\n  };\n\n  @HostListener('click', ['$event'])\n  handleClick(event: UIEvent): void {\n    // Close on click outside the dialog window\n    if ((event.target as any).tagName === this.el.nativeElement.tagName) {\n      this.close('Cross click');\n    }\n  }\n\n  constructor(\n    protected userReplenishmentOrderService: ReplenishmentOrderFacade,\n    protected globalMessageService: GlobalMessageService,\n    protected launchDialogService: LaunchDialogService,\n    protected el: ElementRef\n  ) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      combineLatest([\n        this.userReplenishmentOrderService\n          .getReplenishmentOrderDetails()\n          .pipe(startWith(null)),\n        this.launchDialogService.data$,\n      ]).subscribe(([replenishmentOrder, code]) => {\n        this.replenishmentOrderCode =\n          code || replenishmentOrder?.replenishmentOrderCode;\n      })\n    );\n\n    this.subscription.add(\n      this.userReplenishmentOrderService\n        .getCancelReplenishmentOrderSuccess()\n        .subscribe((value) => this.onSuccess(value))\n    );\n  }\n\n  onSuccess(value: boolean): void {\n    if (value) {\n      this.launchDialogService.closeDialog(\n        'Successffully cancelled replenishment'\n      );\n\n      this.globalMessageService.add(\n        {\n          key: 'orderDetails.cancelReplenishment.cancelSuccess',\n          params: {\n            replenishmentOrderCode: this.replenishmentOrderCode,\n          },\n        },\n        GlobalMessageType.MSG_TYPE_CONFIRMATION\n      );\n    }\n    this.userReplenishmentOrderService.clearCancelReplenishmentOrderProcessState();\n  }\n\n  close(reason: string): void {\n    this.launchDialogService.closeDialog(reason);\n  }\n\n  cancelReplenishment(): void {\n    this.userReplenishmentOrderService.cancelReplenishmentOrder(\n      this.replenishmentOrderCode\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","<div\n  [cxFocus]=\"focusConfig\"\n  (esc)=\"close('Escape clicked')\"\n  class=\"cx-cancel-replenishment-dialog-foreground\"\n>\n  <div class=\"cx-cancel-replenishment-dialog-content\">\n    <div class=\"cx-cancel-replenishment-dialog-header\">\n      <h3>\n        {{ 'orderDetails.cancelReplenishment.title' | cxTranslate }}\n      </h3>\n    </div>\n    <div class=\"cx-cancel-replenishment-dialog-description\">\n      {{ 'orderDetails.cancelReplenishment.description' | cxTranslate }}\n    </div>\n\n    <div class=\"cx-cancel-replenishment-dialog-body\">\n      <div class=\"cx-cancel-replenishment-btns row\">\n        <div class=\"col-md-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"close('Close Replenishment Dialog')\"\n          >\n            {{ 'orderDetails.cancelReplenishment.reject' | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-6\">\n          <button\n            class=\"btn btn-block btn-primary\"\n            (click)=\"cancelReplenishment()\"\n          >\n            {{ 'orderDetails.cancelReplenishment.accept' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { I18nModule } from '@spartacus/core';\nimport { KeyboardFocusModule } from '@spartacus/storefront';\nimport { ReplenishmentOrderCancellationDialogComponent } from './replenishment-order-cancellation-dialog.component';\n\n@NgModule({\n  imports: [CommonModule, I18nModule, KeyboardFocusModule],\n  declarations: [ReplenishmentOrderCancellationDialogComponent],\n  exports: [ReplenishmentOrderCancellationDialogComponent],\n})\nexport class ReplenishmentOrderCancellationDialogModule {}\n","import { DIALOG_TYPE, LayoutConfig } from '@spartacus/storefront';\nimport { ReplenishmentOrderCancellationDialogComponent } from '../replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.component';\n\nexport const defaultReplenishmentOrderCancellationLayoutConfig: LayoutConfig = {\n  launch: {\n    REPLENISHMENT_ORDER: {\n      inline: true,\n      component: ReplenishmentOrderCancellationDialogComponent,\n      dialogType: DIALOG_TYPE.DIALOG,\n    },\n  },\n};\n","import {\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport { ReplenishmentOrder } from '@spartacus/core';\nimport { ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport { LaunchDialogService, LAUNCH_CALLER } from '@spartacus/storefront';\nimport { Observable, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-replenishment-order-cancellation',\n  templateUrl: './replenishment-order-cancellation.component.html',\n})\nexport class ReplenishmentOrderCancellationComponent implements OnDestroy {\n  @ViewChild('element') element: ElementRef;\n\n  private subscription = new Subscription();\n\n  replenishmentOrder$: Observable<ReplenishmentOrder> =\n    this.userReplenishmentOrderService.getReplenishmentOrderDetails();\n\n  constructor(\n    protected userReplenishmentOrderService: ReplenishmentOrderFacade,\n    protected vcr: ViewContainerRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  openDialog() {\n    const dialog = this.launchDialogService.openDialog(\n      LAUNCH_CALLER.REPLENISHMENT_ORDER,\n      this.element,\n      this.vcr\n    );\n\n    if (dialog) {\n      this.subscription.add(dialog.pipe(take(1)).subscribe());\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.userReplenishmentOrderService.clearReplenishmentOrderDetails();\n  }\n}\n","<div class=\"cx-cancel-replenishment-btns row\">\n  <div class=\"col-xs-12 col-md-5 col-lg-4\">\n    <a\n      class=\"btn btn-block btn-action\"\n      [routerLink]=\"\n        {\n          cxRoute: 'replenishmentOrders'\n        } | cxUrl\n      \"\n    >\n      {{ 'common.back' | cxTranslate }}\n    </a>\n  </div>\n  <div\n    *ngIf=\"(replenishmentOrder$ | async)?.active\"\n    class=\"col-xs-12 col-md-5 col-lg-4\"\n  >\n    <button #element class=\"btn btn-block btn-action\" (click)=\"openDialog()\">\n      {{ 'orderDetails.cancelReplenishment.title' | cxTranslate }}\n    </button>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ReplenishmentOrder, RoutingService } from '@spartacus/core';\nimport { ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  map,\n  shareReplay,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReplenishmentOrderDetailsService {\n  protected replenishmentOrderCode$ = this.routingService.getRouterState().pipe(\n    map((routingData) => routingData.state.params.replenishmentOrderCode),\n    distinctUntilChanged()\n  );\n\n  protected replenishmentOrderLoad$ = this.replenishmentOrderCode$.pipe(\n    tap((replenishmentOrderCode: string) => {\n      if (Boolean(replenishmentOrderCode)) {\n        this.userReplenishmentOrderService.loadReplenishmentOrderDetails(\n          replenishmentOrderCode\n        );\n      } else {\n        this.userReplenishmentOrderService.clearReplenishmentOrderDetails();\n      }\n    }),\n    shareReplay({ bufferSize: 1, refCount: true })\n  );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected userReplenishmentOrderService: ReplenishmentOrderFacade\n  ) {}\n\n  getOrderDetails(): Observable<ReplenishmentOrder> {\n    return this.replenishmentOrderLoad$.pipe(\n      switchMap((_) =>\n        this.userReplenishmentOrderService.getReplenishmentOrderDetails()\n      )\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  CardModule,\n  CartSharedModule,\n  ListNavigationModule,\n  PromotionsModule,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { OrderDetailItemsComponent } from '../order-details/order-detail-items/order-detail-items.component';\nimport { OrderDetailShippingComponent } from '../order-details/order-detail-shipping/order-detail-shipping.component';\nimport { OrderDetailTotalsComponent } from '../order-details/order-detail-totals/order-detail-totals.component';\nimport { OrderDetailsService } from '../order-details/order-details.service';\nimport { OrderHistoryComponent } from '../order-history/order-history.component';\nimport { ReplenishmentOrderCancellationDialogModule } from '../replenishment-order-cancellation-dialog/replenishment-order-cancellation-dialog.module';\nimport { defaultReplenishmentOrderCancellationLayoutConfig } from './default-replenishment-order-cancellation-layout.config';\nimport { ReplenishmentOrderCancellationComponent } from './replenishment-order-cancellation/replenishment-order-cancellation.component';\nimport { ReplenishmentOrderDetailsService } from './replenishment-order-details.service';\n\nconst moduleComponents = [ReplenishmentOrderCancellationComponent];\n\n@NgModule({\n  imports: [\n    CartSharedModule,\n    CardModule,\n    CommonModule,\n    I18nModule,\n    PromotionsModule,\n    UrlModule,\n    ReplenishmentOrderCancellationDialogModule,\n    SpinnerModule,\n    ListNavigationModule,\n    RouterModule,\n  ],\n  providers: [\n    provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReplenishmentDetailItemsComponent: {\n          component: OrderDetailItemsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: ReplenishmentOrderDetailsService,\n            },\n          ],\n        },\n        ReplenishmentDetailTotalsComponent: {\n          component: OrderDetailTotalsComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: ReplenishmentOrderDetailsService,\n            },\n          ],\n        },\n        ReplenishmentDetailShippingComponent: {\n          component: OrderDetailShippingComponent,\n          providers: [\n            {\n              provide: OrderDetailsService,\n              useExisting: ReplenishmentOrderDetailsService,\n            },\n          ],\n        },\n        ReplenishmentDetailActionsComponent: {\n          component: ReplenishmentOrderCancellationComponent,\n        },\n        ReplenishmentDetailOrderHistoryComponent: {\n          component: OrderHistoryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...moduleComponents],\n  exports: [...moduleComponents],\n})\nexport class ReplenishmentOrderDetailsModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewContainerRef,\n} from '@angular/core';\nimport {\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport { LaunchDialogService, LAUNCH_CALLER } from '@spartacus/storefront';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-replenishment-order-history',\n  templateUrl: './replenishment-order-history.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReplenishmentOrderHistoryComponent implements OnDestroy {\n  @ViewChild('element') element: ElementRef;\n\n  private subscription = new Subscription();\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  replenishmentOrders$: Observable<ReplenishmentOrderList | undefined> =\n    this.userReplenishmentOrderService\n      .getReplenishmentOrderHistoryList(this.PAGE_SIZE)\n      .pipe(\n        tap((replenishmentOrders: ReplenishmentOrderList | undefined) => {\n          if (replenishmentOrders?.pagination?.sort) {\n            this.sortType = replenishmentOrders.pagination.sort;\n          }\n        })\n      );\n\n  isLoaded$: Observable<boolean> =\n    this.userReplenishmentOrderService.getReplenishmentOrderHistoryListSuccess();\n\n  constructor(\n    protected routing: RoutingService,\n    protected userReplenishmentOrderService: ReplenishmentOrderFacade,\n    protected translation: TranslationService,\n    protected vcr: ViewContainerRef,\n    protected launchDialogService: LaunchDialogService\n  ) {}\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReplenishmentOrders(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReplenishmentOrders(event);\n  }\n\n  goToOrderDetail(order: ReplenishmentOrder): void {\n    this.routing.go({\n      cxRoute: 'replenishmentDetails',\n      params: order,\n    });\n  }\n\n  getSortLabels(): Observable<{\n    byDate: string;\n    byReplenishmentNumber: string;\n    byNextOrderDate: string;\n  }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.replenishmentNumber'),\n      this.translation.translate('sorting.nextOrderDate'),\n    ]).pipe(\n      map(([textByDate, textByOrderNumber, textbyNextOrderDate]) => {\n        return {\n          byDate: textByDate,\n          byReplenishmentNumber: textByOrderNumber,\n          byNextOrderDate: textbyNextOrderDate,\n        };\n      })\n    );\n  }\n\n  openDialog(event: Event, replenishmentOrderCode: string): void {\n    const dialog = this.launchDialogService.openDialog(\n      LAUNCH_CALLER.REPLENISHMENT_ORDER,\n      this.element,\n      this.vcr,\n      replenishmentOrderCode\n    );\n\n    if (dialog) {\n      this.subscription.add(dialog.pipe(take(1)).subscribe());\n    }\n    event.stopPropagation();\n  }\n\n  private fetchReplenishmentOrders(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.userReplenishmentOrderService.loadReplenishmentOrderList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.userReplenishmentOrderService.clearReplenishmentOrderList();\n  }\n}\n","<ng-container *ngIf=\"replenishmentOrders$ | async as replenishmentOrders\">\n  <div class=\"container\">\n    <!-- HEADER -->\n    <div class=\"cx-replenishment-order-history-header\">\n      <h3>\n        {{ 'orderHistory.replenishmentOrderHistory' | cxTranslate }}\n      </h3>\n    </div>\n\n    <!-- BODY -->\n    <div class=\"cx-replenishment-order-history-body\">\n      <ng-container\n        *ngIf=\"replenishmentOrders.pagination.totalResults > 0; else noOrder\"\n      >\n        <!-- Select Form and Pagination Top -->\n        <div class=\"cx-replenishment-order-history-sort top row\">\n          <label\n            class=\"\n              cx-replenishment-order-history-form-group\n              form-group\n              col-sm-12 col-md-4 col-lg-4\n            \"\n          >\n            <span>{{ 'orderHistory.sortBy' | cxTranslate }}</span>\n            <cx-sorting\n              [sortOptions]=\"replenishmentOrders.sorts\"\n              [sortLabels]=\"getSortLabels() | async\"\n              (sortListEvent)=\"changeSortCode($event)\"\n              [selectedOption]=\"replenishmentOrders.pagination.sort\"\n              placeholder=\"{{ 'orderHistory.sortBy' | cxTranslate }}\"\n            ></cx-sorting>\n          </label>\n          <div\n            class=\"cx-replenishment-order-history-pagination\"\n            *ngIf=\"replenishmentOrders.pagination.totalPages > 1\"\n          >\n            <cx-pagination\n              [pagination]=\"replenishmentOrders.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n            ></cx-pagination>\n          </div>\n        </div>\n        <!-- TABLE -->\n        <table class=\"table cx-replenishment-order-history-table\">\n          <thead class=\"cx-replenishment-order-history-thead-mobile\">\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.replenishmentOrderId' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.purchaseOrderNumber' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.startOn' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.frequency' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.nextOrderDate' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\" class=\"cx-replenishment-order-history-total\">\n              <span class=\"cx-replenishment-order-history-ellipses\">\n                {{ 'orderHistory.total' | cxTranslate }}\n              </span>\n            </th>\n            <th scope=\"col\"></th>\n          </thead>\n          <tbody>\n            <tr\n              *ngFor=\"let order of replenishmentOrders.replenishmentOrders\"\n              (click)=\"goToOrderDetail(order)\"\n            >\n              <td class=\"cx-replenishment-order-history-code\">\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.replenishmentOrderId' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.replenishmentOrderCode }}</a\n                >\n              </td>\n              <td>\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.purchaseOrderNumber' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"\n                    cx-replenishment-order-history-value\n                    cx-purchase-order-number\n                  \"\n                >\n                  {{\n                    order?.purchaseOrderNumber?.length > 0\n                      ? order?.purchaseOrderNumber\n                      : ('orderHistory.emptyPurchaseOrderId' | cxTranslate)\n                  }}\n                </a>\n              </td>\n              <td>\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.startOn' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.firstDate | cxDate: 'M/d/yyyy' }}</a\n                >\n              </td>\n              <td class=\"cx-replenishment-order-history-frequency\">\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.frequency' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.trigger.displayTimeTable | slice: 0:-12 }}\n                </a>\n              </td>\n              <td>\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.nextOrderDate' | cxTranslate }}\n                </div>\n\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"\n                    cx-replenishment-order-history-value cx-next-order-date\n                  \"\n                >\n                  {{\n                    order?.active\n                      ? (order?.trigger.activationTime | cxDate: 'M/d/yyyy')\n                      : ('orderHistory.cancelled' | cxTranslate)\n                  }}\n                </a>\n              </td>\n              <td class=\"cx-replenishment-order-history-total\">\n                <div class=\"d-md-none cx-replenishment-order-history-label\">\n                  {{ 'orderHistory.total' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'replenishmentDetails',\n                      params: order\n                    } | cxUrl\n                  \"\n                  class=\"cx-replenishment-order-history-value\"\n                >\n                  {{ order?.totalPriceWithTax.formattedValue }}</a\n                >\n              </td>\n              <td class=\"cx-replenishment-order-history-cancel\">\n                <div\n                  class=\"d-md-none cx-replenishment-order-history-label\"\n                ></div>\n                <button\n                  (click)=\"openDialog($event, order?.replenishmentOrderCode)\"\n                  class=\"cx-order-cancel btn btn-link\"\n                  #element\n                  *ngIf=\"order?.active\"\n                >\n                  {{ 'orderHistory.cancel' | cxTranslate }}\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <!-- Select Form and Pagination Bottom -->\n        <div class=\"cx-replenishment-order-history-sort bottom row\">\n          <div class=\"cx-replenishment-order-history-pagination\">\n            <cx-pagination\n              [pagination]=\"replenishmentOrders.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n              *ngIf=\"replenishmentOrders.pagination.totalPages > 1\"\n            ></cx-pagination>\n          </div>\n        </div>\n      </ng-container>\n\n      <!-- NO ORDER CONTAINER -->\n      <ng-template #noOrder>\n        <div\n          class=\"cx-replenishment-order-history-no-order row\"\n          *ngIf=\"isLoaded$ | async\"\n        >\n          <div class=\"col-sm-12 col-md-6 col-lg-4\">\n            <div>{{ 'orderHistory.noReplenishmentOrders' | cxTranslate }}</div>\n            <a\n              [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n              routerLinkActive=\"active\"\n              class=\"btn btn-primary btn-block\"\n              >{{ 'orderHistory.startShopping' | cxTranslate }}</a\n            >\n          </div>\n        </div>\n      </ng-template>\n    </div>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '@spartacus/storefront';\nimport { defaultReplenishmentOrderCancellationLayoutConfig } from '../replenishment-order-details/default-replenishment-order-cancellation-layout.config';\nimport { ReplenishmentOrderHistoryComponent } from './replenishment-order-history.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideConfig(defaultReplenishmentOrderCancellationLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        AccountReplenishmentHistoryComponent: {\n          component: ReplenishmentOrderHistoryComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ReplenishmentOrderHistoryComponent],\n  exports: [ReplenishmentOrderHistoryComponent],\n})\nexport class ReplenishmentOrderHistoryModule {}\n","import { Injectable } from '@angular/core';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  ReturnRequest,\n  RoutingService,\n} from '@spartacus/core';\nimport { OrderReturnRequestFacade } from '@spartacus/order/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, map, tap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ReturnRequestService {\n  constructor(\n    protected routingService: RoutingService,\n    protected returnRequestService: OrderReturnRequestFacade,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  get isCancelling$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestLoading();\n  }\n\n  get isCancelSuccess$(): Observable<boolean> {\n    return this.returnRequestService.getCancelReturnRequestSuccess();\n  }\n\n  getReturnRequest(): Observable<ReturnRequest> {\n    return combineLatest([\n      this.routingService.getRouterState(),\n      this.returnRequestService.getOrderReturnRequest(),\n      this.returnRequestService.getReturnRequestLoading(),\n    ]).pipe(\n      map(([routingState, returnRequest, isLoading]) => [\n        routingState.state.params['returnCode'],\n        returnRequest,\n        isLoading,\n      ]),\n      filter(([returnCode]) => Boolean(returnCode)),\n      tap(([returnCode, returnRequest, isLoading]) => {\n        if (\n          (returnRequest === undefined || returnRequest.rma !== returnCode) &&\n          !isLoading\n        ) {\n          this.returnRequestService.loadOrderReturnRequestDetail(returnCode);\n        }\n      }),\n      map(([_, returnRequest]) => returnRequest),\n      filter((returnRequest) => Boolean(returnRequest)),\n      distinctUntilChanged()\n    );\n  }\n\n  clearReturnRequest(): void {\n    this.returnRequestService.clearOrderReturnRequestDetail();\n  }\n\n  cancelReturnRequest(returnRequestCode: string): void {\n    this.returnRequestService.cancelOrderReturnRequest(returnRequestCode, {\n      status: 'CANCELLING',\n    });\n  }\n\n  cancelSuccess(rma: string): void {\n    this.returnRequestService.resetCancelReturnRequestProcessState();\n    this.globalMessageService.add(\n      {\n        key: 'returnRequest.cancelSuccess',\n        params: { rma },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.routingService.go({\n      cxRoute: 'orders',\n    });\n  }\n\n  backToList(): void {\n    this.routingService.go(\n      { cxRoute: 'orders' },\n      {\n        state: {\n          activeTab: 1,\n        },\n      }\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ReturnRequest } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-items',\n  templateUrl: './return-request-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestItemsComponent {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<ReturnRequest> =\n    this.returnRequestService.getReturnRequest();\n}\n","<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"d-none d-md-block d-lg-block d-xl-block\">\n    <div class=\"cx-item-list-header row\">\n      <div class=\"cx-item-list-desc col-md-5 col-lg-5 col-xl-6\">\n        {{ 'returnRequest.item' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-price col-md-2 col-lg-2 col-xl-2\">\n        {{ 'returnRequest.itemPrice' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-qty col-md-3 col-lg-3 col-xl-2\">\n        {{ 'returnRequest.returnQty' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\n        {{ 'returnRequest.total' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"cx-item-list-row\"\n    *ngFor=\"let returnEntry of returnRequest.returnEntries; let i = index\"\n  >\n    <div class=\"cx-item-list-items\">\n      <div class=\"row\">\n        <!-- Item Image -->\n        <div class=\"col-2 cx-image-container\">\n          <cx-media\n            [container]=\"returnEntry.orderEntry?.product.images?.PRIMARY\"\n            format=\"thumbnail\"\n          ></cx-media>\n        </div>\n        <!-- Item Information -->\n        <div class=\"cx-info col-10\">\n          <div class=\"cx-info-container row\">\n            <!-- Item Description -->\n            <div class=\"col-md-3 col-lg-4 col-xl-5\">\n              <div *ngIf=\"returnEntry.orderEntry?.product.name\" class=\"cx-name\">\n                {{ returnEntry.orderEntry?.product.name }}\n              </div>\n              <div *ngIf=\"returnEntry.orderEntry?.product.code\" class=\"cx-code\">\n                {{ 'cartItems.id' | cxTranslate }}\n                {{ returnEntry.orderEntry?.product.code }}\n              </div>\n              <!-- Variants -->\n              <div\n                *ngFor=\"\n                  let variant of (returnEntry.orderEntry?.product\n                    .baseOptions)[0]?.selected?.variantOptionQualifiers\n                \"\n                class=\"cx-property\"\n              >\n                <div class=\"cx-label\" *ngIf=\"variant.name\">\n                  {{ variant.name }}:\n                </div>\n                <div class=\"cx-value\" *ngIf=\"variant.value\">\n                  {{ variant.value }}\n                </div>\n              </div>\n            </div>\n            <!-- Item Price -->\n            <div\n              *ngIf=\"returnEntry.orderEntry?.basePrice\"\n              class=\"cx-price col-md-3 col-lg-2 col-xl-2\"\n            >\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.itemPrice' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.orderEntry?.basePrice?.formattedValue }}\n              </div>\n            </div>\n            <!-- return Quantity -->\n            <div class=\"cx-quantity col-md-3 col-lg-3 col-xl-3\">\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.returnQty' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.expectedQuantity }}\n              </div>\n            </div>\n            <!-- Total Price -->\n            <div class=\"cx-total col-md-3 col-lg-3 col-xl-2\">\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.total' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.refundAmount?.formattedValue }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ReturnRequest } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-overview',\n  templateUrl: './return-request-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestOverviewComponent implements OnInit, OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  rma: string;\n  subscription: Subscription;\n\n  returnRequest$: Observable<ReturnRequest> = this.returnRequestService\n    .getReturnRequest()\n    .pipe(tap((returnRequest) => (this.rma = returnRequest.rma ?? '')));\n\n  isCancelling$ = this.returnRequestService.isCancelling$;\n\n  ngOnInit(): void {\n    this.subscription = this.returnRequestService.isCancelSuccess$.subscribe(\n      (success) => {\n        if (success) {\n          this.returnRequestService.cancelSuccess(this.rma);\n        }\n      }\n    );\n  }\n\n  cancelReturn(returnRequestCode: string): void {\n    this.returnRequestService.cancelReturnRequest(returnRequestCode);\n  }\n\n  back(): void {\n    this.returnRequestService.backToList();\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"cx-nav row\">\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <button (click)=\"back()\" class=\"btn btn-block btn-action\">\n        {{ 'common.back' | cxTranslate }}\n      </button>\n    </div>\n\n    <div class=\"col-xs-12 col-md-4 col-lg-3\">\n      <button\n        *ngIf=\"returnRequest.cancellable\"\n        class=\"btn btn-block btn-primary\"\n        (click)=\"cancelReturn(returnRequest.rma)\"\n        [disabled]=\"isCancelling$ | async\"\n      >\n        {{ 'returnRequest.cancel' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n  <div class=\"cx-header row\">\n    <div class=\"cx-detail col-sm-12 col-md-4\">\n      <div class=\"cx-detail-label\">\n        {{ 'returnRequest.returnRequestId' | cxTranslate }}\n      </div>\n      <div class=\"cx-detail-value\">{{ returnRequest.rma }}</div>\n    </div>\n    <div class=\"cx-detail col-sm-12 col-md-4\">\n      <div class=\"cx-detail-label\">\n        {{ 'returnRequest.orderCode' | cxTranslate }}\n      </div>\n      <div class=\"cx-detail-value\">{{ returnRequest.order?.code }}</div>\n    </div>\n    <div class=\"cx-detail col-sm-12 col-md-4\">\n      <div class=\"cx-detail-label\">\n        {{ 'returnRequest.status' | cxTranslate }}\n      </div>\n      <div class=\"cx-detail-value\">\n        {{\n          'returnRequestList.statusDisplay_' + returnRequest?.status\n            | cxTranslate\n        }}\n      </div>\n    </div>\n  </div>\n</ng-container>\n","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport { ReturnRequest } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ReturnRequestService } from '../return-request.service';\n\n@Component({\n  selector: 'cx-return-request-totals',\n  templateUrl: './return-request-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReturnRequestTotalsComponent implements OnDestroy {\n  constructor(protected returnRequestService: ReturnRequestService) {}\n\n  returnRequest$: Observable<ReturnRequest> =\n    this.returnRequestService.getReturnRequest();\n\n  ngOnDestroy() {\n    this.returnRequestService.clearReturnRequest();\n  }\n}\n","<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"row justify-content-end\">\n    <div class=\"cx-summary col-sm-12 col-md-6 col-lg-5 col-xl-4\">\n      <h4>{{ 'returnRequest.summary' | cxTranslate }}</h4>\n      <div class=\"cx-summary-row\">\n        <div class=\"col-6 cx-summary-label\">\n          {{ 'returnRequest.subtotal' | cxTranslate }}\n        </div>\n        <div class=\"col-6 cx-summary-amount\">\n          {{ returnRequest.subTotal?.formattedValue }}\n        </div>\n      </div>\n      <div class=\"cx-summary-row\">\n        <div class=\"col-6 cx-summary-label\">\n          {{ 'returnRequest.deliveryCode' | cxTranslate }}\n        </div>\n        <div class=\"col-6 cx-summary-amount\">\n          {{ returnRequest.deliveryCost?.formattedValue }}\n        </div>\n      </div>\n      <div class=\"cx-summary-row cx-summary-total\">\n        <div class=\"col-6 cx-summary-label\">\n          {{ 'returnRequest.estimatedRefund' | cxTranslate }}\n        </div>\n        <div class=\"col-6 cx-summary-amount\">\n          {{ returnRequest.totalPrice?.formattedValue }}\n        </div>\n      </div>\n      <div class=\"cx-summary-row cx-footnote\">\n        {{ 'returnRequest.note' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { MediaModule } from '@spartacus/storefront';\nimport { ReturnRequestItemsComponent } from './return-request-items/return-request-items.component';\nimport { ReturnRequestOverviewComponent } from './return-request-overview/return-request-overview.component';\nimport { ReturnRequestTotalsComponent } from './return-request-totals/return-request-totals.component';\n\nconst components = [\n  ReturnRequestOverviewComponent,\n  ReturnRequestItemsComponent,\n  ReturnRequestTotalsComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    MediaModule,\n    FeaturesConfigModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturnRequestOverviewComponent: {\n          component: ReturnRequestOverviewComponent,\n        },\n        ReturnRequestItemsComponent: {\n          component: ReturnRequestItemsComponent,\n        },\n        ReturnRequestTotalsComponent: {\n          component: ReturnRequestTotalsComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [...components],\n  exports: [...components],\n})\nexport class ReturnRequestDetailModule {}\n","import { ChangeDetectionStrategy, Component, OnDestroy } from '@angular/core';\nimport {\n  isNotUndefined,\n  ReturnRequestList,\n  TranslationService,\n} from '@spartacus/core';\nimport { OrderReturnRequestFacade } from '@spartacus/order/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, take, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-return-request-list',\n  templateUrl: './order-return-request-list.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderReturnRequestListComponent implements OnDestroy {\n  constructor(\n    private returnRequestService: OrderReturnRequestFacade,\n    private translation: TranslationService\n  ) {}\n\n  private PAGE_SIZE = 5;\n  sortType: string;\n\n  returnRequests$: Observable<ReturnRequestList | undefined> =\n    this.returnRequestService.getOrderReturnRequestList(this.PAGE_SIZE).pipe(\n      tap((requestList: ReturnRequestList | undefined) => {\n        if (requestList?.pagination?.sort) {\n          this.sortType = requestList.pagination.sort;\n        }\n      })\n    );\n\n  /**\n   * When \"Order Return\" feature is enabled, this component becomes one tab in\n   * TabParagraphContainerComponent. This can be read from TabParagraphContainer.\n   */\n  tabTitleParam$: Observable<number> = this.returnRequests$.pipe(\n    map((returnRequests) => returnRequests?.pagination?.totalResults),\n    filter(isNotUndefined),\n    take(1)\n  );\n\n  ngOnDestroy(): void {\n    this.returnRequestService.clearOrderReturnRequestList();\n  }\n\n  changeSortCode(sortCode: string): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode,\n      currentPage: 0,\n    };\n    this.sortType = sortCode;\n    this.fetchReturnRequests(event);\n  }\n\n  pageChange(page: number): void {\n    const event: { sortCode: string; currentPage: number } = {\n      sortCode: this.sortType,\n      currentPage: page,\n    };\n    this.fetchReturnRequests(event);\n  }\n\n  getSortLabels(): Observable<{ byDate: string; byRMA: string }> {\n    return combineLatest([\n      this.translation.translate('sorting.date'),\n      this.translation.translate('sorting.rma'),\n    ]).pipe(\n      map(([textByDate, textByRma]) => {\n        return {\n          byDate: textByDate,\n          byRMA: textByRma,\n        };\n      })\n    );\n  }\n\n  private fetchReturnRequests(event: {\n    sortCode: string;\n    currentPage: number;\n  }): void {\n    this.returnRequestService.loadOrderReturnRequestList(\n      this.PAGE_SIZE,\n      event.currentPage,\n      event.sortCode\n    );\n  }\n}\n","<ng-container *ngIf=\"returnRequests$ | async as returnRequests\">\n  <div class=\"container\">\n    <!-- BODY -->\n    <div class=\"cx-order-history-body\">\n      <ng-container *ngIf=\"returnRequests.pagination.totalResults > 0\">\n        <!-- Select Form and Pagination Top -->\n        <div class=\"cx-order-history-sort top row\">\n          <label\n            class=\"\n              cx-order-history-form-group\n              form-group\n              col-sm-12 col-md-4 col-lg-4\n            \"\n            ><span>{{ 'returnRequestList.sortBy' | cxTranslate }}</span>\n            <cx-sorting\n              [sortOptions]=\"returnRequests.sorts\"\n              [sortLabels]=\"getSortLabels() | async\"\n              (sortListEvent)=\"changeSortCode($event)\"\n              [selectedOption]=\"returnRequests.pagination.sort\"\n            ></cx-sorting>\n          </label>\n          <div class=\"cx-order-history-pagination\">\n            <cx-pagination\n              [pagination]=\"returnRequests.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n            ></cx-pagination>\n          </div>\n        </div>\n        <!-- TABLE -->\n        <table class=\"table cx-order-history-table\">\n          <thead class=\"cx-order-history-thead-mobile\">\n            <th scope=\"col\">\n              {{ 'returnRequestList.returnRequestId' | cxTranslate }}\n            </th>\n            <th scope=\"col\">{{ 'returnRequestList.orderId' | cxTranslate }}</th>\n            <th scope=\"col\">\n              {{ 'returnRequestList.date' | cxTranslate }}\n            </th>\n            <th scope=\"col\">{{ 'returnRequestList.status' | cxTranslate }}</th>\n          </thead>\n          <tbody>\n            <tr *ngFor=\"let return of returnRequests.returnRequests\">\n              <td class=\"cx-order-history-code\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.returnRequestId' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'returnRequestDetails',\n                      params: return\n                    } | cxUrl\n                  \"\n                  class=\"cx-order-history-value\"\n                >\n                  {{ return?.rma }}</a\n                >\n              </td>\n              <td class=\"cx-order-history-code\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.orderId' | cxTranslate }}\n                </div>\n                <a\n                  [routerLink]=\"\n                    {\n                      cxRoute: 'orderDetails',\n                      params: return?.order\n                    } | cxUrl\n                  \"\n                  class=\"cx-order-history-value\"\n                >\n                  {{ return?.order?.code }}</a\n                >\n              </td>\n\n              <td class=\"cx-order-history-placed\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.date' | cxTranslate }}\n                </div>\n                {{ return?.creationTime | cxDate: 'longDate' }}\n              </td>\n              <td class=\"cx-order-history-status\">\n                <div class=\"d-md-none cx-order-history-label\">\n                  {{ 'returnRequestList.status' | cxTranslate }}\n                </div>\n                {{\n                  'returnRequestList.statusDisplay_' + return?.status\n                    | cxTranslate\n                }}\n              </td>\n            </tr>\n          </tbody>\n        </table>\n        <!-- Select Form and Pagination Bottom -->\n        <div class=\"cx-order-history-sort bottom row\">\n          <label\n            class=\"\n              cx-order-history-form-group\n              form-group\n              col-sm-12 col-md-4 col-lg-4\n            \"\n            ><span>{{ 'returnRequestList.sortBy' | cxTranslate }}</span>\n            <cx-sorting\n              [sortOptions]=\"returnRequests.sorts\"\n              [sortLabels]=\"getSortLabels() | async\"\n              (sortListEvent)=\"changeSortCode($event)\"\n              [selectedOption]=\"returnRequests.pagination.sort\"\n            ></cx-sorting>\n          </label>\n          <div class=\"cx-order-history-pagination\">\n            <cx-pagination\n              [pagination]=\"returnRequests.pagination\"\n              (viewPageEvent)=\"pageChange($event)\"\n            ></cx-pagination>\n          </div>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { ListNavigationModule } from '@spartacus/storefront';\nimport { OrderReturnRequestListComponent } from './order-return-request-list.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    ListNavigationModule,\n    UrlModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderReturnRequestListComponent: {\n          component: OrderReturnRequestListComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [OrderReturnRequestListComponent],\n  exports: [OrderReturnRequestListComponent],\n})\nexport class ReturnRequestListModule {}\n","import { NgModule } from '@angular/core';\nimport {\n  OrderCancellationModule,\n  OrderReturnModule,\n} from './amend-order/index';\nimport { OrderDetailsModule } from './order-details/order-details.module';\nimport { OrderHistoryModule } from './order-history/order-history.module';\nimport { ReplenishmentOrderDetailsModule } from './replenishment-order-details/replenishment-order-details.module';\nimport { ReplenishmentOrderHistoryModule } from './replenishment-order-history/replenishment-order-history.module';\nimport { ReturnRequestDetailModule } from './return-request-detail/return-request-detail.module';\nimport { ReturnRequestListModule } from './return-request-list/order-return-request-list.module';\n\n@NgModule({\n  imports: [\n    OrderHistoryModule,\n    OrderDetailsModule,\n    ReplenishmentOrderDetailsModule,\n    OrderCancellationModule,\n    OrderReturnModule,\n    ReplenishmentOrderHistoryModule,\n    ReturnRequestListModule,\n    ReturnRequestDetailModule,\n  ],\n})\nexport class OrderComponentsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["moduleComponents"],"mappings":"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"}