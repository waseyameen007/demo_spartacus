{"version":3,"file":"spartacus-order-core.js","sources":["../../../feature-libs/order/core/connectors/converters.ts","../../../feature-libs/order/core/connectors/order.adapter.ts","../../../feature-libs/order/core/connectors/order.connector.ts","../../../feature-libs/order/core/connectors/replenishment-order.adapter.ts","../../../feature-libs/order/core/connectors/replenishment-order.connector.ts","../../../feature-libs/order/core/store/actions/consignment-tracking.action.ts","../../../feature-libs/order/core/store/order-state.ts","../../../feature-libs/order/core/store/actions/order-details.action.ts","../../../feature-libs/order/core/store/actions/order-return-request.action.ts","../../../feature-libs/order/core/store/actions/orders.action.ts","../../../feature-libs/order/core/store/actions/replenishment-order-details.action.ts","../../../feature-libs/order/core/store/actions/replenishment-orders.action.ts","../../../feature-libs/order/core/store/selectors/feature.selector.ts","../../../feature-libs/order/core/store/selectors/consignment-tracking.selectors.ts","../../../feature-libs/order/core/store/selectors/order-details.selectors.ts","../../../feature-libs/order/core/store/selectors/order-return-request.selectors.ts","../../../feature-libs/order/core/store/selectors/orders.selectors.ts","../../../feature-libs/order/core/store/selectors/replenishment-order-details.selectors.ts","../../../feature-libs/order/core/store/selectors/replenishment-orders.selectors.ts","../../../feature-libs/order/core/facade/order-return-request.service.ts","../../../feature-libs/order/core/facade/order.service.ts","../../../feature-libs/order/core/facade/replenishment-order.service.ts","../../../feature-libs/order/core/facade/facade-providers.ts","../../../feature-libs/order/core/store/effects/consignment-tracking.effect.ts","../../../feature-libs/order/core/store/effects/order-details.effect.ts","../../../feature-libs/order/core/store/effects/order-return-request.effect.ts","../../../feature-libs/order/core/store/effects/orders.effect.ts","../../../feature-libs/order/core/store/effects/replenishment-order-details.effect.ts","../../../feature-libs/order/core/store/effects/replenishment-orders.effect.ts","../../../feature-libs/order/core/store/effects/index.ts","../../../feature-libs/order/core/store/reducers/consignment-tracking.reducer.ts","../../../feature-libs/order/core/store/reducers/order-details.reducer.ts","../../../feature-libs/order/core/store/reducers/order-return-request.reducer.ts","../../../feature-libs/order/core/store/reducers/orders.reducer.ts","../../../feature-libs/order/core/store/reducers/replenishment-order-details.reducer.ts","../../../feature-libs/order/core/store/reducers/replenishment-orders.reducer.ts","../../../feature-libs/order/core/store/reducers/index.ts","../../../feature-libs/order/core/store/order-store.module.ts","../../../feature-libs/order/core/order-core.module.ts","../../../feature-libs/order/core/spartacus-order-core.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\nimport {\n  Converter,\n  OrderHistoryList,\n  ReplenishmentOrderList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n} from '@spartacus/core';\nimport { ConsignmentTracking } from '@spartacus/order/root';\n\nexport const ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, OrderHistoryList>\n>('OrderHistoryNormalizer');\n\nexport const CONSIGNMENT_TRACKING_NORMALIZER = new InjectionToken<\n  Converter<any, ConsignmentTracking>\n>('ConsignmentTrackingNormalizer');\n\nexport const ORDER_RETURN_REQUEST_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequest>\n>('OrderReturnRequestNormalizer');\n\nexport const ORDER_RETURN_REQUEST_INPUT_SERIALIZER = new InjectionToken<\n  Converter<ReturnRequestEntryInputList, any>\n>('OrderReturnRequestInputSerializer');\n\nexport const ORDER_RETURNS_NORMALIZER = new InjectionToken<\n  Converter<any, ReturnRequestList>\n>('OrderReturnsNormalizer');\n\nexport const REPLENISHMENT_ORDER_HISTORY_NORMALIZER = new InjectionToken<\n  Converter<any, ReplenishmentOrderList>\n>('ReplenishmentOrderHistoryNormalizer');\n","import {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '@spartacus/core';\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\n\nexport abstract class OrderAdapter {\n  /**\n   * Abstract method used to load order data.\n   *\n   * @param userId The `userId` for given user\n   * @param orderCode The `orderCode` for given order\n   */\n  abstract load(userId: string, orderCode: string): Observable<Order>;\n\n  /**\n   * Abstract method used to load order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to get consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   * @param userId user id related to order\n   */\n  abstract getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking>;\n\n  /**\n   * Abstract method used to create return request\n   * @param userId The `userId` for given user\n   * @param returnRequestInput Return request entry input list\n   */\n  abstract createReturnRequest(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request details\n   * @param userId\n   * @param returnRequestCode\n   */\n  abstract loadReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest>;\n\n  /**\n   * Abstract method used to load order return request list for an user.\n   * @param userId\n   * @param pageSize\n   * @param currentPage\n   * @param sort\n   */\n  abstract loadReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList>;\n\n  /**\n   * Abstract method used to cancel order\n   * @param userId\n   * @param orderCode\n   * @param cancelRequestInput Cancel request entry input list\n   */\n  abstract cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}>;\n\n  /**\n   * Abstract method used to cancel one return request\n   * @param userId\n   * @param returnRequestCode\n   * @param returnRequestModification\n   */\n  abstract cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}>;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n} from '@spartacus/core';\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { OrderAdapter } from './order.adapter';\n\n@Injectable()\nexport class OrderConnector {\n  constructor(protected adapter: OrderAdapter) {}\n\n  public get(userId: string, orderCode: string): Observable<Order> {\n    return this.adapter.load(userId, orderCode);\n  }\n\n  public getHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n\n  public getConsignmentTracking(\n    orderCode: string,\n    consignmentCode: string,\n    userId?: string\n  ): Observable<ConsignmentTracking> {\n    return this.adapter.getConsignmentTracking(\n      orderCode,\n      consignmentCode,\n      userId\n    );\n  }\n\n  public cancel(\n    userId: string,\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): Observable<{}> {\n    return this.adapter.cancel(userId, orderCode, cancelRequestInput);\n  }\n\n  public return(\n    userId: string,\n    returnRequestInput: ReturnRequestEntryInputList\n  ): Observable<ReturnRequest> {\n    return this.adapter.createReturnRequest(userId, returnRequestInput);\n  }\n\n  public getReturnRequestDetail(\n    userId: string,\n    returnRequestCode: string\n  ): Observable<ReturnRequest> {\n    return this.adapter.loadReturnRequestDetail(userId, returnRequestCode);\n  }\n\n  public getReturnRequestList(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReturnRequestList> {\n    return this.adapter.loadReturnRequestList(\n      userId,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReturnRequest(\n    userId: string,\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): Observable<{}> {\n    return this.adapter.cancelReturnRequest(\n      userId,\n      returnRequestCode,\n      returnRequestModification\n    );\n  }\n}\n","import {\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\nexport abstract class ReplenishmentOrderAdapter {\n  /**\n   * Abstract method used to load replenishment order details.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   */\n  abstract load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder>;\n\n  /**\n   * Abstract method used to load order history from a replenishment order.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   * @param pageSize The `pageSize` to display number of data as order history\n   * @param currentPage The `currentPage` of the order history list\n   * @param sort The `sort` for a sorting method\n   */\n  abstract loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList>;\n\n  /**\n   * Abstract method used to cancel a replenishment order.\n   *\n   * @param userId The `userId` for given user\n   * @param replenishmentOrderCode The `replenishmentOrderCode` for a given scheduled replenishment\n   */\n  abstract cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder>;\n\n  /**\n   * Abstract method used to load replenishment order history for an user.\n   *\n   * @param userId The `userId` for given user\n   * @param pageSize\n   * @param currentPage\n   * @param sort Sorting method\n   */\n  abstract loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList>;\n}\n","import { Injectable } from '@angular/core';\nimport {\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { ReplenishmentOrderAdapter } from './replenishment-order.adapter';\n\n@Injectable()\nexport class ReplenishmentOrderConnector {\n  constructor(protected adapter: ReplenishmentOrderAdapter) {}\n\n  public load(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.load(userId, replenishmentOrderCode);\n  }\n\n  public loadReplenishmentDetailsHistory(\n    userId: string,\n    replenishmentOrderCode: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<OrderHistoryList> {\n    return this.adapter.loadReplenishmentDetailsHistory(\n      userId,\n      replenishmentOrderCode,\n      pageSize,\n      currentPage,\n      sort\n    );\n  }\n\n  public cancelReplenishmentOrder(\n    userId: string,\n    replenishmentOrderCode: string\n  ): Observable<ReplenishmentOrder> {\n    return this.adapter.cancelReplenishmentOrder(\n      userId,\n      replenishmentOrderCode\n    );\n  }\n\n  public loadHistory(\n    userId: string,\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): Observable<ReplenishmentOrderList> {\n    return this.adapter.loadHistory(userId, pageSize, currentPage, sort);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { ConsignmentTracking } from '@spartacus/order/root';\n\nexport const LOAD_CONSIGNMENT_TRACKING = '[Order] Load Consignment Tracking';\nexport const LOAD_CONSIGNMENT_TRACKING_FAIL =\n  '[Order] Load Consignment Tracking Fail';\nexport const LOAD_CONSIGNMENT_TRACKING_SUCCESS =\n  '[Order] Load Consignment Tracking Success';\nexport const CLEAR_CONSIGNMENT_TRACKING = '[Order] Clear Consignment Tracking';\n\nexport class LoadConsignmentTracking implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING;\n  constructor(\n    public payload: {\n      userId?: string;\n      orderCode: string;\n      consignmentCode: string;\n    }\n  ) {}\n}\n\nexport class LoadConsignmentTrackingFail implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_FAIL;\n  constructor(public payload: any) {}\n}\n\nexport class LoadConsignmentTrackingSuccess implements Action {\n  readonly type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;\n  constructor(public payload: ConsignmentTracking) {}\n}\n\nexport class ClearConsignmentTracking {\n  readonly type = CLEAR_CONSIGNMENT_TRACKING;\n  constructor() {}\n}\n\nexport type ConsignmentTrackingAction =\n  | LoadConsignmentTracking\n  | LoadConsignmentTrackingFail\n  | LoadConsignmentTrackingSuccess\n  | ClearConsignmentTracking;\n","import {\n  Order,\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  ReturnRequest,\n  ReturnRequestList,\n  StateUtils,\n} from '@spartacus/core';\nimport { ConsignmentTracking } from '@spartacus/order/root';\n\nexport const ORDER_FEATURE = 'order';\n\nexport const CANCEL_ORDER_PROCESS_ID = 'cancelOrder';\nexport const CANCEL_RETURN_PROCESS_ID = 'cancelReturn';\nexport const CANCEL_REPLENISHMENT_ORDER_PROCESS_ID = 'cancelReplenishmentOrder';\nexport const ORDERS = '[Order] User Orders';\nexport const RETURN_REQUESTS = '[Order] Order Return Requests';\nexport const RETURN_REQUEST_DETAILS = '[Order] Return Request Details';\nexport const ORDER_DETAILS = '[Order] User Order Details';\nexport const REPLENISHMENT_ORDERS = '[Order] User Replenishment Orders';\nexport const REPLENISHMENT_ORDER_DETAILS =\n  '[Order] User Replenishment Order Details';\n\nexport interface StateWithOrder {\n  [ORDER_FEATURE]: OrderState;\n}\n\nexport interface OrderState {\n  orders: StateUtils.LoaderState<OrderHistoryList>;\n  orderDetail: StateUtils.LoaderState<Order>;\n  replenishmentOrders: StateUtils.LoaderState<ReplenishmentOrderList>;\n  orderReturn: StateUtils.LoaderState<ReturnRequest>;\n  orderReturnList: StateUtils.LoaderState<ReturnRequestList>;\n  consignmentTracking: ConsignmentTrackingState;\n  replenishmentOrder: StateUtils.LoaderState<ReplenishmentOrder>;\n}\n\nexport interface ConsignmentTrackingState {\n  tracking: ConsignmentTracking;\n}\n","import {\n  CancellationRequestEntryInputList,\n  Order,\n  PROCESS_FEATURE,\n  StateUtils,\n} from '@spartacus/core';\nimport { CANCEL_ORDER_PROCESS_ID, ORDER_DETAILS } from '../order-state';\n\nexport const LOAD_ORDER_DETAILS = '[Order] Load Order Details';\nexport const LOAD_ORDER_DETAILS_FAIL = '[Order] Load Order Details Fail';\nexport const LOAD_ORDER_DETAILS_SUCCESS = '[Order] Load Order Details Success';\nexport const CLEAR_ORDER_DETAILS = '[Order] Clear Order Details';\n\nexport const CANCEL_ORDER = '[Order] Cancel Order';\nexport const CANCEL_ORDER_FAIL = '[Order] Cancel Order Fail';\nexport const CANCEL_ORDER_SUCCESS = '[Order] Cancel Order Success';\nexport const RESET_CANCEL_ORDER_PROCESS = '[Order] Reset Cancel Order Process';\n\nexport class LoadOrderDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n    }\n  ) {\n    super(ORDER_DETAILS);\n  }\n}\n\nexport class LoadOrderDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(ORDER_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: Order) {\n    super(ORDER_DETAILS);\n  }\n}\n\nexport class ClearOrderDetails extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_ORDER_DETAILS;\n  constructor() {\n    super(ORDER_DETAILS);\n  }\n}\n\nexport class CancelOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      orderCode: string;\n      cancelRequestInput: CancellationRequestEntryInputList;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_ORDER_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);\n  }\n}\n\nexport type OrderDetailsAction =\n  | LoadOrderDetails\n  | LoadOrderDetailsFail\n  | LoadOrderDetailsSuccess\n  | ClearOrderDetails\n  | CancelOrder\n  | CancelOrderFail\n  | CancelOrderSuccess;\n","import {\n  PROCESS_FEATURE,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n  StateUtils,\n} from '@spartacus/core';\nimport {\n  CANCEL_RETURN_PROCESS_ID,\n  RETURN_REQUESTS,\n  RETURN_REQUEST_DETAILS,\n} from '../order-state';\n\nexport const CREATE_ORDER_RETURN_REQUEST =\n  '[Order] Create Order Return Request';\nexport const CREATE_ORDER_RETURN_REQUEST_FAIL =\n  '[Order] Create Order Return Request Fail';\nexport const CREATE_ORDER_RETURN_REQUEST_SUCCESS =\n  '[Order] Create Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST =\n  '[Order] Load Order Return Request details';\nexport const LOAD_ORDER_RETURN_REQUEST_FAIL =\n  '[Order] Load Order Return Request details Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_SUCCESS =\n  '[Order] Load Order Return Request details Success';\n\nexport const CANCEL_ORDER_RETURN_REQUEST =\n  '[Order] Cancel Order Return Request';\nexport const CANCEL_ORDER_RETURN_REQUEST_FAIL =\n  '[Order] Cancel Order Return Request Fail';\nexport const CANCEL_ORDER_RETURN_REQUEST_SUCCESS =\n  '[Order] Cancel Order Return Request Success';\n\nexport const LOAD_ORDER_RETURN_REQUEST_LIST =\n  '[Order] Load User Order Return Request List';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL =\n  '[Order] Load User Order Return Request List Fail';\nexport const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS =\n  '[Order] Load User Order Return Request List Success';\n\nexport const CLEAR_ORDER_RETURN_REQUEST =\n  '[Order] Clear Order Return Request Details';\nexport const CLEAR_ORDER_RETURN_REQUEST_LIST =\n  '[Order] Clear Order Return Request List';\nexport const RESET_CANCEL_RETURN_PROCESS =\n  '[Order] Reset Cancel Return Request Process';\n\nexport class CreateOrderReturnRequest extends StateUtils.LoaderLoadAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestInput: ReturnRequestEntryInputList;\n    }\n  ) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CreateOrderReturnRequestFail extends StateUtils.LoaderFailAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class CreateOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequest extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n    }\n  ) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class LoadOrderReturnRequestFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(RETURN_REQUEST_DETAILS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor(public payload: ReturnRequest) {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST;\n  constructor(\n    public payload: {\n      userId: string;\n      returnRequestCode: string;\n      returnRequestModification: ReturnRequestModification;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);\n  }\n}\n\nexport class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport class LoadOrderReturnRequestList extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(RETURN_REQUESTS);\n  }\n}\n\nexport class LoadOrderReturnRequestListFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;\n  constructor(public payload: any) {\n    super(RETURN_REQUESTS, payload);\n  }\n}\n\nexport class LoadOrderReturnRequestListSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;\n  constructor(public payload: ReturnRequestList) {\n    super(RETURN_REQUESTS);\n  }\n}\n\nexport class ClearOrderReturnRequest extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST;\n  constructor() {\n    super(RETURN_REQUEST_DETAILS);\n  }\n}\n\nexport class ClearOrderReturnRequestList extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_ORDER_RETURN_REQUEST_LIST;\n  constructor() {\n    super(RETURN_REQUESTS);\n  }\n}\n\nexport class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {\n  readonly type = RESET_CANCEL_RETURN_PROCESS;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);\n  }\n}\n\nexport type OrderReturnRequestAction =\n  | CreateOrderReturnRequest\n  | CreateOrderReturnRequestFail\n  | CreateOrderReturnRequestSuccess\n  | LoadOrderReturnRequest\n  | LoadOrderReturnRequestFail\n  | LoadOrderReturnRequestSuccess\n  | CancelOrderReturnRequest\n  | CancelOrderReturnRequestFail\n  | CancelOrderReturnRequestSuccess\n  | LoadOrderReturnRequestList\n  | LoadOrderReturnRequestListFail\n  | LoadOrderReturnRequestListSuccess\n  | ClearOrderReturnRequest\n  | ClearOrderReturnRequestList\n  | ResetCancelReturnProcess;\n","import { OrderHistoryList, StateUtils } from '@spartacus/core';\nimport { ORDERS } from '../order-state';\n\nexport const LOAD_USER_ORDERS = '[Order] Load User Orders';\nexport const LOAD_USER_ORDERS_FAIL = '[Order] Load User Orders Fail';\nexport const LOAD_USER_ORDERS_SUCCESS = '[Order] Load User Orders Success';\nexport const CLEAR_USER_ORDERS = '[Order] Clear User Orders';\n\nexport class LoadUserOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n      replenishmentOrderCode?: string;\n    }\n  ) {\n    super(ORDERS);\n  }\n}\n\nexport class LoadUserOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(ORDERS, payload);\n  }\n}\n\nexport class LoadUserOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_ORDERS_SUCCESS;\n  constructor(public payload: OrderHistoryList) {\n    super(ORDERS);\n  }\n}\n\nexport class ClearUserOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_ORDERS;\n  constructor() {\n    super(ORDERS);\n  }\n}\n\nexport type UserOrdersAction =\n  | LoadUserOrders\n  | LoadUserOrdersFail\n  | LoadUserOrdersSuccess\n  | ClearUserOrders;\n","import {\n  PROCESS_FEATURE,\n  ReplenishmentOrder,\n  StateUtils,\n} from '@spartacus/core';\nimport {\n  CANCEL_REPLENISHMENT_ORDER_PROCESS_ID,\n  REPLENISHMENT_ORDER_DETAILS,\n} from '../order-state';\n\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS =\n  '[Order] Load Replenishment Order Details';\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS =\n  '[Order] Load Replenishment Order Details Success';\nexport const LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL =\n  '[Order] Load Replenishment Order Details Fail';\nexport const ClEAR_REPLENISHMENT_ORDER_DETAILS =\n  '[Order] Clear Replenishment Order Details';\n\nexport const CANCEL_REPLENISHMENT_ORDER = '[Order] Cancel Replenishment Order';\nexport const CANCEL_REPLENISHMENT_ORDER_SUCCESS =\n  '[Order] Cancel Replenishment Order Success';\nexport const CANCEL_REPLENISHMENT_ORDER_FAIL =\n  '[Order] Cancel Replenishment Order Fail';\nexport const CLEAR_CANCEL_REPLENISHMENT_ORDER =\n  '[Order] Clear Cancel Replenishment Order';\n\nexport class LoadReplenishmentOrderDetails extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS;\n  constructor(\n    public payload: {\n      userId: string;\n      replenishmentOrderCode: string;\n    }\n  ) {\n    super(REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class LoadReplenishmentOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class LoadReplenishmentOrderDetailsFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL;\n  constructor(public payload: any) {\n    super(REPLENISHMENT_ORDER_DETAILS, payload);\n  }\n}\n\nexport class ClearReplenishmentOrderDetails extends StateUtils.LoaderResetAction {\n  readonly type = ClEAR_REPLENISHMENT_ORDER_DETAILS;\n  constructor() {\n    super(REPLENISHMENT_ORDER_DETAILS);\n  }\n}\n\nexport class CancelReplenishmentOrder extends StateUtils.EntityLoadAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER;\n  constructor(\n    public payload: {\n      userId: string;\n      replenishmentOrderCode: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER_SUCCESS;\n  constructor(public payload: ReplenishmentOrder) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport class CancelReplenishmentOrderFail extends StateUtils.EntityFailAction {\n  readonly type = CANCEL_REPLENISHMENT_ORDER_FAIL;\n  constructor(public payload: any) {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, payload);\n  }\n}\n\nexport class ClearCancelReplenishmentOrder extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_CANCEL_REPLENISHMENT_ORDER;\n  constructor() {\n    super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);\n  }\n}\n\nexport type ReplenishmentOrderDetailsAction =\n  | LoadReplenishmentOrderDetails\n  | LoadReplenishmentOrderDetailsSuccess\n  | LoadReplenishmentOrderDetailsFail\n  | ClearReplenishmentOrderDetails\n  | CancelReplenishmentOrder\n  | CancelReplenishmentOrderSuccess\n  | CancelReplenishmentOrderFail\n  | ClearCancelReplenishmentOrder;\n","import { ReplenishmentOrderList, StateUtils } from '@spartacus/core';\nimport { REPLENISHMENT_ORDERS } from '../order-state';\n\nexport const LOAD_USER_REPLENISHMENT_ORDERS =\n  '[Order] Load User Replenishment Orders';\nexport const LOAD_USER_REPLENISHMENT_ORDERS_FAIL =\n  '[Order] Load User Replenishment Orders Fail';\nexport const LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS =\n  '[Order] Load User Replenishment Orders Success';\nexport const CLEAR_USER_REPLENISHMENT_ORDERS =\n  '[Order] Clear User Replenishment Orders';\n\nexport class LoadUserReplenishmentOrders extends StateUtils.LoaderLoadAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS;\n  constructor(\n    public payload: {\n      userId: string;\n      pageSize?: number;\n      currentPage?: number;\n      sort?: string;\n    }\n  ) {\n    super(REPLENISHMENT_ORDERS);\n  }\n}\n\nexport class LoadUserReplenishmentOrdersFail extends StateUtils.LoaderFailAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;\n  constructor(public payload: any) {\n    super(REPLENISHMENT_ORDERS, payload);\n  }\n}\n\nexport class LoadUserReplenishmentOrdersSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;\n  constructor(public payload: ReplenishmentOrderList) {\n    super(REPLENISHMENT_ORDERS);\n  }\n}\n\nexport class ClearUserReplenishmentOrders extends StateUtils.LoaderResetAction {\n  readonly type = CLEAR_USER_REPLENISHMENT_ORDERS;\n  constructor() {\n    super(REPLENISHMENT_ORDERS);\n  }\n}\n\nexport type UserReplenishmentOrdersAction =\n  | LoadUserReplenishmentOrders\n  | LoadUserReplenishmentOrdersFail\n  | LoadUserReplenishmentOrdersSuccess\n  | ClearUserReplenishmentOrders;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderState, ORDER_FEATURE, StateWithOrder } from '../order-state';\n\nexport const getOrderState: MemoizedSelector<StateWithOrder, OrderState> =\n  createFeatureSelector<OrderState>(ORDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport {\n  ConsignmentTrackingState,\n  OrderState,\n  StateWithOrder,\n} from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getConsignmentTrackingState: MemoizedSelector<\n  StateWithOrder,\n  ConsignmentTrackingState\n> = createSelector(\n  getOrderState,\n  (state: OrderState) => state.consignmentTracking\n);\n\nexport const getConsignmentTracking: MemoizedSelector<\n  StateWithOrder,\n  ConsignmentTracking\n> = createSelector(\n  getConsignmentTrackingState,\n  (state: ConsignmentTrackingState) => state.tracking\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { Order, StateUtils } from '@spartacus/core';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getOrderDetailState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<Order>\n> = createSelector(getOrderState, (state: OrderState) => state.orderDetail);\n\nexport const getOrderDetails: MemoizedSelector<StateWithOrder, Order> =\n  createSelector(getOrderDetailState, (state: StateUtils.LoaderState<Order>) =>\n    StateUtils.loaderValueSelector(state)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReturnRequest, ReturnRequestList, StateUtils } from '@spartacus/core';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getOrderReturnRequestState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReturnRequest>\n> = createSelector(getOrderState, (state: OrderState) => state.orderReturn);\n\nexport const getOrderReturnRequest: MemoizedSelector<\n  StateWithOrder,\n  ReturnRequest\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: StateUtils.LoaderState<ReturnRequest>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getOrderReturnRequestLoading: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: StateUtils.LoaderState<ReturnRequest>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestSuccess: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getOrderReturnRequestState,\n  (state: StateUtils.LoaderState<ReturnRequest>) =>\n    StateUtils.loaderSuccessSelector(state) &&\n    !StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getOrderReturnRequestListState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReturnRequestList>\n> = createSelector(getOrderState, (state: OrderState) => state.orderReturnList);\n\nexport const getOrderReturnRequestList: MemoizedSelector<\n  StateWithOrder,\n  ReturnRequestList\n> = createSelector(\n  getOrderReturnRequestListState,\n  (state: StateUtils.LoaderState<ReturnRequestList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { OrderHistoryList, StateUtils } from '@spartacus/core';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getOrdersState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<OrderHistoryList>\n> = createSelector(getOrderState, (state: OrderState) => state.orders);\n\nexport const getOrdersLoaded: MemoizedSelector<StateWithOrder, boolean> =\n  createSelector(\n    getOrdersState,\n    (state: StateUtils.LoaderState<OrderHistoryList>) =>\n      StateUtils.loaderSuccessSelector(state)\n  );\n\nexport const getOrders: MemoizedSelector<StateWithOrder, OrderHistoryList> =\n  createSelector(\n    getOrdersState,\n    (state: StateUtils.LoaderState<OrderHistoryList>) =>\n      StateUtils.loaderValueSelector(state)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReplenishmentOrder, StateUtils } from '@spartacus/core';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getReplenishmentOrderState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReplenishmentOrder>\n> = createSelector(\n  getOrderState,\n  (state: OrderState) => state.replenishmentOrder\n);\n\nexport const getReplenishmentOrderDetailsValue: MemoizedSelector<\n  StateWithOrder,\n  ReplenishmentOrder\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsLoading: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsSuccess: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderSuccessSelector(state)\n);\n\nexport const getReplenishmentOrderDetailsError: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrderState,\n  (state: StateUtils.LoaderState<ReplenishmentOrder>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { ReplenishmentOrderList, StateUtils } from '@spartacus/core';\nimport { OrderState, StateWithOrder } from '../order-state';\nimport { getOrderState } from './feature.selector';\n\nexport const getReplenishmentOrdersState: MemoizedSelector<\n  StateWithOrder,\n  StateUtils.LoaderState<ReplenishmentOrderList>\n> = createSelector(\n  getOrderState,\n  (state: OrderState) => state.replenishmentOrders\n);\n\nexport const getReplenishmentOrders: MemoizedSelector<\n  StateWithOrder,\n  ReplenishmentOrderList\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getReplenishmentOrdersLoading: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n\nexport const getReplenishmentOrdersError: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderErrorSelector(state)\n);\n\nexport const getReplenishmentOrdersSuccess: MemoizedSelector<\n  StateWithOrder,\n  boolean\n> = createSelector(\n  getReplenishmentOrdersState,\n  (state: StateUtils.LoaderState<ReplenishmentOrderList>) =>\n    StateUtils.loaderSuccessSelector(state)\n);\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  ProcessSelectors,\n  ReturnRequest,\n  ReturnRequestEntryInputList,\n  ReturnRequestList,\n  ReturnRequestModification,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { OrderReturnRequestFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { OrderActions } from '../store/actions/index';\nimport { CANCEL_RETURN_PROCESS_ID, StateWithOrder } from '../store/order-state';\nimport { OrderSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class OrderReturnRequestService implements OrderReturnRequestFacade {\n  constructor(\n    protected store: Store<StateWithOrder>,\n    protected processStateStore: Store<StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Create order return request\n   * @param orderCode an order code\n   * @param returnRequestInput order return request entry input\n   */\n  createOrderReturnRequest(\n    returnRequestInput: ReturnRequestEntryInputList\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.CreateOrderReturnRequest({\n          userId,\n          returnRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Return an order return request\n   */\n  getOrderReturnRequest(): Observable<ReturnRequest> {\n    return this.store.pipe(select(OrderSelectors.getOrderReturnRequest));\n  }\n\n  /**\n   * Gets order return request list\n   */\n  getOrderReturnRequestList(\n    pageSize: number\n  ): Observable<ReturnRequestList | undefined> {\n    return this.store.pipe(\n      select(OrderSelectors.getOrderReturnRequestListState),\n      tap((returnListState) => {\n        const attemptedLoad =\n          returnListState.loading ||\n          returnListState.success ||\n          returnListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderReturnRequestList(pageSize);\n        }\n      }),\n      map((returnListState) => returnListState.value)\n    );\n  }\n\n  /**\n   * Loads order return request detail\n   * @param returnRequestCode\n   */\n  loadOrderReturnRequestDetail(returnRequestCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.LoadOrderReturnRequest({\n          userId,\n          returnRequestCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Loads order return request list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderReturnRequestList(\n    pageSize: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.LoadOrderReturnRequestList({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Cleaning order return request list\n   */\n  clearOrderReturnRequestList(): void {\n    this.store.dispatch(new OrderActions.ClearOrderReturnRequestList());\n  }\n\n  /**\n   * Get the order return request loading flag\n   */\n  getReturnRequestLoading(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrderReturnRequestLoading));\n  }\n\n  /**\n   * Get the order return request success flag\n   */\n  getReturnRequestSuccess(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrderReturnRequestSuccess));\n  }\n\n  /**\n   * Cleaning order return request details\n   */\n  clearOrderReturnRequestDetail(): void {\n    this.store.dispatch(new OrderActions.ClearOrderReturnRequest());\n  }\n\n  /*\n   * Cancel order return request\n   */\n  cancelOrderReturnRequest(\n    returnRequestCode: string,\n    returnRequestModification: ReturnRequestModification\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.CancelOrderReturnRequest({\n          userId,\n          returnRequestCode,\n          returnRequestModification,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel return request loading flag\n   */\n  getCancelReturnRequestLoading(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(CANCEL_RETURN_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Returns the cancel return request success flag\n   */\n  getCancelReturnRequestSuccess(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(CANCEL_RETURN_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Resets the cancel return request process flags\n   */\n  resetCancelReturnRequestProcessState(): void {\n    return this.store.dispatch(new OrderActions.ResetCancelReturnProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  CancellationRequestEntryInputList,\n  Order,\n  OrderHistoryList,\n  ProcessSelectors,\n  RoutingService,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { ConsignmentTracking, OrderFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { map, take, tap } from 'rxjs/operators';\nimport { OrderActions } from '../store/actions/index';\nimport { CANCEL_ORDER_PROCESS_ID, StateWithOrder } from '../store/order-state';\nimport { OrderSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class OrderService implements OrderFacade {\n  constructor(\n    protected store: Store<StateWithOrder>,\n    protected processStateStore: Store<StateWithProcess<void>>,\n    protected userIdService: UserIdService,\n    protected routingService: RoutingService\n  ) {}\n\n  /**\n   * Returns an order's detail\n   */\n  getOrderDetails(): Observable<Order> {\n    return this.store.pipe(select(OrderSelectors.getOrderDetails));\n  }\n\n  /**\n   * Retrieves order's details\n   *\n   * @param orderCode an order code\n   */\n  loadOrderDetails(orderCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.LoadOrderDetails({\n          userId,\n          orderCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Clears order's details\n   */\n  clearOrderDetails(): void {\n    this.store.dispatch(new OrderActions.ClearOrderDetails());\n  }\n\n  /**\n   * Returns order history list\n   */\n  getOrderHistoryList(\n    pageSize: number\n  ): Observable<OrderHistoryList | undefined> {\n    return this.store.pipe(\n      select(OrderSelectors.getOrdersState),\n      tap((orderListState) => {\n        const attemptedLoad =\n          orderListState.loading ||\n          orderListState.success ||\n          orderListState.error;\n        if (!attemptedLoad) {\n          this.loadOrderList(pageSize);\n        }\n      }),\n      map((orderListState) => orderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loaded flag for order history list\n   */\n  getOrderHistoryListLoaded(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getOrdersLoaded));\n  }\n\n  /**\n   * Retrieves an order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadOrderList(pageSize: number, currentPage?: number, sort?: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        let replenishmentOrderCode: string | undefined;\n\n        this.routingService\n          .getRouterState()\n          .pipe(take(1))\n          .subscribe((data) => {\n            replenishmentOrderCode =\n              data?.state?.params?.replenishmentOrderCode;\n          })\n          .unsubscribe();\n\n        this.store.dispatch(\n          new OrderActions.LoadUserOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n            replenishmentOrderCode,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Cleaning order list\n   */\n  clearOrderList(): void {\n    this.store.dispatch(new OrderActions.ClearUserOrders());\n  }\n\n  /**\n   *  Returns a consignment tracking detail\n   */\n  getConsignmentTracking(): Observable<ConsignmentTracking> {\n    return this.store.pipe(select(OrderSelectors.getConsignmentTracking));\n  }\n\n  /**\n   * Retrieves consignment tracking details\n   * @param orderCode an order code\n   * @param consignmentCode a consignment code\n   */\n  loadConsignmentTracking(orderCode: string, consignmentCode: string): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.LoadConsignmentTracking({\n          userId,\n          orderCode,\n          consignmentCode,\n        })\n      );\n    });\n  }\n\n  /**\n   * Cleaning consignment tracking\n   */\n  clearConsignmentTracking(): void {\n    this.store.dispatch(new OrderActions.ClearConsignmentTracking());\n  }\n\n  /*\n   * Cancel an order\n   */\n  cancelOrder(\n    orderCode: string,\n    cancelRequestInput: CancellationRequestEntryInputList\n  ): void {\n    this.userIdService.takeUserId().subscribe((userId) => {\n      this.store.dispatch(\n        new OrderActions.CancelOrder({\n          userId,\n          orderCode,\n          cancelRequestInput,\n        })\n      );\n    });\n  }\n\n  /**\n   * Returns the cancel order loading flag\n   */\n  getCancelOrderLoading(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(ProcessSelectors.getProcessLoadingFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Returns the cancel order success flag\n   */\n  getCancelOrderSuccess(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(ProcessSelectors.getProcessSuccessFactory(CANCEL_ORDER_PROCESS_ID))\n    );\n  }\n\n  /**\n   * Resets the cancel order process flags\n   */\n  resetCancelOrderProcessState(): void {\n    return this.store.dispatch(new OrderActions.ResetCancelOrderProcess());\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  ProcessSelectors,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  StateWithProcess,\n  UserIdService,\n} from '@spartacus/core';\nimport { ReplenishmentOrderFacade } from '@spartacus/order/root';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { OrderActions } from '../store/actions/index';\nimport {\n  CANCEL_REPLENISHMENT_ORDER_PROCESS_ID,\n  StateWithOrder,\n} from '../store/order-state';\nimport { OrderSelectors } from '../store/selectors/index';\n\n@Injectable()\nexport class ReplenishmentOrderService implements ReplenishmentOrderFacade {\n  constructor(\n    protected store: Store<StateWithOrder>,\n    protected processStateStore: Store<StateWithProcess<void>>,\n    protected userIdService: UserIdService\n  ) {}\n\n  /**\n   * Returns replenishment order details for a given 'current' user\n   *\n   * @param replenishmentOrderCode a replenishment order code\n   */\n  loadReplenishmentOrderDetails(replenishmentOrderCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.LoadReplenishmentOrderDetails({\n            userId,\n            replenishmentOrderCode,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Returns a replenishment order details\n   */\n  getReplenishmentOrderDetails(): Observable<ReplenishmentOrder> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsValue)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details loading flag\n   */\n  getReplenishmentOrderDetailsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsLoading)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details success flag\n   */\n  getReplenishmentOrderDetailsSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsSuccess)\n    );\n  }\n\n  /**\n   * Returns a replenishment order details error flag\n   */\n  getReplenishmentOrderDetailsError(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrderDetailsError)\n    );\n  }\n\n  /**\n   * Clears the replenishment orders details state\n   */\n  clearReplenishmentOrderDetails(): void {\n    this.store.dispatch(new OrderActions.ClearReplenishmentOrderDetails());\n  }\n\n  /**\n   * Cancels a specific replenishment order for a given 'current' user\n   *\n   * @param replenishmentOrderCode a replenishment order code\n   */\n  cancelReplenishmentOrder(replenishmentOrderCode: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.CancelReplenishmentOrder({\n            userId,\n            replenishmentOrderCode,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order loading flag\n   */\n  getCancelReplenishmentOrderLoading(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          CANCEL_REPLENISHMENT_ORDER_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order success flag\n   */\n  getCancelReplenishmentOrderSuccess(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          CANCEL_REPLENISHMENT_ORDER_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Returns the cancel replenishment order error flag\n   */\n  getCancelReplenishmentOrderError(): Observable<boolean> {\n    return this.processStateStore.pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          CANCEL_REPLENISHMENT_ORDER_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Clears the cancel replenishment order processing state\n   */\n  clearCancelReplenishmentOrderProcessState(): void {\n    this.store.dispatch(new OrderActions.ClearCancelReplenishmentOrder());\n  }\n\n  /**\n   * Returns replenishment order history list\n   */\n  getReplenishmentOrderHistoryList(\n    pageSize: number\n  ): Observable<ReplenishmentOrderList | undefined> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrdersState),\n      tap((replenishmentOrderListState) => {\n        const attemptedLoad =\n          replenishmentOrderListState.loading ||\n          replenishmentOrderListState.success ||\n          replenishmentOrderListState.error;\n        if (!attemptedLoad) {\n          this.loadReplenishmentOrderList(pageSize);\n        }\n      }),\n      map((replenishmentOrderListState) => replenishmentOrderListState.value)\n    );\n  }\n\n  /**\n   * Returns a loading flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrdersLoading)\n    );\n  }\n\n  /**\n   * Returns a error flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListError(): Observable<boolean> {\n    return this.store.pipe(select(OrderSelectors.getReplenishmentOrdersError));\n  }\n\n  /**\n   * Returns a success flag for replenishment order history list\n   */\n  getReplenishmentOrderHistoryListSuccess(): Observable<boolean> {\n    return this.store.pipe(\n      select(OrderSelectors.getReplenishmentOrdersSuccess)\n    );\n  }\n\n  /**\n   * Retrieves a replenishment order list\n   * @param pageSize page size\n   * @param currentPage current page\n   * @param sort sort\n   */\n  loadReplenishmentOrderList(\n    pageSize?: number,\n    currentPage?: number,\n    sort?: string\n  ): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        this.store.dispatch(\n          new OrderActions.LoadUserReplenishmentOrders({\n            userId,\n            pageSize,\n            currentPage,\n            sort,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Cleaning replenishment order list\n   */\n  clearReplenishmentOrderList(): void {\n    this.store.dispatch(new OrderActions.ClearUserReplenishmentOrders());\n  }\n}\n","import { Provider } from '@angular/core';\nimport {\n  OrderFacade,\n  OrderReturnRequestFacade,\n  ReplenishmentOrderFacade,\n} from '@spartacus/order/root';\nimport { OrderReturnRequestService } from './order-return-request.service';\nimport { OrderService } from './order.service';\nimport { ReplenishmentOrderService } from './replenishment-order.service';\n\nexport const facadeProviders: Provider[] = [\n  OrderReturnRequestService,\n  {\n    provide: OrderReturnRequestFacade,\n    useExisting: OrderReturnRequestService,\n  },\n  OrderService,\n  {\n    provide: OrderFacade,\n    useExisting: OrderService,\n  },\n  ReplenishmentOrderService,\n  {\n    provide: ReplenishmentOrderFacade,\n    useExisting: ReplenishmentOrderService,\n  },\n];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { ConsignmentTracking } from '@spartacus/order/root';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderConnector } from '../../connectors/order.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class ConsignmentTrackingEffects {\n  @Effect()\n  loadConsignmentTracking$: Observable<OrderActions.ConsignmentTrackingAction> =\n    this.actions$.pipe(\n      ofType(OrderActions.LOAD_CONSIGNMENT_TRACKING),\n      map((action: OrderActions.LoadConsignmentTracking) => action.payload),\n      switchMap((payload) => {\n        return this.orderConnector\n          .getConsignmentTracking(\n            payload.orderCode,\n            payload.consignmentCode,\n            payload.userId\n          )\n          .pipe(\n            map(\n              (tracking: ConsignmentTracking) =>\n                new OrderActions.LoadConsignmentTrackingSuccess(tracking)\n            ),\n            catchError((error) =>\n              of(\n                new OrderActions.LoadConsignmentTrackingFail(\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          );\n      })\n    );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n  Order,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderConnector } from '../../connectors/order.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class OrderDetailsEffect {\n  @Effect()\n  loadOrderDetails$: Observable<OrderActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(OrderActions.LOAD_ORDER_DETAILS),\n    map((action: OrderActions.LoadOrderDetails) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector.get(payload.userId, payload.orderCode).pipe(\n        map((order: Order) => {\n          return new OrderActions.LoadOrderDetailsSuccess(order);\n        }),\n        catchError((error) =>\n          of(new OrderActions.LoadOrderDetailsFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  cancelOrder$: Observable<OrderActions.OrderDetailsAction> = this.actions$.pipe(\n    ofType(OrderActions.CANCEL_ORDER),\n    map((action: OrderActions.CancelOrder) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancel(payload.userId, payload.orderCode, payload.cancelRequestInput)\n        .pipe(\n          map(() => new OrderActions.CancelOrderSuccess()),\n          catchError((error) => {\n            error.error?.errors.forEach((err: any) =>\n              this.globalMessageService.add(\n                err.message,\n                GlobalMessageType.MSG_TYPE_ERROR\n              )\n            );\n\n            return of(\n              new OrderActions.CancelOrderFail(normalizeHttpError(error))\n            );\n          })\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  normalizeHttpError,\n  ReturnRequest,\n  ReturnRequestList,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { OrderConnector } from '../../connectors/order.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class OrderReturnRequestEffect {\n  @Effect()\n  createReturnRequest$: Observable<OrderActions.OrderReturnRequestAction> = this.actions$.pipe(\n    ofType(OrderActions.CREATE_ORDER_RETURN_REQUEST),\n    map((action: OrderActions.CreateOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .return(payload.userId, payload.returnRequestInput)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new OrderActions.CreateOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new OrderActions.CreateOrderReturnRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequest$: Observable<OrderActions.OrderReturnRequestAction> = this.actions$.pipe(\n    ofType(OrderActions.LOAD_ORDER_RETURN_REQUEST),\n    map((action: OrderActions.LoadOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestDetail(payload.userId, payload.returnRequestCode)\n        .pipe(\n          map(\n            (returnRequest: ReturnRequest) =>\n              new OrderActions.LoadOrderReturnRequestSuccess(returnRequest)\n          ),\n          catchError((error) =>\n            of(\n              new OrderActions.LoadOrderReturnRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cancelReturnRequest$: Observable<OrderActions.OrderReturnRequestAction> = this.actions$.pipe(\n    ofType(OrderActions.CANCEL_ORDER_RETURN_REQUEST),\n    map((action: OrderActions.CancelOrderReturnRequest) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .cancelReturnRequest(\n          payload.userId,\n          payload.returnRequestCode,\n          payload.returnRequestModification\n        )\n        .pipe(\n          map(() => new OrderActions.CancelOrderReturnRequestSuccess()),\n          catchError((error) =>\n            of(\n              new OrderActions.CancelOrderReturnRequestFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  loadReturnRequestList$: Observable<OrderActions.OrderReturnRequestAction> = this.actions$.pipe(\n    ofType(OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST),\n    map((action: OrderActions.LoadOrderReturnRequestList) => action.payload),\n    switchMap((payload) => {\n      return this.orderConnector\n        .getReturnRequestList(\n          payload.userId,\n          payload.pageSize,\n          payload.currentPage,\n          payload.sort\n        )\n        .pipe(\n          map(\n            (returnRequestList: ReturnRequestList) =>\n              new OrderActions.LoadOrderReturnRequestListSuccess(\n                returnRequestList\n              )\n          ),\n          catchError((error) =>\n            of(\n              new OrderActions.LoadOrderReturnRequestListFail(\n                normalizeHttpError(error)\n              )\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderConnector\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  normalizeHttpError,\n  OrderHistoryList,\n  SiteContextActions,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport {\n  OrderConnector,\n  ReplenishmentOrderConnector,\n} from '../../connectors/index';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class OrdersEffect {\n  constructor(\n    private actions$: Actions,\n    private orderConnector: OrderConnector,\n    private replenishmentOrderConnector: ReplenishmentOrderConnector\n  ) {}\n\n  @Effect()\n  loadUserOrders$: Observable<OrderActions.UserOrdersAction> = this.actions$.pipe(\n    ofType(OrderActions.LOAD_USER_ORDERS),\n    map((action: OrderActions.LoadUserOrders) => action.payload),\n    switchMap((payload) => {\n      return (\n        Boolean(payload.replenishmentOrderCode)\n          ? this.replenishmentOrderConnector.loadReplenishmentDetailsHistory(\n              payload.userId,\n              payload.replenishmentOrderCode ?? '',\n              payload.pageSize,\n              payload.currentPage,\n              payload.sort\n            )\n          : this.orderConnector.getHistory(\n              payload.userId,\n              payload.pageSize,\n              payload.currentPage,\n              payload.sort\n            )\n      ).pipe(\n        map((orders: OrderHistoryList) => {\n          return new OrderActions.LoadUserOrdersSuccess(orders);\n        }),\n        catchError((error) =>\n          of(new OrderActions.LoadUserOrdersFail(normalizeHttpError(error)))\n        )\n      );\n    })\n  );\n\n  @Effect()\n  resetUserOrders$: Observable<OrderActions.ClearUserOrders> = this.actions$.pipe(\n    ofType(SiteContextActions.LANGUAGE_CHANGE),\n    map(() => {\n      return new OrderActions.ClearUserOrders();\n    })\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n  ReplenishmentOrder,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReplenishmentOrderConnector } from '../../connectors/replenishment-order.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class ReplenishmentOrderDetailsEffect {\n  @Effect()\n  loadReplenishmentOrderDetails$: Observable<OrderActions.ReplenishmentOrderDetailsAction> =\n    this.actions$.pipe(\n      ofType(OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS),\n      map(\n        (action: OrderActions.LoadReplenishmentOrderDetails) => action.payload\n      ),\n      switchMap((payload) => {\n        return this.replenishmentOrderConnector\n          .load(payload.userId, payload.replenishmentOrderCode)\n          .pipe(\n            map((replenishmentOrder: ReplenishmentOrder) => {\n              return new OrderActions.LoadReplenishmentOrderDetailsSuccess(\n                replenishmentOrder\n              );\n            }),\n            catchError((error) =>\n              of(\n                new OrderActions.LoadReplenishmentOrderDetailsFail(\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          );\n      })\n    );\n\n  @Effect()\n  cancelReplenishmentOrder$: Observable<OrderActions.ReplenishmentOrderDetailsAction> =\n    this.actions$.pipe(\n      ofType(OrderActions.CANCEL_REPLENISHMENT_ORDER),\n      map((action: OrderActions.CancelReplenishmentOrder) => action.payload),\n      switchMap((payload) => {\n        return this.replenishmentOrderConnector\n          .cancelReplenishmentOrder(\n            payload.userId,\n            payload.replenishmentOrderCode\n          )\n          .pipe(\n            map(\n              (replenishmentOrder: ReplenishmentOrder) =>\n                new OrderActions.CancelReplenishmentOrderSuccess(\n                  replenishmentOrder\n                )\n            ),\n            catchError((error) => {\n              error?.error?.errors.forEach((err: any) =>\n                this.globalMessageService.add(\n                  err.message,\n                  GlobalMessageType.MSG_TYPE_ERROR\n                )\n              );\n\n              return of(\n                new OrderActions.CancelReplenishmentOrderFail(\n                  normalizeHttpError(error)\n                )\n              );\n            })\n          );\n      })\n    );\n\n  constructor(\n    private actions$: Actions,\n    private replenishmentOrderConnector: ReplenishmentOrderConnector,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError, ReplenishmentOrderList } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { ReplenishmentOrderConnector } from '../../connectors/replenishment-order.connector';\nimport { OrderActions } from '../actions/index';\n\n@Injectable()\nexport class ReplenishmentOrdersEffect {\n  @Effect()\n  loadUserReplenishmentOrders$: Observable<OrderActions.UserReplenishmentOrdersAction> =\n    this.actions$.pipe(\n      ofType(OrderActions.LOAD_USER_REPLENISHMENT_ORDERS),\n      map((action: OrderActions.LoadUserReplenishmentOrders) => action.payload),\n      switchMap((payload) => {\n        return this.replenishmentOrderConnector\n          .loadHistory(\n            payload.userId,\n            payload.pageSize,\n            payload.currentPage,\n            payload.sort\n          )\n          .pipe(\n            map((orders: ReplenishmentOrderList) => {\n              return new OrderActions.LoadUserReplenishmentOrdersSuccess(\n                orders\n              );\n            }),\n            catchError((error) =>\n              of(\n                new OrderActions.LoadUserReplenishmentOrdersFail(\n                  normalizeHttpError(error)\n                )\n              )\n            )\n          );\n      })\n    );\n\n  constructor(\n    private actions$: Actions,\n    private replenishmentOrderConnector: ReplenishmentOrderConnector\n  ) {}\n}\n","import { ConsignmentTrackingEffects } from './consignment-tracking.effect';\nimport { OrderDetailsEffect } from './order-details.effect';\nimport { OrderReturnRequestEffect } from './order-return-request.effect';\nimport { OrdersEffect } from './orders.effect';\nimport { ReplenishmentOrderDetailsEffect } from './replenishment-order-details.effect';\nimport { ReplenishmentOrdersEffect } from './replenishment-orders.effect';\n\nexport const effects: any[] = [\n  OrdersEffect,\n  OrderDetailsEffect,\n  ConsignmentTrackingEffects,\n  OrderReturnRequestEffect,\n  ReplenishmentOrderDetailsEffect,\n  ReplenishmentOrdersEffect,\n];\n\nexport * from './consignment-tracking.effect';\nexport * from './order-details.effect';\nexport * from './order-return-request.effect';\nexport * from './orders.effect';\nexport * from './replenishment-order-details.effect';\nexport * from './replenishment-orders.effect';\n","import { ConsignmentTracking } from '@spartacus/order/root';\nimport { OrderActions } from '../actions/index';\nimport { ConsignmentTrackingState } from '../order-state';\n\nexport const initialState: ConsignmentTrackingState = { tracking: {} };\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.ConsignmentTrackingAction\n): ConsignmentTrackingState {\n  switch (action.type) {\n    case OrderActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS: {\n      const tracking: ConsignmentTracking = action.payload;\n      return {\n        tracking,\n      };\n    }\n    case OrderActions.CLEAR_CONSIGNMENT_TRACKING: {\n      return initialState;\n    }\n  }\n  return state;\n}\n","import { Order } from '@spartacus/core';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: Order = {};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.OrderDetailsAction\n): Order {\n  switch (action.type) {\n    case OrderActions.LOAD_ORDER_DETAILS_SUCCESS: {\n      const order: Order = action.payload;\n      return order;\n    }\n  }\n  return state;\n}\n","import { ReturnRequestList } from '@spartacus/core';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: ReturnRequestList = {\n  returnRequests: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.OrderReturnRequestAction\n): ReturnRequestList {\n  switch (action.type) {\n    case OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n  }\n\n  return state;\n}\n","import { OrderHistoryList } from '@spartacus/core';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: OrderHistoryList = {\n  orders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.UserOrdersAction\n): OrderHistoryList {\n  switch (action.type) {\n    case OrderActions.LOAD_USER_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n    case OrderActions.LOAD_USER_ORDERS_FAIL: {\n      return initialState;\n    }\n  }\n\n  return state;\n}\n","import { ReplenishmentOrder } from '@spartacus/core';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: ReplenishmentOrder = {};\n\nexport function reducer(\n  state = initialState,\n  action: OrderActions.ReplenishmentOrderDetailsAction\n): ReplenishmentOrder {\n  switch (action.type) {\n    case OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS:\n    case OrderActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import { ReplenishmentOrder, ReplenishmentOrderList } from '@spartacus/core';\nimport { OrderActions } from '../actions/index';\n\nexport const initialState: ReplenishmentOrderList = {\n  replenishmentOrders: [],\n  pagination: {},\n  sorts: [],\n};\n\nexport function reducer(\n  state = initialState,\n  action:\n    | OrderActions.UserReplenishmentOrdersAction\n    | OrderActions.ReplenishmentOrderDetailsAction\n): ReplenishmentOrderList {\n  switch (action.type) {\n    case OrderActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: {\n      return action.payload ? action.payload : initialState;\n    }\n\n    case OrderActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {\n      const cancelledReplenishmentOrder = action.payload;\n      const userReplenishmentOrders = [...(state.replenishmentOrders ?? [])];\n\n      const index = userReplenishmentOrders.findIndex(\n        (replenishmentOrder: ReplenishmentOrder) =>\n          replenishmentOrder.replenishmentOrderCode ===\n          cancelledReplenishmentOrder.replenishmentOrderCode\n      );\n\n      if (index === -1) {\n        return initialState;\n      } else {\n        userReplenishmentOrders[index] = {\n          ...cancelledReplenishmentOrder,\n        };\n      }\n\n      return { ...state, replenishmentOrders: userReplenishmentOrders };\n    }\n  }\n  return state;\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { ActionReducerMap } from '@ngrx/store';\nimport {\n  Order,\n  OrderHistoryList,\n  ReplenishmentOrder,\n  ReplenishmentOrderList,\n  ReturnRequest,\n  ReturnRequestList,\n  StateUtils,\n} from '@spartacus/core';\nimport {\n  ORDERS,\n  OrderState,\n  ORDER_DETAILS,\n  REPLENISHMENT_ORDERS,\n  REPLENISHMENT_ORDER_DETAILS,\n  RETURN_REQUESTS,\n  RETURN_REQUEST_DETAILS,\n} from '../order-state';\nimport * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';\nimport * as fromOrderDetailsReducer from './order-details.reducer';\nimport * as fromOrderReturnRequestReducer from './order-return-request.reducer';\nimport * as fromUserOrdersReducer from './orders.reducer';\nimport * as fromReplenishmentOrderDetailsReducer from './replenishment-order-details.reducer';\nimport * as fromUserReplenishmentOrdersReducer from './replenishment-orders.reducer';\n\nexport function getReducers(): ActionReducerMap<OrderState, any> {\n  return {\n    orders: StateUtils.loaderReducer<OrderHistoryList, any>(\n      ORDERS,\n      fromUserOrdersReducer.reducer\n    ),\n    orderDetail: StateUtils.loaderReducer<Order, any>(\n      ORDER_DETAILS,\n      fromOrderDetailsReducer.reducer\n    ),\n    replenishmentOrders: StateUtils.loaderReducer<ReplenishmentOrderList, any>(\n      REPLENISHMENT_ORDERS,\n      fromUserReplenishmentOrdersReducer.reducer\n    ),\n    orderReturn: StateUtils.loaderReducer<ReturnRequest>(\n      RETURN_REQUEST_DETAILS\n    ),\n    orderReturnList: StateUtils.loaderReducer<ReturnRequestList, any>(\n      RETURN_REQUESTS,\n      fromOrderReturnRequestReducer.reducer\n    ),\n    consignmentTracking: fromConsignmentTrackingReducer.reducer,\n    replenishmentOrder: StateUtils.loaderReducer<ReplenishmentOrder, any>(\n      REPLENISHMENT_ORDER_DETAILS,\n      fromReplenishmentOrderDetailsReducer.reducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<OrderState>> =\n  new InjectionToken<ActionReducerMap<OrderState>>('OrderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { effects } from './effects/index';\nimport { ORDER_FEATURE } from './order-state';\nimport { reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    EffectsModule.forFeature(effects),\n    StoreModule.forFeature(ORDER_FEATURE, reducerToken),\n  ],\n  providers: [reducerProvider],\n})\nexport class OrderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { OrderConnector } from './connectors/order.connector';\nimport { ReplenishmentOrderConnector } from './connectors/replenishment-order.connector';\nimport { facadeProviders } from './facade/facade-providers';\nimport { OrderStoreModule } from './store/order-store.module';\n\n@NgModule({\n  imports: [OrderStoreModule],\n  providers: [OrderConnector, ReplenishmentOrderConnector, ...facadeProviders],\n})\nexport class OrderCoreModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["OrderActions.CreateOrderReturnRequest","OrderSelectors.getOrderReturnRequest","OrderSelectors.getOrderReturnRequestListState","OrderActions.LoadOrderReturnRequest","OrderActions.LoadOrderReturnRequestList","OrderActions.ClearOrderReturnRequestList","OrderSelectors.getOrderReturnRequestLoading","OrderSelectors.getOrderReturnRequestSuccess","OrderActions.ClearOrderReturnRequest","OrderActions.CancelOrderReturnRequest","OrderActions.ResetCancelReturnProcess","OrderSelectors.getOrderDetails","OrderActions.LoadOrderDetails","OrderActions.ClearOrderDetails","OrderSelectors.getOrdersState","OrderSelectors.getOrdersLoaded","OrderActions.LoadUserOrders","OrderActions.ClearUserOrders","OrderSelectors.getConsignmentTracking","OrderActions.LoadConsignmentTracking","OrderActions.ClearConsignmentTracking","OrderActions.CancelOrder","OrderActions.ResetCancelOrderProcess","OrderActions.LoadReplenishmentOrderDetails","OrderSelectors.getReplenishmentOrderDetailsValue","OrderSelectors.getReplenishmentOrderDetailsLoading","OrderSelectors.getReplenishmentOrderDetailsSuccess","OrderSelectors.getReplenishmentOrderDetailsError","OrderActions.ClearReplenishmentOrderDetails","OrderActions.CancelReplenishmentOrder","OrderActions.ClearCancelReplenishmentOrder","OrderSelectors.getReplenishmentOrdersState","OrderSelectors.getReplenishmentOrdersLoading","OrderSelectors.getReplenishmentOrdersError","OrderSelectors.getReplenishmentOrdersSuccess","OrderActions.LoadUserReplenishmentOrders","OrderActions.ClearUserReplenishmentOrders","OrderActions.LOAD_CONSIGNMENT_TRACKING","OrderActions.LoadConsignmentTrackingSuccess","OrderActions.LoadConsignmentTrackingFail","OrderActions.LOAD_ORDER_DETAILS","OrderActions.LoadOrderDetailsSuccess","OrderActions.LoadOrderDetailsFail","OrderActions.CANCEL_ORDER","OrderActions.CancelOrderSuccess","OrderActions.CancelOrderFail","OrderActions.CREATE_ORDER_RETURN_REQUEST","OrderActions.CreateOrderReturnRequestSuccess","OrderActions.CreateOrderReturnRequestFail","OrderActions.LOAD_ORDER_RETURN_REQUEST","OrderActions.LoadOrderReturnRequestSuccess","OrderActions.LoadOrderReturnRequestFail","OrderActions.CANCEL_ORDER_RETURN_REQUEST","OrderActions.CancelOrderReturnRequestSuccess","OrderActions.CancelOrderReturnRequestFail","OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST","OrderActions.LoadOrderReturnRequestListSuccess","OrderActions.LoadOrderReturnRequestListFail","OrderActions.LOAD_USER_ORDERS","OrderActions.LoadUserOrdersSuccess","OrderActions.LoadUserOrdersFail","OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS","OrderActions.LoadReplenishmentOrderDetailsSuccess","OrderActions.LoadReplenishmentOrderDetailsFail","OrderActions.CANCEL_REPLENISHMENT_ORDER","OrderActions.CancelReplenishmentOrderSuccess","OrderActions.CancelReplenishmentOrderFail","OrderActions.LOAD_USER_REPLENISHMENT_ORDERS","OrderActions.LoadUserReplenishmentOrdersSuccess","OrderActions.LoadUserReplenishmentOrdersFail","initialState","reducer","OrderActions.LOAD_CONSIGNMENT_TRACKING_SUCCESS","OrderActions.CLEAR_CONSIGNMENT_TRACKING","OrderActions.LOAD_ORDER_DETAILS_SUCCESS","OrderActions.LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS","OrderActions.LOAD_USER_ORDERS_SUCCESS","OrderActions.LOAD_USER_ORDERS_FAIL","OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS","OrderActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS","OrderActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS","fromUserOrdersReducer.reducer","fromOrderDetailsReducer.reducer","fromUserReplenishmentOrdersReducer.reducer","fromOrderReturnRequestReducer.reducer","fromConsignmentTrackingReducer.reducer","fromReplenishmentOrderDetailsReducer.reducer"],"mappings":"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"}