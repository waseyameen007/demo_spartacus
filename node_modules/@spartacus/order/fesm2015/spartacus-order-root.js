import * as i0 from '@angular/core';
import { Injectable, NgModule } from '@angular/core';
import { facadeFactory, provideDefaultConfigFactory, provideDefaultConfig, AuthGuard } from '@spartacus/core';
import * as i1 from '@angular/router';
import { RouterModule } from '@angular/router';
import { OrderEntriesSource, CmsPageGuard, PageLayoutComponent, ORDER_ENTRIES_CONTEXT } from '@spartacus/storefront';
import { map } from 'rxjs/operators';

const ORDER_FEATURE = 'order';
const ORDER_CORE_FEATURE = 'orderCore';

function orderReturnRequestFacadeFactory() {
    return facadeFactory({
        facade: OrderReturnRequestFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'createOrderReturnRequest',
            'getOrderReturnRequest',
            'getOrderReturnRequestList',
            'loadOrderReturnRequestDetail',
            'loadOrderReturnRequestList',
            'clearOrderReturnRequestList',
            'getReturnRequestLoading',
            'getReturnRequestSuccess',
            'clearOrderReturnRequestDetail',
            'cancelOrderReturnRequest',
            'getCancelReturnRequestLoading',
            'getCancelReturnRequestSuccess',
            'resetCancelReturnRequestProcessState',
        ],
        async: true,
    });
}
class OrderReturnRequestFacade {
}
OrderReturnRequestFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OrderReturnRequestFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestFacade, providedIn: 'root', useFactory: orderReturnRequestFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: orderReturnRequestFacadeFactory,
                }]
        }] });

function orderFacadeFactory() {
    return facadeFactory({
        facade: OrderFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'getOrderDetails',
            'loadOrderDetails',
            'clearOrderDetails',
            'getOrderHistoryList',
            'getOrderHistoryListLoaded',
            'loadOrderList',
            'clearOrderList',
            'getConsignmentTracking',
            'loadConsignmentTracking',
            'clearConsignmentTracking',
            'cancelOrder',
            'getCancelOrderLoading',
            'getCancelOrderSuccess',
            'resetCancelOrderProcessState',
        ],
        async: true,
    });
}
class OrderFacade {
}
OrderFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OrderFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderFacade, providedIn: 'root', useFactory: orderFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: orderFacadeFactory,
                }]
        }] });

function replenishmentOrderFacadeFactory() {
    return facadeFactory({
        facade: ReplenishmentOrderFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'loadReplenishmentOrderDetails',
            'getReplenishmentOrderDetails',
            'getReplenishmentOrderDetailsLoading',
            'getReplenishmentOrderDetailsSuccess',
            'getReplenishmentOrderDetailsError',
            'clearReplenishmentOrderDetails',
            'cancelReplenishmentOrder',
            'getCancelReplenishmentOrderLoading',
            'getCancelReplenishmentOrderSuccess',
            'getCancelReplenishmentOrderError',
            'clearCancelReplenishmentOrderProcessState',
            'getReplenishmentOrderHistoryList',
            'getReplenishmentOrderHistoryListLoading',
            'getReplenishmentOrderHistoryListError',
            'getReplenishmentOrderHistoryListSuccess',
            'loadReplenishmentOrderList',
            'clearReplenishmentOrderList',
        ],
        async: true,
    });
}
class ReplenishmentOrderFacade {
}
ReplenishmentOrderFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderFacade, providedIn: 'root', useFactory: replenishmentOrderFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: replenishmentOrderFacadeFactory,
                }]
        }] });

class OrderDetailsOrderEntriesContext {
    constructor(userOrderService) {
        this.userOrderService = userOrderService;
        this.type = OrderEntriesSource.ORDER_DETAILS;
    }
    getEntries() {
        return this.userOrderService
            .getOrderDetails()
            .pipe(map((order) => { var _a; return (_a = order === null || order === void 0 ? void 0 : order.entries) !== null && _a !== void 0 ? _a : []; }));
    }
}
OrderDetailsOrderEntriesContext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderDetailsOrderEntriesContext, deps: [{ token: OrderFacade }], target: i0.ɵɵFactoryTarget.Injectable });
OrderDetailsOrderEntriesContext.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderDetailsOrderEntriesContext, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderDetailsOrderEntriesContext, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: OrderFacade }]; } });

const defaultOrderRoutingConfig = {
    routing: {
        routes: {
            orders: {
                paths: ['my-account/orders'],
            },
            orderDetails: {
                paths: ['my-account/order/:orderCode'],
                paramsMapping: { orderCode: 'code' },
            },
            orderGuest: {
                paths: ['guest/order/:orderCode'],
                paramsMapping: { orderCode: 'code' },
            },
            orderReturn: {
                paths: ['my-account/order/return/:orderCode'],
                paramsMapping: { orderCode: 'code' },
            },
            orderReturnConfirmation: {
                paths: ['my-account/order/return/confirmation/:orderCode'],
                paramsMapping: { orderCode: 'code' },
            },
            orderCancel: {
                paths: ['my-account/order/cancel/:orderCode'],
                paramsMapping: { orderCode: 'code' },
            },
            orderCancelConfirmation: {
                paths: ['my-account/order/cancel/confirmation/:orderCode'],
                paramsMapping: { orderCode: 'code' },
            },
            returnRequestDetails: {
                paths: ['my-account/return-request/:returnCode'],
                paramsMapping: { returnCode: 'rma' },
            },
            replenishmentOrders: {
                paths: ['my-account/my-replenishments'],
            },
            replenishmentDetails: {
                paths: ['my-account/my-replenishment/:replenishmentOrderCode'],
                paramsMapping: { replenishmentOrderCode: 'replenishmentOrderCode' },
            },
        },
    },
};

// TODO: Inline this factory when we start releasing Ivy compiled libraries
function defaultOrderComponentsConfig() {
    const config = {
        featureModules: {
            [ORDER_FEATURE]: {
                cmsComponents: [
                    'CancelOrderComponent',
                    'CancelOrderConfirmationComponent',
                    'ReturnOrderComponent',
                    'ReturnOrderConfirmationComponent',
                    'AccountOrderDetailsActionsComponent',
                    'AccountOrderDetailsItemsComponent',
                    'AccountOrderDetailsTotalsComponent',
                    'AccountOrderDetailsShippingComponent',
                    'AccountOrderHistoryComponent',
                    'ReplenishmentDetailItemsComponent',
                    'ReplenishmentDetailTotalsComponent',
                    'ReplenishmentDetailShippingComponent',
                    'ReplenishmentDetailActionsComponent',
                    'ReplenishmentDetailOrderHistoryComponent',
                    'AccountReplenishmentHistoryComponent',
                    'ReturnRequestOverviewComponent',
                    'ReturnRequestItemsComponent',
                    'ReturnRequestTotalsComponent',
                    'OrderReturnRequestListComponent',
                ],
            },
            // by default core is bundled together with components
            [ORDER_CORE_FEATURE]: ORDER_FEATURE,
        },
    };
    return config;
}
class OrderRootModule {
}
OrderRootModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderRootModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
OrderRootModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderRootModule, imports: [i1.RouterModule] });
OrderRootModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderRootModule, providers: [
        provideDefaultConfigFactory(defaultOrderComponentsConfig),
        provideDefaultConfig(defaultOrderRoutingConfig),
    ], imports: [[
            RouterModule.forChild([
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [AuthGuard, CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { pageLabel: 'order', cxRoute: 'orderGuest' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [AuthGuard, CmsPageGuard],
                    component: PageLayoutComponent,
                    data: {
                        cxRoute: 'orderDetails',
                        cxContext: {
                            [ORDER_ENTRIES_CONTEXT]: OrderDetailsOrderEntriesContext,
                        },
                    },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'orderCancel' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'orderCancelConfirmation' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'orderReturn' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'orderReturnConfirmation' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [AuthGuard, CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'orders' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [AuthGuard, CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'replenishmentDetails' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [AuthGuard, CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'replenishmentOrders' },
                },
                {
                    // @ts-ignore
                    path: null,
                    canActivate: [AuthGuard, CmsPageGuard],
                    component: PageLayoutComponent,
                    data: { cxRoute: 'returnRequestDetails' },
                },
            ]),
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderRootModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        RouterModule.forChild([
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [AuthGuard, CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { pageLabel: 'order', cxRoute: 'orderGuest' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [AuthGuard, CmsPageGuard],
                                component: PageLayoutComponent,
                                data: {
                                    cxRoute: 'orderDetails',
                                    cxContext: {
                                        [ORDER_ENTRIES_CONTEXT]: OrderDetailsOrderEntriesContext,
                                    },
                                },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'orderCancel' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'orderCancelConfirmation' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'orderReturn' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'orderReturnConfirmation' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [AuthGuard, CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'orders' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [AuthGuard, CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'replenishmentDetails' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [AuthGuard, CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'replenishmentOrders' },
                            },
                            {
                                // @ts-ignore
                                path: null,
                                canActivate: [AuthGuard, CmsPageGuard],
                                component: PageLayoutComponent,
                                data: { cxRoute: 'returnRequestDetails' },
                            },
                        ]),
                    ],
                    providers: [
                        provideDefaultConfigFactory(defaultOrderComponentsConfig),
                        provideDefaultConfig(defaultOrderRoutingConfig),
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { ORDER_CORE_FEATURE, ORDER_FEATURE, OrderDetailsOrderEntriesContext, OrderFacade, OrderReturnRequestFacade, OrderRootModule, ReplenishmentOrderFacade, defaultOrderComponentsConfig, orderFacadeFactory, orderReturnRequestFacadeFactory, replenishmentOrderFacadeFactory };
//# sourceMappingURL=spartacus-order-root.js.map
