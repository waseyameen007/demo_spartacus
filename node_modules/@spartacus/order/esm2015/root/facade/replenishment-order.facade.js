import { Injectable } from '@angular/core';
import { facadeFactory, } from '@spartacus/core';
import { ORDER_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export function replenishmentOrderFacadeFactory() {
    return facadeFactory({
        facade: ReplenishmentOrderFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'loadReplenishmentOrderDetails',
            'getReplenishmentOrderDetails',
            'getReplenishmentOrderDetailsLoading',
            'getReplenishmentOrderDetailsSuccess',
            'getReplenishmentOrderDetailsError',
            'clearReplenishmentOrderDetails',
            'cancelReplenishmentOrder',
            'getCancelReplenishmentOrderLoading',
            'getCancelReplenishmentOrderSuccess',
            'getCancelReplenishmentOrderError',
            'clearCancelReplenishmentOrderProcessState',
            'getReplenishmentOrderHistoryList',
            'getReplenishmentOrderHistoryListLoading',
            'getReplenishmentOrderHistoryListError',
            'getReplenishmentOrderHistoryListSuccess',
            'loadReplenishmentOrderList',
            'clearReplenishmentOrderList',
        ],
        async: true,
    });
}
export class ReplenishmentOrderFacade {
}
ReplenishmentOrderFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderFacade, providedIn: 'root', useFactory: replenishmentOrderFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: replenishmentOrderFacadeFactory,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci5mYWNhZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JkZXIvcm9vdC9mYWNhZGUvcmVwbGVuaXNobWVudC1vcmRlci5mYWNhZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQ0wsYUFBYSxHQUdkLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBRXJELE1BQU0sVUFBVSwrQkFBK0I7SUFDN0MsT0FBTyxhQUFhLENBQUM7UUFDbkIsTUFBTSxFQUFFLHdCQUF3QjtRQUNoQyxPQUFPLEVBQUUsa0JBQWtCO1FBQzNCLE9BQU8sRUFBRTtZQUNQLCtCQUErQjtZQUMvQiw4QkFBOEI7WUFDOUIscUNBQXFDO1lBQ3JDLHFDQUFxQztZQUNyQyxtQ0FBbUM7WUFDbkMsZ0NBQWdDO1lBQ2hDLDBCQUEwQjtZQUMxQixvQ0FBb0M7WUFDcEMsb0NBQW9DO1lBQ3BDLGtDQUFrQztZQUNsQywyQ0FBMkM7WUFDM0Msa0NBQWtDO1lBQ2xDLHlDQUF5QztZQUN6Qyx1Q0FBdUM7WUFDdkMseUNBQXlDO1lBQ3pDLDRCQUE0QjtZQUM1Qiw2QkFBNkI7U0FDOUI7UUFDRCxLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUMsQ0FBQztBQUNMLENBQUM7QUFNRCxNQUFNLE9BQWdCLHdCQUF3Qjs7cUhBQXhCLHdCQUF3Qjt5SEFBeEIsd0JBQXdCLGNBSGhDLE1BQU0sY0FDTiwrQkFBK0I7MkZBRXZCLHdCQUF3QjtrQkFKN0MsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtvQkFDbEIsVUFBVSxFQUFFLCtCQUErQjtpQkFDNUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBmYWNhZGVGYWN0b3J5LFxuICBSZXBsZW5pc2htZW50T3JkZXIsXG4gIFJlcGxlbmlzaG1lbnRPcmRlckxpc3QsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBPUkRFUl9DT1JFX0ZFQVRVUkUgfSBmcm9tICcuLi9mZWF0dXJlLW5hbWUnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVwbGVuaXNobWVudE9yZGVyRmFjYWRlRmFjdG9yeSgpIHtcbiAgcmV0dXJuIGZhY2FkZUZhY3Rvcnkoe1xuICAgIGZhY2FkZTogUmVwbGVuaXNobWVudE9yZGVyRmFjYWRlLFxuICAgIGZlYXR1cmU6IE9SREVSX0NPUkVfRkVBVFVSRSxcbiAgICBtZXRob2RzOiBbXG4gICAgICAnbG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMnLFxuICAgICAgJ2dldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMnLFxuICAgICAgJ2dldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNMb2FkaW5nJyxcbiAgICAgICdnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzU3VjY2VzcycsXG4gICAgICAnZ2V0UmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0Vycm9yJyxcbiAgICAgICdjbGVhclJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMnLFxuICAgICAgJ2NhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcicsXG4gICAgICAnZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyTG9hZGluZycsXG4gICAgICAnZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyU3VjY2VzcycsXG4gICAgICAnZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyRXJyb3InLFxuICAgICAgJ2NsZWFyQ2FuY2VsUmVwbGVuaXNobWVudE9yZGVyUHJvY2Vzc1N0YXRlJyxcbiAgICAgICdnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdCcsXG4gICAgICAnZ2V0UmVwbGVuaXNobWVudE9yZGVySGlzdG9yeUxpc3RMb2FkaW5nJyxcbiAgICAgICdnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdEVycm9yJyxcbiAgICAgICdnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdFN1Y2Nlc3MnLFxuICAgICAgJ2xvYWRSZXBsZW5pc2htZW50T3JkZXJMaXN0JyxcbiAgICAgICdjbGVhclJlcGxlbmlzaG1lbnRPcmRlckxpc3QnLFxuICAgIF0sXG4gICAgYXN5bmM6IHRydWUsXG4gIH0pO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRmFjdG9yeTogcmVwbGVuaXNobWVudE9yZGVyRmFjYWRlRmFjdG9yeSxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVwbGVuaXNobWVudE9yZGVyRmFjYWRlIHtcbiAgLyoqXG4gICAqIFJldHVybnMgcmVwbGVuaXNobWVudCBvcmRlciBkZXRhaWxzIGZvciBhIGdpdmVuICdjdXJyZW50JyB1c2VyXG4gICAqXG4gICAqIEBwYXJhbSByZXBsZW5pc2htZW50T3JkZXJDb2RlIGEgcmVwbGVuaXNobWVudCBvcmRlciBjb2RlXG4gICAqL1xuICBhYnN0cmFjdCBsb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscyhyZXBsZW5pc2htZW50T3JkZXJDb2RlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVwbGVuaXNobWVudCBvcmRlciBkZXRhaWxzXG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzKCk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyPjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlcGxlbmlzaG1lbnQgb3JkZXIgZGV0YWlscyBsb2FkaW5nIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNMb2FkaW5nKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSByZXBsZW5pc2htZW50IG9yZGVyIGRldGFpbHMgc3VjY2VzcyBmbGFnXG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzU3VjY2VzcygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVwbGVuaXNobWVudCBvcmRlciBkZXRhaWxzIGVycm9yIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNFcnJvcigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBDbGVhcnMgdGhlIHJlcGxlbmlzaG1lbnQgb3JkZXJzIGRldGFpbHMgc3RhdGVcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDYW5jZWxzIGEgc3BlY2lmaWMgcmVwbGVuaXNobWVudCBvcmRlciBmb3IgYSBnaXZlbiAnY3VycmVudCcgdXNlclxuICAgKlxuICAgKiBAcGFyYW0gcmVwbGVuaXNobWVudE9yZGVyQ29kZSBhIHJlcGxlbmlzaG1lbnQgb3JkZXIgY29kZVxuICAgKi9cbiAgYWJzdHJhY3QgY2FuY2VsUmVwbGVuaXNobWVudE9yZGVyKHJlcGxlbmlzaG1lbnRPcmRlckNvZGU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGNhbmNlbCByZXBsZW5pc2htZW50IG9yZGVyIGxvYWRpbmcgZmxhZ1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyTG9hZGluZygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYW5jZWwgcmVwbGVuaXNobWVudCBvcmRlciBzdWNjZXNzIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldENhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY2FuY2VsIHJlcGxlbmlzaG1lbnQgb3JkZXIgZXJyb3IgZmxhZ1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0Q2FuY2VsUmVwbGVuaXNobWVudE9yZGVyRXJyb3IoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogQ2xlYXJzIHRoZSBjYW5jZWwgcmVwbGVuaXNobWVudCBvcmRlciBwcm9jZXNzaW5nIHN0YXRlXG4gICAqL1xuICBhYnN0cmFjdCBjbGVhckNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclByb2Nlc3NTdGF0ZSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdChcbiAgICBwYWdlU2l6ZTogbnVtYmVyXG4gICk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyTGlzdCB8IHVuZGVmaW5lZD47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsb2FkaW5nIGZsYWcgZm9yIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdExvYWRpbmcoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogUmV0dXJucyBhIGVycm9yIGZsYWcgZm9yIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdEVycm9yKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdWNjZXNzIGZsYWcgZm9yIHJlcGxlbmlzaG1lbnQgb3JkZXIgaGlzdG9yeSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXBsZW5pc2htZW50T3JkZXJIaXN0b3J5TGlzdFN1Y2Nlc3MoKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogUmV0cmlldmVzIGEgcmVwbGVuaXNobWVudCBvcmRlciBsaXN0XG4gICAqIEBwYXJhbSBwYWdlU2l6ZSBwYWdlIHNpemVcbiAgICogQHBhcmFtIGN1cnJlbnRQYWdlIGN1cnJlbnQgcGFnZVxuICAgKiBAcGFyYW0gc29ydCBzb3J0XG4gICAqL1xuICBhYnN0cmFjdCBsb2FkUmVwbGVuaXNobWVudE9yZGVyTGlzdChcbiAgICBwYWdlU2l6ZT86IG51bWJlcixcbiAgICBjdXJyZW50UGFnZT86IG51bWJlcixcbiAgICBzb3J0Pzogc3RyaW5nXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENsZWFuaW5nIHJlcGxlbmlzaG1lbnQgb3JkZXIgbGlzdFxuICAgKi9cbiAgYWJzdHJhY3QgY2xlYXJSZXBsZW5pc2htZW50T3JkZXJMaXN0KCk6IHZvaWQ7XG59XG4iXX0=