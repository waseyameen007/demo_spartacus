import { Injectable } from '@angular/core';
import { facadeFactory, } from '@spartacus/core';
import { ORDER_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export function orderReturnRequestFacadeFactory() {
    return facadeFactory({
        facade: OrderReturnRequestFacade,
        feature: ORDER_CORE_FEATURE,
        methods: [
            'createOrderReturnRequest',
            'getOrderReturnRequest',
            'getOrderReturnRequestList',
            'loadOrderReturnRequestDetail',
            'loadOrderReturnRequestList',
            'clearOrderReturnRequestList',
            'getReturnRequestLoading',
            'getReturnRequestSuccess',
            'clearOrderReturnRequestDetail',
            'cancelOrderReturnRequest',
            'getCancelReturnRequestLoading',
            'getCancelReturnRequestSuccess',
            'resetCancelReturnRequestProcessState',
        ],
        async: true,
    });
}
export class OrderReturnRequestFacade {
}
OrderReturnRequestFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OrderReturnRequestFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestFacade, providedIn: 'root', useFactory: orderReturnRequestFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: orderReturnRequestFacadeFactory,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItcmV0dXJuLXJlcXVlc3QuZmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZGVyL3Jvb3QvZmFjYWRlL29yZGVyLXJldHVybi1yZXF1ZXN0LmZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDTCxhQUFhLEdBS2QsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFckQsTUFBTSxVQUFVLCtCQUErQjtJQUM3QyxPQUFPLGFBQWEsQ0FBQztRQUNuQixNQUFNLEVBQUUsd0JBQXdCO1FBQ2hDLE9BQU8sRUFBRSxrQkFBa0I7UUFDM0IsT0FBTyxFQUFFO1lBQ1AsMEJBQTBCO1lBQzFCLHVCQUF1QjtZQUN2QiwyQkFBMkI7WUFDM0IsOEJBQThCO1lBQzlCLDRCQUE0QjtZQUM1Qiw2QkFBNkI7WUFDN0IseUJBQXlCO1lBQ3pCLHlCQUF5QjtZQUN6QiwrQkFBK0I7WUFDL0IsMEJBQTBCO1lBQzFCLCtCQUErQjtZQUMvQiwrQkFBK0I7WUFDL0Isc0NBQXNDO1NBQ3ZDO1FBQ0QsS0FBSyxFQUFFLElBQUk7S0FDWixDQUFDLENBQUM7QUFDTCxDQUFDO0FBTUQsTUFBTSxPQUFnQix3QkFBd0I7O3FIQUF4Qix3QkFBd0I7eUhBQXhCLHdCQUF3QixjQUhoQyxNQUFNLGNBQ04sK0JBQStCOzJGQUV2Qix3QkFBd0I7a0JBSjdDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07b0JBQ2xCLFVBQVUsRUFBRSwrQkFBK0I7aUJBQzVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgZmFjYWRlRmFjdG9yeSxcbiAgUmV0dXJuUmVxdWVzdCxcbiAgUmV0dXJuUmVxdWVzdEVudHJ5SW5wdXRMaXN0LFxuICBSZXR1cm5SZXF1ZXN0TGlzdCxcbiAgUmV0dXJuUmVxdWVzdE1vZGlmaWNhdGlvbixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE9SREVSX0NPUkVfRkVBVFVSRSB9IGZyb20gJy4uL2ZlYXR1cmUtbmFtZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcmRlclJldHVyblJlcXVlc3RGYWNhZGVGYWN0b3J5KCkge1xuICByZXR1cm4gZmFjYWRlRmFjdG9yeSh7XG4gICAgZmFjYWRlOiBPcmRlclJldHVyblJlcXVlc3RGYWNhZGUsXG4gICAgZmVhdHVyZTogT1JERVJfQ09SRV9GRUFUVVJFLFxuICAgIG1ldGhvZHM6IFtcbiAgICAgICdjcmVhdGVPcmRlclJldHVyblJlcXVlc3QnLFxuICAgICAgJ2dldE9yZGVyUmV0dXJuUmVxdWVzdCcsXG4gICAgICAnZ2V0T3JkZXJSZXR1cm5SZXF1ZXN0TGlzdCcsXG4gICAgICAnbG9hZE9yZGVyUmV0dXJuUmVxdWVzdERldGFpbCcsXG4gICAgICAnbG9hZE9yZGVyUmV0dXJuUmVxdWVzdExpc3QnLFxuICAgICAgJ2NsZWFyT3JkZXJSZXR1cm5SZXF1ZXN0TGlzdCcsXG4gICAgICAnZ2V0UmV0dXJuUmVxdWVzdExvYWRpbmcnLFxuICAgICAgJ2dldFJldHVyblJlcXVlc3RTdWNjZXNzJyxcbiAgICAgICdjbGVhck9yZGVyUmV0dXJuUmVxdWVzdERldGFpbCcsXG4gICAgICAnY2FuY2VsT3JkZXJSZXR1cm5SZXF1ZXN0JyxcbiAgICAgICdnZXRDYW5jZWxSZXR1cm5SZXF1ZXN0TG9hZGluZycsXG4gICAgICAnZ2V0Q2FuY2VsUmV0dXJuUmVxdWVzdFN1Y2Nlc3MnLFxuICAgICAgJ3Jlc2V0Q2FuY2VsUmV0dXJuUmVxdWVzdFByb2Nlc3NTdGF0ZScsXG4gICAgXSxcbiAgICBhc3luYzogdHJ1ZSxcbiAgfSk7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB1c2VGYWN0b3J5OiBvcmRlclJldHVyblJlcXVlc3RGYWNhZGVGYWN0b3J5LFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPcmRlclJldHVyblJlcXVlc3RGYWNhZGUge1xuICAvKipcbiAgICogQ3JlYXRlIG9yZGVyIHJldHVybiByZXF1ZXN0XG4gICAqIEBwYXJhbSBvcmRlckNvZGUgYW4gb3JkZXIgY29kZVxuICAgKiBAcGFyYW0gcmV0dXJuUmVxdWVzdElucHV0IG9yZGVyIHJldHVybiByZXF1ZXN0IGVudHJ5IGlucHV0XG4gICAqL1xuICBhYnN0cmFjdCBjcmVhdGVPcmRlclJldHVyblJlcXVlc3QoXG4gICAgcmV0dXJuUmVxdWVzdElucHV0OiBSZXR1cm5SZXF1ZXN0RW50cnlJbnB1dExpc3RcbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUmV0dXJuIGFuIG9yZGVyIHJldHVybiByZXF1ZXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRPcmRlclJldHVyblJlcXVlc3QoKTogT2JzZXJ2YWJsZTxSZXR1cm5SZXF1ZXN0PjtcblxuICAvKipcbiAgICogR2V0cyBvcmRlciByZXR1cm4gcmVxdWVzdCBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRPcmRlclJldHVyblJlcXVlc3RMaXN0KFxuICAgIHBhZ2VTaXplOiBudW1iZXJcbiAgKTogT2JzZXJ2YWJsZTxSZXR1cm5SZXF1ZXN0TGlzdCB8IHVuZGVmaW5lZD47XG5cbiAgLyoqXG4gICAqIExvYWRzIG9yZGVyIHJldHVybiByZXF1ZXN0IGRldGFpbFxuICAgKiBAcGFyYW0gcmV0dXJuUmVxdWVzdENvZGVcbiAgICovXG4gIGFic3RyYWN0IGxvYWRPcmRlclJldHVyblJlcXVlc3REZXRhaWwocmV0dXJuUmVxdWVzdENvZGU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIExvYWRzIG9yZGVyIHJldHVybiByZXF1ZXN0IGxpc3RcbiAgICogQHBhcmFtIHBhZ2VTaXplIHBhZ2Ugc2l6ZVxuICAgKiBAcGFyYW0gY3VycmVudFBhZ2UgY3VycmVudCBwYWdlXG4gICAqIEBwYXJhbSBzb3J0IHNvcnRcbiAgICovXG4gIGFic3RyYWN0IGxvYWRPcmRlclJldHVyblJlcXVlc3RMaXN0KFxuICAgIHBhZ2VTaXplOiBudW1iZXIsXG4gICAgY3VycmVudFBhZ2U/OiBudW1iZXIsXG4gICAgc29ydD86IHN0cmluZ1xuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhbmluZyBvcmRlciByZXR1cm4gcmVxdWVzdCBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBjbGVhck9yZGVyUmV0dXJuUmVxdWVzdExpc3QoKTogdm9pZDtcblxuICAvKipcbiAgICogR2V0IHRoZSBvcmRlciByZXR1cm4gcmVxdWVzdCBsb2FkaW5nIGZsYWdcbiAgICovXG4gIGFic3RyYWN0IGdldFJldHVyblJlcXVlc3RMb2FkaW5nKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgb3JkZXIgcmV0dXJuIHJlcXVlc3Qgc3VjY2VzcyBmbGFnXG4gICAqL1xuICBhYnN0cmFjdCBnZXRSZXR1cm5SZXF1ZXN0U3VjY2VzcygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBDbGVhbmluZyBvcmRlciByZXR1cm4gcmVxdWVzdCBkZXRhaWxzXG4gICAqL1xuICBhYnN0cmFjdCBjbGVhck9yZGVyUmV0dXJuUmVxdWVzdERldGFpbCgpOiB2b2lkO1xuXG4gIC8qXG4gICAqIENhbmNlbCBvcmRlciByZXR1cm4gcmVxdWVzdFxuICAgKi9cbiAgYWJzdHJhY3QgY2FuY2VsT3JkZXJSZXR1cm5SZXF1ZXN0KFxuICAgIHJldHVyblJlcXVlc3RDb2RlOiBzdHJpbmcsXG4gICAgcmV0dXJuUmVxdWVzdE1vZGlmaWNhdGlvbjogUmV0dXJuUmVxdWVzdE1vZGlmaWNhdGlvblxuICApOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYW5jZWwgcmV0dXJuIHJlcXVlc3QgbG9hZGluZyBmbGFnXG4gICAqL1xuICBhYnN0cmFjdCBnZXRDYW5jZWxSZXR1cm5SZXF1ZXN0TG9hZGluZygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjYW5jZWwgcmV0dXJuIHJlcXVlc3Qgc3VjY2VzcyBmbGFnXG4gICAqL1xuICBhYnN0cmFjdCBnZXRDYW5jZWxSZXR1cm5SZXF1ZXN0U3VjY2VzcygpOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIGNhbmNlbCByZXR1cm4gcmVxdWVzdCBwcm9jZXNzIGZsYWdzXG4gICAqL1xuICBhYnN0cmFjdCByZXNldENhbmNlbFJldHVyblJlcXVlc3RQcm9jZXNzU3RhdGUoKTogdm9pZDtcbn1cbiJdfQ==