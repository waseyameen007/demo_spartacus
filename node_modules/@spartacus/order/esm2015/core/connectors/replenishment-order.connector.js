import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./replenishment-order.adapter";
export class ReplenishmentOrderConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    load(userId, replenishmentOrderCode) {
        return this.adapter.load(userId, replenishmentOrderCode);
    }
    loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort) {
        return this.adapter.loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort);
    }
    cancelReplenishmentOrder(userId, replenishmentOrderCode) {
        return this.adapter.cancelReplenishmentOrder(userId, replenishmentOrderCode);
    }
    loadHistory(userId, pageSize, currentPage, sort) {
        return this.adapter.loadHistory(userId, pageSize, currentPage, sort);
    }
}
ReplenishmentOrderConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderConnector, deps: [{ token: i1.ReplenishmentOrderAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderConnector });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderConnector, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.ReplenishmentOrderAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci5jb25uZWN0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvb3JkZXIvY29yZS9jb25uZWN0b3JzL3JlcGxlbmlzaG1lbnQtb3JkZXIuY29ubmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVUzQyxNQUFNLE9BQU8sMkJBQTJCO0lBQ3RDLFlBQXNCLE9BQWtDO1FBQWxDLFlBQU8sR0FBUCxPQUFPLENBQTJCO0lBQUcsQ0FBQztJQUVyRCxJQUFJLENBQ1QsTUFBYyxFQUNkLHNCQUE4QjtRQUU5QixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxzQkFBc0IsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFTSwrQkFBK0IsQ0FDcEMsTUFBYyxFQUNkLHNCQUE4QixFQUM5QixRQUFpQixFQUNqQixXQUFvQixFQUNwQixJQUFhO1FBRWIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLCtCQUErQixDQUNqRCxNQUFNLEVBQ04sc0JBQXNCLEVBQ3RCLFFBQVEsRUFDUixXQUFXLEVBQ1gsSUFBSSxDQUNMLENBQUM7SUFDSixDQUFDO0lBRU0sd0JBQXdCLENBQzdCLE1BQWMsRUFDZCxzQkFBOEI7UUFFOUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHdCQUF3QixDQUMxQyxNQUFNLEVBQ04sc0JBQXNCLENBQ3ZCLENBQUM7SUFDSixDQUFDO0lBRU0sV0FBVyxDQUNoQixNQUFjLEVBQ2QsUUFBaUIsRUFDakIsV0FBb0IsRUFDcEIsSUFBYTtRQUViLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkUsQ0FBQzs7d0hBM0NVLDJCQUEyQjs0SEFBM0IsMkJBQTJCOzJGQUEzQiwyQkFBMkI7a0JBRHZDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBPcmRlckhpc3RvcnlMaXN0LFxuICBSZXBsZW5pc2htZW50T3JkZXIsXG4gIFJlcGxlbmlzaG1lbnRPcmRlckxpc3QsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZXBsZW5pc2htZW50T3JkZXJBZGFwdGVyIH0gZnJvbSAnLi9yZXBsZW5pc2htZW50LW9yZGVyLmFkYXB0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGFkYXB0ZXI6IFJlcGxlbmlzaG1lbnRPcmRlckFkYXB0ZXIpIHt9XG5cbiAgcHVibGljIGxvYWQoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgcmVwbGVuaXNobWVudE9yZGVyQ29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkKHVzZXJJZCwgcmVwbGVuaXNobWVudE9yZGVyQ29kZSk7XG4gIH1cblxuICBwdWJsaWMgbG9hZFJlcGxlbmlzaG1lbnREZXRhaWxzSGlzdG9yeShcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICByZXBsZW5pc2htZW50T3JkZXJDb2RlOiBzdHJpbmcsXG4gICAgcGFnZVNpemU/OiBudW1iZXIsXG4gICAgY3VycmVudFBhZ2U/OiBudW1iZXIsXG4gICAgc29ydD86IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZGVySGlzdG9yeUxpc3Q+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWRSZXBsZW5pc2htZW50RGV0YWlsc0hpc3RvcnkoXG4gICAgICB1c2VySWQsXG4gICAgICByZXBsZW5pc2htZW50T3JkZXJDb2RlLFxuICAgICAgcGFnZVNpemUsXG4gICAgICBjdXJyZW50UGFnZSxcbiAgICAgIHNvcnRcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICByZXBsZW5pc2htZW50T3JkZXJDb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxSZXBsZW5pc2htZW50T3JkZXI+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICAgIHVzZXJJZCxcbiAgICAgIHJlcGxlbmlzaG1lbnRPcmRlckNvZGVcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGxvYWRIaXN0b3J5KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHBhZ2VTaXplPzogbnVtYmVyLFxuICAgIGN1cnJlbnRQYWdlPzogbnVtYmVyLFxuICAgIHNvcnQ/OiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxSZXBsZW5pc2htZW50T3JkZXJMaXN0PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkSGlzdG9yeSh1c2VySWQsIHBhZ2VTaXplLCBjdXJyZW50UGFnZSwgc29ydCk7XG4gIH1cbn1cbiJdfQ==