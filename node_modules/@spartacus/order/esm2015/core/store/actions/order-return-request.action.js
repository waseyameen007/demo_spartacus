import { PROCESS_FEATURE, StateUtils, } from '@spartacus/core';
import { CANCEL_RETURN_PROCESS_ID, RETURN_REQUESTS, RETURN_REQUEST_DETAILS, } from '../order-state';
export const CREATE_ORDER_RETURN_REQUEST = '[Order] Create Order Return Request';
export const CREATE_ORDER_RETURN_REQUEST_FAIL = '[Order] Create Order Return Request Fail';
export const CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[Order] Create Order Return Request Success';
export const LOAD_ORDER_RETURN_REQUEST = '[Order] Load Order Return Request details';
export const LOAD_ORDER_RETURN_REQUEST_FAIL = '[Order] Load Order Return Request details Fail';
export const LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[Order] Load Order Return Request details Success';
export const CANCEL_ORDER_RETURN_REQUEST = '[Order] Cancel Order Return Request';
export const CANCEL_ORDER_RETURN_REQUEST_FAIL = '[Order] Cancel Order Return Request Fail';
export const CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[Order] Cancel Order Return Request Success';
export const LOAD_ORDER_RETURN_REQUEST_LIST = '[Order] Load User Order Return Request List';
export const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[Order] Load User Order Return Request List Fail';
export const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[Order] Load User Order Return Request List Success';
export const CLEAR_ORDER_RETURN_REQUEST = '[Order] Clear Order Return Request Details';
export const CLEAR_ORDER_RETURN_REQUEST_LIST = '[Order] Clear Order Return Request List';
export const RESET_CANCEL_RETURN_PROCESS = '[Order] Reset Cancel Return Request Process';
export class CreateOrderReturnRequest extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST;
    }
}
export class CreateOrderReturnRequestFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;
    }
}
export class CreateOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
export class LoadOrderReturnRequest extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST;
    }
}
export class LoadOrderReturnRequestFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;
    }
}
export class LoadOrderReturnRequestSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
export class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST;
    }
}
export class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;
    }
}
export class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
export class LoadOrderReturnRequestList extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST;
    }
}
export class LoadOrderReturnRequestListFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(RETURN_REQUESTS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;
    }
}
export class LoadOrderReturnRequestListSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;
    }
}
export class ClearOrderReturnRequest extends StateUtils.LoaderResetAction {
    constructor() {
        super(RETURN_REQUEST_DETAILS);
        this.type = CLEAR_ORDER_RETURN_REQUEST;
    }
}
export class ClearOrderReturnRequestList extends StateUtils.LoaderResetAction {
    constructor() {
        super(RETURN_REQUESTS);
        this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;
    }
}
export class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = RESET_CANCEL_RETURN_PROCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,