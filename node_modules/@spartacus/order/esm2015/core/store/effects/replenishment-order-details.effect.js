import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { GlobalMessageType, normalizeHttpError, } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { OrderActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/replenishment-order.connector";
import * as i3 from "@spartacus/core";
export class ReplenishmentOrderDetailsEffect {
    constructor(actions$, replenishmentOrderConnector, globalMessageService) {
        this.actions$ = actions$;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.globalMessageService = globalMessageService;
        this.loadReplenishmentOrderDetails$ = this.actions$.pipe(ofType(OrderActions.LOAD_REPLENISHMENT_ORDER_DETAILS), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .load(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => {
                return new OrderActions.LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);
            }), catchError((error) => of(new OrderActions.LoadReplenishmentOrderDetailsFail(normalizeHttpError(error)))));
        }));
        this.cancelReplenishmentOrder$ = this.actions$.pipe(ofType(OrderActions.CANCEL_REPLENISHMENT_ORDER), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => new OrderActions.CancelReplenishmentOrderSuccess(replenishmentOrder)), catchError((error) => {
                var _a;
                (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach((err) => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));
                return of(new OrderActions.CancelReplenishmentOrderFail(normalizeHttpError(error)));
            }));
        }));
    }
}
ReplenishmentOrderDetailsEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderDetailsEffect, deps: [{ token: i1.Actions }, { token: i2.ReplenishmentOrderConnector }, { token: i3.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderDetailsEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderDetailsEffect });
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "loadReplenishmentOrderDetails$", void 0);
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "cancelReplenishmentOrder$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderDetailsEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.ReplenishmentOrderConnector }, { type: i3.GlobalMessageService }]; }, propDecorators: { loadReplenishmentOrderDetails$: [], cancelReplenishmentOrder$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmRlci9jb3JlL3N0b3JlL2VmZmVjdHMvcmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVcsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBRUwsaUJBQWlCLEVBQ2pCLGtCQUFrQixHQUVuQixNQUFNLGlCQUFpQixDQUFDO0FBQ3pCLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7OztBQUdoRCxNQUFNLE9BQU8sK0JBQStCO0lBZ0UxQyxZQUNVLFFBQWlCLEVBQ2pCLDJCQUF3RCxFQUN4RCxvQkFBMEM7UUFGMUMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQTZCO1FBQ3hELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFqRXBELG1DQUE4QixHQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLFlBQVksQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUNyRCxHQUFHLENBQ0QsQ0FBQyxNQUFrRCxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUN2RSxFQUNELFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO2lCQUNwRCxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsa0JBQXNDLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxJQUFJLFlBQVksQ0FBQyxvQ0FBb0MsQ0FDMUQsa0JBQWtCLENBQ25CLENBQUM7WUFDSixDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixFQUFFLENBQ0EsSUFBSSxZQUFZLENBQUMsaUNBQWlDLENBQ2hELGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUNGLENBQ0YsQ0FDRixDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUdKLDhCQUF5QixHQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxFQUMvQyxHQUFHLENBQUMsQ0FBQyxNQUE2QyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3RFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsd0JBQXdCLENBQ3ZCLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUMvQjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUNELENBQUMsa0JBQXNDLEVBQUUsRUFBRSxDQUN6QyxJQUFJLFlBQVksQ0FBQywrQkFBK0IsQ0FDOUMsa0JBQWtCLENBQ25CLENBQ0osRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7Z0JBQ25CLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEtBQUssMENBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFLENBQ3hDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzNCLEdBQUcsQ0FBQyxPQUFPLEVBQ1gsaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUNGLENBQUM7Z0JBRUYsT0FBTyxFQUFFLENBQ1AsSUFBSSxZQUFZLENBQUMsNEJBQTRCLENBQzNDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUNGLENBQUM7WUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQU1ELENBQUM7OzRIQXBFTywrQkFBK0I7Z0lBQS9CLCtCQUErQjtBQUUxQztJQURDLE1BQU0sRUFBRTt1RkF5Qkw7QUFHSjtJQURDLE1BQU0sRUFBRTtrRkFrQ0w7MkZBOURPLCtCQUErQjtrQkFEM0MsVUFBVTsyS0FHVCw4QkFBOEIsTUEyQjlCLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIEVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQge1xuICBHbG9iYWxNZXNzYWdlU2VydmljZSxcbiAgR2xvYmFsTWVzc2FnZVR5cGUsXG4gIG5vcm1hbGl6ZUh0dHBFcnJvcixcbiAgUmVwbGVuaXNobWVudE9yZGVyLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IGNhdGNoRXJyb3IsIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9yZXBsZW5pc2htZW50LW9yZGVyLmNvbm5lY3Rvcic7XG5pbXBvcnQgeyBPcmRlckFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNFZmZlY3Qge1xuICBARWZmZWN0KClcbiAgbG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMkOiBPYnNlcnZhYmxlPE9yZGVyQWN0aW9ucy5SZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzQWN0aW9uPiA9XG4gICAgdGhpcy5hY3Rpb25zJC5waXBlKFxuICAgICAgb2ZUeXBlKE9yZGVyQWN0aW9ucy5MT0FEX1JFUExFTklTSE1FTlRfT1JERVJfREVUQUlMUyksXG4gICAgICBtYXAoXG4gICAgICAgIChhY3Rpb246IE9yZGVyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscykgPT4gYWN0aW9uLnBheWxvYWRcbiAgICAgICksXG4gICAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICAgICAgICAgLmxvYWQocGF5bG9hZC51c2VySWQsIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZSlcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVwbGVuaXNobWVudE9yZGVyOiBSZXBsZW5pc2htZW50T3JkZXIpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBPcmRlckFjdGlvbnMuTG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNTdWNjZXNzKFxuICAgICAgICAgICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBjYXRjaEVycm9yKChlcnJvcikgPT5cbiAgICAgICAgICAgICAgb2YoXG4gICAgICAgICAgICAgICAgbmV3IE9yZGVyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0ZhaWwoXG4gICAgICAgICAgICAgICAgICBub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICBARWZmZWN0KClcbiAgY2FuY2VsUmVwbGVuaXNobWVudE9yZGVyJDogT2JzZXJ2YWJsZTxPcmRlckFjdGlvbnMuUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0FjdGlvbj4gPVxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShPcmRlckFjdGlvbnMuQ0FOQ0VMX1JFUExFTklTSE1FTlRfT1JERVIpLFxuICAgICAgbWFwKChhY3Rpb246IE9yZGVyQWN0aW9ucy5DYW5jZWxSZXBsZW5pc2htZW50T3JkZXIpID0+IGFjdGlvbi5wYXlsb2FkKSxcbiAgICAgIHN3aXRjaE1hcCgocGF5bG9hZCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3JcbiAgICAgICAgICAuY2FuY2VsUmVwbGVuaXNobWVudE9yZGVyKFxuICAgICAgICAgICAgcGF5bG9hZC51c2VySWQsXG4gICAgICAgICAgICBwYXlsb2FkLnJlcGxlbmlzaG1lbnRPcmRlckNvZGVcbiAgICAgICAgICApXG4gICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgIChyZXBsZW5pc2htZW50T3JkZXI6IFJlcGxlbmlzaG1lbnRPcmRlcikgPT5cbiAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICByZXBsZW5pc2htZW50T3JkZXJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgZXJyb3I/LmVycm9yPy5lcnJvcnMuZm9yRWFjaCgoZXJyOiBhbnkpID0+XG4gICAgICAgICAgICAgICAgdGhpcy5nbG9iYWxNZXNzYWdlU2VydmljZS5hZGQoXG4gICAgICAgICAgICAgICAgICBlcnIubWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgIEdsb2JhbE1lc3NhZ2VUeXBlLk1TR19UWVBFX0VSUk9SXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgIHJldHVybiBvZihcbiAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlckZhaWwoXG4gICAgICAgICAgICAgICAgICBub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXG4gICAgcHJpdmF0ZSByZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3I6IFJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3RvcixcbiAgICBwcml2YXRlIGdsb2JhbE1lc3NhZ2VTZXJ2aWNlOiBHbG9iYWxNZXNzYWdlU2VydmljZVxuICApIHt9XG59XG4iXX0=