import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { normalizeHttpError } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { OrderActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/replenishment-order.connector";
export class ReplenishmentOrdersEffect {
    constructor(actions$, replenishmentOrderConnector) {
        this.actions$ = actions$;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.loadUserReplenishmentOrders$ = this.actions$.pipe(ofType(OrderActions.LOAD_USER_REPLENISHMENT_ORDERS), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .loadHistory(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                .pipe(map((orders) => {
                return new OrderActions.LoadUserReplenishmentOrdersSuccess(orders);
            }), catchError((error) => of(new OrderActions.LoadUserReplenishmentOrdersFail(normalizeHttpError(error)))));
        }));
    }
}
ReplenishmentOrdersEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrdersEffect, deps: [{ token: i1.Actions }, { token: i2.ReplenishmentOrderConnector }], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrdersEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrdersEffect });
__decorate([
    Effect()
], ReplenishmentOrdersEffect.prototype, "loadUserReplenishmentOrders$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrdersEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.ReplenishmentOrderConnector }]; }, propDecorators: { loadUserReplenishmentOrders$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlcnMuZWZmZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL29yZGVyL2NvcmUvc3RvcmUvZWZmZWN0cy9yZXBsZW5pc2htZW50LW9yZGVycy5lZmZlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFXLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUEwQixNQUFNLGlCQUFpQixDQUFDO0FBQzdFLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBR2hELE1BQU0sT0FBTyx5QkFBeUI7SUErQnBDLFlBQ1UsUUFBaUIsRUFDakIsMkJBQXdEO1FBRHhELGFBQVEsR0FBUixRQUFRLENBQVM7UUFDakIsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQS9CbEUsaUNBQTRCLEdBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNoQixNQUFNLENBQUMsWUFBWSxDQUFDLDhCQUE4QixDQUFDLEVBQ25ELEdBQUcsQ0FBQyxDQUFDLE1BQWdELEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsRUFDekUsU0FBUyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDcEIsT0FBTyxJQUFJLENBQUMsMkJBQTJCO2lCQUNwQyxXQUFXLENBQ1YsT0FBTyxDQUFDLE1BQU0sRUFDZCxPQUFPLENBQUMsUUFBUSxFQUNoQixPQUFPLENBQUMsV0FBVyxFQUNuQixPQUFPLENBQUMsSUFBSSxDQUNiO2lCQUNBLElBQUksQ0FDSCxHQUFHLENBQUMsQ0FBQyxNQUE4QixFQUFFLEVBQUU7Z0JBQ3JDLE9BQU8sSUFBSSxZQUFZLENBQUMsa0NBQWtDLENBQ3hELE1BQU0sQ0FDUCxDQUFDO1lBQ0osQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FDbkIsRUFBRSxDQUNBLElBQUksWUFBWSxDQUFDLCtCQUErQixDQUM5QyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FDMUIsQ0FDRixDQUNGLENBQ0YsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUNILENBQUM7SUFLRCxDQUFDOztzSEFsQ08seUJBQXlCOzBIQUF6Qix5QkFBeUI7QUFFcEM7SUFEQyxNQUFNLEVBQUU7K0VBNEJMOzJGQTdCTyx5QkFBeUI7a0JBRHJDLFVBQVU7d0lBR1QsNEJBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9ucywgRWZmZWN0LCBvZlR5cGUgfSBmcm9tICdAbmdyeC9lZmZlY3RzJztcbmltcG9ydCB7IG5vcm1hbGl6ZUh0dHBFcnJvciwgUmVwbGVuaXNobWVudE9yZGVyTGlzdCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3IgfSBmcm9tICcuLi8uLi9jb25uZWN0b3JzL3JlcGxlbmlzaG1lbnQtb3JkZXIuY29ubmVjdG9yJztcbmltcG9ydCB7IE9yZGVyQWN0aW9ucyB9IGZyb20gJy4uL2FjdGlvbnMvaW5kZXgnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUmVwbGVuaXNobWVudE9yZGVyc0VmZmVjdCB7XG4gIEBFZmZlY3QoKVxuICBsb2FkVXNlclJlcGxlbmlzaG1lbnRPcmRlcnMkOiBPYnNlcnZhYmxlPE9yZGVyQWN0aW9ucy5Vc2VyUmVwbGVuaXNobWVudE9yZGVyc0FjdGlvbj4gPVxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShPcmRlckFjdGlvbnMuTE9BRF9VU0VSX1JFUExFTklTSE1FTlRfT1JERVJTKSxcbiAgICAgIG1hcCgoYWN0aW9uOiBPcmRlckFjdGlvbnMuTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICAgICAgICAgLmxvYWRIaXN0b3J5KFxuICAgICAgICAgICAgcGF5bG9hZC51c2VySWQsXG4gICAgICAgICAgICBwYXlsb2FkLnBhZ2VTaXplLFxuICAgICAgICAgICAgcGF5bG9hZC5jdXJyZW50UGFnZSxcbiAgICAgICAgICAgIHBheWxvYWQuc29ydFxuICAgICAgICAgIClcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcCgob3JkZXJzOiBSZXBsZW5pc2htZW50T3JkZXJMaXN0KSA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgT3JkZXJBY3Rpb25zLkxvYWRVc2VyUmVwbGVuaXNobWVudE9yZGVyc1N1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgb3JkZXJzXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PlxuICAgICAgICAgICAgICBvZihcbiAgICAgICAgICAgICAgICBuZXcgT3JkZXJBY3Rpb25zLkxvYWRVc2VyUmVwbGVuaXNobWVudE9yZGVyc0ZhaWwoXG4gICAgICAgICAgICAgICAgICBub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgIH0pXG4gICAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGFjdGlvbnMkOiBBY3Rpb25zLFxuICAgIHByaXZhdGUgcmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yOiBSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3JcbiAgKSB7fVxufVxuIl19