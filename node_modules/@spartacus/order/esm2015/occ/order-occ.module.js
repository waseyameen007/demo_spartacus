import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { provideDefaultConfig } from '@spartacus/core';
import { OrderAdapter, ORDER_RETURN_REQUEST_NORMALIZER, ReplenishmentOrderAdapter, } from '@spartacus/order/core';
import { OccReturnRequestNormalizer } from './adapters/converters/occ-return-request-normalizer';
import { OccOrderAdapter } from './adapters/occ-order.adapter';
import { OccReplenishmentOrderAdapter } from './adapters/occ-replenishment-order.adapter';
import { defaultOccOrderConfig } from './config/default-occ-order-config';
import * as i0 from "@angular/core";
export class OrderOccModule {
}
OrderOccModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderOccModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
OrderOccModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderOccModule, imports: [CommonModule] });
OrderOccModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderOccModule, providers: [
        provideDefaultConfig(defaultOccOrderConfig),
        { provide: OrderAdapter, useClass: OccOrderAdapter },
        {
            provide: ReplenishmentOrderAdapter,
            useClass: OccReplenishmentOrderAdapter,
        },
        {
            provide: ORDER_RETURN_REQUEST_NORMALIZER,
            useExisting: OccReturnRequestNormalizer,
            multi: true,
        },
    ], imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderOccModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    providers: [
                        provideDefaultConfig(defaultOccOrderConfig),
                        { provide: OrderAdapter, useClass: OccOrderAdapter },
                        {
                            provide: ReplenishmentOrderAdapter,
                            useClass: OccReplenishmentOrderAdapter,
                        },
                        {
                            provide: ORDER_RETURN_REQUEST_NORMALIZER,
                            useExisting: OccReturnRequestNormalizer,
                            multi: true,
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItb2NjLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9vcmRlci9vY2Mvb3JkZXItb2NjLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RCxPQUFPLEVBQ0wsWUFBWSxFQUNaLCtCQUErQixFQUMvQix5QkFBeUIsR0FDMUIsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUNqRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDMUYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7O0FBa0IxRSxNQUFNLE9BQU8sY0FBYzs7MkdBQWQsY0FBYzs0R0FBZCxjQUFjLFlBZmYsWUFBWTs0R0FlWCxjQUFjLGFBZGQ7UUFDVCxvQkFBb0IsQ0FBQyxxQkFBcUIsQ0FBQztRQUMzQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTtRQUNwRDtZQUNFLE9BQU8sRUFBRSx5QkFBeUI7WUFDbEMsUUFBUSxFQUFFLDRCQUE0QjtTQUN2QztRQUNEO1lBQ0UsT0FBTyxFQUFFLCtCQUErQjtZQUN4QyxXQUFXLEVBQUUsMEJBQTBCO1lBQ3ZDLEtBQUssRUFBRSxJQUFJO1NBQ1o7S0FDRixZQWJRLENBQUMsWUFBWSxDQUFDOzJGQWVaLGNBQWM7a0JBaEIxQixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRSxDQUFDLFlBQVksQ0FBQztvQkFDdkIsU0FBUyxFQUFFO3dCQUNULG9CQUFvQixDQUFDLHFCQUFxQixDQUFDO3dCQUMzQyxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLGVBQWUsRUFBRTt3QkFDcEQ7NEJBQ0UsT0FBTyxFQUFFLHlCQUF5Qjs0QkFDbEMsUUFBUSxFQUFFLDRCQUE0Qjt5QkFDdkM7d0JBQ0Q7NEJBQ0UsT0FBTyxFQUFFLCtCQUErQjs0QkFDeEMsV0FBVyxFQUFFLDBCQUEwQjs0QkFDdkMsS0FBSyxFQUFFLElBQUk7eUJBQ1o7cUJBQ0Y7aUJBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IHByb3ZpZGVEZWZhdWx0Q29uZmlnIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7XG4gIE9yZGVyQWRhcHRlcixcbiAgT1JERVJfUkVUVVJOX1JFUVVFU1RfTk9STUFMSVpFUixcbiAgUmVwbGVuaXNobWVudE9yZGVyQWRhcHRlcixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9vcmRlci9jb3JlJztcbmltcG9ydCB7IE9jY1JldHVyblJlcXVlc3ROb3JtYWxpemVyIH0gZnJvbSAnLi9hZGFwdGVycy9jb252ZXJ0ZXJzL29jYy1yZXR1cm4tcmVxdWVzdC1ub3JtYWxpemVyJztcbmltcG9ydCB7IE9jY09yZGVyQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcnMvb2NjLW9yZGVyLmFkYXB0ZXInO1xuaW1wb3J0IHsgT2NjUmVwbGVuaXNobWVudE9yZGVyQWRhcHRlciB9IGZyb20gJy4vYWRhcHRlcnMvb2NjLXJlcGxlbmlzaG1lbnQtb3JkZXIuYWRhcHRlcic7XG5pbXBvcnQgeyBkZWZhdWx0T2NjT3JkZXJDb25maWcgfSBmcm9tICcuL2NvbmZpZy9kZWZhdWx0LW9jYy1vcmRlci1jb25maWcnO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgcHJvdmlkZURlZmF1bHRDb25maWcoZGVmYXVsdE9jY09yZGVyQ29uZmlnKSxcbiAgICB7IHByb3ZpZGU6IE9yZGVyQWRhcHRlciwgdXNlQ2xhc3M6IE9jY09yZGVyQWRhcHRlciB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IFJlcGxlbmlzaG1lbnRPcmRlckFkYXB0ZXIsXG4gICAgICB1c2VDbGFzczogT2NjUmVwbGVuaXNobWVudE9yZGVyQWRhcHRlcixcbiAgICB9LFxuICAgIHtcbiAgICAgIHByb3ZpZGU6IE9SREVSX1JFVFVSTl9SRVFVRVNUX05PUk1BTElaRVIsXG4gICAgICB1c2VFeGlzdGluZzogT2NjUmV0dXJuUmVxdWVzdE5vcm1hbGl6ZXIsXG4gICAgICBtdWx0aTogdHJ1ZSxcbiAgICB9LFxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBPcmRlck9jY01vZHVsZSB7fVxuIl19