{"version":3,"file":"spartacus-tracking-tms-core.js","sources":["../../../feature-libs/tracking/tms/core/config/tms-config.ts","../../../feature-libs/tracking/tms/core/services/tms.service.ts","../../../feature-libs/tracking/tms/core/base-tms.module.ts","../../../feature-libs/tracking/tms/core/public_api.ts","../../../feature-libs/tracking/tms/core/spartacus-tracking-tms-core.ts"],"sourcesContent":["import { AbstractType, Injectable, Type } from '@angular/core';\nimport { Config, CxEvent } from '@spartacus/core';\nimport { TmsCollector } from '../model/tms.model';\n\n/**\n * Collector configuration\n */\nexport interface TmsCollectorConfig {\n  /** Should be enabled in development mode only */\n  debug?: boolean;\n  /**\n   * The name for the data layer object.\n   */\n  dataLayerProperty?: string;\n  /**\n   * Events to send to the configured TMS.\n   */\n  events?: AbstractType<CxEvent>[];\n  /**\n   * The collector service implementation.\n   */\n  collector?: Type<TmsCollector>;\n}\n\nexport interface TmsCollectors {\n  [tms: string]: TmsCollectorConfig | undefined;\n}\n\n/**\n * TMS configuration\n */\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class TmsConfig {\n  /**\n   * Tag manager config\n   */\n  tagManager?: TmsCollectors;\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends TmsConfig {}\n}\n","import { Injectable, Injector, isDevMode, OnDestroy } from '@angular/core';\nimport { CxEvent, EventService, WindowRef } from '@spartacus/core';\nimport { merge, Observable, Subscription } from 'rxjs';\nimport { TmsConfig } from '../config/tms-config';\nimport { TmsCollector } from '../model/tms.model';\n\n/**\n * This service interacts with the configured data layer object by pushing the Spartacus events to it.\n */\n@Injectable({ providedIn: 'root' })\nexport class TmsService implements OnDestroy {\n  /**\n   * Stores subscriptions to events.\n   */\n  protected subscription = new Subscription();\n\n  constructor(\n    protected eventsService: EventService,\n    protected windowRef: WindowRef,\n    protected tmsConfig: TmsConfig,\n    protected injector: Injector\n  ) {}\n\n  /**\n   * Called only once to start collecting and dispatching events\n   */\n  collect(): void {\n    if (!this.windowRef.isBrowser()) {\n      return;\n    }\n\n    for (const tmsCollectorConfig in this.tmsConfig.tagManager) {\n      if (!this.tmsConfig.tagManager?.hasOwnProperty(tmsCollectorConfig)) {\n        continue;\n      }\n\n      const collectorConfig =\n        this.tmsConfig.tagManager[tmsCollectorConfig] ?? {};\n\n      if (!collectorConfig.collector) {\n        if (isDevMode()) {\n          console.warn(\n            `Skipping the '${tmsCollectorConfig}', as the collector is not defined.`\n          );\n        }\n        continue;\n      }\n\n      const events =\n        collectorConfig.events?.map((event) => this.eventsService.get(event)) ||\n        [];\n      const collector = this.injector.get<TmsCollector>(\n        collectorConfig.collector\n      );\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      collector.init(collectorConfig, this.windowRef.nativeWindow!);\n\n      this.subscription.add(\n        this.mapEvents(events).subscribe((event) => {\n          if (collectorConfig.debug) {\n            console.log(\n              `ðŸŽ¤ Pushing the following event to ${tmsCollectorConfig}: `,\n              event\n            );\n          }\n\n          event = collector.map ? collector.map(event) : event;\n          collector.pushEvent(\n            collectorConfig,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.windowRef.nativeWindow!,\n            event\n          );\n        })\n      );\n    }\n  }\n\n  /**\n   * Maps the given events to an appropriate type that fits the specified TMS' structure.\n   *\n   * @param events - the events to map\n   * @param collector - a name of the collector for which the events should be mapped\n   */\n  protected mapEvents<T extends CxEvent>(\n    events: Observable<T>[]\n  ): Observable<T> {\n    return merge(...events);\n  }\n\n  /**\n   * Angular's callback\n   */\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { APP_INITIALIZER, ModuleWithProviders, NgModule } from '@angular/core';\nimport { TmsService } from './services/tms.service';\n\n/**\n * The factory that conditionally (based on the configuration) starts collecting events\n */\nexport function tmsFactory(service: TmsService): () => void {\n  const result = () => service.collect();\n  return result;\n}\n\n@NgModule({})\nexport class BaseTmsModule {\n  static forRoot(): ModuleWithProviders<BaseTmsModule> {\n    return {\n      ngModule: BaseTmsModule,\n      providers: [\n        {\n          provide: APP_INITIALIZER,\n          useFactory: tmsFactory,\n          deps: [TmsService],\n          multi: true,\n        },\n      ],\n    };\n  }\n}\n","export * from './base-tms.module';\nexport * from './config/index';\nexport * from './model/index';\nexport * from './services/index';\n\n/** AUGMENTABLE_TYPES_START */\nexport { TmsCollectors } from './config/tms-config';\n/** AUGMENTABLE_TYPES_END */\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}