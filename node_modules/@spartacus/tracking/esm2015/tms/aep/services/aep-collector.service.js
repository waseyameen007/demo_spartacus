import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
/**
 * Default Adobe Experience Platform Launch collector.
 */
export class AepCollectorService {
    constructor(scriptLoader) {
        this.scriptLoader = scriptLoader;
    }
    /**
     * If the `TmsCollectorConfig.dataLayerProperty` is not specified, it uses the default `digitalData`
     */
    init(config, windowObject) {
        var _a, _b;
        const dataLayerProperty = (_a = config.dataLayerProperty) !== null && _a !== void 0 ? _a : 'digitalData';
        windowObject[dataLayerProperty] = (_b = windowObject[dataLayerProperty]) !== null && _b !== void 0 ? _b : {};
        if (config.scriptUrl) {
            this.scriptLoader.embedScript({ src: config.scriptUrl });
        }
    }
    pushEvent(config, windowObject, event) {
        var _a;
        const dataLayerProperty = (_a = config.dataLayerProperty) !== null && _a !== void 0 ? _a : 'digitalData';
        windowObject[dataLayerProperty] = Object.assign(Object.assign({}, windowObject[dataLayerProperty]), event);
    }
}
AepCollectorService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AepCollectorService, deps: [{ token: i1.ScriptLoader }], target: i0.ɵɵFactoryTarget.Injectable });
AepCollectorService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AepCollectorService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AepCollectorService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ScriptLoader }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWVwLWNvbGxlY3Rvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3RyYWNraW5nL3Rtcy9hZXAvc2VydmljZXMvYWVwLWNvbGxlY3Rvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQVMzQzs7R0FFRztBQUVILE1BQU0sT0FBTyxtQkFBbUI7SUFDOUIsWUFBc0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDO0lBQ3BEOztPQUVHO0lBQ0gsSUFBSSxDQUFDLE1BQTBCLEVBQUUsWUFBMEI7O1FBQ3pELE1BQU0saUJBQWlCLEdBQUcsTUFBQSxNQUFNLENBQUMsaUJBQWlCLG1DQUFJLGFBQWEsQ0FBQztRQUNwRSxZQUFZLENBQUMsaUJBQWlCLENBQUMsR0FBRyxNQUFBLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxtQ0FBSSxFQUFFLENBQUM7UUFFeEUsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVELFNBQVMsQ0FDUCxNQUEwQixFQUMxQixZQUEwQixFQUMxQixLQUFjOztRQUVkLE1BQU0saUJBQWlCLEdBQUcsTUFBQSxNQUFNLENBQUMsaUJBQWlCLG1DQUFJLGFBQWEsQ0FBQztRQUNwRSxZQUFZLENBQUMsaUJBQWlCLENBQUMsbUNBQzFCLFlBQVksQ0FBQyxpQkFBaUIsQ0FBQyxHQUMvQixLQUFLLENBQ1QsQ0FBQztJQUNKLENBQUM7O2dIQXhCVSxtQkFBbUI7b0hBQW5CLG1CQUFtQixjQUROLE1BQU07MkZBQ25CLG1CQUFtQjtrQkFEL0IsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDeEV2ZW50LCBTY3JpcHRMb2FkZXIgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHtcbiAgVG1zQ29sbGVjdG9yLFxuICBUbXNDb2xsZWN0b3JDb25maWcsXG4gIFdpbmRvd09iamVjdCxcbn0gZnJvbSAnQHNwYXJ0YWN1cy90cmFja2luZy90bXMvY29yZSc7XG5pbXBvcnQgeyBBZXBDb2xsZWN0b3JDb25maWcgfSBmcm9tICcuLi9jb25maWcvZGVmYXVsdC1hZXAuY29uZmlnJztcblxuLyoqXG4gKiBEZWZhdWx0IEFkb2JlIEV4cGVyaWVuY2UgUGxhdGZvcm0gTGF1bmNoIGNvbGxlY3Rvci5cbiAqL1xuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBBZXBDb2xsZWN0b3JTZXJ2aWNlIGltcGxlbWVudHMgVG1zQ29sbGVjdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNjcmlwdExvYWRlcjogU2NyaXB0TG9hZGVyKSB7fVxuICAvKipcbiAgICogSWYgdGhlIGBUbXNDb2xsZWN0b3JDb25maWcuZGF0YUxheWVyUHJvcGVydHlgIGlzIG5vdCBzcGVjaWZpZWQsIGl0IHVzZXMgdGhlIGRlZmF1bHQgYGRpZ2l0YWxEYXRhYFxuICAgKi9cbiAgaW5pdChjb25maWc6IEFlcENvbGxlY3RvckNvbmZpZywgd2luZG93T2JqZWN0OiBXaW5kb3dPYmplY3QpOiB2b2lkIHtcbiAgICBjb25zdCBkYXRhTGF5ZXJQcm9wZXJ0eSA9IGNvbmZpZy5kYXRhTGF5ZXJQcm9wZXJ0eSA/PyAnZGlnaXRhbERhdGEnO1xuICAgIHdpbmRvd09iamVjdFtkYXRhTGF5ZXJQcm9wZXJ0eV0gPSB3aW5kb3dPYmplY3RbZGF0YUxheWVyUHJvcGVydHldID8/IHt9O1xuXG4gICAgaWYgKGNvbmZpZy5zY3JpcHRVcmwpIHtcbiAgICAgIHRoaXMuc2NyaXB0TG9hZGVyLmVtYmVkU2NyaXB0KHsgc3JjOiBjb25maWcuc2NyaXB0VXJsIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hFdmVudDxUIGV4dGVuZHMgQ3hFdmVudD4oXG4gICAgY29uZmlnOiBUbXNDb2xsZWN0b3JDb25maWcsXG4gICAgd2luZG93T2JqZWN0OiBXaW5kb3dPYmplY3QsXG4gICAgZXZlbnQ6IFQgfCBhbnlcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgZGF0YUxheWVyUHJvcGVydHkgPSBjb25maWcuZGF0YUxheWVyUHJvcGVydHkgPz8gJ2RpZ2l0YWxEYXRhJztcbiAgICB3aW5kb3dPYmplY3RbZGF0YUxheWVyUHJvcGVydHldID0ge1xuICAgICAgLi4ud2luZG93T2JqZWN0W2RhdGFMYXllclByb3BlcnR5XSxcbiAgICAgIC4uLmV2ZW50LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==