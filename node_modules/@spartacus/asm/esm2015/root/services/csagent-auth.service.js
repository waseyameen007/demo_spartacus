import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { AuthActions, OCC_USER_ID_ANONYMOUS, OCC_USER_ID_CURRENT, } from '@spartacus/core';
import { combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import { TokenTarget } from './asm-auth-storage.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "./asm-auth-storage.service";
import * as i3 from "@ngrx/store";
/**
 * Auth service for CS agent. Useful to login/logout agent, start emulation
 * or get information about the status of emulation.
 */
export class CsAgentAuthService {
    constructor(authService, authStorageService, userIdService, oAuthLibWrapperService, store, userService) {
        this.authService = authService;
        this.authStorageService = authStorageService;
        this.userIdService = userIdService;
        this.oAuthLibWrapperService = oAuthLibWrapperService;
        this.store = store;
        this.userService = userService;
    }
    /**
     * Loads access token for a customer support agent.
     * @param userId
     * @param password
     */
    authorizeCustomerSupportAgent(userId, password) {
        return __awaiter(this, void 0, void 0, function* () {
            let userToken;
            this.authStorageService
                .getToken()
                .subscribe((token) => (userToken = token))
                .unsubscribe();
            this.authStorageService.switchTokenTargetToCSAgent();
            try {
                yield this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password);
                // Start emulation for currently logged in user
                let customerId;
                this.userService
                    .get()
                    .subscribe((user) => (customerId = user === null || user === void 0 ? void 0 : user.customerId))
                    .unsubscribe();
                this.store.dispatch(new AuthActions.Logout());
                if (customerId !== undefined && userToken !== undefined) {
                    // OCC specific user id handling. Customize when implementing different backend
                    this.userIdService.setUserId(customerId);
                    this.authStorageService.setEmulatedUserToken(userToken);
                    this.store.dispatch(new AuthActions.Login());
                }
                else {
                    // When we can't get the customerId just end all current sessions
                    this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);
                    this.authStorageService.clearEmulatedUserToken();
                }
            }
            catch (_a) {
                this.authStorageService.switchTokenTargetToUser();
            }
        });
    }
    /**
     * Starts an ASM customer emulation session.
     * A customer emulation session is stopped by calling logout().
     * @param customerId
     */
    startCustomerEmulationSession(customerId) {
        this.authStorageService.clearEmulatedUserToken();
        // OCC specific user id handling. Customize when implementing different backend
        this.store.dispatch(new AuthActions.Logout());
        this.userIdService.setUserId(customerId);
        this.store.dispatch(new AuthActions.Login());
    }
    /**
     * Check if CS agent is currently logged in.
     *
     * @returns observable emitting true when CS agent is logged in or false when not.
     */
    isCustomerSupportAgentLoggedIn() {
        return combineLatest([
            this.authStorageService.getToken(),
            this.authStorageService.getTokenTarget(),
        ]).pipe(map(([token, tokenTarget]) => Boolean((token === null || token === void 0 ? void 0 : token.access_token) && tokenTarget === TokenTarget.CSAgent)));
    }
    /**
     * Utility function to determine if customer is emulated.
     *
     * @returns observable emitting true when there is active emulation session or false when not.
     */
    isCustomerEmulated() {
        return this.userIdService.isEmulated();
    }
    /**
     * Returns the customer support agent's token loading status
     */
    getCustomerSupportAgentTokenLoading() {
        // TODO(#8248): Create new loading state outside of store
        return of(false);
    }
    /**
     * Logout a customer support agent.
     */
    logoutCustomerSupportAgent() {
        return __awaiter(this, void 0, void 0, function* () {
            const emulatedToken = this.authStorageService.getEmulatedUserToken();
            let isCustomerEmulated;
            this.userIdService
                .isEmulated()
                .subscribe((emulated) => (isCustomerEmulated = emulated))
                .unsubscribe();
            yield this.oAuthLibWrapperService.revokeAndLogout();
            this.store.dispatch({ type: '[Auth] Logout Customer Support Agent' });
            this.authStorageService.setTokenTarget(TokenTarget.User);
            if (isCustomerEmulated && emulatedToken) {
                this.store.dispatch(new AuthActions.Logout());
                this.authStorageService.setToken(emulatedToken);
                this.userIdService.setUserId(OCC_USER_ID_CURRENT);
                this.authStorageService.clearEmulatedUserToken();
                this.store.dispatch(new AuthActions.Login());
            }
            else {
                this.authService.logout();
            }
        });
    }
}
CsAgentAuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CsAgentAuthService, deps: [{ token: i1.AuthService }, { token: i2.AsmAuthStorageService }, { token: i1.UserIdService }, { token: i1.OAuthLibWrapperService }, { token: i3.Store }, { token: i1.UserService }], target: i0.ɵɵFactoryTarget.Injectable });
CsAgentAuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CsAgentAuthService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CsAgentAuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.AuthService }, { type: i2.AsmAuthStorageService }, { type: i1.UserIdService }, { type: i1.OAuthLibWrapperService }, { type: i3.Store }, { type: i1.UserService }]; } });
//# sourceMappingURL=data:application/json;base64,