import { Injectable } from '@angular/core';
import { AuthStorageService } from '@spartacus/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Indicates if auth token is for regular user or CS Agent.
 */
export var TokenTarget;
(function (TokenTarget) {
    TokenTarget["CSAgent"] = "CSAgent";
    TokenTarget["User"] = "User";
})(TokenTarget || (TokenTarget = {}));
/**
 * With AsmAuthStorageService apart from storing the token we also need to store
 * information for which user is the token (regular user or CS Agent).
 *
 * Overrides `AuthStorageService`.
 */
export class AsmAuthStorageService extends AuthStorageService {
    constructor() {
        super(...arguments);
        this._tokenTarget$ = new BehaviorSubject(TokenTarget.User);
    }
    /**
     * Get target user for current auth token.
     *
     * @return observable with TokenTarget
     */
    getTokenTarget() {
        return this._tokenTarget$;
    }
    /**
     * Set new token target.
     *
     * @param tokenTarget
     */
    setTokenTarget(tokenTarget) {
        this._tokenTarget$.next(tokenTarget);
    }
    /**
     * Get token for previously user session, when it was interrupted by CS agent login.
     *
     * @return previously logged in user token.
     */
    getEmulatedUserToken() {
        return this.emulatedUserToken;
    }
    /**
     * Save user token on CS agent login.
     *
     * @param token
     */
    setEmulatedUserToken(token) {
        this.emulatedUserToken = token;
    }
    /**
     * Change token target to CS Agent.
     */
    switchTokenTargetToCSAgent() {
        this._tokenTarget$.next(TokenTarget.CSAgent);
    }
    /**
     * Change token target to user.
     */
    switchTokenTargetToUser() {
        this._tokenTarget$.next(TokenTarget.User);
    }
    /**
     * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.
     * Only available solution is to drop session we could restore, to avoid account hijack.
     */
    clearEmulatedUserToken() {
        this.emulatedUserToken = undefined;
    }
}
AsmAuthStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AsmAuthStorageService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
AsmAuthStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AsmAuthStorageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AsmAuthStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNtLWF1dGgtc3RvcmFnZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2FzbS9yb290L3NlcnZpY2VzL2FzbS1hdXRoLXN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxrQkFBa0IsRUFBYSxNQUFNLGlCQUFpQixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7O0FBRW5EOztHQUVHO0FBQ0gsTUFBTSxDQUFOLElBQVksV0FHWDtBQUhELFdBQVksV0FBVztJQUNyQixrQ0FBbUIsQ0FBQTtJQUNuQiw0QkFBYSxDQUFBO0FBQ2YsQ0FBQyxFQUhXLFdBQVcsS0FBWCxXQUFXLFFBR3RCO0FBRUQ7Ozs7O0dBS0c7QUFJSCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsa0JBQWtCO0lBSDdEOztRQUlZLGtCQUFhLEdBQ3JCLElBQUksZUFBZSxDQUFjLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQXNFdEQ7SUEzREM7Ozs7T0FJRztJQUNILGNBQWM7UUFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDNUIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsV0FBd0I7UUFDcEMsSUFBSSxDQUFDLGFBQThDLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0JBQW9CO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsb0JBQW9CLENBQUMsS0FBZ0I7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCwwQkFBMEI7UUFDdkIsSUFBSSxDQUFDLGFBQThDLENBQUMsSUFBSSxDQUN2RCxXQUFXLENBQUMsT0FBTyxDQUNwQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0gsdUJBQXVCO1FBQ3BCLElBQUksQ0FBQyxhQUE4QyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVEOzs7T0FHRztJQUNILHNCQUFzQjtRQUNwQixJQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO0lBQ3JDLENBQUM7O2tIQXZFVSxxQkFBcUI7c0hBQXJCLHFCQUFxQixjQUZwQixNQUFNOzJGQUVQLHFCQUFxQjtrQkFIakMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBdXRoU3RvcmFnZVNlcnZpY2UsIEF1dGhUb2tlbiB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBJbmRpY2F0ZXMgaWYgYXV0aCB0b2tlbiBpcyBmb3IgcmVndWxhciB1c2VyIG9yIENTIEFnZW50LlxuICovXG5leHBvcnQgZW51bSBUb2tlblRhcmdldCB7XG4gIENTQWdlbnQgPSAnQ1NBZ2VudCcsXG4gIFVzZXIgPSAnVXNlcicsXG59XG5cbi8qKlxuICogV2l0aCBBc21BdXRoU3RvcmFnZVNlcnZpY2UgYXBhcnQgZnJvbSBzdG9yaW5nIHRoZSB0b2tlbiB3ZSBhbHNvIG5lZWQgdG8gc3RvcmVcbiAqIGluZm9ybWF0aW9uIGZvciB3aGljaCB1c2VyIGlzIHRoZSB0b2tlbiAocmVndWxhciB1c2VyIG9yIENTIEFnZW50KS5cbiAqXG4gKiBPdmVycmlkZXMgYEF1dGhTdG9yYWdlU2VydmljZWAuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBc21BdXRoU3RvcmFnZVNlcnZpY2UgZXh0ZW5kcyBBdXRoU3RvcmFnZVNlcnZpY2Uge1xuICBwcm90ZWN0ZWQgX3Rva2VuVGFyZ2V0JDogT2JzZXJ2YWJsZTxUb2tlblRhcmdldD4gPVxuICAgIG5ldyBCZWhhdmlvclN1YmplY3Q8VG9rZW5UYXJnZXQ+KFRva2VuVGFyZ2V0LlVzZXIpO1xuXG4gIC8qKlxuICAgKiBXaGVuIENTIEFnZW50IGxvZ3MgaW4gZHVyaW5nIHJlZ3VsYXIgdXNlciBzZXNzaW9uIHdlIHN0b3JlIHRoZSByZWd1bGFyXG4gICAqIHVzZXIgdG9rZW4gdG8gcmVzdG9yZSB0aGUgc2Vzc2lvbiBhZnRlciBDUyBBZ2VudCBsb2dvdXQuXG4gICAqXG4gICAqIFRoaXMgc3VwcG9ydHMgaW4tc3RvcmUgdXNlIGNhc2Ugd2hlbiBDUyBBZ2VudCB3YW50J3MgdG8gcXVpY2tseSBoZWxwXG4gICAqIGN1c3RvbWVyIGFuZCB0aGVuIGdpdmUgYW4gb3B0aW9uIHRvIGN1c3RvbWVyIHRvIGNvbnRpbnVlIHRoZSBwcm9jZXNzLlxuICAgKi9cbiAgcHJvdGVjdGVkIGVtdWxhdGVkVXNlclRva2VuPzogQXV0aFRva2VuO1xuXG4gIC8qKlxuICAgKiBHZXQgdGFyZ2V0IHVzZXIgZm9yIGN1cnJlbnQgYXV0aCB0b2tlbi5cbiAgICpcbiAgICogQHJldHVybiBvYnNlcnZhYmxlIHdpdGggVG9rZW5UYXJnZXRcbiAgICovXG4gIGdldFRva2VuVGFyZ2V0KCk6IE9ic2VydmFibGU8VG9rZW5UYXJnZXQ+IHtcbiAgICByZXR1cm4gdGhpcy5fdG9rZW5UYXJnZXQkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBuZXcgdG9rZW4gdGFyZ2V0LlxuICAgKlxuICAgKiBAcGFyYW0gdG9rZW5UYXJnZXRcbiAgICovXG4gIHNldFRva2VuVGFyZ2V0KHRva2VuVGFyZ2V0OiBUb2tlblRhcmdldCk6IHZvaWQge1xuICAgICh0aGlzLl90b2tlblRhcmdldCQgYXMgQmVoYXZpb3JTdWJqZWN0PFRva2VuVGFyZ2V0PikubmV4dCh0b2tlblRhcmdldCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRva2VuIGZvciBwcmV2aW91c2x5IHVzZXIgc2Vzc2lvbiwgd2hlbiBpdCB3YXMgaW50ZXJydXB0ZWQgYnkgQ1MgYWdlbnQgbG9naW4uXG4gICAqXG4gICAqIEByZXR1cm4gcHJldmlvdXNseSBsb2dnZWQgaW4gdXNlciB0b2tlbi5cbiAgICovXG4gIGdldEVtdWxhdGVkVXNlclRva2VuKCk6IEF1dGhUb2tlbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZW11bGF0ZWRVc2VyVG9rZW47XG4gIH1cblxuICAvKipcbiAgICogU2F2ZSB1c2VyIHRva2VuIG9uIENTIGFnZW50IGxvZ2luLlxuICAgKlxuICAgKiBAcGFyYW0gdG9rZW5cbiAgICovXG4gIHNldEVtdWxhdGVkVXNlclRva2VuKHRva2VuOiBBdXRoVG9rZW4pOiB2b2lkIHtcbiAgICB0aGlzLmVtdWxhdGVkVXNlclRva2VuID0gdG9rZW47XG4gIH1cblxuICAvKipcbiAgICogQ2hhbmdlIHRva2VuIHRhcmdldCB0byBDUyBBZ2VudC5cbiAgICovXG4gIHN3aXRjaFRva2VuVGFyZ2V0VG9DU0FnZW50KCk6IHZvaWQge1xuICAgICh0aGlzLl90b2tlblRhcmdldCQgYXMgQmVoYXZpb3JTdWJqZWN0PFRva2VuVGFyZ2V0PikubmV4dChcbiAgICAgIFRva2VuVGFyZ2V0LkNTQWdlbnRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIENoYW5nZSB0b2tlbiB0YXJnZXQgdG8gdXNlci5cbiAgICovXG4gIHN3aXRjaFRva2VuVGFyZ2V0VG9Vc2VyKCk6IHZvaWQge1xuICAgICh0aGlzLl90b2tlblRhcmdldCQgYXMgQmVoYXZpb3JTdWJqZWN0PFRva2VuVGFyZ2V0PikubmV4dChUb2tlblRhcmdldC5Vc2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIHdlIHN0YXJ0IGVtdWxhdGlvbiBmcm9tIHRoZSBVSSAobm90IGJ5IEFTTSBsb2dpbikgd2UgY2FuJ3QgcmVzdG9yZSB1c2VyIHNlc3Npb24gb24gY3MgYWdlbnQgbG9nb3V0LlxuICAgKiBPbmx5IGF2YWlsYWJsZSBzb2x1dGlvbiBpcyB0byBkcm9wIHNlc3Npb24gd2UgY291bGQgcmVzdG9yZSwgdG8gYXZvaWQgYWNjb3VudCBoaWphY2suXG4gICAqL1xuICBjbGVhckVtdWxhdGVkVXNlclRva2VuKCk6IHZvaWQge1xuICAgIHRoaXMuZW11bGF0ZWRVc2VyVG9rZW4gPSB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==