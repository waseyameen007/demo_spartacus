import { Component, EventEmitter, Input, Output } from '@angular/core';
import { Validators } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/core";
export class CSAgentLoginFormComponent {
    constructor(fb) {
        this.fb = fb;
        this.csAgentTokenLoading = false;
        this.submitEvent = new EventEmitter();
    }
    ngOnInit() {
        this.csAgentLoginForm = this.fb.group({
            userId: ['', [Validators.required]],
            password: ['', [Validators.required]],
        });
    }
    onSubmit() {
        var _a, _b;
        if (this.csAgentLoginForm.valid) {
            this.submitEvent.emit({
                userId: (_a = this.csAgentLoginForm.get('userId')) === null || _a === void 0 ? void 0 : _a.value,
                password: (_b = this.csAgentLoginForm.get('password')) === null || _b === void 0 ? void 0 : _b.value,
            });
        }
        else {
            this.csAgentLoginForm.markAllAsTouched();
        }
    }
}
CSAgentLoginFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CSAgentLoginFormComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
CSAgentLoginFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CSAgentLoginFormComponent, selector: "cx-csagent-login-form", inputs: { csAgentTokenLoading: "csAgentTokenLoading" }, outputs: { submitEvent: "submitEvent" }, ngImport: i0, template: "<form\n  (ngSubmit)=\"onSubmit()\"\n  [formGroup]=\"csAgentLoginForm\"\n  *ngIf=\"!csAgentTokenLoading\"\n>\n  <label>\n    <input\n      aria-required=\"true\"\n      type=\"text\"\n      formControlName=\"userId\"\n      placeholder=\"{{ 'asm.loginForm.userId.label' | cxTranslate }}\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"csAgentLoginForm.get('userId')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <input\n      aria-required=\"true\"\n      type=\"password\"\n      placeholder=\"{{ 'asm.loginForm.password.label' | cxTranslate }}\"\n      formControlName=\"password\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"csAgentLoginForm.get('password')\"\n    ></cx-form-errors>\n  </label>\n  <button type=\"submit\">\n    {{ 'asm.loginForm.submit' | cxTranslate }}\n  </button>\n</form>\n\n<div\n  *ngIf=\"csAgentTokenLoading\"\n  class=\"spinner\"\n  aria-hidden=\"false\"\n  [attr.aria-label]=\"'common.loading' | cxTranslate\"\n>\n  <div></div>\n  <div></div>\n  <div></div>\n</div>\n", components: [{ type: i2.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "cxTranslate": i4.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CSAgentLoginFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-csagent-login-form',
                    templateUrl: './csagent-login-form.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { csAgentTokenLoading: [{
                type: Input
            }], submitEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3NhZ2VudC1sb2dpbi1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9hc20vY29tcG9uZW50cy9jc2FnZW50LWxvZ2luLWZvcm0vY3NhZ2VudC1sb2dpbi1mb3JtLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9hc20vY29tcG9uZW50cy9jc2FnZW50LWxvZ2luLWZvcm0vY3NhZ2VudC1sb2dpbi1mb3JtLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUEwQixVQUFVLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBTXBFLE1BQU0sT0FBTyx5QkFBeUI7SUFTcEMsWUFBc0IsRUFBZTtRQUFmLE9BQUUsR0FBRixFQUFFLENBQWE7UUFMckMsd0JBQW1CLEdBQUcsS0FBSyxDQUFDO1FBRzVCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQXdDLENBQUM7SUFFL0IsQ0FBQztJQUV6QyxRQUFRO1FBQ04sSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDO1lBQ3BDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNuQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELFFBQVE7O1FBQ04sSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxFQUFFO1lBQy9CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDO2dCQUNwQixNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQywwQ0FBRSxLQUFLO2dCQUNsRCxRQUFRLEVBQUUsTUFBQSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQywwQ0FBRSxLQUFLO2FBQ3ZELENBQUMsQ0FBQztTQUNKO2FBQU07WUFDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztTQUMxQztJQUNILENBQUM7O3NIQTNCVSx5QkFBeUI7MEdBQXpCLHlCQUF5Qiw4SkNQdEMsNG1DQStDQTsyRkR4Q2EseUJBQXlCO2tCQUpyQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFdBQVcsRUFBRSxxQ0FBcUM7aUJBQ25EO2tHQUtDLG1CQUFtQjtzQkFEbEIsS0FBSztnQkFJTixXQUFXO3NCQURWLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQnVpbGRlciwgRm9ybUdyb3VwLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1jc2FnZW50LWxvZ2luLWZvcm0nLFxuICB0ZW1wbGF0ZVVybDogJy4vY3NhZ2VudC1sb2dpbi1mb3JtLmNvbXBvbmVudC5odG1sJyxcbn0pXG5leHBvcnQgY2xhc3MgQ1NBZ2VudExvZ2luRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIGNzQWdlbnRMb2dpbkZvcm06IEZvcm1Hcm91cDtcblxuICBASW5wdXQoKVxuICBjc0FnZW50VG9rZW5Mb2FkaW5nID0gZmFsc2U7XG5cbiAgQE91dHB1dCgpXG4gIHN1Ym1pdEV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjx7IHVzZXJJZDogc3RyaW5nOyBwYXNzd29yZDogc3RyaW5nIH0+KCk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZiOiBGb3JtQnVpbGRlcikge31cblxuICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICB0aGlzLmNzQWdlbnRMb2dpbkZvcm0gPSB0aGlzLmZiLmdyb3VwKHtcbiAgICAgIHVzZXJJZDogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF1dLFxuICAgICAgcGFzc3dvcmQ6IFsnJywgW1ZhbGlkYXRvcnMucmVxdWlyZWRdXSxcbiAgICB9KTtcbiAgfVxuXG4gIG9uU3VibWl0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmNzQWdlbnRMb2dpbkZvcm0udmFsaWQpIHtcbiAgICAgIHRoaXMuc3VibWl0RXZlbnQuZW1pdCh7XG4gICAgICAgIHVzZXJJZDogdGhpcy5jc0FnZW50TG9naW5Gb3JtLmdldCgndXNlcklkJyk/LnZhbHVlLFxuICAgICAgICBwYXNzd29yZDogdGhpcy5jc0FnZW50TG9naW5Gb3JtLmdldCgncGFzc3dvcmQnKT8udmFsdWUsXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5jc0FnZW50TG9naW5Gb3JtLm1hcmtBbGxBc1RvdWNoZWQoKTtcbiAgICB9XG4gIH1cbn1cbiIsIjxmb3JtXG4gIChuZ1N1Ym1pdCk9XCJvblN1Ym1pdCgpXCJcbiAgW2Zvcm1Hcm91cF09XCJjc0FnZW50TG9naW5Gb3JtXCJcbiAgKm5nSWY9XCIhY3NBZ2VudFRva2VuTG9hZGluZ1wiXG4+XG4gIDxsYWJlbD5cbiAgICA8aW5wdXRcbiAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgIGZvcm1Db250cm9sTmFtZT1cInVzZXJJZFwiXG4gICAgICBwbGFjZWhvbGRlcj1cInt7ICdhc20ubG9naW5Gb3JtLnVzZXJJZC5sYWJlbCcgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgLz5cbiAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiXG4gICAgICBhcmlhLWF0b21pYz1cInRydWVcIlxuICAgICAgW2NvbnRyb2xdPVwiY3NBZ2VudExvZ2luRm9ybS5nZXQoJ3VzZXJJZCcpXCJcbiAgICA+PC9jeC1mb3JtLWVycm9ycz5cbiAgPC9sYWJlbD5cblxuICA8bGFiZWw+XG4gICAgPGlucHV0XG4gICAgICBhcmlhLXJlcXVpcmVkPVwidHJ1ZVwiXG4gICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAnYXNtLmxvZ2luRm9ybS5wYXNzd29yZC5sYWJlbCcgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICBmb3JtQ29udHJvbE5hbWU9XCJwYXNzd29yZFwiXG4gICAgLz5cbiAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiXG4gICAgICBhcmlhLWF0b21pYz1cInRydWVcIlxuICAgICAgW2NvbnRyb2xdPVwiY3NBZ2VudExvZ2luRm9ybS5nZXQoJ3Bhc3N3b3JkJylcIlxuICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICA8L2xhYmVsPlxuICA8YnV0dG9uIHR5cGU9XCJzdWJtaXRcIj5cbiAgICB7eyAnYXNtLmxvZ2luRm9ybS5zdWJtaXQnIHwgY3hUcmFuc2xhdGUgfX1cbiAgPC9idXR0b24+XG48L2Zvcm0+XG5cbjxkaXZcbiAgKm5nSWY9XCJjc0FnZW50VG9rZW5Mb2FkaW5nXCJcbiAgY2xhc3M9XCJzcGlubmVyXCJcbiAgYXJpYS1oaWRkZW49XCJmYWxzZVwiXG4gIFthdHRyLmFyaWEtbGFiZWxdPVwiJ2NvbW1vbi5sb2FkaW5nJyB8IGN4VHJhbnNsYXRlXCJcbj5cbiAgPGRpdj48L2Rpdj5cbiAgPGRpdj48L2Rpdj5cbiAgPGRpdj48L2Rpdj5cbjwvZGl2PlxuIl19