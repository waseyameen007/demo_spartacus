{"version":3,"file":"spartacus-asm-core.js","sources":["../../../feature-libs/asm/core/config/default-asm-config.ts","../../../feature-libs/asm/core/connectors/asm.adapter.ts","../../../feature-libs/asm/core/connectors/asm.connector.ts","../../../feature-libs/asm/core/store/actions/asm-ui.action.ts","../../../feature-libs/asm/core/store/asm-state.ts","../../../feature-libs/asm/core/store/actions/customer.action.ts","../../../feature-libs/asm/core/store/actions/logout-agent.action.ts","../../../feature-libs/asm/core/store/effects/customer.effect.ts","../../../feature-libs/asm/core/store/effects/index.ts","../../../feature-libs/asm/core/store/reducers/asm-ui.reducer.ts","../../../feature-libs/asm/core/store/reducers/index.ts","../../../feature-libs/asm/core/store/selectors/feature.selector.ts","../../../feature-libs/asm/core/store/selectors/asm-ui.selectors.ts","../../../feature-libs/asm/core/store/selectors/customer-search.selectors.ts","../../../feature-libs/asm/core/services/asm-state-persistence.service.ts","../../../feature-libs/asm/core/store/asm-store.module.ts","../../../feature-libs/asm/core/asm-core.module.ts","../../../feature-libs/asm/core/config/asm-config.ts","../../../feature-libs/asm/core/connectors/converters.ts","../../../feature-libs/asm/core/facade/asm.service.ts","../../../feature-libs/asm/core/spartacus-asm-core.ts"],"sourcesContent":["import { AsmConfig } from './asm-config';\n\nexport const defaultAsmConfig: AsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600,\n    },\n    customerSearch: {\n      maxResults: 20,\n    },\n  },\n};\n","import { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\n\nexport abstract class AsmAdapter {\n  /**\n   * Abstract function used to search for customers.\n   */\n  abstract customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmAdapter } from './asm.adapter';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmConnector {\n  constructor(protected asmAdapter: AsmAdapter) {}\n\n  customerSearch(\n    options: CustomerSearchOptions\n  ): Observable<CustomerSearchPage> {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\n\nexport const ASM_UI_UPDATE = '[Asm] UI Update';\n\nexport class AsmUiUpdate implements Action {\n  readonly type = ASM_UI_UPDATE;\n  constructor(public payload: AsmUi) {}\n}\n// action types\nexport type AsmUiAction = AsmUiUpdate;\n","import { StateUtils } from '@spartacus/core';\nimport { AsmUi, CustomerSearchPage } from '../models/asm.models';\n\nexport const ASM_FEATURE = 'asm';\nexport const CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\n\nexport interface StateWithAsm {\n  [ASM_FEATURE]: AsmState;\n}\n\nexport interface AsmState {\n  customerSearchResult: StateUtils.LoaderState<CustomerSearchPage>;\n  asmUi: AsmUi;\n}\n","import { StateUtils } from '@spartacus/core';\nimport {\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../../models/asm.models';\nimport { CUSTOMER_SEARCH_DATA } from '../asm-state';\n\nexport const CUSTOMER_SEARCH = '[Asm] Customer Search';\nexport const CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nexport const CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nexport const CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\n\nexport class CustomerSearch extends StateUtils.LoaderLoadAction {\n  readonly type = CUSTOMER_SEARCH;\n  constructor(public payload: CustomerSearchOptions) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchFail extends StateUtils.LoaderFailAction {\n  readonly type = CUSTOMER_SEARCH_FAIL;\n  constructor(public payload: any) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = CUSTOMER_SEARCH_SUCCESS;\n  constructor(public payload: CustomerSearchPage) {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\nexport class CustomerSearchReset extends StateUtils.LoaderResetAction {\n  readonly type = CUSTOMER_SEARCH_RESET;\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n  }\n}\n\n// action types\nexport type CustomerAction =\n  | CustomerSearch\n  | CustomerSearchFail\n  | CustomerSearchSuccess\n  | CustomerSearchReset;\n","import { Action } from '@ngrx/store';\n\nexport const LOGOUT_CUSTOMER_SUPPORT_AGENT =\n  '[Auth] Logout Customer Support Agent';\n\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\nexport class LogoutCustomerSupportAgent implements Action {\n  readonly type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { normalizeHttpError } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { AsmConnector } from '../../connectors/asm.connector';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\n@Injectable()\nexport class CustomerEffects {\n  @Effect()\n  customerSearch$: Observable<AsmActions.CustomerAction> = this.actions$.pipe(\n    ofType(AsmActions.CUSTOMER_SEARCH),\n    map((action: AsmActions.CustomerSearch) => action.payload),\n    switchMap((options) =>\n      this.asmConnector.customerSearch(options).pipe(\n        map((customerSearchResults: CustomerSearchPage) => {\n          return new AsmActions.CustomerSearchSuccess(customerSearchResults);\n        }),\n        catchError((error) =>\n          of(new AsmActions.CustomerSearchFail(normalizeHttpError(error)))\n        )\n      )\n    )\n  );\n\n  constructor(private actions$: Actions, private asmConnector: AsmConnector) {}\n}\n","import { CustomerEffects } from './customer.effect';\n\nexport const effects: any[] = [CustomerEffects];\n\nexport * from './customer.effect';\n","import { Action } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmActions } from '../actions/index';\n\nexport const initialState: AsmUi = <AsmUi>{ collapsed: false };\n\nexport function reducer(state: AsmUi = initialState, action: Action): AsmUi {\n  switch (action.type) {\n    case AsmActions.ASM_UI_UPDATE: {\n      return {\n        ...state,\n        ...(action as AsmActions.AsmUiUpdate).payload,\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmActions } from '../actions';\nimport { AsmState, CUSTOMER_SEARCH_DATA } from '../asm-state';\nimport * as fromAsmUiReducer from './asm-ui.reducer';\n\nexport function getReducers(): ActionReducerMap<AsmState> {\n  return {\n    customerSearchResult:\n      StateUtils.loaderReducer<CustomerSearchPage>(CUSTOMER_SEARCH_DATA),\n    asmUi: fromAsmUiReducer.reducer,\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<AsmState>> =\n  new InjectionToken<ActionReducerMap<AsmState>>('AsmReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearCustomerSupportAgentAsmState(\n  reducer: ActionReducer<AsmState, Action>\n): ActionReducer<AsmState, Action> {\n  return function (state: AsmState | undefined, action: Action) {\n    if (action.type === AsmActions.LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = {\n        ...(state as AsmState),\n        customerSearchResult: {} as StateUtils.LoaderState<CustomerSearchPage>,\n      };\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [\n  clearCustomerSupportAgentAsmState,\n];\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmState, ASM_FEATURE, StateWithAsm } from '../asm-state';\n\nexport const getAsmState: MemoizedSelector<StateWithAsm, AsmState> =\n  createFeatureSelector<AsmState>(ASM_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { AsmUi } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getAsmUi: MemoizedSelector<StateWithAsm, AsmUi> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.asmUi\n);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport { StateUtils } from '@spartacus/core';\nimport { CustomerSearchPage } from '../../models/asm.models';\nimport { AsmState, StateWithAsm } from '../asm-state';\nimport { getAsmState } from './feature.selector';\n\nexport const getCustomerSearchResultsLoaderState: MemoizedSelector<\n  StateWithAsm,\n  StateUtils.LoaderState<CustomerSearchPage>\n> = createSelector(\n  getAsmState,\n  (state: AsmState) => state.customerSearchResult\n);\n\nexport const getCustomerSearchResults: MemoizedSelector<\n  StateWithAsm,\n  CustomerSearchPage\n> = createSelector(\n  getCustomerSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderValueSelector(state)\n);\n\nexport const getCustomerSearchResultsLoading: MemoizedSelector<\n  StateWithAsm,\n  boolean\n> = createSelector(\n  getCustomerSearchResultsLoaderState,\n  (state: StateUtils.LoaderState<CustomerSearchPage>) =>\n    StateUtils.loaderLoadingSelector(state)\n);\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { AsmAuthStorageService, TokenTarget } from '@spartacus/asm/root';\nimport { AuthToken, StatePersistenceService } from '@spartacus/core';\nimport { combineLatest, Observable, of, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { AsmUi } from '../models/asm.models';\nimport { AsmActions, AsmSelectors, StateWithAsm } from '../store';\n\n/**\n * ASM state synced to browser storage.\n */\nexport interface SyncedAsmState {\n  ui?: AsmUi;\n  emulatedUserToken?: AuthToken;\n  tokenTarget?: TokenTarget;\n}\n\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected statePersistenceService: StatePersistenceService,\n    protected store: Store<StateWithAsm>,\n    protected authStorageService: AsmAuthStorageService\n  ) {}\n\n  /**\n   * Identifier used for storage key.\n   */\n  protected key = 'asm';\n\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  public initSync() {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: this.key,\n        state$: this.getAsmState(),\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n  protected getAsmState(): Observable<SyncedAsmState> {\n    return combineLatest([\n      this.store.pipe(\n        // Since getAsmState() may be called while the module is lazy loded\n        // The asm state slice may not exist yet in the first store emissions.\n        filter((store) => !!store.asm),\n        select(AsmSelectors.getAsmUi)\n      ),\n      of(this.authStorageService.getEmulatedUserToken()),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(([ui, emulatedUserToken, tokenTarget]) => {\n        let emulatedToken = emulatedUserToken;\n        if (emulatedToken) {\n          emulatedToken = { ...emulatedUserToken } as AuthToken;\n          // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n          delete emulatedToken.refresh_token;\n        }\n        return {\n          ui,\n          emulatedUserToken: emulatedToken,\n          tokenTarget,\n        };\n      })\n    );\n  }\n\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n  protected onRead(state: SyncedAsmState | undefined) {\n    if (state) {\n      if (state.ui) {\n        this.store.dispatch(new AsmActions.AsmUiUpdate(state.ui));\n      }\n      if (state.emulatedUserToken) {\n        this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n      }\n      if (state.tokenTarget) {\n        this.authStorageService.setTokenTarget(state.tokenTarget);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { StoreModule } from '@ngrx/store';\nimport { StateModule } from '@spartacus/core';\nimport { ASM_FEATURE } from './asm-state';\nimport { effects } from './effects/index';\nimport { metaReducers, reducerProvider, reducerToken } from './reducers/index';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StateModule,\n    StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class AsmStoreModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MODULE_INITIALIZER, provideDefaultConfig } from '@spartacus/core';\nimport { defaultAsmConfig } from './config/default-asm-config';\nimport { AsmConnector } from './connectors/asm.connector';\nimport { AsmStatePersistenceService } from './services/asm-state-persistence.service';\nimport { AsmStoreModule } from './store/asm-store.module';\n\nexport function asmStatePersistenceFactory(\n  asmStatePersistenceService: AsmStatePersistenceService\n): () => void {\n  const result = () => asmStatePersistenceService.initSync();\n  return result;\n}\n\n@NgModule({\n  imports: [CommonModule, AsmStoreModule],\n  providers: [\n    provideDefaultConfig(defaultAsmConfig),\n    AsmConnector,\n    {\n      provide: MODULE_INITIALIZER,\n      useFactory: asmStatePersistenceFactory,\n      deps: [AsmStatePersistenceService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmCoreModule {}\n","import { Injectable } from '@angular/core';\nimport { Config, OccConfig } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class AsmConfig extends OccConfig {\n  asm?: {\n    agentSessionTimer?: {\n      startingDelayInSeconds?: number;\n    };\n    customerSearch?: {\n      maxResults?: number;\n    };\n  };\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends AsmConfig {}\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { CustomerSearchPage } from '../models/asm.models';\n\nexport const CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, CustomerSearchPage>\n>('CustomerSearchPageNormalizer');\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport {\n  AsmUi,\n  CustomerSearchOptions,\n  CustomerSearchPage,\n} from '../models/asm.models';\nimport { AsmActions } from '../store/actions/index';\nimport { StateWithAsm } from '../store/asm-state';\nimport { AsmSelectors } from '../store/index';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmService {\n  constructor(protected store: Store<StateWithAsm>) {}\n\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options: CustomerSearchOptions): void {\n    this.store.dispatch(new AsmActions.CustomerSearch(options));\n  }\n\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset(): void {\n    this.store.dispatch(new AsmActions.CustomerSearchReset());\n  }\n\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults(): Observable<CustomerSearchPage> {\n    return this.store.pipe(select(AsmSelectors.getCustomerSearchResults));\n  }\n\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(AsmSelectors.getCustomerSearchResultsLoading)\n    );\n  }\n\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi: AsmUi): void {\n    this.store.dispatch(new AsmActions.AsmUiUpdate(asmUi));\n  }\n\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState(): Observable<AsmUi> {\n    return this.store.pipe(select(AsmSelectors.getAsmUi));\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["AsmActions.CUSTOMER_SEARCH","AsmActions.CustomerSearchSuccess","AsmActions.CustomerSearchFail","AsmActions.ASM_UI_UPDATE","fromAsmUiReducer.reducer","AsmActions.LOGOUT_CUSTOMER_SUPPORT_AGENT","AsmSelectors.getAsmUi","AsmActions.AsmUiUpdate","AsmActions.CustomerSearch","AsmActions.CustomerSearchReset","AsmSelectors.getCustomerSearchResults","AsmSelectors.getCustomerSearchResultsLoading"],"mappings":"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"}