{"version":3,"file":"spartacus-asm-root.js","sources":["../../../feature-libs/asm/root/asm-constants.ts","../../../feature-libs/asm/root/services/asm-enabler.service.ts","../../../feature-libs/asm/root/asm-loader.module.ts","../../../feature-libs/asm/root/services/asm-auth-storage.service.ts","../../../feature-libs/asm/root/services/csagent-auth.service.ts","../../../feature-libs/asm/root/services/asm-auth-http-header.service.ts","../../../feature-libs/asm/root/services/asm-auth.service.ts","../../../feature-libs/asm/root/asm-root.module.ts","../../../feature-libs/asm/root/feature-name.ts","../../../feature-libs/asm/root/spartacus-asm-root.ts"],"sourcesContent":["export const ASM_ENABLED_LOCAL_STORAGE_KEY = 'asm_enabled';\n","import { Location } from '@angular/common';\nimport { Injectable } from '@angular/core';\nimport { FeatureModulesService, WindowRef } from '@spartacus/core';\nimport { LaunchDialogService, LAUNCH_CALLER } from '@spartacus/storefront';\nimport { ASM_ENABLED_LOCAL_STORAGE_KEY } from '../asm-constants';\n\n/**\n * The AsmEnablerService is used to enable ASM for those scenario's\n * where it's actually used. This service is added to avoid any polution\n * of the UI and runtime performance for the ordinary production user.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmEnablerService {\n  constructor(\n    protected location: Location,\n    protected winRef: WindowRef,\n    protected launchDialogService: LaunchDialogService,\n    protected featureModules: FeatureModulesService\n  ) {}\n\n  /**\n   * Loads the ASM UI if needed. The ASM UI will be added based on the\n   * existence of a URL parameter or previous usage given by local storage.\n   */\n  load(): void {\n    if (this.isEnabled()) {\n      this.addUi();\n    }\n  }\n\n  /**\n   * Indicates whether the ASM module is enabled.\n   */\n  isEnabled(): boolean {\n    if (this.isLaunched() && !this.isUsedBefore()) {\n      if (this.winRef.localStorage) {\n        this.winRef.localStorage.setItem(ASM_ENABLED_LOCAL_STORAGE_KEY, 'true');\n      }\n    }\n    return this.isLaunched() || this.isUsedBefore();\n  }\n\n  /**\n   * Indicates whether ASM is launched through the URL,\n   * using the asm flag in the URL.\n   */\n  protected isLaunched(): boolean {\n    const params = this.location.path().split('?')[1];\n    return !!params && params.split('&').includes('asm=true');\n  }\n\n  /**\n   * Evaluates local storage where we persist the usage of ASM.\n   */\n  protected isUsedBefore(): boolean {\n    if (this.winRef.localStorage) {\n      return (\n        this.winRef.localStorage.getItem(ASM_ENABLED_LOCAL_STORAGE_KEY) ===\n        'true'\n      );\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Adds the ASM UI by using the `cx-storefront` outlet.\n   */\n  protected addUi(): void {\n    this.featureModules\n      .resolveFeature('asm')\n      .subscribe(() => this.launchDialogService.launch(LAUNCH_CALLER.ASM));\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport { PageComponentModule } from '@spartacus/storefront';\nimport { AsmEnablerService } from './services/asm-enabler.service';\n\n/**\n * The ASM loader module takes care of loading the ASM UI\n * only in case there's a reason to do so.\n */\n@NgModule({\n  imports: [CommonModule, PageComponentModule],\n  providers: [\n    {\n      provide: APP_INITIALIZER,\n      useFactory: asmFactory,\n      deps: [AsmEnablerService],\n      multi: true,\n    },\n  ],\n})\nexport class AsmLoaderModule {}\n\n/**\n *\n * We do not like to block the UI, which is why we delgate loading of ASM\n * to a real component; the router and state aren't available in an optimized\n * way during the APP_INITIALIZER.\n */\nexport function asmFactory(asmEnablerService: AsmEnablerService): () => void {\n  const isReady = () => {\n    asmEnablerService.load();\n  };\n  return isReady;\n}\n","import { Injectable } from '@angular/core';\nimport { AuthStorageService, AuthToken } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n/**\n * Indicates if auth token is for regular user or CS Agent.\n */\nexport enum TokenTarget {\n  CSAgent = 'CSAgent',\n  User = 'User',\n}\n\n/**\n * With AsmAuthStorageService apart from storing the token we also need to store\n * information for which user is the token (regular user or CS Agent).\n *\n * Overrides `AuthStorageService`.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthStorageService extends AuthStorageService {\n  protected _tokenTarget$: Observable<TokenTarget> =\n    new BehaviorSubject<TokenTarget>(TokenTarget.User);\n\n  /**\n   * When CS Agent logs in during regular user session we store the regular\n   * user token to restore the session after CS Agent logout.\n   *\n   * This supports in-store use case when CS Agent want's to quickly help\n   * customer and then give an option to customer to continue the process.\n   */\n  protected emulatedUserToken?: AuthToken;\n\n  /**\n   * Get target user for current auth token.\n   *\n   * @return observable with TokenTarget\n   */\n  getTokenTarget(): Observable<TokenTarget> {\n    return this._tokenTarget$;\n  }\n\n  /**\n   * Set new token target.\n   *\n   * @param tokenTarget\n   */\n  setTokenTarget(tokenTarget: TokenTarget): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(tokenTarget);\n  }\n\n  /**\n   * Get token for previously user session, when it was interrupted by CS agent login.\n   *\n   * @return previously logged in user token.\n   */\n  getEmulatedUserToken(): AuthToken | undefined {\n    return this.emulatedUserToken;\n  }\n\n  /**\n   * Save user token on CS agent login.\n   *\n   * @param token\n   */\n  setEmulatedUserToken(token: AuthToken): void {\n    this.emulatedUserToken = token;\n  }\n\n  /**\n   * Change token target to CS Agent.\n   */\n  switchTokenTargetToCSAgent(): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(\n      TokenTarget.CSAgent\n    );\n  }\n\n  /**\n   * Change token target to user.\n   */\n  switchTokenTargetToUser(): void {\n    (this._tokenTarget$ as BehaviorSubject<TokenTarget>).next(TokenTarget.User);\n  }\n\n  /**\n   * When we start emulation from the UI (not by ASM login) we can't restore user session on cs agent logout.\n   * Only available solution is to drop session we could restore, to avoid account hijack.\n   */\n  clearEmulatedUserToken(): void {\n    this.emulatedUserToken = undefined;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  AuthActions,\n  AuthService,\n  AuthToken,\n  OAuthLibWrapperService,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_CURRENT,\n  UserIdService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n\n/**\n * Auth service for CS agent. Useful to login/logout agent, start emulation\n * or get information about the status of emulation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CsAgentAuthService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AsmAuthStorageService,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected store: Store,\n    protected userService: UserService\n  ) {}\n\n  /**\n   * Loads access token for a customer support agent.\n   * @param userId\n   * @param password\n   */\n  async authorizeCustomerSupportAgent(\n    userId: string,\n    password: string\n  ): Promise<void> {\n    let userToken: AuthToken | undefined;\n    this.authStorageService\n      .getToken()\n      .subscribe((token) => (userToken = token))\n      .unsubscribe();\n\n    this.authStorageService.switchTokenTargetToCSAgent();\n    try {\n      await this.oAuthLibWrapperService.authorizeWithPasswordFlow(\n        userId,\n        password\n      );\n      // Start emulation for currently logged in user\n      let customerId: string | undefined;\n      this.userService\n        .get()\n        .subscribe((user) => (customerId = user?.customerId))\n        .unsubscribe();\n      this.store.dispatch(new AuthActions.Logout());\n\n      if (customerId !== undefined && userToken !== undefined) {\n        // OCC specific user id handling. Customize when implementing different backend\n        this.userIdService.setUserId(customerId);\n        this.authStorageService.setEmulatedUserToken(userToken);\n        this.store.dispatch(new AuthActions.Login());\n      } else {\n        // When we can't get the customerId just end all current sessions\n        this.userIdService.setUserId(OCC_USER_ID_ANONYMOUS);\n        this.authStorageService.clearEmulatedUserToken();\n      }\n    } catch {\n      this.authStorageService.switchTokenTargetToUser();\n    }\n  }\n\n  /**\n   * Starts an ASM customer emulation session.\n   * A customer emulation session is stopped by calling logout().\n   * @param customerId\n   */\n  public startCustomerEmulationSession(customerId: string): void {\n    this.authStorageService.clearEmulatedUserToken();\n\n    // OCC specific user id handling. Customize when implementing different backend\n    this.store.dispatch(new AuthActions.Logout());\n    this.userIdService.setUserId(customerId);\n    this.store.dispatch(new AuthActions.Login());\n  }\n\n  /**\n   * Check if CS agent is currently logged in.\n   *\n   * @returns observable emitting true when CS agent is logged in or false when not.\n   */\n  public isCustomerSupportAgentLoggedIn(): Observable<boolean> {\n    return combineLatest([\n      this.authStorageService.getToken(),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(([token, tokenTarget]) =>\n        Boolean(token?.access_token && tokenTarget === TokenTarget.CSAgent)\n      )\n    );\n  }\n\n  /**\n   * Utility function to determine if customer is emulated.\n   *\n   * @returns observable emitting true when there is active emulation session or false when not.\n   */\n  public isCustomerEmulated(): Observable<boolean> {\n    return this.userIdService.isEmulated();\n  }\n\n  /**\n   * Returns the customer support agent's token loading status\n   */\n  public getCustomerSupportAgentTokenLoading(): Observable<boolean> {\n    // TODO(#8248): Create new loading state outside of store\n    return of(false);\n  }\n\n  /**\n   * Logout a customer support agent.\n   */\n  async logoutCustomerSupportAgent(): Promise<void> {\n    const emulatedToken = this.authStorageService.getEmulatedUserToken();\n\n    let isCustomerEmulated;\n    this.userIdService\n      .isEmulated()\n      .subscribe((emulated) => (isCustomerEmulated = emulated))\n      .unsubscribe();\n\n    await this.oAuthLibWrapperService.revokeAndLogout();\n\n    this.store.dispatch({ type: '[Auth] Logout Customer Support Agent' });\n    this.authStorageService.setTokenTarget(TokenTarget.User);\n\n    if (isCustomerEmulated && emulatedToken) {\n      this.store.dispatch(new AuthActions.Logout());\n      this.authStorageService.setToken(emulatedToken);\n      this.userIdService.setUserId(OCC_USER_ID_CURRENT);\n      this.authStorageService.clearEmulatedUserToken();\n      this.store.dispatch(new AuthActions.Login());\n    } else {\n      this.authService.logout();\n    }\n  }\n}\n","import { HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  AuthHttpHeaderService,\n  AuthRedirectService,\n  AuthService,\n  AuthStorageService,\n  AuthToken,\n  GlobalMessageService,\n  GlobalMessageType,\n  InterceptorUtil,\n  OAuthLibWrapperService,\n  OccEndpointsService,\n  RoutingService,\n  USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n} from '@spartacus/core';\nimport { take } from 'rxjs/operators';\nimport { CsAgentAuthService } from './csagent-auth.service';\n\n/**\n * Overrides `AuthHttpHeaderService` to handle asm calls as well (not only OCC)\n * in cases of normal user session and on customer emulation.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthHttpHeaderService extends AuthHttpHeaderService {\n  constructor(\n    protected authService: AuthService,\n    protected authStorageService: AuthStorageService,\n    protected csAgentAuthService: CsAgentAuthService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected occEndpointsService: OccEndpointsService,\n    protected authRedirectService: AuthRedirectService\n  ) {\n    super(\n      authService,\n      authStorageService,\n      oAuthLibWrapperService,\n      routingService,\n      occEndpointsService,\n      globalMessageService,\n      authRedirectService\n    );\n  }\n\n  /**\n   * Checks if the authorization header should be added to the request\n   *\n   *  @override\n   */\n  public shouldAddAuthorizationHeader(request: HttpRequest<any>): boolean {\n    return (\n      super.shouldAddAuthorizationHeader(request) ||\n      this.isCSAgentTokenRequest(request)\n    );\n  }\n\n  /**\n   * @override\n   *\n   * Checks if particular request should be handled by this service.\n   */\n  public shouldCatchError(request: HttpRequest<any>): boolean {\n    return (\n      super.shouldCatchError(request) || this.isCSAgentTokenRequest(request)\n    );\n  }\n\n  /**\n   * @override\n   *\n   * Adds `Authorization` header to occ and CS agent requests.\n   * For CS agent requests also removes the `cx-use-csagent-token` header (to avoid problems with CORS).\n   */\n  public alterRequest(\n    request: HttpRequest<any>,\n    token?: AuthToken\n  ): HttpRequest<any> {\n    const hasAuthorizationHeader = !!this.getAuthorizationHeader(request);\n    const isCSAgentRequest = this.isCSAgentTokenRequest(request);\n\n    let req = super.alterRequest(request, token);\n\n    if (!hasAuthorizationHeader && isCSAgentRequest) {\n      req = request.clone({\n        setHeaders: {\n          ...this.createAuthorizationHeader(token),\n        },\n      });\n      return InterceptorUtil.removeHeader(\n        USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n        req\n      );\n    }\n    return req;\n  }\n\n  protected isCSAgentTokenRequest(request: HttpRequest<any>): boolean {\n    const isRequestWithCSAgentToken = InterceptorUtil.getInterceptorParam(\n      USE_CUSTOMER_SUPPORT_AGENT_TOKEN,\n      request.headers\n    );\n    return Boolean(isRequestWithCSAgentToken);\n  }\n\n  /**\n   * @override\n   *\n   * On backend errors indicating expired `refresh_token` we need to logout\n   * currently logged in user and CS agent.\n   */\n  public handleExpiredRefreshToken(): void {\n    this.csAgentAuthService\n      .isCustomerSupportAgentLoggedIn()\n      .pipe(take(1))\n      .subscribe((csAgentLoggedIn) => {\n        if (csAgentLoggedIn) {\n          this.authService.setLogoutProgress(true);\n          this.csAgentAuthService.logoutCustomerSupportAgent();\n          this.globalMessageService.add(\n            {\n              key: 'asm.csagentTokenExpired',\n            },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        } else {\n          super.handleExpiredRefreshToken();\n        }\n      });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport {\n  AuthActions,\n  AuthRedirectService,\n  AuthService,\n  AuthToken,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthLibWrapperService,\n  RoutingService,\n  StateWithClientAuth,\n  UserIdService,\n} from '@spartacus/core';\nimport { combineLatest, from, Observable, of } from 'rxjs';\nimport { map, switchMap, take } from 'rxjs/operators';\nimport { AsmAuthStorageService, TokenTarget } from './asm-auth-storage.service';\n\n/**\n * Version of AuthService that is working for both user na CS agent.\n * Overrides AuthService when ASM module is enabled.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AsmAuthService extends AuthService {\n  constructor(\n    protected store: Store<StateWithClientAuth>,\n    protected userIdService: UserIdService,\n    protected oAuthLibWrapperService: OAuthLibWrapperService,\n    protected authStorageService: AsmAuthStorageService,\n    protected authRedirectService: AuthRedirectService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService\n  ) {\n    super(\n      store,\n      userIdService,\n      oAuthLibWrapperService,\n      authStorageService,\n      authRedirectService,\n      routingService\n    );\n  }\n\n  protected canUserLogin(): boolean {\n    let tokenTarget: TokenTarget | undefined;\n    let token: AuthToken | undefined;\n\n    this.authStorageService\n      .getToken()\n      .subscribe((tok) => (token = tok))\n      .unsubscribe();\n    this.authStorageService\n      .getTokenTarget()\n      .subscribe((tokTarget) => (tokenTarget = tokTarget))\n      .unsubscribe();\n    return !(\n      Boolean(token?.access_token) && tokenTarget === TokenTarget.CSAgent\n    );\n  }\n\n  protected warnAboutLoggedCSAgent(): void {\n    this.globalMessageService.add(\n      {\n        key: 'asm.auth.agentLoggedInError',\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  /**\n   * Loads a new user token with Resource Owner Password Flow when CS agent is not logged in.\n   * @param userId\n   * @param password\n   */\n  async loginWithCredentials(userId: string, password: string): Promise<void> {\n    if (this.canUserLogin()) {\n      await super.loginWithCredentials(userId, password);\n    } else {\n      this.warnAboutLoggedCSAgent();\n    }\n  }\n\n  /**\n   * Initialize Implicit/Authorization Code flow by redirecting to OAuth server when CS agent is not logged in.\n   */\n  loginWithRedirect(): boolean {\n    if (this.canUserLogin()) {\n      super.loginWithRedirect();\n      return true;\n    } else {\n      this.warnAboutLoggedCSAgent();\n      return false;\n    }\n  }\n\n  /**\n   * Revokes tokens and clears state for logged user (tokens, userId).\n   * To perform logout it is best to use `logout` method. Use this method with caution.\n   */\n  coreLogout(): Promise<any> {\n    return this.userIdService\n      .isEmulated()\n      .pipe(\n        take(1),\n        switchMap((isEmulated) => {\n          if (isEmulated) {\n            this.authStorageService.clearEmulatedUserToken();\n            this.userIdService.clearUserId();\n            this.store.dispatch(new AuthActions.Logout());\n            return of(true);\n          } else {\n            return from(super.coreLogout());\n          }\n        })\n      )\n      .toPromise();\n  }\n\n  /**\n   * Returns `true` if user is logged in or being emulated.\n   */\n  isUserLoggedIn(): Observable<boolean> {\n    return combineLatest([\n      this.authStorageService.getToken(),\n      this.userIdService.isEmulated(),\n      this.authStorageService.getTokenTarget(),\n    ]).pipe(\n      map(\n        ([token, isEmulated, tokenTarget]) =>\n          Boolean(token?.access_token) &&\n          (tokenTarget === TokenTarget.User ||\n            (tokenTarget === TokenTarget.CSAgent && isEmulated))\n      )\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport {\n  AuthHttpHeaderService,\n  AuthService,\n  AuthStorageService,\n} from '@spartacus/core';\nimport { AsmLoaderModule } from './asm-loader.module';\nimport { AsmAuthHttpHeaderService } from './services/asm-auth-http-header.service';\nimport { AsmAuthStorageService } from './services/asm-auth-storage.service';\nimport { AsmAuthService } from './services/asm-auth.service';\n\n@NgModule({\n  imports: [AsmLoaderModule],\n  providers: [\n    {\n      provide: AuthStorageService,\n      useExisting: AsmAuthStorageService,\n    },\n    {\n      provide: AuthService,\n      useExisting: AsmAuthService,\n    },\n    {\n      provide: AuthHttpHeaderService,\n      useExisting: AsmAuthHttpHeaderService,\n    },\n  ],\n})\nexport class AsmRootModule {}\n","export const ASM_FEATURE = 'asm';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}