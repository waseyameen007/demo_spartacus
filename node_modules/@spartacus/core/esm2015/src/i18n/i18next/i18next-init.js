import { Injectable } from '@angular/core';
import i18nextHttpBackend from 'i18next-http-backend';
import { tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export function i18nextInit(i18next, configInit, languageService, httpClient, serverRequestOrigin, siteContextI18nextSynchronizer) {
    return () => configInit
        .getStable('i18n')
        .pipe(tap((config) => {
        var _a, _b, _c, _d;
        let i18nextConfig = {
            ns: [],
            fallbackLng: (_a = config.i18n) === null || _a === void 0 ? void 0 : _a.fallbackLang,
            debug: (_b = config.i18n) === null || _b === void 0 ? void 0 : _b.debug,
            interpolation: {
                escapeValue: false,
            },
        };
        if ((_d = (_c = config.i18n) === null || _c === void 0 ? void 0 : _c.backend) === null || _d === void 0 ? void 0 : _d.loadPath) {
            i18next = i18next.use(i18nextHttpBackend);
            const loadPath = getLoadPath(config.i18n.backend.loadPath, serverRequestOrigin);
            const backend = {
                loadPath,
                request: i18nextGetHttpClient(httpClient),
                // Disable the periodical reloading. Otherwise SSR would not finish due to the pending task `setInterval()`
                // See source code of `i18next-http-backend` : https://github.com/i18next/i18next-http-backend/blob/00b7e8f67abf8372af17529b51190a7e8b17e3d8/lib/index.js#L40-L41
                reloadInterval: false,
            };
            i18nextConfig = Object.assign(Object.assign({}, i18nextConfig), { backend });
        }
        return i18next.init(i18nextConfig, () => {
            var _a;
            // Don't use i18next's 'resources' config key for adding static translations,
            // because it will disable loading chunks from backend. We add resources here, in the init's callback.
            i18nextAddTranslations(i18next, (_a = config.i18n) === null || _a === void 0 ? void 0 : _a.resources);
            siteContextI18nextSynchronizer.init(i18next, languageService);
        });
    }))
        .toPromise();
}
export function i18nextAddTranslations(i18next, resources = {}) {
    Object.keys(resources).forEach((lang) => {
        Object.keys(resources[lang]).forEach((chunkName) => {
            i18next.addResourceBundle(lang, chunkName, resources[lang][chunkName], true, true);
        });
    });
}
export class SiteContextI18nextSynchronizer {
    init(i18next, language) {
        var _a;
        // always update language of i18next on site context (language) change
        this.sub =
            (_a = this.sub) !== null && _a !== void 0 ? _a : language.getActive().subscribe((lang) => i18next.changeLanguage(lang));
    }
    ngOnDestroy() {
        var _a;
        (_a = this.sub) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
}
SiteContextI18nextSynchronizer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SiteContextI18nextSynchronizer, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
SiteContextI18nextSynchronizer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SiteContextI18nextSynchronizer, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SiteContextI18nextSynchronizer, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });
/**
 * Returns a function appropriate for i18next to make http calls for JSON files.
 * See docs for `i18next-http-backend`: https://github.com/i18next/i18next-http-backend#backend-options
 *
 * It uses Angular HttpClient under the hood, so it works in SSR.
 * @param httpClient Angular http client
 */
export function i18nextGetHttpClient(httpClient) {
    return (_options, url, _payload, callback) => {
        httpClient.get(url, { responseType: 'text' }).subscribe((data) => callback(null, { status: 200, data }), (error) => callback(error, {
            // a workaround for https://github.com/i18next/i18next-http-backend/issues/82
            data: null,
            status: error.status,
        }));
    };
}
/**
 * Resolves the relative path to the absolute one in SSR, using the server request's origin.
 * It's needed, because Angular Universal doesn't support relative URLs in HttpClient. See Angular issues:
 * - https://github.com/angular/angular/issues/19224
 * - https://github.com/angular/universal/issues/858
 */
export function getLoadPath(path, serverRequestOrigin) {
    if (serverRequestOrigin && !path.match(/^http(s)?:\/\//)) {
        if (path.startsWith('/')) {
            path = path.slice(1);
        }
        if (path.startsWith('./')) {
            path = path.slice(2);
        }
        const result = `${serverRequestOrigin}/${path}`;
        return result;
    }
    return path;
}
//# sourceMappingURL=data:application/json;base64,