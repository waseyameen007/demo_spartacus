import { Injectable } from '@angular/core';
import { Config } from '../../config/config-tokens';
import { OccConfig } from '../../occ/config/occ-config';
import * as i0 from "@angular/core";
export const JSP_INCLUDE_CMS_COMPONENT_TYPE = 'JspIncludeComponent';
export const CMS_FLEX_COMPONENT_TYPE = 'CMSFlexComponent';
/** Strategy to control the loading strategy of DOM elements. */
export var DeferLoadingStrategy;
(function (DeferLoadingStrategy) {
    /** Defers loading of DOM elements until element is near/in the users view port */
    DeferLoadingStrategy["DEFER"] = "DEFERRED-LOADING";
    /** Renders the DOM instantly without being concerned with the view port */
    DeferLoadingStrategy["INSTANT"] = "INSTANT-LOADING";
})(DeferLoadingStrategy || (DeferLoadingStrategy = {}));
export class CmsConfig extends OccConfig {
}
CmsConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CmsConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
CmsConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CmsConfig, providedIn: 'root', useExisting: Config });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CmsConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useExisting: Config,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL2Ntcy9jb25maWcvY21zLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFrQixNQUFNLGVBQWUsQ0FBQztBQUUzRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQStCeEQsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQUcscUJBQXFCLENBQUM7QUFDcEUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsa0JBQWtCLENBQUM7QUFvRDFELGdFQUFnRTtBQUNoRSxNQUFNLENBQU4sSUFBWSxvQkFLWDtBQUxELFdBQVksb0JBQW9CO0lBQzlCLGtGQUFrRjtJQUNsRixrREFBMEIsQ0FBQTtJQUMxQiwyRUFBMkU7SUFDM0UsbURBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQUxXLG9CQUFvQixLQUFwQixvQkFBb0IsUUFLL0I7QUEyQkQsTUFBTSxPQUFnQixTQUFVLFNBQVEsU0FBUzs7c0dBQTNCLFNBQVM7MEdBQVQsU0FBUyxjQUhqQixNQUFNLGVBQ0wsTUFBTTsyRkFFQyxTQUFTO2tCQUo5QixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO29CQUNsQixXQUFXLEVBQUUsTUFBTTtpQkFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTdGF0aWNQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2NvbmZpZy10b2tlbnMnO1xuaW1wb3J0IHsgQ21zQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vbW9kZWwvY21zLm1vZGVsJztcbmltcG9ydCB7IE9jY0NvbmZpZyB9IGZyb20gJy4uLy4uL29jYy9jb25maWcvb2NjLWNvbmZpZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhbmRhcmRDbXNDb21wb25lbnRDb25maWcge1xuICBDTVNTaXRlQ29udGV4dENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIENNU0xpbmtDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBTaW1wbGVSZXNwb25zaXZlQmFubmVyQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgU2ltcGxlQmFubmVyQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQmFubmVyQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQ01TUGFyYWdyYXBoQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQnJlYWRjcnVtYkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIE5hdmlnYXRpb25Db21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBGb290ZXJOYXZpZ2F0aW9uQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgQ2F0ZWdvcnlOYXZpZ2F0aW9uQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdEFkZFRvQ2FydENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIE1pbmlDYXJ0Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdENhcm91c2VsQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgU2VhcmNoQm94Q29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdFJlZmVyZW5jZXNDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBDTVNUYWJQYXJhZ3JhcGhDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xuICBMb2dpbkNvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XG4gIEFjY291bnRBZGRyZXNzQm9va0NvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIEZvcmdvdFBhc3N3b3JkQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUmVzZXRQYXNzd29yZENvbXBvbmVudD86IENtc0NvbXBvbmVudE1hcHBpbmc7XG4gIFByb2R1Y3REZXRhaWxzVGFiQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdFNwZWNzVGFiQ29tcG9uZW50PzogQ21zQ29tcG9uZW50TWFwcGluZztcbiAgUHJvZHVjdFJldmlld3NUYWJDb21wb25lbnQ/OiBDbXNDb21wb25lbnRNYXBwaW5nO1xufVxuXG5leHBvcnQgY29uc3QgSlNQX0lOQ0xVREVfQ01TX0NPTVBPTkVOVF9UWVBFID0gJ0pzcEluY2x1ZGVDb21wb25lbnQnO1xuZXhwb3J0IGNvbnN0IENNU19GTEVYX0NPTVBPTkVOVF9UWVBFID0gJ0NNU0ZsZXhDb21wb25lbnQnO1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb2YgdGhlIENNUyBjb21wb25lbnQncyBjaGlsZCByb3V0ZXNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbXNDb21wb25lbnRDaGlsZFJvdXRlc0NvbmZpZyB7XG4gIC8qKlxuICAgKiBSb3V0ZSBgZGF0YWAgcHJvcGVydHkgdG8gYXBwbHkgb24gdGhlIHBhcmVudCAoaG9zdCkgcm91dGUgb2YgdGhlIENNUyBjaGlsZCByb3V0ZXMuXG4gICAqL1xuICBwYXJlbnQ/OiBQaWNrPFJvdXRlLCAnZGF0YSc+O1xuXG4gIC8qKlxuICAgKiBDaGlsZCByb3V0ZXMgZGVmaW5lZCBieSB0aGUgZXhpc3RlbmNlIG9mIHRoZSBDTVMgY29tcG9uZW50IG9uIHRoZSBwYWdlLlxuICAgKi9cbiAgY2hpbGRyZW4/OiBSb3V0ZVtdO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIENtc0NvbXBvbmVudE1hcHBpbmc8VCA9IENtc0NvbXBvbmVudD4ge1xuICBjb21wb25lbnQ/OiBhbnk7XG4gIC8qKlxuICAgKiBDb25maWd1cmFibGUgY29tcG9uZW50IHByb3ZpZGVycyBmb3IgY21zIGNvbXBvbmVudHMuXG4gICAqXG4gICAqIENvbXBvbmVudCBzZXJ2aWNlcyBhcmUgZGVzaWduZWQgdG8gYmUgbm9uLXNpbmdsZXRvbiBzZXJ2aWNlcyBhbmQgYXJlIHNjb3BlZFxuICAgKiB0byB0aGUgY29tcG9uZW50IGluamVjdGlvbiB0cmVlLiBUaGUgYWR2YW50YWdlIG9mIHRoZXNlIHNlcnZpY2VzIGlzIHRoYXQgdGhleSBjYW5cbiAgICogcmVzb2x2ZSBzZXJ2aWNlcyBpbmplY3RlZCB0byB0aGUgY29tcG9uZW50IGluamVjdGlvbiB0cmVlLiBIb3dldmVyLCB0aGVzZSBzZXJ2aWNlc1xuICAgKiBjYW5ub3QgYmUgZXh0ZW5kZWQgd2l0aCB0aGUgbmF0aXZlIEFuZ3VsYXIgREkgc3lzdGVtLlxuICAgKlxuICAgKiBUaGUgY29uZmlndXJhYmxlIGNvbXBvbmVudCBwcm92aWRlcnMgbWl0aWdhdGUgdGhpcyBkb3duc2lkZSwgYnkgYWxsb3dpbmcgeW91IHRvIHByb3ZpZGVcbiAgICogY29tcG9uZW50IHByb3ZpZGVycyB0aHJvdWdoIHNlcnZpY2VzLlxuICAgKi9cbiAgcHJvdmlkZXJzPzogU3RhdGljUHJvdmlkZXJbXTtcbiAgY2hpbGRSb3V0ZXM/OiBSb3V0ZVtdIHwgQ21zQ29tcG9uZW50Q2hpbGRSb3V0ZXNDb25maWc7XG4gIGRpc2FibGVTU1I/OiBib29sZWFuO1xuICBpMThuS2V5cz86IHN0cmluZ1tdO1xuICBndWFyZHM/OiBhbnlbXTtcblxuICAvKipcbiAgICogVGhlIGNvbXBvbmVudCBkYXRhIGNhbiBiZSBzdGF0aWNhbGx5IGNvbmZpZ3VyZWQuIFRoZSBkYXRhIGNhbiBiZSB1c2VkIGZvciB2YXJpb3VzIHJlYXNvbnM6XG4gICAqIC0gSW1wcm92ZSBwZXJmb3JtYW5jZSB3aXRoIGFuIGluaXRpYWwgZGF0YSB0aGF0IGRvZXNuJ3QgcmVxdWlyZSBBUEkgcmVzcG9uc2VcbiAgICogLSBJbnRyb2R1Y2UgVUkgcHJvcGVydGllcyB0aGF0IGFyZSBub3QgYXZhaWxhYmxlIG9uIHRoZSBBUElcbiAgICogLSBCdWlsZCBnaG9zdCBkZXNpZ24gYmFzZWQgb24gdGhlIGluaXRpYWwgZGF0YSB0aGF0IGlzIHVzZWQgcHJpb3IgdG8gdGhlIGJhY2tlbmQgZGF0YSBpcyBsb2FkZWRcbiAgICovXG4gIGRhdGE/OiBUO1xuXG4gIC8qKlxuICAgKiBEZWZlckxvYWRpbmcgY2FuIGJlIHNwZWNpZmllZCBnbG9iYWxseSwgYnV0IGFsc28gcGVyIGNvbXBvbmVudC5cbiAgICogU29tZSBjb21wb25lbnRzIHJlcXVpcmUgZGlyZWN0IGxvYWRpbmcgd2hpbGUgaXQncyBub3QgaW5pdGlhbGx5XG4gICAqIGluIHRoZSB2aWV3cG9ydC5cbiAgICovXG4gIGRlZmVyTG9hZGluZz86IERlZmVyTG9hZGluZ1N0cmF0ZWd5O1xufVxuXG4vKiogU3RyYXRlZ3kgdG8gY29udHJvbCB0aGUgbG9hZGluZyBzdHJhdGVneSBvZiBET00gZWxlbWVudHMuICovXG5leHBvcnQgZW51bSBEZWZlckxvYWRpbmdTdHJhdGVneSB7XG4gIC8qKiBEZWZlcnMgbG9hZGluZyBvZiBET00gZWxlbWVudHMgdW50aWwgZWxlbWVudCBpcyBuZWFyL2luIHRoZSB1c2VycyB2aWV3IHBvcnQgKi9cbiAgREVGRVIgPSAnREVGRVJSRUQtTE9BRElORycsXG4gIC8qKiBSZW5kZXJzIHRoZSBET00gaW5zdGFudGx5IHdpdGhvdXQgYmVpbmcgY29uY2VybmVkIHdpdGggdGhlIHZpZXcgcG9ydCAqL1xuICBJTlNUQU5UID0gJ0lOU1RBTlQtTE9BRElORycsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ01TQ29tcG9uZW50Q29uZmlnXG4gIGV4dGVuZHMgU3RhbmRhcmRDbXNDb21wb25lbnRDb25maWcsXG4gICAgSnNwSW5jbHVkZUNtc0NvbXBvbmVudENvbmZpZyB7XG4gIFtjb21wb25lbnRUeXBlOiBzdHJpbmddOiBDbXNDb21wb25lbnRNYXBwaW5nIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVNb2R1bGVDb25maWcge1xuICAvKipcbiAgICogTGF6eSByZXNvbHZlZCBmZWF0dXJlIG1vZHVsZVxuICAgKi9cbiAgbW9kdWxlPzogKCkgPT4gUHJvbWlzZTxhbnk+O1xuICAvKipcbiAgICogTGF6eSByZXNvbHZlZCBkZXBlbmRlbmN5IG1vZHVsZXMgb3IgZmVhdHVyZXMgcmVmZXJlbmNlZCBieSBuYW1lXG4gICAqL1xuICBkZXBlbmRlbmNpZXM/OiAoKCgpID0+IFByb21pc2U8YW55PikgfCBzdHJpbmcpW107XG4gIC8qKlxuICAgKiBDbXMgY29tcG9uZW50cyBjb3ZlcmVkIGJ5IHRoaXMgZmVhdHVyZVxuICAgKi9cbiAgY21zQ29tcG9uZW50cz86IHN0cmluZ1tdO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ21zQ29uZmlnIGV4dGVuZHMgT2NjQ29uZmlnIHtcbiAgZmVhdHVyZU1vZHVsZXM/OiB7IFtmZWF0dXJlTmFtZTogc3RyaW5nXTogRmVhdHVyZU1vZHVsZUNvbmZpZyB8IHN0cmluZyB9O1xuICBjbXNDb21wb25lbnRzPzogQ01TQ29tcG9uZW50Q29uZmlnO1xufVxuXG5kZWNsYXJlIG1vZHVsZSAnLi4vLi4vY29uZmlnL2NvbmZpZy10b2tlbnMnIHtcbiAgaW50ZXJmYWNlIENvbmZpZyBleHRlbmRzIENtc0NvbmZpZyB7fVxufVxuIl19