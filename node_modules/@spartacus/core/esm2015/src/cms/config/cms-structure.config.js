import { Injectable } from '@angular/core';
import { Config } from '../../config/config-tokens';
import { CmsConfig } from './cms-config';
import * as i0 from "@angular/core";
/**
 * The `CmsStructureConfig` is used to build pages in Spartacus by configuration
 * instead of using a backend CMS system. The configuration can be used to build
 * complete pages or parts of a page. The `CmsStructureConfig` is optimized to
 * only require the necessary properties. Adapter logic is applied to serialize
 * the `CmsStructureConfig` into the required UI model.
 */
export class CmsStructureConfig extends CmsConfig {
}
CmsStructureConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CmsStructureConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
CmsStructureConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CmsStructureConfig, providedIn: 'root', useExisting: Config });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CmsStructureConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useExisting: Config,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY21zLXN0cnVjdHVyZS5jb25maWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9jbXMvY29uZmlnL2Ntcy1zdHJ1Y3R1cmUuY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRXBELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7O0FBMER6Qzs7Ozs7O0dBTUc7QUFLSCxNQUFNLE9BQWdCLGtCQUFtQixTQUFRLFNBQVM7OytHQUFwQyxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUgxQixNQUFNLGVBQ0wsTUFBTTsyRkFFQyxrQkFBa0I7a0JBSnZDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07b0JBQ2xCLFdBQVcsRUFBRSxNQUFNO2lCQUNwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9jb25maWctdG9rZW5zJztcbmltcG9ydCB7IENvbnRlbnRTbG90Q29tcG9uZW50RGF0YSB9IGZyb20gJy4uL21vZGVsL2NvbnRlbnQtc2xvdC1jb21wb25lbnQtZGF0YS5tb2RlbCc7XG5pbXBvcnQgeyBDbXNDb25maWcgfSBmcm9tICcuL2Ntcy1jb25maWcnO1xuXG4vKipcbiAqIFRoZSBgQ21zUGFnZUNvbmZpZ2AgaXMgdXNlZCB0byBidWlsZCBwYWdlcyBieSBjb25maWd1cmF0aW9uLlxuICogVGhlIGludGVyZmFjZXMgYXJlIGRlc2lnbmVkIHRvIGhhdmUgYSBjbGVhbiBjb25maWd1cmF0aW9uIGZvclxuICogc3RhdGljIENNUyBzdHJ1Y3R1cmUuIE9yZGluYXJ5IGF0dHJpYnV0ZXMgdGhhdCBhcmUgbm90XG4gKiByZXF1aXJlZCBmb3IgY29uZmlndXJhYmxlIHBhZ2VzIGhhdmUgYmVlbiBsZWZ0IG91dCBhbmRcbiAqIHdpbGwgbm90IGJlIHNlcmlhbGl6ZWQgaW4gdGhlIGFkYXB0ZXIgbG9naWMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ21zUGFnZUNvbmZpZyB7XG4gIC8qKlxuICAgKiBXaGVuIHRoZSBgaWdub3JlQmFja2VuZGAgaXMgc2V0IHRvIHRydWUsIHRoZSBDTVMgYmFja2VuZFxuICAgKiB3aWxsIG5vdCBiZSBjb25zdW1lZC4gVGhpcyBzYXZlcyBuZXR3b3JrIGxhdGVuY3kgYW5kIGlzXG4gICAqIHVzZWZ1bCBmb3IgY29tbW9kaXR5IGNvbW1lcmNlIHBhZ2VzLlxuICAgKiAqL1xuICBpZ25vcmVCYWNrZW5kPzogYm9vbGVhbjtcblxuICBwYWdlSWQ/OiBzdHJpbmc7XG5cbiAgdHlwZT86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHBhZ2UgdGl0bGUgaXMgdHlwaWNhbGx5IHVzZWQgdG8gZGlzcGxheSB0aGUgcGFnZSBoZWFkaW5nXG4gICAqIGFzIHdlbGwgYXMgZm9yIHRoZSBwYWdlIHRpdGxlIHRhZy4gVGhlIGxhdHRlciBpcyB1c2VkIGZvciBicm93c2VyXG4gICAqIG5hdmlnYXRpb24gYXMgd2VsbCBhcyBTRU8gYW5kIHNvY2lhbCBzaGFyZSBwbGF0Zm9ybXMuXG4gICAqL1xuICB0aXRsZT86IHN0cmluZztcblxuICAvKipcbiAgICogdGhlIHRlbXBsYXRlIGlzIHVzZWQgdG8gYmluZCB0byB0aGUgbGF5b3V0XG4gICAqIGNvbmZpZ3VyYXRpb24gYW5kIGNzcyBsYXlvdXQgY2xhc3NcbiAgICovXG4gIHRlbXBsYXRlPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgcGFnZSBzbG90cyByZXByZXNlbnQgdmFyaW91cyBzZWN0aW9ucyBvbiB0aGUgcGFnZSB0aGF0XG4gICAqIGNhbiBjb250YWluIGNvbXBvbmVudHMuXG4gICAqL1xuICBzbG90czogeyBba2V5OiBzdHJpbmddOiBDbXNQYWdlU2xvdENvbmZpZyB9O1xufVxuXG4vKipcbiAqIFRoZSBgQ21zUGFnZVNsb3RzQ29uZmlnYCAocGx1cmFsKSBob2xkcyBgQ21zUGFnZVNsb3RDb25maWdgIG9iamVjdHMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ21zUGFnZVNsb3RzQ29uZmlnIHtcbiAgW2tleTogc3RyaW5nXTogQ21zUGFnZVNsb3RDb25maWc7XG59XG5cbi8qKlxuICogVGhlIGBDbXNQYWdlU2xvdENvbmZpZ2AgaXMgYSBzaW1wbGlmaWVkIGNvbmZpZ3VyYXRpb24gbW9kZWxcbiAqIHRoYXQgY2FuIGJlIHVzZWQgdG8gY29uZmlndXJlIHNsb3RzIGluIHN0YXRpYyBjb25maWd1cmF0aW9uLFxuICogcmF0aGVyIHRoYW4gbG9hZGluZyBmcm9tIGEgYmFja2VuZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbXNQYWdlU2xvdENvbmZpZyB7XG4gIGNvbXBvbmVudElkcz86IHN0cmluZ1tdO1xuICBwcm9wZXJ0aWVzPzogYW55O1xufVxuXG4vKipcbiAqIFRoZSBgQ21zU3RydWN0dXJlQ29uZmlnYCBpcyB1c2VkIHRvIGJ1aWxkIHBhZ2VzIGluIFNwYXJ0YWN1cyBieSBjb25maWd1cmF0aW9uXG4gKiBpbnN0ZWFkIG9mIHVzaW5nIGEgYmFja2VuZCBDTVMgc3lzdGVtLiBUaGUgY29uZmlndXJhdGlvbiBjYW4gYmUgdXNlZCB0byBidWlsZFxuICogY29tcGxldGUgcGFnZXMgb3IgcGFydHMgb2YgYSBwYWdlLiBUaGUgYENtc1N0cnVjdHVyZUNvbmZpZ2AgaXMgb3B0aW1pemVkIHRvXG4gKiBvbmx5IHJlcXVpcmUgdGhlIG5lY2Vzc2FyeSBwcm9wZXJ0aWVzLiBBZGFwdGVyIGxvZ2ljIGlzIGFwcGxpZWQgdG8gc2VyaWFsaXplXG4gKiB0aGUgYENtc1N0cnVjdHVyZUNvbmZpZ2AgaW50byB0aGUgcmVxdWlyZWQgVUkgbW9kZWwuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxuICB1c2VFeGlzdGluZzogQ29uZmlnLFxufSlcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbXNTdHJ1Y3R1cmVDb25maWcgZXh0ZW5kcyBDbXNDb25maWcge1xuICBjbXNTdHJ1Y3R1cmU/OiB7XG4gICAgY29tcG9uZW50cz86IHsgW2tleTogc3RyaW5nXTogQ29udGVudFNsb3RDb21wb25lbnREYXRhIHwgYW55IH07XG4gICAgcGFnZXM/OiBDbXNQYWdlQ29uZmlnW107XG4gICAgc2xvdHM/OiBDbXNQYWdlU2xvdHNDb25maWc7XG4gIH07XG59XG5cbmRlY2xhcmUgbW9kdWxlICcuLi8uLi9jb25maWcvY29uZmlnLXRva2Vucycge1xuICBpbnRlcmZhY2UgQ29uZmlnIGV4dGVuZHMgQ21zU3RydWN0dXJlQ29uZmlnIHt9XG59XG4iXX0=