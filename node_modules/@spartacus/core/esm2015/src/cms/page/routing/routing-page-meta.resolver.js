import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { map, shareReplay, switchMap } from 'rxjs/operators';
import { DefaultRoutePageMetaResolver } from './default-route-page-meta.resolver';
import * as i0 from "@angular/core";
import * as i1 from "../../../routing/services/activated-routes.service";
/**
 * Resolves the page meta based on the Angular Activated Routes
 */
export class RoutingPageMetaResolver {
    constructor(activatedRoutesService, injector) {
        this.activatedRoutesService = activatedRoutesService;
        this.injector = injector;
        /**
         * Array of activated routes, excluding the special Angular `root` route.
         */
        this.routes$ = this.activatedRoutesService.routes$.pipe(
        // drop the first route - the special `root` route:
        map((routes) => (routes = routes.slice(1, routes.length))));
        /**
         * Array of activated routes together with precalculated extras:
         *
         * - route's page meta resolver
         * - route's absolute string URL
         *
         * In case when there is no page meta resolver configured for a specific route,
         * it inherits its parent's resolver.
         *
         * When there is no page meta resolver configured for the highest parent in the hierarchy,
         * it uses the `DefaultRoutePageMetaResolver`.
         */
        this.routesWithExtras$ = this.routes$.pipe(map((routes) => routes.reduce((results, route) => {
            var _a;
            const parent = results.length
                ? results[results.length - 1]
                : {
                    route: null,
                    resolver: this.injector.get(DefaultRoutePageMetaResolver),
                    url: '',
                };
            const resolver = (_a = this.getResolver(route)) !== null && _a !== void 0 ? _a : parent.resolver; // fallback to parent's resolver
            const urlPart = this.getUrlPart(route);
            const url = parent.url + (urlPart ? `/${urlPart}` : ''); // don't add slash for a route with path '', to avoid double slash ...//...
            return results.concat({ route, resolver, url });
        }, [])), shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * Array of breadcrumbs defined for all the activated routes (from the root route to the leaf route).
     * It emits on every completed routing navigation.
     */
    resolveBreadcrumbs(options) {
        return this.routesWithExtras$.pipe(map((routesWithExtras) => (options === null || options === void 0 ? void 0 : options.includeCurrentRoute)
            ? routesWithExtras
            : this.trimCurrentRoute(routesWithExtras)), switchMap((routesWithExtras) => routesWithExtras.length
            ? combineLatest(routesWithExtras.map((routeWithExtras) => this.resolveRouteBreadcrumb(routeWithExtras)))
            : of([])), map((breadcrumbArrays) => breadcrumbArrays.flat()));
    }
    /**
     * Returns the instance of the RoutePageMetaResolver configured for the given activated route.
     * Returns null in case there the resolver can't be injected or is undefined.
     *
     * @param route route to resolve
     */
    getResolver(route) {
        const pageMetaConfig = this.getPageMetaConfig(route);
        if (typeof pageMetaConfig !== 'string' && (pageMetaConfig === null || pageMetaConfig === void 0 ? void 0 : pageMetaConfig.resolver)) {
            return this.injector.get(pageMetaConfig.resolver, null);
        }
        return null;
    }
    /**
     * Resolvers breadcrumb for a specific route
     */
    resolveRouteBreadcrumb({ route, resolver, url, }) {
        const breadcrumbResolver = resolver;
        if (typeof breadcrumbResolver.resolveBreadcrumbs === 'function') {
            return breadcrumbResolver.resolveBreadcrumbs({
                route,
                url,
                pageMetaConfig: this.getPageMetaConfig(route),
            });
        }
        return of([]);
    }
    /**
     * By default in breadcrumbs list we don't want to show a link to the current page, so this function
     * trims the last breadcrumb (the breadcrumb of the current route).
     *
     * This function also handles special case when the current route has a configured empty path ('' route).
     * The '' routes are often a _technical_ routes to organize other routes, assign common guards for its children, etc.
     * It shouldn't happen that '' route has a defined breadcrumb config.
     *
     * In that case, we trim not only the last route ('' route), but also its parent route with non-empty path
     * (which likely defines the breadcrumb config).
     */
    trimCurrentRoute(routesWithExtras) {
        // If the last route is '', we trim:
        // - the '' route
        // - all parent '' routes (until we meet route with non-empty path)
        var _a, _b;
        let i = routesWithExtras.length - 1;
        while (((_b = (_a = routesWithExtras[i]) === null || _a === void 0 ? void 0 : _a.route) === null || _b === void 0 ? void 0 : _b.url.length) === 0 && i >= 0) {
            i--;
        }
        // Finally we trim the last route (the one with non-empty path)
        return routesWithExtras.slice(0, i);
    }
    /**
     * Returns the URL path for the given activated route in a string format.
     * (ActivatedRouteSnapshot#url contains an array of `UrlSegment`s, not a string)
     */
    getUrlPart(route) {
        return route.url.map((urlSegment) => urlSegment.path).join('/');
    }
    /**
     * Returns the breadcrumb config placed in the route's `data` configuration.
     */
    getPageMetaConfig(route) {
        var _a, _b;
        // Note: we use `route.routeConfig.data` (not `route.data`) to save us from
        // an edge case bug. In Angular, by design the `data` of ActivatedRoute is inherited
        // from the parent route, if only the child has an empty path ''.
        // But in any case we don't want the page meta configs to be inherited, so we
        // read data from the original `routeConfig` which is static.
        //
        // Note: we may inherit the parent's page meta resolver in case we don't define it,
        // but we don't want to inherit parent's page meta config!
        return (_b = (_a = route === null || route === void 0 ? void 0 : route.routeConfig) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.cxPageMeta;
    }
}
RoutingPageMetaResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: RoutingPageMetaResolver, deps: [{ token: i1.ActivatedRoutesService }, { token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable });
RoutingPageMetaResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: RoutingPageMetaResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: RoutingPageMetaResolver, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoutesService }, { type: i0.Injector }]; } });
//# sourceMappingURL=data:application/json;base64,