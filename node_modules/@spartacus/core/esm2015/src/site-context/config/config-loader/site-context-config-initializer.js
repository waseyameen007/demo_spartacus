import { Injectable } from '@angular/core';
import { filter, map, take } from 'rxjs/operators';
import { BASE_SITE_CONTEXT_ID, CURRENCY_CONTEXT_ID, LANGUAGE_CONTEXT_ID, THEME_CONTEXT_ID, } from '../../providers/context-ids';
import * as i0 from "@angular/core";
import * as i1 from "../../facade/base-site.service";
import * as i2 from "../../../util/java-reg-exp-converter/java-reg-exp-converter";
import * as i3 from "../../../window/window-ref";
export class SiteContextConfigInitializer {
    constructor(baseSiteService, javaRegExpConverter, winRef) {
        this.baseSiteService = baseSiteService;
        this.javaRegExpConverter = javaRegExpConverter;
        this.winRef = winRef;
        this.scopes = ['context'];
        this.configFactory = () => this.resolveConfig().toPromise();
    }
    get currentUrl() {
        return this.winRef.location.href;
    }
    /**
     * Emits the site context config basing on the current base site data.
     *
     * Completes after emitting the value.
     */
    resolveConfig() {
        return this.baseSiteService.getAll().pipe(map((baseSites) => baseSites === null || baseSites === void 0 ? void 0 : baseSites.find((site) => this.isCurrentBaseSite(site))), filter((baseSite) => {
            if (!baseSite) {
                throw new Error(`Error: Cannot get base site config! Current url (${this.currentUrl}) doesn't match any of url patterns of any base sites.`);
            }
            return Boolean(baseSite);
        }), map((baseSite) => this.getConfig(baseSite)), take(1));
    }
    getConfig(source) {
        var _a, _b, _c, _d;
        const result = {
            context: {
                urlParameters: this.getUrlParams(source.urlEncodingAttributes),
                [BASE_SITE_CONTEXT_ID]: [source.uid],
                [LANGUAGE_CONTEXT_ID]: this.getIsoCodes((_a = source.baseStore) === null || _a === void 0 ? void 0 : _a.languages, source.defaultLanguage || ((_b = source.baseStore) === null || _b === void 0 ? void 0 : _b.defaultLanguage)),
                [CURRENCY_CONTEXT_ID]: this.getIsoCodes((_c = source.baseStore) === null || _c === void 0 ? void 0 : _c.currencies, (_d = source.baseStore) === null || _d === void 0 ? void 0 : _d.defaultCurrency),
                [THEME_CONTEXT_ID]: [source.theme],
            },
        };
        return result;
    }
    isCurrentBaseSite(site) {
        const index = (site.urlPatterns || []).findIndex((javaRegexp) => {
            const jsRegexp = this.javaRegExpConverter.toJsRegExp(javaRegexp);
            if (jsRegexp) {
                const result = jsRegexp.test(this.currentUrl);
                return result;
            }
        });
        return index !== -1;
    }
    /**
     * Returns an array of url encoded site context parameters.
     *
     * It maps the string "storefront" (used in OCC) to the "baseSite" (used in Spartacus)
     */
    getUrlParams(params) {
        const STOREFRONT_PARAM = 'storefront';
        return (params || []).map((param) => param === STOREFRONT_PARAM ? BASE_SITE_CONTEXT_ID : param);
    }
    /**
     * Returns iso codes in a array, where the first element is the default iso code.
     */
    getIsoCodes(elements, defaultElement) {
        if (elements && defaultElement) {
            const result = this.moveToFirst(elements, (el) => el.isocode === defaultElement.isocode).map((el) => el.isocode);
            return result;
        }
    }
    /**
     * Moves to the start of the array the first element that satisfies the given predicate.
     *
     * @param array array to modify
     * @param predicate function called on elements
     */
    moveToFirst(array, predicate) {
        array = [...array];
        const index = array.findIndex(predicate);
        if (index !== -1) {
            const [el] = array.splice(index, 1);
            array.unshift(el);
        }
        return array;
    }
}
SiteContextConfigInitializer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SiteContextConfigInitializer, deps: [{ token: i1.BaseSiteService }, { token: i2.JavaRegExpConverter }, { token: i3.WindowRef }], target: i0.ɵɵFactoryTarget.Injectable });
SiteContextConfigInitializer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SiteContextConfigInitializer, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SiteContextConfigInitializer, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.BaseSiteService }, { type: i2.JavaRegExpConverter }, { type: i3.WindowRef }]; } });
//# sourceMappingURL=data:application/json;base64,