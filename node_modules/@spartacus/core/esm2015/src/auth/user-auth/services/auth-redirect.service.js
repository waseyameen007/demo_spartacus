import { Injectable } from '@angular/core';
import { NavigationEnd } from '@angular/router';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "../../../routing/facade/routing.service";
import * as i2 from "@angular/router";
import * as i3 from "./auth-redirect-storage.service";
import * as i4 from "./auth-flow-routes.service";
/**
 * Responsible for saving last accessed page (or attempted) before login and for redirecting to that page after login.
 */
export class AuthRedirectService {
    /**
     * This service is responsible for remembering the last page before the authentication. "The last page" can be:
     * 1. Just the previously opened page; or
     * 2. The page that we just tried to open, but AuthGuard cancelled it
     *
     * Then, after successful authentication it allows for redirecting to that remembered page via the `redirect()` method.
     *
     * For example:
     * 1. The user opens the product page, then clicks /login link and signs in
     *    -> Then we should redirect to the product page; or
     * 2. The user opens the product page, then he clicks /my-account link,
     *    but is automatically redirected to the login page by the AuthGuard, and he signs in
     *    -> Then we should redirect to the my-account page, not the product page
     */
    constructor(routing, router, authRedirectStorageService, authFlowRoutesService) {
        this.routing = routing;
        this.router = router;
        this.authRedirectStorageService = authRedirectStorageService;
        this.authFlowRoutesService = authFlowRoutesService;
        this.init();
    }
    init() {
        this.subscription = this.router.events.subscribe((event) => {
            if (event instanceof NavigationEnd) {
                this.setRedirectUrl(event.urlAfterRedirects);
            }
        });
    }
    ngOnDestroy() {
        var _a;
        (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
    }
    /**
     * Redirect to saved url (homepage if nothing is saved).
     */
    redirect() {
        this.authRedirectStorageService
            .getRedirectUrl()
            .pipe(take(1))
            .subscribe((redirectUrl) => {
            if (redirectUrl === undefined) {
                this.routing.go('/');
            }
            else {
                this.routing.goByUrl(redirectUrl);
            }
            this.clearRedirectUrl();
        });
    }
    /**
     * Saves url of a page that user wanted to access, but wasn't yet logged in.
     *
     * @deprecated since 4.0 - use `saveCurrentNavigationUrl` method instead
     */
    reportAuthGuard() {
        this.saveCurrentNavigationUrl();
    }
    /**
     * Saves the url of the current navigation as the redirect url, unless
     * the url is a part of the user login flow.
     */
    saveCurrentNavigationUrl() {
        const navigation = this.router.getCurrentNavigation();
        if (!(navigation === null || navigation === void 0 ? void 0 : navigation.finalUrl)) {
            return;
        }
        const url = this.router.serializeUrl(navigation.finalUrl);
        this.setRedirectUrl(url);
    }
    /**
     * @deprecated since 4.0 - method not needed anymore. Every visited URL is now
     *                         remembered automatically as redirect URL on NavigationEnd event.
     */
    reportNotAuthGuard() { }
    /**
     * Save the url as the redirect url, unless it's a part of the user login flow.
     */
    setRedirectUrl(url) {
        if (!this.authFlowRoutesService.isAuthFlow(url)) {
            this.authRedirectStorageService.setRedirectUrl(url);
        }
    }
    /**
     * Sets the redirect URL to undefined.
     */
    clearRedirectUrl() {
        this.authRedirectStorageService.setRedirectUrl(undefined);
    }
}
AuthRedirectService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthRedirectService, deps: [{ token: i1.RoutingService }, { token: i2.Router }, { token: i3.AuthRedirectStorageService }, { token: i4.AuthFlowRoutesService }], target: i0.ɵɵFactoryTarget.Injectable });
AuthRedirectService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthRedirectService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthRedirectService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.Router }, { type: i3.AuthRedirectStorageService }, { type: i4.AuthFlowRoutesService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1yZWRpcmVjdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvYXV0aC91c2VyLWF1dGgvc2VydmljZXMvYXV0aC1yZWRpcmVjdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDdEQsT0FBTyxFQUFTLGFBQWEsRUFBVSxNQUFNLGlCQUFpQixDQUFDO0FBRS9ELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBS3RDOztHQUVHO0FBSUgsTUFBTSxPQUFPLG1CQUFtQjtJQUM5Qjs7Ozs7Ozs7Ozs7OztPQWFHO0lBQ0gsWUFDWSxPQUF1QixFQUN2QixNQUFjLEVBQ2QsMEJBQXNELEVBQ3RELHFCQUE0QztRQUg1QyxZQUFPLEdBQVAsT0FBTyxDQUFnQjtRQUN2QixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsK0JBQTBCLEdBQTFCLDBCQUEwQixDQUE0QjtRQUN0RCwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBRXRELElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFJUyxJQUFJO1FBQ1osSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUNoRSxJQUFJLEtBQUssWUFBWSxhQUFhLEVBQUU7Z0JBQ2xDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDOUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXOztRQUNULE1BQUEsSUFBSSxDQUFDLFlBQVksMENBQUUsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNOLElBQUksQ0FBQywwQkFBMEI7YUFDNUIsY0FBYyxFQUFFO2FBQ2hCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDYixTQUFTLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRTtZQUN6QixJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7Z0JBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ25DO1lBQ0QsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDMUIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGVBQWU7UUFDYixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsd0JBQXdCO1FBQ3RCLE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUN0RCxJQUFJLENBQUMsQ0FBQSxVQUFVLGFBQVYsVUFBVSx1QkFBVixVQUFVLENBQUUsUUFBUSxDQUFBLEVBQUU7WUFDekIsT0FBTztTQUNSO1FBRUQsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzFELElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILGtCQUFrQixLQUFJLENBQUM7SUFFdkI7O09BRUc7SUFDSCxjQUFjLENBQUMsR0FBVztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUMvQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ08sZ0JBQWdCO1FBQ3hCLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDNUQsQ0FBQzs7Z0hBbEdVLG1CQUFtQjtvSEFBbkIsbUJBQW1CLGNBRmxCLE1BQU07MkZBRVAsbUJBQW1CO2tCQUgvQixVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRXZlbnQsIE5hdmlnYXRpb25FbmQsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSb3V0aW5nU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3JvdXRpbmcvZmFjYWRlL3JvdXRpbmcuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRoRmxvd1JvdXRlc1NlcnZpY2UgfSBmcm9tICcuL2F1dGgtZmxvdy1yb3V0ZXMuc2VydmljZSc7XG5pbXBvcnQgeyBBdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZSB9IGZyb20gJy4vYXV0aC1yZWRpcmVjdC1zdG9yYWdlLnNlcnZpY2UnO1xuXG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciBzYXZpbmcgbGFzdCBhY2Nlc3NlZCBwYWdlIChvciBhdHRlbXB0ZWQpIGJlZm9yZSBsb2dpbiBhbmQgZm9yIHJlZGlyZWN0aW5nIHRvIHRoYXQgcGFnZSBhZnRlciBsb2dpbi5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIEF1dGhSZWRpcmVjdFNlcnZpY2UgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAvKipcbiAgICogVGhpcyBzZXJ2aWNlIGlzIHJlc3BvbnNpYmxlIGZvciByZW1lbWJlcmluZyB0aGUgbGFzdCBwYWdlIGJlZm9yZSB0aGUgYXV0aGVudGljYXRpb24uIFwiVGhlIGxhc3QgcGFnZVwiIGNhbiBiZTpcbiAgICogMS4gSnVzdCB0aGUgcHJldmlvdXNseSBvcGVuZWQgcGFnZTsgb3JcbiAgICogMi4gVGhlIHBhZ2UgdGhhdCB3ZSBqdXN0IHRyaWVkIHRvIG9wZW4sIGJ1dCBBdXRoR3VhcmQgY2FuY2VsbGVkIGl0XG4gICAqXG4gICAqIFRoZW4sIGFmdGVyIHN1Y2Nlc3NmdWwgYXV0aGVudGljYXRpb24gaXQgYWxsb3dzIGZvciByZWRpcmVjdGluZyB0byB0aGF0IHJlbWVtYmVyZWQgcGFnZSB2aWEgdGhlIGByZWRpcmVjdCgpYCBtZXRob2QuXG4gICAqXG4gICAqIEZvciBleGFtcGxlOlxuICAgKiAxLiBUaGUgdXNlciBvcGVucyB0aGUgcHJvZHVjdCBwYWdlLCB0aGVuIGNsaWNrcyAvbG9naW4gbGluayBhbmQgc2lnbnMgaW5cbiAgICogICAgLT4gVGhlbiB3ZSBzaG91bGQgcmVkaXJlY3QgdG8gdGhlIHByb2R1Y3QgcGFnZTsgb3JcbiAgICogMi4gVGhlIHVzZXIgb3BlbnMgdGhlIHByb2R1Y3QgcGFnZSwgdGhlbiBoZSBjbGlja3MgL215LWFjY291bnQgbGluayxcbiAgICogICAgYnV0IGlzIGF1dG9tYXRpY2FsbHkgcmVkaXJlY3RlZCB0byB0aGUgbG9naW4gcGFnZSBieSB0aGUgQXV0aEd1YXJkLCBhbmQgaGUgc2lnbnMgaW5cbiAgICogICAgLT4gVGhlbiB3ZSBzaG91bGQgcmVkaXJlY3QgdG8gdGhlIG15LWFjY291bnQgcGFnZSwgbm90IHRoZSBwcm9kdWN0IHBhZ2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByb3V0aW5nOiBSb3V0aW5nU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXIsXG4gICAgcHJvdGVjdGVkIGF1dGhSZWRpcmVjdFN0b3JhZ2VTZXJ2aWNlOiBBdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgYXV0aEZsb3dSb3V0ZXNTZXJ2aWNlOiBBdXRoRmxvd1JvdXRlc1NlcnZpY2VcbiAgKSB7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG5cbiAgcHJvdGVjdGVkIGluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24gPSB0aGlzLnJvdXRlci5ldmVudHMuc3Vic2NyaWJlKChldmVudDogRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIE5hdmlnYXRpb25FbmQpIHtcbiAgICAgICAgdGhpcy5zZXRSZWRpcmVjdFVybChldmVudC51cmxBZnRlclJlZGlyZWN0cyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbj8udW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWRpcmVjdCB0byBzYXZlZCB1cmwgKGhvbWVwYWdlIGlmIG5vdGhpbmcgaXMgc2F2ZWQpLlxuICAgKi9cbiAgcmVkaXJlY3QoKSB7XG4gICAgdGhpcy5hdXRoUmVkaXJlY3RTdG9yYWdlU2VydmljZVxuICAgICAgLmdldFJlZGlyZWN0VXJsKClcbiAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAuc3Vic2NyaWJlKChyZWRpcmVjdFVybCkgPT4ge1xuICAgICAgICBpZiAocmVkaXJlY3RVcmwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMucm91dGluZy5nbygnLycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucm91dGluZy5nb0J5VXJsKHJlZGlyZWN0VXJsKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsZWFyUmVkaXJlY3RVcmwoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmVzIHVybCBvZiBhIHBhZ2UgdGhhdCB1c2VyIHdhbnRlZCB0byBhY2Nlc3MsIGJ1dCB3YXNuJ3QgeWV0IGxvZ2dlZCBpbi5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgNC4wIC0gdXNlIGBzYXZlQ3VycmVudE5hdmlnYXRpb25VcmxgIG1ldGhvZCBpbnN0ZWFkXG4gICAqL1xuICByZXBvcnRBdXRoR3VhcmQoKTogdm9pZCB7XG4gICAgdGhpcy5zYXZlQ3VycmVudE5hdmlnYXRpb25VcmwoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTYXZlcyB0aGUgdXJsIG9mIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gYXMgdGhlIHJlZGlyZWN0IHVybCwgdW5sZXNzXG4gICAqIHRoZSB1cmwgaXMgYSBwYXJ0IG9mIHRoZSB1c2VyIGxvZ2luIGZsb3cuXG4gICAqL1xuICBzYXZlQ3VycmVudE5hdmlnYXRpb25VcmwoKTogdm9pZCB7XG4gICAgY29uc3QgbmF2aWdhdGlvbiA9IHRoaXMucm91dGVyLmdldEN1cnJlbnROYXZpZ2F0aW9uKCk7XG4gICAgaWYgKCFuYXZpZ2F0aW9uPy5maW5hbFVybCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHVybCA9IHRoaXMucm91dGVyLnNlcmlhbGl6ZVVybChuYXZpZ2F0aW9uLmZpbmFsVXJsKTtcbiAgICB0aGlzLnNldFJlZGlyZWN0VXJsKHVybCk7XG4gIH1cblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgNC4wIC0gbWV0aG9kIG5vdCBuZWVkZWQgYW55bW9yZS4gRXZlcnkgdmlzaXRlZCBVUkwgaXMgbm93XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIHJlbWVtYmVyZWQgYXV0b21hdGljYWxseSBhcyByZWRpcmVjdCBVUkwgb24gTmF2aWdhdGlvbkVuZCBldmVudC5cbiAgICovXG4gIHJlcG9ydE5vdEF1dGhHdWFyZCgpIHt9XG5cbiAgLyoqXG4gICAqIFNhdmUgdGhlIHVybCBhcyB0aGUgcmVkaXJlY3QgdXJsLCB1bmxlc3MgaXQncyBhIHBhcnQgb2YgdGhlIHVzZXIgbG9naW4gZmxvdy5cbiAgICovXG4gIHNldFJlZGlyZWN0VXJsKHVybDogc3RyaW5nKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmF1dGhGbG93Um91dGVzU2VydmljZS5pc0F1dGhGbG93KHVybCkpIHtcbiAgICAgIHRoaXMuYXV0aFJlZGlyZWN0U3RvcmFnZVNlcnZpY2Uuc2V0UmVkaXJlY3RVcmwodXJsKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcmVkaXJlY3QgVVJMIHRvIHVuZGVmaW5lZC5cbiAgICovXG4gIHByb3RlY3RlZCBjbGVhclJlZGlyZWN0VXJsKCk6IHZvaWQge1xuICAgIHRoaXMuYXV0aFJlZGlyZWN0U3RvcmFnZVNlcnZpY2Uuc2V0UmVkaXJlY3RVcmwodW5kZWZpbmVkKTtcbiAgfVxufVxuIl19