import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Service serves storage role for AuthRedirectService.
 * Used by AuthStatePersistenceService to store redirect url for OAuth flows that rely on redirects.
 */
export class AuthRedirectStorageService {
    constructor() {
        this.redirectUrl$ = new BehaviorSubject(undefined);
    }
    /**
     * Get redirect url after logging in.
     *
     * @returns observable with the redirect url as string
     */
    getRedirectUrl() {
        return this.redirectUrl$;
    }
    /**
     * Set url to redirect to after login.
     *
     * @param redirectUrl
     */
    setRedirectUrl(redirectUrl) {
        this.redirectUrl$.next(redirectUrl);
    }
}
AuthRedirectStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthRedirectStorageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
AuthRedirectStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthRedirectStorageService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthRedirectStorageService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1yZWRpcmVjdC1zdG9yYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9hdXRoL3VzZXItYXV0aC9zZXJ2aWNlcy9hdXRoLXJlZGlyZWN0LXN0b3JhZ2Uuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7O0FBRW5EOzs7R0FHRztBQUlILE1BQU0sT0FBTywwQkFBMEI7SUFDckM7UUFFUSxpQkFBWSxHQUFtQyxJQUFJLGVBQWUsQ0FFeEUsU0FBUyxDQUFDLENBQUM7SUFKRSxDQUFDO0lBTWhCOzs7O09BSUc7SUFDSCxjQUFjO1FBQ1osT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsY0FBYyxDQUFDLFdBQStCO1FBQzNDLElBQUksQ0FBQyxZQUFvRCxDQUFDLElBQUksQ0FDN0QsV0FBVyxDQUNaLENBQUM7SUFDSixDQUFDOzt1SEF6QlUsMEJBQTBCOzJIQUExQiwwQkFBMEIsY0FGekIsTUFBTTsyRkFFUCwwQkFBMEI7a0JBSHRDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogU2VydmljZSBzZXJ2ZXMgc3RvcmFnZSByb2xlIGZvciBBdXRoUmVkaXJlY3RTZXJ2aWNlLlxuICogVXNlZCBieSBBdXRoU3RhdGVQZXJzaXN0ZW5jZVNlcnZpY2UgdG8gc3RvcmUgcmVkaXJlY3QgdXJsIGZvciBPQXV0aCBmbG93cyB0aGF0IHJlbHkgb24gcmVkaXJlY3RzLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgQXV0aFJlZGlyZWN0U3RvcmFnZVNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHJpdmF0ZSByZWRpcmVjdFVybCQ6IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8XG4gICAgc3RyaW5nIHwgdW5kZWZpbmVkXG4gID4odW5kZWZpbmVkKTtcblxuICAvKipcbiAgICogR2V0IHJlZGlyZWN0IHVybCBhZnRlciBsb2dnaW5nIGluLlxuICAgKlxuICAgKiBAcmV0dXJucyBvYnNlcnZhYmxlIHdpdGggdGhlIHJlZGlyZWN0IHVybCBhcyBzdHJpbmdcbiAgICovXG4gIGdldFJlZGlyZWN0VXJsKCk6IE9ic2VydmFibGU8c3RyaW5nIHwgdW5kZWZpbmVkPiB7XG4gICAgcmV0dXJuIHRoaXMucmVkaXJlY3RVcmwkO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB1cmwgdG8gcmVkaXJlY3QgdG8gYWZ0ZXIgbG9naW4uXG4gICAqXG4gICAqIEBwYXJhbSByZWRpcmVjdFVybFxuICAgKi9cbiAgc2V0UmVkaXJlY3RVcmwocmVkaXJlY3RVcmw6IHN0cmluZyB8IHVuZGVmaW5lZCk6IHZvaWQge1xuICAgICh0aGlzLnJlZGlyZWN0VXJsJCBhcyBCZWhhdmlvclN1YmplY3Q8c3RyaW5nIHwgdW5kZWZpbmVkPikubmV4dChcbiAgICAgIHJlZGlyZWN0VXJsXG4gICAgKTtcbiAgfVxufVxuIl19