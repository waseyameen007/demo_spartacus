import { __awaiter } from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, filter, map, take } from 'rxjs/operators';
import { OCC_USER_ID_CURRENT } from '../../../occ/utils/occ-constants';
import { AuthActions } from '../store/actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "./user-id.service";
import * as i3 from "../services/oauth-lib-wrapper.service";
import * as i4 from "../services/auth-storage.service";
import * as i5 from "../services/auth-redirect.service";
import * as i6 from "../../../routing/facade/routing.service";
/**
 * Auth service for normal user authentication.
 * Use to check auth status, login/logout with different OAuth flows.
 */
export class AuthService {
    constructor(store, userIdService, oAuthLibWrapperService, authStorageService, authRedirectService, routingService) {
        this.store = store;
        this.userIdService = userIdService;
        this.oAuthLibWrapperService = oAuthLibWrapperService;
        this.authStorageService = authStorageService;
        this.authRedirectService = authRedirectService;
        this.routingService = routingService;
        /**
         * Indicates whether the access token is being refreshed
         */
        this.refreshInProgress$ = new BehaviorSubject(false);
        /**
         * Indicates whether the logout is being performed
         */
        this.logoutInProgress$ = new BehaviorSubject(false);
    }
    /**
     * Check params in url and if there is an code/token then try to login with those.
     */
    checkOAuthParamsInUrl() {
        return __awaiter(this, void 0, void 0, function* () {
            // We use the 'token_received' event to check if we have returned
            // from the auth server.
            let tokenReceivedEvent;
            const subscription = this.oAuthLibWrapperService.events$
                .pipe(filter((event) => event.type === 'token_received'), take(1))
                .subscribe((event) => (tokenReceivedEvent = event));
            // The method `oAuthLibWrapperService.tryLogin()` obtains the token either from the URL params
            // or from the storage. To distinguish those 2 cases, we observe the event `token_received`.
            //
            // The event 'token_received' is emitted, when the method `oAuthLibWrapperService.tryLogin()`
            // can derive the token from the URL params (which means we've just returned from
            // an external authorization page to Spartacus).
            //
            // But the event 'token_received' is not emitted when the method `oAuthLibWrapperService.tryLogin()`
            // can obtain the token from the storage (e.g. on refresh of the Spartacus page).
            try {
                const result = yield this.oAuthLibWrapperService.tryLogin();
                const token = this.authStorageService.getItem('access_token');
                // We get the result in the code flow even if we did not logged in that why we also need to check if we have access_token
                if (result && token) {
                    this.userIdService.setUserId(OCC_USER_ID_CURRENT);
                    this.store.dispatch(new AuthActions.Login());
                    // Only redirect if we have received a token,
                    // otherwise we are not returning from authentication server.
                    if (tokenReceivedEvent) {
                        this.authRedirectService.redirect();
                    }
                }
            }
            catch (_a) { }
            subscription.unsubscribe();
        });
    }
    /**
     * Initialize Implicit/Authorization Code flow by redirecting to OAuth server.
     */
    loginWithRedirect() {
        this.oAuthLibWrapperService.initLoginFlow();
        return true;
    }
    /**
     * Loads a new user token with Resource Owner Password Flow.
     * @param userId
     * @param password
     */
    loginWithCredentials(userId, password) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield this.oAuthLibWrapperService.authorizeWithPasswordFlow(userId, password);
                // OCC specific user id handling. Customize when implementing different backend
                this.userIdService.setUserId(OCC_USER_ID_CURRENT);
                this.store.dispatch(new AuthActions.Login());
                this.authRedirectService.redirect();
            }
            catch (_a) { }
        });
    }
    /**
     * Revokes tokens and clears state for logged user (tokens, userId).
     * To perform logout it is best to use `logout` method. Use this method with caution.
     */
    coreLogout() {
        this.setLogoutProgress(true);
        this.userIdService.clearUserId();
        return new Promise((resolve) => {
            this.oAuthLibWrapperService.revokeAndLogout().finally(() => {
                this.store.dispatch(new AuthActions.Logout());
                resolve();
            });
        });
    }
    /**
     * Returns `true` if the user is logged in; and `false` if the user is anonymous.
     */
    isUserLoggedIn() {
        return this.authStorageService.getToken().pipe(map((userToken) => Boolean(userToken === null || userToken === void 0 ? void 0 : userToken.access_token)), distinctUntilChanged());
    }
    /**
     * Logout a storefront customer. It will initialize logout procedure by redirecting to the `logout` endpoint.
     */
    logout() {
        this.routingService.go({ cxRoute: 'logout' });
    }
    /**
     * Start or stop the refresh process
     */
    setRefreshProgress(progress) {
        this.refreshInProgress$.next(progress);
    }
    /**
     * Start or stop the logout process
     */
    setLogoutProgress(progress) {
        this.logoutInProgress$.next(progress);
    }
}
AuthService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthService, deps: [{ token: i1.Store }, { token: i2.UserIdService }, { token: i3.OAuthLibWrapperService }, { token: i4.AuthStorageService }, { token: i5.AuthRedirectService }, { token: i6.RoutingService }], target: i0.ɵɵFactoryTarget.Injectable });
AuthService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AuthService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }, { type: i3.OAuthLibWrapperService }, { type: i4.AuthStorageService }, { type: i5.AuthRedirectService }, { type: i6.RoutingService }]; } });
//# sourceMappingURL=data:application/json;base64,