import { Injectable } from '@angular/core';
import { HttpHeaders, HttpParams } from '@angular/common/http';
import { throwError, forkJoin } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { PRODUCT_INTERESTS_NORMALIZER } from '../../../user/connectors/interests/converters';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "../../services/occ-endpoints.service";
import * as i3 from "../../config/occ-config";
import * as i4 from "../../../util/converter.service";
const headers = new HttpHeaders({
    'Content-Type': 'application/json',
});
export class OccUserInterestsAdapter {
    constructor(http, occEndpoints, config, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.config = config;
        this.converter = converter;
    }
    getInterests(userId, pageSize, currentPage, sort, productCode, notificationType) {
        let params = new HttpParams().set('sort', sort ? sort : 'name:asc');
        if (pageSize) {
            params = params.set('pageSize', pageSize.toString());
        }
        if (currentPage) {
            params = params.set('currentPage', currentPage.toString());
        }
        if (productCode) {
            params = params.set('productCode', productCode);
        }
        if (notificationType) {
            params = params.set('notificationType', notificationType.toString());
        }
        return this.http
            .get(this.occEndpoints.buildUrl('getProductInterests', {
            urlParams: { userId },
        }), {
            headers,
            params,
        })
            .pipe(this.converter.pipeable(PRODUCT_INTERESTS_NORMALIZER), catchError((error) => throwError(error)));
    }
    removeInterest(userId, item) {
        const r = [];
        item.productInterestEntry.forEach((entry) => {
            const params = new HttpParams()
                .set('productCode', item.product.code)
                .set('notificationType', entry.interestType);
            r.push(this.http
                .delete(this.occEndpoints.buildUrl('productInterests', {
                urlParams: { userId },
            }), {
                params: params,
            })
                .pipe(catchError((error) => throwError(error))));
        });
        return forkJoin(r);
    }
    addInterest(userId, productCode, notificationType) {
        const params = new HttpParams()
            .set('productCode', productCode)
            .set('notificationType', notificationType.toString());
        return this.http
            .post(this.occEndpoints.buildUrl('productInterests', {
            urlParams: { userId },
        }), {}, {
            headers,
            params,
        })
            .pipe(catchError((error) => throwError(error)));
    }
}
OccUserInterestsAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccUserInterestsAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i3.OccConfig }, { token: i4.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccUserInterestsAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccUserInterestsAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccUserInterestsAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i3.OccConfig }, { type: i4.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,