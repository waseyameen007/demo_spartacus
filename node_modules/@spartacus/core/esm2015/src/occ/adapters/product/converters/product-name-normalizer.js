import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../../config/occ-config";
export class ProductNameNormalizer {
    constructor(config) {
        this.config = config;
        /**
         * A pretty url should not have any encoded characters, which is why we replace
         * the following character in the product title.
         *
         * See https://developers.google.com/maps/documentation/urls/url-encoding for more
         * information on the characters.
         */
        this.reservedSlugCharacters = ` !*'();:@&=+$,/?%#[]`;
        this.slugChar = '-';
        // created the regex only once
        this.slugRegex = new RegExp(`[${this.reservedSlugCharacters.split('').join('\\')}]`, 'g');
        this.sanitizeMultipleSlugChars = new RegExp(`${this.slugChar}+`, 'g');
    }
    convert(source, target) {
        target = target !== null && target !== void 0 ? target : Object.assign({}, source);
        if (source.name) {
            target.name = this.normalize(source.name);
            target.slug = this.normalizeSlug(source.name);
            target.nameHtml = source.name;
        }
        return target;
    }
    /**
     * Sanitizes the name so that the name doesn't contain html elements.
     */
    normalize(name) {
        return name.replace(/<[^>]*>/g, '');
    }
    /**
     * Provides a title slug for the pretty URL.
     *
     * The name is sanitized from html, trimmed, converted to lowercase and special characters
     * which are encoded are replaced by the slug char (dash by default).
     */
    normalizeSlug(name) {
        return this.normalize(name)
            .trim()
            .toLowerCase()
            .replace(this.slugRegex, this.slugChar)
            .replace(this.sanitizeMultipleSlugChars, this.slugChar);
    }
}
ProductNameNormalizer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductNameNormalizer, deps: [{ token: i1.OccConfig }], target: i0.ɵɵFactoryTarget.Injectable });
ProductNameNormalizer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductNameNormalizer, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductNameNormalizer, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.OccConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1uYW1lLW5vcm1hbGl6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy9vY2MvYWRhcHRlcnMvcHJvZHVjdC9jb252ZXJ0ZXJzL3Byb2R1Y3QtbmFtZS1ub3JtYWxpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQU8zQyxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLFlBQXNCLE1BQWlCO1FBQWpCLFdBQU0sR0FBTixNQUFNLENBQVc7UUFvQnZDOzs7Ozs7V0FNRztRQUNPLDJCQUFzQixHQUFHLHNCQUFzQixDQUFDO1FBQ2hELGFBQVEsR0FBRyxHQUFHLENBQUM7UUFFekIsOEJBQThCO1FBQ3RCLGNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FDNUIsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUN2RCxHQUFHLENBQ0osQ0FBQztRQUNNLDhCQUF5QixHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBbkMvQixDQUFDO0lBRTNDLE9BQU8sQ0FBQyxNQUFtQixFQUFFLE1BQWdCO1FBQzNDLE1BQU0sR0FBRyxNQUFNLGFBQU4sTUFBTSxjQUFOLE1BQU0scUJBQVUsTUFBc0MsQ0FBRSxDQUFDO1FBRWxFLElBQUksTUFBTSxDQUFDLElBQUksRUFBRTtZQUNmLE1BQU0sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUMsTUFBTSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7U0FDL0I7UUFDRCxPQUFPLE1BQWlCLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ08sU0FBUyxDQUFDLElBQVk7UUFDOUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBbUJEOzs7OztPQUtHO0lBQ08sYUFBYSxDQUFDLElBQVk7UUFDbEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQzthQUN4QixJQUFJLEVBQUU7YUFDTixXQUFXLEVBQUU7YUFDYixPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQ3RDLE9BQU8sQ0FBQyxJQUFJLENBQUMseUJBQXlCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzVELENBQUM7O2tIQWxEVSxxQkFBcUI7c0hBQXJCLHFCQUFxQixjQURSLE1BQU07MkZBQ25CLHFCQUFxQjtrQkFEakMsVUFBVTttQkFBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9kdWN0IH0gZnJvbSAnLi4vLi4vLi4vLi4vbW9kZWwvcHJvZHVjdC5tb2RlbCc7XG5pbXBvcnQgeyBDb252ZXJ0ZXIgfSBmcm9tICcuLi8uLi8uLi8uLi91dGlsL2NvbnZlcnRlci5zZXJ2aWNlJztcbmltcG9ydCB7IE9jY0NvbmZpZyB9IGZyb20gJy4uLy4uLy4uL2NvbmZpZy9vY2MtY29uZmlnJztcbmltcG9ydCB7IE9jYyB9IGZyb20gJy4uLy4uLy4uL29jYy1tb2RlbHMvb2NjLm1vZGVscyc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdE5hbWVOb3JtYWxpemVyIGltcGxlbWVudHMgQ29udmVydGVyPE9jYy5Qcm9kdWN0LCBQcm9kdWN0PiB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjb25maWc6IE9jY0NvbmZpZykge31cblxuICBjb252ZXJ0KHNvdXJjZTogT2NjLlByb2R1Y3QsIHRhcmdldD86IFByb2R1Y3QpOiBQcm9kdWN0IHtcbiAgICB0YXJnZXQgPSB0YXJnZXQgPz8geyAuLi4oc291cmNlIGFzIHVua25vd24gYXMgUGFydGlhbDxQcm9kdWN0PikgfTtcblxuICAgIGlmIChzb3VyY2UubmFtZSkge1xuICAgICAgdGFyZ2V0Lm5hbWUgPSB0aGlzLm5vcm1hbGl6ZShzb3VyY2UubmFtZSk7XG4gICAgICB0YXJnZXQuc2x1ZyA9IHRoaXMubm9ybWFsaXplU2x1Zyhzb3VyY2UubmFtZSk7XG4gICAgICB0YXJnZXQubmFtZUh0bWwgPSBzb3VyY2UubmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCBhcyBQcm9kdWN0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNhbml0aXplcyB0aGUgbmFtZSBzbyB0aGF0IHRoZSBuYW1lIGRvZXNuJ3QgY29udGFpbiBodG1sIGVsZW1lbnRzLlxuICAgKi9cbiAgcHJvdGVjdGVkIG5vcm1hbGl6ZShuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBuYW1lLnJlcGxhY2UoLzxbXj5dKj4vZywgJycpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgcHJldHR5IHVybCBzaG91bGQgbm90IGhhdmUgYW55IGVuY29kZWQgY2hhcmFjdGVycywgd2hpY2ggaXMgd2h5IHdlIHJlcGxhY2VcbiAgICogdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXIgaW4gdGhlIHByb2R1Y3QgdGl0bGUuXG4gICAqXG4gICAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vdXJscy91cmwtZW5jb2RpbmcgZm9yIG1vcmVcbiAgICogaW5mb3JtYXRpb24gb24gdGhlIGNoYXJhY3RlcnMuXG4gICAqL1xuICBwcm90ZWN0ZWQgcmVzZXJ2ZWRTbHVnQ2hhcmFjdGVycyA9IGAgISonKCk7OkAmPSskLC8/JSNbXWA7XG4gIHByb3RlY3RlZCBzbHVnQ2hhciA9ICctJztcblxuICAvLyBjcmVhdGVkIHRoZSByZWdleCBvbmx5IG9uY2VcbiAgcHJpdmF0ZSBzbHVnUmVnZXggPSBuZXcgUmVnRXhwKFxuICAgIGBbJHt0aGlzLnJlc2VydmVkU2x1Z0NoYXJhY3RlcnMuc3BsaXQoJycpLmpvaW4oJ1xcXFwnKX1dYCxcbiAgICAnZydcbiAgKTtcbiAgcHJpdmF0ZSBzYW5pdGl6ZU11bHRpcGxlU2x1Z0NoYXJzID0gbmV3IFJlZ0V4cChgJHt0aGlzLnNsdWdDaGFyfStgLCAnZycpO1xuXG4gIC8qKlxuICAgKiBQcm92aWRlcyBhIHRpdGxlIHNsdWcgZm9yIHRoZSBwcmV0dHkgVVJMLlxuICAgKlxuICAgKiBUaGUgbmFtZSBpcyBzYW5pdGl6ZWQgZnJvbSBodG1sLCB0cmltbWVkLCBjb252ZXJ0ZWQgdG8gbG93ZXJjYXNlIGFuZCBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICogd2hpY2ggYXJlIGVuY29kZWQgYXJlIHJlcGxhY2VkIGJ5IHRoZSBzbHVnIGNoYXIgKGRhc2ggYnkgZGVmYXVsdCkuXG4gICAqL1xuICBwcm90ZWN0ZWQgbm9ybWFsaXplU2x1ZyhuYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZShuYW1lKVxuICAgICAgLnRyaW0oKVxuICAgICAgLnRvTG93ZXJDYXNlKClcbiAgICAgIC5yZXBsYWNlKHRoaXMuc2x1Z1JlZ2V4LCB0aGlzLnNsdWdDaGFyKVxuICAgICAgLnJlcGxhY2UodGhpcy5zYW5pdGl6ZU11bHRpcGxlU2x1Z0NoYXJzLCB0aGlzLnNsdWdDaGFyKTtcbiAgfVxufVxuIl19