import { Injectable } from '@angular/core';
import { BehaviorSubject, combineLatest, of } from 'rxjs';
import { filter, map, shareReplay, switchMap, take, tap } from 'rxjs/operators';
import { OCC_USER_ID_ANONYMOUS } from '../../occ/utils/occ-constants';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../user/facade/user.service";
import * as i3 from "./multi-cart.service";
import * as i4 from "../../site-context/facade/base-site.service";
import * as i5 from "../services/cart-config.service";
import * as i6 from "../../auth/user-auth/facade/user-id.service";
export class SelectiveCartService {
    constructor(store, userService, multiCartService, baseSiteService, cartConfigService, userIdService) {
        this.store = store;
        this.userService = userService;
        this.multiCartService = multiCartService;
        this.baseSiteService = baseSiteService;
        this.cartConfigService = cartConfigService;
        this.userIdService = userIdService;
        this.cartId$ = new BehaviorSubject(undefined);
        this.PREVIOUS_USER_ID_INITIAL_VALUE = 'PREVIOUS_USER_ID_INITIAL_VALUE';
        this.previousUserId = this.PREVIOUS_USER_ID_INITIAL_VALUE;
        this.cartSelector$ = this.cartId$.pipe(switchMap((cartId) => {
            this.cartId = cartId;
            return this.multiCartService.getCartEntity(cartId);
        }));
        combineLatest([
            this.userService.get(),
            this.baseSiteService.getActive(),
        ]).subscribe(([user, activeBaseSite]) => {
            if (user && user.customerId && activeBaseSite) {
                this.customerId = user.customerId;
                this.cartId$.next(`selectivecart${activeBaseSite}${this.customerId}`);
            }
            else if (user && !user.customerId) {
                this.cartId$.next(undefined);
            }
        });
        this.userIdService.getUserId().subscribe((userId) => {
            this.userId = userId;
            if (this.isJustLoggedIn(userId)) {
                this.load();
            }
            this.previousUserId = userId;
        });
        this.selectiveCart$ = this.cartSelector$.pipe(map((cartEntity) => {
            return {
                cart: cartEntity.value,
                loading: cartEntity.loading,
                loaded: (cartEntity.error || cartEntity.success) && !cartEntity.loading,
            };
        }), filter(({ loading }) => !loading), tap(({ cart, loaded }) => {
            if (this.cartId && this.isEmpty(cart) && !loaded) {
                this.load();
            }
        }), map(({ cart }) => (cart ? cart : {})), shareReplay({ bufferSize: 1, refCount: true }));
    }
    getCart() {
        return this.selectiveCart$;
    }
    getEntries() {
        return this.multiCartService.getEntries(this.cartId);
    }
    /**
     * Returns true when selective cart is stable (not loading and not pending processes on cart)
     */
    isStable() {
        return this.cartId$.pipe(switchMap((cartId) => this.multiCartService.isStable(cartId)));
    }
    /**
     * Loads logged user's selective cart
     */
    load() {
        if (this.isLoggedIn(this.userId) && this.cartId) {
            this.multiCartService.loadCart({
                userId: this.userId,
                cartId: this.cartId,
            });
        }
    }
    addEntry(productCode, quantity) {
        let loadAttempted = false;
        this.cartSelector$
            .pipe(filter(() => !loadAttempted), switchMap((cartState) => {
            if (this.isEmpty(cartState.value) && !cartState.loading) {
                loadAttempted = true;
                this.load();
            }
            return of(cartState);
        }), filter((cartState) => !this.isEmpty(cartState.value)), take(1))
            .subscribe(() => {
            this.multiCartService.addEntry(this.userId, this.cartId, productCode, quantity);
        });
    }
    removeEntry(entry) {
        this.multiCartService.removeEntry(this.userId, this.cartId, entry.entryNumber);
    }
    updateEntry(entryNumber, quantity) {
        this.multiCartService.updateEntry(this.userId, this.cartId, entryNumber, quantity);
    }
    getEntry(productCode) {
        return this.multiCartService.getEntry(this.cartId, productCode);
    }
    /**
     * Indicates if selectiveCart feature is enabled based on cart configuration.
     */
    isEnabled() {
        return this.cartConfigService.isSelectiveCartEnabled();
    }
    /**
     * Indicates if given cart is empty.
     * Returns true is cart is undefined, null or is an empty object.
     */
    isEmpty(cart) {
        return (!cart || (typeof cart === 'object' && Object.keys(cart).length === 0));
    }
    /**
     * Indicates if a given user is logged in on account different than preceding user account
     */
    isJustLoggedIn(userId) {
        return (this.isLoggedIn(userId) &&
            this.previousUserId !== userId && // *just* logged in
            this.previousUserId !== this.PREVIOUS_USER_ID_INITIAL_VALUE // not app initialization
        );
    }
    /**
     * Indicates if given user is logged in
     */
    isLoggedIn(userId) {
        return typeof userId !== 'undefined' && userId !== OCC_USER_ID_ANONYMOUS;
    }
}
SelectiveCartService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SelectiveCartService, deps: [{ token: i1.Store }, { token: i2.UserService }, { token: i3.MultiCartService }, { token: i4.BaseSiteService }, { token: i5.CartConfigService }, { token: i6.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
SelectiveCartService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SelectiveCartService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SelectiveCartService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserService }, { type: i3.MultiCartService }, { type: i4.BaseSiteService }, { type: i5.CartConfigService }, { type: i6.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,