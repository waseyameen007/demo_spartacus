import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./user-replenishment-order.adapter";
/**
 * @deprecated since 4.2 - use ReplenishmentOrderConnector in @spartacus/order/core
 */
export class UserReplenishmentOrderConnector {
    constructor(adapter) {
        this.adapter = adapter;
    }
    load(userId, replenishmentOrderCode) {
        return this.adapter.load(userId, replenishmentOrderCode);
    }
    loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort) {
        return this.adapter.loadReplenishmentDetailsHistory(userId, replenishmentOrderCode, pageSize, currentPage, sort);
    }
    cancelReplenishmentOrder(userId, replenishmentOrderCode) {
        return this.adapter.cancelReplenishmentOrder(userId, replenishmentOrderCode);
    }
    loadHistory(userId, pageSize, currentPage, sort) {
        return this.adapter.loadHistory(userId, pageSize, currentPage, sort);
    }
}
UserReplenishmentOrderConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserReplenishmentOrderConnector, deps: [{ token: i1.UserReplenishmentOrderAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
UserReplenishmentOrderConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserReplenishmentOrderConnector, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserReplenishmentOrderConnector, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserReplenishmentOrderAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZXBsZW5pc2htZW50LW9yZGVyLmNvbm5lY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3VzZXIvY29ubmVjdG9ycy9yZXBsZW5pc2htZW50LW9yZGVyL3VzZXItcmVwbGVuaXNobWVudC1vcmRlci5jb25uZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBUzNDOztHQUVHO0FBSUgsTUFBTSxPQUFPLCtCQUErQjtJQUMxQyxZQUFzQixPQUFzQztRQUF0QyxZQUFPLEdBQVAsT0FBTyxDQUErQjtJQUFHLENBQUM7SUFFekQsSUFBSSxDQUNULE1BQWMsRUFDZCxzQkFBOEI7UUFFOUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRU0sK0JBQStCLENBQ3BDLE1BQWMsRUFDZCxzQkFBOEIsRUFDOUIsUUFBaUIsRUFDakIsV0FBb0IsRUFDcEIsSUFBYTtRQUViLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQywrQkFBK0IsQ0FDakQsTUFBTSxFQUNOLHNCQUFzQixFQUN0QixRQUFRLEVBQ1IsV0FBVyxFQUNYLElBQUksQ0FDTCxDQUFDO0lBQ0osQ0FBQztJQUVNLHdCQUF3QixDQUM3QixNQUFjLEVBQ2Qsc0JBQThCO1FBRTlCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FDMUMsTUFBTSxFQUNOLHNCQUFzQixDQUN2QixDQUFDO0lBQ0osQ0FBQztJQUVNLFdBQVcsQ0FDaEIsTUFBYyxFQUNkLFFBQWlCLEVBQ2pCLFdBQW9CLEVBQ3BCLElBQWE7UUFFYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7OzRIQTNDVSwrQkFBK0I7Z0lBQS9CLCtCQUErQixjQUY5QixNQUFNOzJGQUVQLCtCQUErQjtrQkFIM0MsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBPcmRlckhpc3RvcnlMaXN0LFxuICBSZXBsZW5pc2htZW50T3JkZXIsXG4gIFJlcGxlbmlzaG1lbnRPcmRlckxpc3QsXG59IGZyb20gJy4uLy4uLy4uL21vZGVsL2luZGV4JztcbmltcG9ydCB7IFVzZXJSZXBsZW5pc2htZW50T3JkZXJBZGFwdGVyIH0gZnJvbSAnLi91c2VyLXJlcGxlbmlzaG1lbnQtb3JkZXIuYWRhcHRlcic7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIFJlcGxlbmlzaG1lbnRPcmRlckNvbm5lY3RvciBpbiBAc3BhcnRhY3VzL29yZGVyL2NvcmVcbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFVzZXJSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgYWRhcHRlcjogVXNlclJlcGxlbmlzaG1lbnRPcmRlckFkYXB0ZXIpIHt9XG5cbiAgcHVibGljIGxvYWQoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgcmVwbGVuaXNobWVudE9yZGVyQ29kZTogc3RyaW5nXG4gICk6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyPiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkKHVzZXJJZCwgcmVwbGVuaXNobWVudE9yZGVyQ29kZSk7XG4gIH1cblxuICBwdWJsaWMgbG9hZFJlcGxlbmlzaG1lbnREZXRhaWxzSGlzdG9yeShcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICByZXBsZW5pc2htZW50T3JkZXJDb2RlOiBzdHJpbmcsXG4gICAgcGFnZVNpemU/OiBudW1iZXIsXG4gICAgY3VycmVudFBhZ2U/OiBudW1iZXIsXG4gICAgc29ydD86IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPE9yZGVySGlzdG9yeUxpc3Q+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmxvYWRSZXBsZW5pc2htZW50RGV0YWlsc0hpc3RvcnkoXG4gICAgICB1c2VySWQsXG4gICAgICByZXBsZW5pc2htZW50T3JkZXJDb2RlLFxuICAgICAgcGFnZVNpemUsXG4gICAgICBjdXJyZW50UGFnZSxcbiAgICAgIHNvcnRcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICB1c2VySWQ6IHN0cmluZyxcbiAgICByZXBsZW5pc2htZW50T3JkZXJDb2RlOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxSZXBsZW5pc2htZW50T3JkZXI+IHtcbiAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICAgIHVzZXJJZCxcbiAgICAgIHJlcGxlbmlzaG1lbnRPcmRlckNvZGVcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGxvYWRIaXN0b3J5KFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIHBhZ2VTaXplPzogbnVtYmVyLFxuICAgIGN1cnJlbnRQYWdlPzogbnVtYmVyLFxuICAgIHNvcnQ/OiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTxSZXBsZW5pc2htZW50T3JkZXJMaXN0PiB7XG4gICAgcmV0dXJuIHRoaXMuYWRhcHRlci5sb2FkSGlzdG9yeSh1c2VySWQsIHBhZ2VTaXplLCBjdXJyZW50UGFnZSwgc29ydCk7XG4gIH1cbn1cbiJdfQ==