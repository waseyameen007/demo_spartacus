import { Injectable } from '@angular/core';
import { select } from '@ngrx/store';
import { map, switchMap } from 'rxjs/operators';
import { UserActions } from '../store/actions/index';
import { UsersSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "../../auth/user-auth/facade/user-id.service";
import * as i3 from "../connectors/address/user-address.connector";
import * as i4 from "../../util/command-query/command.service";
export class UserAddressService {
    constructor(store, userIdService, userAddressConnector, command) {
        this.store = store;
        this.userIdService = userIdService;
        this.userAddressConnector = userAddressConnector;
        this.command = command;
        this.userAddressVerificationCommand = this.command.create((payload) => this.userIdService
            .takeUserId(false)
            .pipe(switchMap((userId) => this.userAddressConnector.verify(userId, payload.address))));
    }
    /**
     * Retrieves user's addresses
     */
    loadAddresses() {
        this.userIdService.takeUserId().subscribe((userId) => {
            this.store.dispatch(new UserActions.LoadUserAddresses(userId));
        });
    }
    /**
     * Adds user address
     * @param address a user address
     */
    addUserAddress(address) {
        this.userIdService.takeUserId().subscribe((userId) => {
            this.store.dispatch(new UserActions.AddUserAddress({
                userId,
                address,
            }));
        });
    }
    /**
     * Sets user address as default
     * @param addressId a user address ID
     */
    setAddressAsDefault(addressId) {
        this.userIdService.takeUserId().subscribe((userId) => {
            this.store.dispatch(new UserActions.UpdateUserAddress({
                userId,
                addressId,
                address: { defaultAddress: true },
            }));
        });
    }
    /**
     * Updates existing user address
     * @param addressId a user address ID
     * @param address a user address
     */
    updateUserAddress(addressId, address) {
        this.userIdService.takeUserId().subscribe((userId) => {
            this.store.dispatch(new UserActions.UpdateUserAddress({
                userId,
                addressId,
                address,
            }));
        });
    }
    /**
     * Deletes existing user address
     * @param addressId a user address ID
     */
    deleteUserAddress(addressId) {
        this.userIdService.takeUserId().subscribe((userId) => {
            this.store.dispatch(new UserActions.DeleteUserAddress({
                userId,
                addressId,
            }));
        });
    }
    /**
     * Returns addresses
     */
    getAddresses() {
        return this.store.pipe(select(UsersSelectors.getAddresses));
    }
    /**
     * Returns a loading flag for addresses
     */
    getAddressesLoading() {
        return this.store.pipe(select(UsersSelectors.getAddressesLoading));
    }
    getAddressesLoadedSuccess() {
        return this.store.pipe(select(UsersSelectors.getAddressesLoadedSuccess));
    }
    /**
     * Retrieves delivery countries
     */
    loadDeliveryCountries() {
        this.store.dispatch(new UserActions.LoadDeliveryCountries());
    }
    /**
     * Returns all delivery countries
     */
    getDeliveryCountries() {
        return this.store.pipe(select(UsersSelectors.getAllDeliveryCountries));
    }
    /**
     * Returns a country based on the provided `isocode`
     * @param isocode an isocode for a country
     */
    getCountry(isocode) {
        return this.store.pipe(select(UsersSelectors.countrySelectorFactory(isocode)));
    }
    /**
     * Retrieves regions for specified country by `countryIsoCode`
     * @param countryIsoCode
     */
    loadRegions(countryIsoCode) {
        this.store.dispatch(new UserActions.LoadRegions(countryIsoCode));
    }
    /**
     * Clear regions in store - useful when changing country
     */
    clearRegions() {
        this.store.dispatch(new UserActions.ClearRegions());
    }
    /**
     * Returns all regions
     */
    getRegions(countryIsoCode) {
        return this.store.pipe(select(UsersSelectors.getRegionsDataAndLoading), map(({ regions, country, loading, loaded }) => {
            if (!countryIsoCode && (loading || loaded)) {
                this.clearRegions();
                return [];
            }
            else if (loading && !loaded) {
                // don't interrupt loading
                return [];
            }
            else if (!loading && countryIsoCode !== country && countryIsoCode) {
                // country changed - clear store and load new regions
                if (country) {
                    this.clearRegions();
                }
                this.loadRegions(countryIsoCode);
                return [];
            }
            return regions;
        }));
    }
    /**
     * Verifies the address
     * @param address : the address to be verified
     */
    verifyAddress(address) {
        return this.userAddressVerificationCommand.execute({ address });
    }
}
UserAddressService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserAddressService, deps: [{ token: i1.Store }, { token: i2.UserIdService }, { token: i3.UserAddressConnector }, { token: i4.CommandService }], target: i0.ɵɵFactoryTarget.Injectable });
UserAddressService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserAddressService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserAddressService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i2.UserIdService }, { type: i3.UserAddressConnector }, { type: i4.CommandService }]; } });
//# sourceMappingURL=data:application/json;base64,