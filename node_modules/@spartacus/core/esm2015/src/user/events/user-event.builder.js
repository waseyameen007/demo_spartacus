import { Injectable } from '@angular/core';
import { UserActions } from '../store/actions/index';
import { AddUserAddressEvent, DeleteUserAddressEvent, UpdateUserAddressEvent, } from './user.events';
import * as i0 from "@angular/core";
import * as i1 from "../../state/event/state-event.service";
export class UserEventBuilder {
    constructor(stateEventService) {
        this.stateEventService = stateEventService;
        this.register();
    }
    /**
     * Registers user events
     */
    register() {
        this.updateUserAddressEvent();
        this.deleteUserAddressEvent();
        this.addUserAddressEvent();
    }
    /**
     * Register an address successfully updated event
     */
    updateUserAddressEvent() {
        this.stateEventService.register({
            action: UserActions.UPDATE_USER_ADDRESS,
            event: UpdateUserAddressEvent,
        });
    }
    addUserAddressEvent() {
        this.stateEventService.register({
            action: UserActions.ADD_USER_ADDRESS,
            event: AddUserAddressEvent,
        });
    }
    deleteUserAddressEvent() {
        this.stateEventService.register({
            action: UserActions.DELETE_USER_ADDRESS,
            event: DeleteUserAddressEvent,
        });
    }
}
UserEventBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserEventBuilder, deps: [{ token: i1.StateEventService }], target: i0.ɵɵFactoryTarget.Injectable });
UserEventBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserEventBuilder });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserEventBuilder, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StateEventService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1ldmVudC5idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvdXNlci9ldmVudHMvdXNlci1ldmVudC5idWlsZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQ3JELE9BQU8sRUFDTCxtQkFBbUIsRUFDbkIsc0JBQXNCLEVBQ3RCLHNCQUFzQixHQUN2QixNQUFNLGVBQWUsQ0FBQzs7O0FBR3ZCLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0IsWUFBc0IsaUJBQW9DO1FBQXBDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDeEQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNPLFFBQVE7UUFDaEIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVEOztPQUVHO0lBQ08sc0JBQXNCO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7WUFDOUIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxtQkFBbUI7WUFDdkMsS0FBSyxFQUFFLHNCQUFzQjtTQUM5QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsbUJBQW1CO1FBQzNCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7WUFDOUIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxnQkFBZ0I7WUFDcEMsS0FBSyxFQUFFLG1CQUFtQjtTQUMzQixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRVMsc0JBQXNCO1FBQzlCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7WUFDOUIsTUFBTSxFQUFFLFdBQVcsQ0FBQyxtQkFBbUI7WUFDdkMsS0FBSyxFQUFFLHNCQUFzQjtTQUM5QixDQUFDLENBQUM7SUFDTCxDQUFDOzs2R0FwQ1UsZ0JBQWdCO2lIQUFoQixnQkFBZ0I7MkZBQWhCLGdCQUFnQjtrQkFENUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN0YXRlRXZlbnRTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc3RhdGUvZXZlbnQvc3RhdGUtZXZlbnQuc2VydmljZSc7XG5pbXBvcnQgeyBVc2VyQWN0aW9ucyB9IGZyb20gJy4uL3N0b3JlL2FjdGlvbnMvaW5kZXgnO1xuaW1wb3J0IHtcbiAgQWRkVXNlckFkZHJlc3NFdmVudCxcbiAgRGVsZXRlVXNlckFkZHJlc3NFdmVudCxcbiAgVXBkYXRlVXNlckFkZHJlc3NFdmVudCxcbn0gZnJvbSAnLi91c2VyLmV2ZW50cyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBVc2VyRXZlbnRCdWlsZGVyIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHN0YXRlRXZlbnRTZXJ2aWNlOiBTdGF0ZUV2ZW50U2VydmljZSkge1xuICAgIHRoaXMucmVnaXN0ZXIoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgdXNlciBldmVudHNcbiAgICovXG4gIHByb3RlY3RlZCByZWdpc3RlcigpOiB2b2lkIHtcbiAgICB0aGlzLnVwZGF0ZVVzZXJBZGRyZXNzRXZlbnQoKTtcbiAgICB0aGlzLmRlbGV0ZVVzZXJBZGRyZXNzRXZlbnQoKTtcbiAgICB0aGlzLmFkZFVzZXJBZGRyZXNzRXZlbnQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBhZGRyZXNzIHN1Y2Nlc3NmdWxseSB1cGRhdGVkIGV2ZW50XG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlVXNlckFkZHJlc3NFdmVudCgpOiB2b2lkIHtcbiAgICB0aGlzLnN0YXRlRXZlbnRTZXJ2aWNlLnJlZ2lzdGVyKHtcbiAgICAgIGFjdGlvbjogVXNlckFjdGlvbnMuVVBEQVRFX1VTRVJfQUREUkVTUyxcbiAgICAgIGV2ZW50OiBVcGRhdGVVc2VyQWRkcmVzc0V2ZW50LFxuICAgIH0pO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZFVzZXJBZGRyZXNzRXZlbnQoKTogdm9pZCB7XG4gICAgdGhpcy5zdGF0ZUV2ZW50U2VydmljZS5yZWdpc3Rlcih7XG4gICAgICBhY3Rpb246IFVzZXJBY3Rpb25zLkFERF9VU0VSX0FERFJFU1MsXG4gICAgICBldmVudDogQWRkVXNlckFkZHJlc3NFdmVudCxcbiAgICB9KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBkZWxldGVVc2VyQWRkcmVzc0V2ZW50KCk6IHZvaWQge1xuICAgIHRoaXMuc3RhdGVFdmVudFNlcnZpY2UucmVnaXN0ZXIoe1xuICAgICAgYWN0aW9uOiBVc2VyQWN0aW9ucy5ERUxFVEVfVVNFUl9BRERSRVNTLFxuICAgICAgZXZlbnQ6IERlbGV0ZVVzZXJBZGRyZXNzRXZlbnQsXG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==