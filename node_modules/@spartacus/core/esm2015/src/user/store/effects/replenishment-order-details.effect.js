import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { GlobalMessageType, } from '../../../global-message/index';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/replenishment-order/user-replenishment-order.connector";
import * as i3 from "../../../global-message/index";
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ReplenishmentOrderDetailsEffect {
    constructor(actions$, replenishmentOrderConnector, globalMessageService) {
        this.actions$ = actions$;
        this.replenishmentOrderConnector = replenishmentOrderConnector;
        this.globalMessageService = globalMessageService;
        this.loadReplenishmentOrderDetails$ = this.actions$.pipe(ofType(UserActions.LOAD_REPLENISHMENT_ORDER_DETAILS), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .load(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => {
                return new UserActions.LoadReplenishmentOrderDetailsSuccess(replenishmentOrder);
            }), catchError((error) => of(new UserActions.LoadReplenishmentOrderDetailsFail(normalizeHttpError(error)))));
        }));
        this.cancelReplenishmentOrder$ = this.actions$.pipe(ofType(UserActions.CANCEL_REPLENISHMENT_ORDER), map((action) => action.payload), switchMap((payload) => {
            return this.replenishmentOrderConnector
                .cancelReplenishmentOrder(payload.userId, payload.replenishmentOrderCode)
                .pipe(map((replenishmentOrder) => new UserActions.CancelReplenishmentOrderSuccess(replenishmentOrder)), catchError((error) => {
                var _a;
                (_a = error === null || error === void 0 ? void 0 : error.error) === null || _a === void 0 ? void 0 : _a.errors.forEach((err) => this.globalMessageService.add(err.message, GlobalMessageType.MSG_TYPE_ERROR));
                return of(new UserActions.CancelReplenishmentOrderFail(normalizeHttpError(error)));
            }));
        }));
    }
}
ReplenishmentOrderDetailsEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderDetailsEffect, deps: [{ token: i1.Actions }, { token: i2.UserReplenishmentOrderConnector }, { token: i3.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
ReplenishmentOrderDetailsEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderDetailsEffect });
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "loadReplenishmentOrderDetails$", void 0);
__decorate([
    Effect()
], ReplenishmentOrderDetailsEffect.prototype, "cancelReplenishmentOrder$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderDetailsEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserReplenishmentOrderConnector }, { type: i3.GlobalMessageService }]; }, propDecorators: { loadReplenishmentOrderDetails$: [], cancelReplenishmentOrder$: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzLmVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3VzZXIvc3RvcmUvZWZmZWN0cy9yZXBsZW5pc2htZW50LW9yZGVyLWRldGFpbHMuZWZmZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBVyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3hELE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUVMLGlCQUFpQixHQUNsQixNQUFNLCtCQUErQixDQUFDO0FBRXZDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7QUFFL0M7O0dBRUc7QUFFSCxNQUFNLE9BQU8sK0JBQStCO0lBZ0UxQyxZQUNVLFFBQWlCLEVBQ2pCLDJCQUE0RCxFQUM1RCxvQkFBMEM7UUFGMUMsYUFBUSxHQUFSLFFBQVEsQ0FBUztRQUNqQixnQ0FBMkIsR0FBM0IsMkJBQTJCLENBQWlDO1FBQzVELHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFqRXBELG1DQUE4QixHQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxnQ0FBZ0MsQ0FBQyxFQUNwRCxHQUFHLENBQ0QsQ0FBQyxNQUFpRCxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUN0RSxFQUNELFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLHNCQUFzQixDQUFDO2lCQUNwRCxJQUFJLENBQ0gsR0FBRyxDQUFDLENBQUMsa0JBQXNDLEVBQUUsRUFBRTtnQkFDN0MsT0FBTyxJQUFJLFdBQVcsQ0FBQyxvQ0FBb0MsQ0FDekQsa0JBQWtCLENBQ25CLENBQUM7WUFDSixDQUFDLENBQUMsRUFDRixVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUNuQixFQUFFLENBQ0EsSUFBSSxXQUFXLENBQUMsaUNBQWlDLENBQy9DLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUNGLENBQ0YsQ0FDRixDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FBQztRQUdKLDhCQUF5QixHQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FDaEIsTUFBTSxDQUFDLFdBQVcsQ0FBQywwQkFBMEIsQ0FBQyxFQUM5QyxHQUFHLENBQUMsQ0FBQyxNQUE0QyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQ3JFLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3BCLE9BQU8sSUFBSSxDQUFDLDJCQUEyQjtpQkFDcEMsd0JBQXdCLENBQ3ZCLE9BQU8sQ0FBQyxNQUFNLEVBQ2QsT0FBTyxDQUFDLHNCQUFzQixDQUMvQjtpQkFDQSxJQUFJLENBQ0gsR0FBRyxDQUNELENBQUMsa0JBQXNDLEVBQUUsRUFBRSxDQUN6QyxJQUFJLFdBQVcsQ0FBQywrQkFBK0IsQ0FDN0Msa0JBQWtCLENBQ25CLENBQ0osRUFDRCxVQUFVLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTs7Z0JBQ25CLE1BQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEtBQUssMENBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQ25DLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLENBQzNCLEdBQUcsQ0FBQyxPQUFPLEVBQ1gsaUJBQWlCLENBQUMsY0FBYyxDQUNqQyxDQUNGLENBQUM7Z0JBRUYsT0FBTyxFQUFFLENBQ1AsSUFBSSxXQUFXLENBQUMsNEJBQTRCLENBQzFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUMxQixDQUNGLENBQUM7WUFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQU1ELENBQUM7OzRIQXBFTywrQkFBK0I7Z0lBQS9CLCtCQUErQjtBQUUxQztJQURDLE1BQU0sRUFBRTt1RkF5Qkw7QUFHSjtJQURDLE1BQU0sRUFBRTtrRkFrQ0w7MkZBOURPLCtCQUErQjtrQkFEM0MsVUFBVTsrS0FHVCw4QkFBOEIsTUEyQjlCLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnMsIEVmZmVjdCwgb2ZUeXBlIH0gZnJvbSAnQG5ncngvZWZmZWN0cyc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY2F0Y2hFcnJvciwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1xuICBHbG9iYWxNZXNzYWdlU2VydmljZSxcbiAgR2xvYmFsTWVzc2FnZVR5cGUsXG59IGZyb20gJy4uLy4uLy4uL2dsb2JhbC1tZXNzYWdlL2luZGV4JztcbmltcG9ydCB7IFJlcGxlbmlzaG1lbnRPcmRlciB9IGZyb20gJy4uLy4uLy4uL21vZGVsL3JlcGxlbmlzaG1lbnQtb3JkZXIubW9kZWwnO1xuaW1wb3J0IHsgbm9ybWFsaXplSHR0cEVycm9yIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9ub3JtYWxpemUtaHR0cC1lcnJvcic7XG5pbXBvcnQgeyBVc2VyUmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yIH0gZnJvbSAnLi4vLi4vY29ubmVjdG9ycy9yZXBsZW5pc2htZW50LW9yZGVyL3VzZXItcmVwbGVuaXNobWVudC1vcmRlci5jb25uZWN0b3InO1xuaW1wb3J0IHsgVXNlckFjdGlvbnMgfSBmcm9tICcuLi9hY3Rpb25zL2luZGV4JztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSA0LjIgLSB1c2Ugb3JkZXIgbGliIGluc3RlYWRcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNFZmZlY3Qge1xuICBARWZmZWN0KClcbiAgbG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHMkOiBPYnNlcnZhYmxlPFVzZXJBY3Rpb25zLlJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNBY3Rpb24+ID1cbiAgICB0aGlzLmFjdGlvbnMkLnBpcGUoXG4gICAgICBvZlR5cGUoVXNlckFjdGlvbnMuTE9BRF9SRVBMRU5JU0hNRU5UX09SREVSX0RFVEFJTFMpLFxuICAgICAgbWFwKFxuICAgICAgICAoYWN0aW9uOiBVc2VyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlscykgPT4gYWN0aW9uLnBheWxvYWRcbiAgICAgICksXG4gICAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICAgICAgICAgLmxvYWQocGF5bG9hZC51c2VySWQsIHBheWxvYWQucmVwbGVuaXNobWVudE9yZGVyQ29kZSlcbiAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgIG1hcCgocmVwbGVuaXNobWVudE9yZGVyOiBSZXBsZW5pc2htZW50T3JkZXIpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVc2VyQWN0aW9ucy5Mb2FkUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc1N1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgcmVwbGVuaXNobWVudE9yZGVyXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycm9yKSA9PlxuICAgICAgICAgICAgICBvZihcbiAgICAgICAgICAgICAgICBuZXcgVXNlckFjdGlvbnMuTG9hZFJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNGYWlsKFxuICAgICAgICAgICAgICAgICAgbm9ybWFsaXplSHR0cEVycm9yKGVycm9yKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgQEVmZmVjdCgpXG4gIGNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlciQ6IE9ic2VydmFibGU8VXNlckFjdGlvbnMuUmVwbGVuaXNobWVudE9yZGVyRGV0YWlsc0FjdGlvbj4gPVxuICAgIHRoaXMuYWN0aW9ucyQucGlwZShcbiAgICAgIG9mVHlwZShVc2VyQWN0aW9ucy5DQU5DRUxfUkVQTEVOSVNITUVOVF9PUkRFUiksXG4gICAgICBtYXAoKGFjdGlvbjogVXNlckFjdGlvbnMuQ2FuY2VsUmVwbGVuaXNobWVudE9yZGVyKSA9PiBhY3Rpb24ucGF5bG9hZCksXG4gICAgICBzd2l0Y2hNYXAoKHBheWxvYWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVwbGVuaXNobWVudE9yZGVyQ29ubmVjdG9yXG4gICAgICAgICAgLmNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcihcbiAgICAgICAgICAgIHBheWxvYWQudXNlcklkLFxuICAgICAgICAgICAgcGF5bG9hZC5yZXBsZW5pc2htZW50T3JkZXJDb2RlXG4gICAgICAgICAgKVxuICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAocmVwbGVuaXNobWVudE9yZGVyOiBSZXBsZW5pc2htZW50T3JkZXIpID0+XG4gICAgICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlclN1Y2Nlc3MoXG4gICAgICAgICAgICAgICAgICByZXBsZW5pc2htZW50T3JkZXJcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgZXJyb3I/LmVycm9yPy5lcnJvcnMuZm9yRWFjaCgoZXJyKSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuZ2xvYmFsTWVzc2FnZVNlcnZpY2UuYWRkKFxuICAgICAgICAgICAgICAgICAgZXJyLm1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICBHbG9iYWxNZXNzYWdlVHlwZS5NU0dfVFlQRV9FUlJPUlxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICByZXR1cm4gb2YoXG4gICAgICAgICAgICAgICAgbmV3IFVzZXJBY3Rpb25zLkNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlckZhaWwoXG4gICAgICAgICAgICAgICAgICBub3JtYWxpemVIdHRwRXJyb3IoZXJyb3IpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYWN0aW9ucyQ6IEFjdGlvbnMsXG4gICAgcHJpdmF0ZSByZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3I6IFVzZXJSZXBsZW5pc2htZW50T3JkZXJDb25uZWN0b3IsXG4gICAgcHJpdmF0ZSBnbG9iYWxNZXNzYWdlU2VydmljZTogR2xvYmFsTWVzc2FnZVNlcnZpY2VcbiAgKSB7fVxufVxuIl19