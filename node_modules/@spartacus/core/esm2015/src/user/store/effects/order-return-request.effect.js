import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import { normalizeHttpError } from '../../../util/normalize-http-error';
import { UserActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/order/user-order.connector";
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class OrderReturnRequestEffect {
    constructor(actions$, orderConnector) {
        this.actions$ = actions$;
        this.orderConnector = orderConnector;
        this.createReturnRequest$ = this.actions$.pipe(ofType(UserActions.CREATE_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .return(payload.userId, payload.returnRequestInput)
                .pipe(map((returnRequest) => new UserActions.CreateOrderReturnRequestSuccess(returnRequest)), catchError((error) => of(new UserActions.CreateOrderReturnRequestFail(normalizeHttpError(error)))));
        }));
        this.loadReturnRequest$ = this.actions$.pipe(ofType(UserActions.LOAD_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .getReturnRequestDetail(payload.userId, payload.returnRequestCode)
                .pipe(map((returnRequest) => new UserActions.LoadOrderReturnRequestSuccess(returnRequest)), catchError((error) => of(new UserActions.LoadOrderReturnRequestFail(normalizeHttpError(error)))));
        }));
        this.cancelReturnRequest$ = this.actions$.pipe(ofType(UserActions.CANCEL_ORDER_RETURN_REQUEST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .cancelReturnRequest(payload.userId, payload.returnRequestCode, payload.returnRequestModification)
                .pipe(map(() => new UserActions.CancelOrderReturnRequestSuccess()), catchError((error) => of(new UserActions.CancelOrderReturnRequestFail(normalizeHttpError(error)))));
        }));
        this.loadReturnRequestList$ = this.actions$.pipe(ofType(UserActions.LOAD_ORDER_RETURN_REQUEST_LIST), map((action) => action.payload), switchMap((payload) => {
            return this.orderConnector
                .getReturnRequestList(payload.userId, payload.pageSize, payload.currentPage, payload.sort)
                .pipe(map((returnRequestList) => new UserActions.LoadOrderReturnRequestListSuccess(returnRequestList)), catchError((error) => of(new UserActions.LoadOrderReturnRequestListFail(normalizeHttpError(error)))));
        }));
    }
}
OrderReturnRequestEffect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestEffect, deps: [{ token: i1.Actions }, { token: i2.UserOrderConnector }], target: i0.ɵɵFactoryTarget.Injectable });
OrderReturnRequestEffect.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestEffect });
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "createReturnRequest$", void 0);
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "loadReturnRequest$", void 0);
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "cancelReturnRequest$", void 0);
__decorate([
    Effect()
], OrderReturnRequestEffect.prototype, "loadReturnRequestList$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OrderReturnRequestEffect, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.UserOrderConnector }]; }, propDecorators: { createReturnRequest$: [], loadReturnRequest$: [], cancelReturnRequest$: [], loadReturnRequestList$: [] } });
//# sourceMappingURL=data:application/json;base64,