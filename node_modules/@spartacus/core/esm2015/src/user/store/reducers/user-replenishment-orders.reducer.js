import { UserActions } from '../actions/index';
export const initialState = {
    replenishmentOrders: [],
    pagination: {},
    sorts: [],
};
/**
 * @deprecated since 4.2 - use order lib instead
 */
export function reducer(state = initialState, action) {
    switch (action.type) {
        case UserActions.LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS: {
            return action.payload ? action.payload : initialState;
        }
        case UserActions.CANCEL_REPLENISHMENT_ORDER_SUCCESS: {
            const cancelledReplenishmentOrder = action.payload;
            const userReplenishmentOrders = [...state.replenishmentOrders];
            const index = userReplenishmentOrders.findIndex((replenishmentOrder) => replenishmentOrder.replenishmentOrderCode ===
                cancelledReplenishmentOrder.replenishmentOrderCode);
            if (index === -1) {
                return initialState;
            }
            else {
                userReplenishmentOrders[index] = Object.assign({}, cancelledReplenishmentOrder);
            }
            return Object.assign(Object.assign({}, state), { replenishmentOrders: userReplenishmentOrders });
        }
    }
    return state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZXBsZW5pc2htZW50LW9yZGVycy5yZWR1Y2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvdXNlci9zdG9yZS9yZWR1Y2Vycy91c2VyLXJlcGxlbmlzaG1lbnQtb3JkZXJzLnJlZHVjZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBMkI7SUFDbEQsbUJBQW1CLEVBQUUsRUFBRTtJQUN2QixVQUFVLEVBQUUsRUFBRTtJQUNkLEtBQUssRUFBRSxFQUFFO0NBQ1YsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxVQUFVLE9BQU8sQ0FDckIsS0FBSyxHQUFHLFlBQVksRUFDcEIsTUFFK0M7SUFFL0MsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssV0FBVyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7WUFDdkQsT0FBTyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUM7U0FDdkQ7UUFFRCxLQUFLLFdBQVcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1lBQ25ELE1BQU0sMkJBQTJCLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNuRCxNQUFNLHVCQUF1QixHQUFHLENBQUMsR0FBRyxLQUFLLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUUvRCxNQUFNLEtBQUssR0FBRyx1QkFBdUIsQ0FBQyxTQUFTLENBQzdDLENBQUMsa0JBQXNDLEVBQUUsRUFBRSxDQUN6QyxrQkFBa0IsQ0FBQyxzQkFBc0I7Z0JBQ3pDLDJCQUEyQixDQUFDLHNCQUFzQixDQUNyRCxDQUFDO1lBRUYsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQ2hCLE9BQU8sWUFBWSxDQUFDO2FBQ3JCO2lCQUFNO2dCQUNMLHVCQUF1QixDQUFDLEtBQUssQ0FBQyxxQkFDekIsMkJBQTJCLENBQy9CLENBQUM7YUFDSDtZQUVELHVDQUFZLEtBQUssS0FBRSxtQkFBbUIsRUFBRSx1QkFBdUIsSUFBRztTQUNuRTtLQUNGO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgUmVwbGVuaXNobWVudE9yZGVyLFxuICBSZXBsZW5pc2htZW50T3JkZXJMaXN0LFxufSBmcm9tICcuLi8uLi8uLi9tb2RlbC9yZXBsZW5pc2htZW50LW9yZGVyLm1vZGVsJztcbmltcG9ydCB7IFVzZXJBY3Rpb25zIH0gZnJvbSAnLi4vYWN0aW9ucy9pbmRleCc7XG5leHBvcnQgY29uc3QgaW5pdGlhbFN0YXRlOiBSZXBsZW5pc2htZW50T3JkZXJMaXN0ID0ge1xuICByZXBsZW5pc2htZW50T3JkZXJzOiBbXSxcbiAgcGFnaW5hdGlvbjoge30sXG4gIHNvcnRzOiBbXSxcbn07XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VyKFxuICBzdGF0ZSA9IGluaXRpYWxTdGF0ZSxcbiAgYWN0aW9uOlxuICAgIHwgVXNlckFjdGlvbnMuVXNlclJlcGxlbmlzaG1lbnRPcmRlcnNBY3Rpb25cbiAgICB8IFVzZXJBY3Rpb25zLlJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNBY3Rpb25cbik6IFJlcGxlbmlzaG1lbnRPcmRlckxpc3Qge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBVc2VyQWN0aW9ucy5MT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlNfU1VDQ0VTUzoge1xuICAgICAgcmV0dXJuIGFjdGlvbi5wYXlsb2FkID8gYWN0aW9uLnBheWxvYWQgOiBpbml0aWFsU3RhdGU7XG4gICAgfVxuXG4gICAgY2FzZSBVc2VyQWN0aW9ucy5DQU5DRUxfUkVQTEVOSVNITUVOVF9PUkRFUl9TVUNDRVNTOiB7XG4gICAgICBjb25zdCBjYW5jZWxsZWRSZXBsZW5pc2htZW50T3JkZXIgPSBhY3Rpb24ucGF5bG9hZDtcbiAgICAgIGNvbnN0IHVzZXJSZXBsZW5pc2htZW50T3JkZXJzID0gWy4uLnN0YXRlLnJlcGxlbmlzaG1lbnRPcmRlcnNdO1xuXG4gICAgICBjb25zdCBpbmRleCA9IHVzZXJSZXBsZW5pc2htZW50T3JkZXJzLmZpbmRJbmRleChcbiAgICAgICAgKHJlcGxlbmlzaG1lbnRPcmRlcjogUmVwbGVuaXNobWVudE9yZGVyKSA9PlxuICAgICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlci5yZXBsZW5pc2htZW50T3JkZXJDb2RlID09PVxuICAgICAgICAgIGNhbmNlbGxlZFJlcGxlbmlzaG1lbnRPcmRlci5yZXBsZW5pc2htZW50T3JkZXJDb2RlXG4gICAgICApO1xuXG4gICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBpbml0aWFsU3RhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB1c2VyUmVwbGVuaXNobWVudE9yZGVyc1tpbmRleF0gPSB7XG4gICAgICAgICAgLi4uY2FuY2VsbGVkUmVwbGVuaXNobWVudE9yZGVyLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgcmVwbGVuaXNobWVudE9yZGVyczogdXNlclJlcGxlbmlzaG1lbnRPcmRlcnMgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuIl19