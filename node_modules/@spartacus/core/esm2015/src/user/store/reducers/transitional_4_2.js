import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { CUSTOMER_COUPONS, NOTIFICATION_PREFERENCES, PRODUCT_INTERESTS, REGIONS, USER_ADDRESSES, USER_CONSENTS, USER_COST_CENTERS, USER_PAYMENT_METHODS, } from '../user-state';
import * as fromBillingCountriesReducer from './billing-countries.reducer';
import * as fromCustomerCouponReducer from './customer-coupon.reducer';
import * as fromDeliveryCountries from './delivery-countries.reducer';
import { reducerToken } from './index';
import * as fromNotificationPreferenceReducer from './notification-preference.reducer';
import * as fromPaymentReducer from './payment-methods.reducer';
import * as fromInterestsReducer from './product-interests.reducer';
import * as fromRegionsReducer from './regions.reducer';
import * as fromAddressesReducer from './user-addresses.reducer';
import * as fromUserConsentsReducer from './user-consents.reducer';
import * as fromCostCenterReducer from './user-cost-center.reducer';
export function getReducersTransitional_4_2() {
    return {
        addresses: loaderReducer(USER_ADDRESSES, fromAddressesReducer.reducer),
        billingCountries: fromBillingCountriesReducer.reducer,
        consents: loaderReducer(USER_CONSENTS, fromUserConsentsReducer.reducer),
        payments: loaderReducer(USER_PAYMENT_METHODS, fromPaymentReducer.reducer),
        countries: fromDeliveryCountries.reducer,
        regions: loaderReducer(REGIONS, fromRegionsReducer.reducer),
        customerCoupons: loaderReducer(CUSTOMER_COUPONS, fromCustomerCouponReducer.reducer),
        notificationPreferences: loaderReducer(NOTIFICATION_PREFERENCES, fromNotificationPreferenceReducer.reducer),
        productInterests: loaderReducer(PRODUCT_INTERESTS, fromInterestsReducer.reducer),
        costCenters: loaderReducer(USER_COST_CENTERS, fromCostCenterReducer.reducer),
    };
}
export const reducerTransitional_4_2_Provider = {
    provide: reducerToken,
    useFactory: getReducersTransitional_4_2,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNpdGlvbmFsXzRfMi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvc3JjL3VzZXIvc3RvcmUvcmVkdWNlcnMvdHJhbnNpdGlvbmFsXzRfMi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFTQSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDM0UsT0FBTyxFQUNMLGdCQUFnQixFQUNoQix3QkFBd0IsRUFDeEIsaUJBQWlCLEVBQ2pCLE9BQU8sRUFHUCxjQUFjLEVBQ2QsYUFBYSxFQUNiLGlCQUFpQixFQUNqQixvQkFBb0IsR0FDckIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxLQUFLLDJCQUEyQixNQUFNLDZCQUE2QixDQUFDO0FBQzNFLE9BQU8sS0FBSyx5QkFBeUIsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sOEJBQThCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEtBQUssaUNBQWlDLE1BQU0sbUNBQW1DLENBQUM7QUFDdkYsT0FBTyxLQUFLLGtCQUFrQixNQUFNLDJCQUEyQixDQUFDO0FBQ2hFLE9BQU8sS0FBSyxvQkFBb0IsTUFBTSw2QkFBNkIsQ0FBQztBQUNwRSxPQUFPLEtBQUssa0JBQWtCLE1BQU0sbUJBQW1CLENBQUM7QUFDeEQsT0FBTyxLQUFLLG9CQUFvQixNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sS0FBSyx1QkFBdUIsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRSxPQUFPLEtBQUsscUJBQXFCLE1BQU0sNEJBQTRCLENBQUM7QUFFcEUsTUFBTSxVQUFVLDJCQUEyQjtJQUd6QyxPQUFPO1FBQ0wsU0FBUyxFQUFFLGFBQWEsQ0FDdEIsY0FBYyxFQUNkLG9CQUFvQixDQUFDLE9BQU8sQ0FDN0I7UUFDRCxnQkFBZ0IsRUFBRSwyQkFBMkIsQ0FBQyxPQUFPO1FBQ3JELFFBQVEsRUFBRSxhQUFhLENBQ3JCLGFBQWEsRUFDYix1QkFBdUIsQ0FBQyxPQUFPLENBQ2hDO1FBQ0QsUUFBUSxFQUFFLGFBQWEsQ0FDckIsb0JBQW9CLEVBQ3BCLGtCQUFrQixDQUFDLE9BQU8sQ0FDM0I7UUFDRCxTQUFTLEVBQUUscUJBQXFCLENBQUMsT0FBTztRQUN4QyxPQUFPLEVBQUUsYUFBYSxDQUFlLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxPQUFPLENBQUM7UUFDekUsZUFBZSxFQUFFLGFBQWEsQ0FDNUIsZ0JBQWdCLEVBQ2hCLHlCQUF5QixDQUFDLE9BQU8sQ0FDbEM7UUFDRCx1QkFBdUIsRUFBRSxhQUFhLENBQ3BDLHdCQUF3QixFQUN4QixpQ0FBaUMsQ0FBQyxPQUFPLENBQzFDO1FBQ0QsZ0JBQWdCLEVBQUUsYUFBYSxDQUM3QixpQkFBaUIsRUFDakIsb0JBQW9CLENBQUMsT0FBTyxDQUM3QjtRQUNELFdBQVcsRUFBRSxhQUFhLENBQ3hCLGlCQUFpQixFQUNqQixxQkFBcUIsQ0FBQyxPQUFPLENBQzlCO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBYTtJQUN4RCxPQUFPLEVBQUUsWUFBWTtJQUNyQixVQUFVLEVBQUUsMkJBQTJCO0NBQ3hDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcm92aWRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aW9uUmVkdWNlck1hcCB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7IEFkZHJlc3MgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcbmltcG9ydCB7IFBheW1lbnREZXRhaWxzIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY2FydC5tb2RlbCc7XG5pbXBvcnQgeyBDb25zZW50VGVtcGxhdGUgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9jb25zZW50Lm1vZGVsJztcbmltcG9ydCB7IEN1c3RvbWVyQ291cG9uU2VhcmNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvY3VzdG9tZXItY291cG9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWNhdGlvblByZWZlcmVuY2UgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9ub3RpZmljYXRpb24tcHJlZmVyZW5jZS5tb2RlbCc7XG5pbXBvcnQgeyBDb3N0Q2VudGVyIH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvb3JnLXVuaXQubW9kZWwnO1xuaW1wb3J0IHsgUHJvZHVjdEludGVyZXN0U2VhcmNoUmVzdWx0IH0gZnJvbSAnLi4vLi4vLi4vbW9kZWwvcHJvZHVjdC1pbnRlcmVzdC5tb2RlbCc7XG5pbXBvcnQgeyBsb2FkZXJSZWR1Y2VyIH0gZnJvbSAnLi4vLi4vLi4vc3RhdGUvdXRpbHMvbG9hZGVyL2xvYWRlci5yZWR1Y2VyJztcbmltcG9ydCB7XG4gIENVU1RPTUVSX0NPVVBPTlMsXG4gIE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyxcbiAgUFJPRFVDVF9JTlRFUkVTVFMsXG4gIFJFR0lPTlMsXG4gIFJlZ2lvbnNTdGF0ZSxcbiAgVXNlclN0YXRlLFxuICBVU0VSX0FERFJFU1NFUyxcbiAgVVNFUl9DT05TRU5UUyxcbiAgVVNFUl9DT1NUX0NFTlRFUlMsXG4gIFVTRVJfUEFZTUVOVF9NRVRIT0RTLFxufSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCAqIGFzIGZyb21CaWxsaW5nQ291bnRyaWVzUmVkdWNlciBmcm9tICcuL2JpbGxpbmctY291bnRyaWVzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbUN1c3RvbWVyQ291cG9uUmVkdWNlciBmcm9tICcuL2N1c3RvbWVyLWNvdXBvbi5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21EZWxpdmVyeUNvdW50cmllcyBmcm9tICcuL2RlbGl2ZXJ5LWNvdW50cmllcy5yZWR1Y2VyJztcbmltcG9ydCB7IHJlZHVjZXJUb2tlbiB9IGZyb20gJy4vaW5kZXgnO1xuaW1wb3J0ICogYXMgZnJvbU5vdGlmaWNhdGlvblByZWZlcmVuY2VSZWR1Y2VyIGZyb20gJy4vbm90aWZpY2F0aW9uLXByZWZlcmVuY2UucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tUGF5bWVudFJlZHVjZXIgZnJvbSAnLi9wYXltZW50LW1ldGhvZHMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tSW50ZXJlc3RzUmVkdWNlciBmcm9tICcuL3Byb2R1Y3QtaW50ZXJlc3RzLnJlZHVjZXInO1xuaW1wb3J0ICogYXMgZnJvbVJlZ2lvbnNSZWR1Y2VyIGZyb20gJy4vcmVnaW9ucy5yZWR1Y2VyJztcbmltcG9ydCAqIGFzIGZyb21BZGRyZXNzZXNSZWR1Y2VyIGZyb20gJy4vdXNlci1hZGRyZXNzZXMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tVXNlckNvbnNlbnRzUmVkdWNlciBmcm9tICcuL3VzZXItY29uc2VudHMucmVkdWNlcic7XG5pbXBvcnQgKiBhcyBmcm9tQ29zdENlbnRlclJlZHVjZXIgZnJvbSAnLi91c2VyLWNvc3QtY2VudGVyLnJlZHVjZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVkdWNlcnNUcmFuc2l0aW9uYWxfNF8yKCk6IEFjdGlvblJlZHVjZXJNYXA8XG4gIFBhcnRpYWw8VXNlclN0YXRlPlxuPiB7XG4gIHJldHVybiB7XG4gICAgYWRkcmVzc2VzOiBsb2FkZXJSZWR1Y2VyPEFkZHJlc3NbXT4oXG4gICAgICBVU0VSX0FERFJFU1NFUyxcbiAgICAgIGZyb21BZGRyZXNzZXNSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIGJpbGxpbmdDb3VudHJpZXM6IGZyb21CaWxsaW5nQ291bnRyaWVzUmVkdWNlci5yZWR1Y2VyLFxuICAgIGNvbnNlbnRzOiBsb2FkZXJSZWR1Y2VyPENvbnNlbnRUZW1wbGF0ZVtdPihcbiAgICAgIFVTRVJfQ09OU0VOVFMsXG4gICAgICBmcm9tVXNlckNvbnNlbnRzUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBwYXltZW50czogbG9hZGVyUmVkdWNlcjxQYXltZW50RGV0YWlsc1tdPihcbiAgICAgIFVTRVJfUEFZTUVOVF9NRVRIT0RTLFxuICAgICAgZnJvbVBheW1lbnRSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIGNvdW50cmllczogZnJvbURlbGl2ZXJ5Q291bnRyaWVzLnJlZHVjZXIsXG4gICAgcmVnaW9uczogbG9hZGVyUmVkdWNlcjxSZWdpb25zU3RhdGU+KFJFR0lPTlMsIGZyb21SZWdpb25zUmVkdWNlci5yZWR1Y2VyKSxcbiAgICBjdXN0b21lckNvdXBvbnM6IGxvYWRlclJlZHVjZXI8Q3VzdG9tZXJDb3Vwb25TZWFyY2hSZXN1bHQ+KFxuICAgICAgQ1VTVE9NRVJfQ09VUE9OUyxcbiAgICAgIGZyb21DdXN0b21lckNvdXBvblJlZHVjZXIucmVkdWNlclxuICAgICksXG4gICAgbm90aWZpY2F0aW9uUHJlZmVyZW5jZXM6IGxvYWRlclJlZHVjZXI8Tm90aWZpY2F0aW9uUHJlZmVyZW5jZVtdPihcbiAgICAgIE5PVElGSUNBVElPTl9QUkVGRVJFTkNFUyxcbiAgICAgIGZyb21Ob3RpZmljYXRpb25QcmVmZXJlbmNlUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgICBwcm9kdWN0SW50ZXJlc3RzOiBsb2FkZXJSZWR1Y2VyPFByb2R1Y3RJbnRlcmVzdFNlYXJjaFJlc3VsdD4oXG4gICAgICBQUk9EVUNUX0lOVEVSRVNUUyxcbiAgICAgIGZyb21JbnRlcmVzdHNSZWR1Y2VyLnJlZHVjZXJcbiAgICApLFxuICAgIGNvc3RDZW50ZXJzOiBsb2FkZXJSZWR1Y2VyPENvc3RDZW50ZXJbXT4oXG4gICAgICBVU0VSX0NPU1RfQ0VOVEVSUyxcbiAgICAgIGZyb21Db3N0Q2VudGVyUmVkdWNlci5yZWR1Y2VyXG4gICAgKSxcbiAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHJlZHVjZXJUcmFuc2l0aW9uYWxfNF8yX1Byb3ZpZGVyOiBQcm92aWRlciA9IHtcbiAgcHJvdmlkZTogcmVkdWNlclRva2VuLFxuICB1c2VGYWN0b3J5OiBnZXRSZWR1Y2Vyc1RyYW5zaXRpb25hbF80XzIsXG59O1xuIl19