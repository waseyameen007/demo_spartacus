import { InjectionToken } from '@angular/core';
import { AuthActions } from '../../../auth/user-auth/store/actions/index';
import { loaderReducer } from '../../../state/utils/loader/loader.reducer';
import { CUSTOMER_COUPONS, NOTIFICATION_PREFERENCES, PRODUCT_INTERESTS, REGIONS, USER_ADDRESSES, USER_CONSENTS, USER_COST_CENTERS, USER_ORDERS, USER_ORDER_DETAILS, USER_PAYMENT_METHODS, USER_REPLENISHMENT_ORDERS, USER_REPLENISHMENT_ORDER_DETAILS, USER_RETURN_REQUESTS, USER_RETURN_REQUEST_DETAILS, } from '../user-state';
import * as fromBillingCountriesReducer from './billing-countries.reducer';
import * as fromConsignmentTrackingReducer from './consignment-tracking.reducer';
import * as fromCustomerCouponReducer from './customer-coupon.reducer';
import * as fromDeliveryCountries from './delivery-countries.reducer';
import * as fromNotificationPreferenceReducer from './notification-preference.reducer';
import * as fromOrderDetailsReducer from './order-details.reducer';
import * as fromOrderReturnRequestReducer from './order-return-request.reducer';
import * as fromPaymentReducer from './payment-methods.reducer';
import * as fromInterestsReducer from './product-interests.reducer';
import * as fromRegionsReducer from './regions.reducer';
import * as fromReplenishmentOrderDetailsReducer from './replenishment-order-details.reducer';
import * as fromAddressesReducer from './user-addresses.reducer';
import * as fromUserConsentsReducer from './user-consents.reducer';
import * as fromCostCenterReducer from './user-cost-center.reducer';
import * as fromUserOrdersReducer from './user-orders.reducer';
import * as fromUserReplenishmentOrdersReducer from './user-replenishment-orders.reducer';
export function getReducers() {
    return {
        addresses: loaderReducer(USER_ADDRESSES, fromAddressesReducer.reducer),
        billingCountries: fromBillingCountriesReducer.reducer,
        consents: loaderReducer(USER_CONSENTS, fromUserConsentsReducer.reducer),
        payments: loaderReducer(USER_PAYMENT_METHODS, fromPaymentReducer.reducer),
        orders: loaderReducer(USER_ORDERS, fromUserOrdersReducer.reducer),
        order: loaderReducer(USER_ORDER_DETAILS, fromOrderDetailsReducer.reducer),
        replenishmentOrders: loaderReducer(USER_REPLENISHMENT_ORDERS, fromUserReplenishmentOrdersReducer.reducer),
        orderReturn: loaderReducer(USER_RETURN_REQUEST_DETAILS),
        orderReturnList: loaderReducer(USER_RETURN_REQUESTS, fromOrderReturnRequestReducer.reducer),
        countries: fromDeliveryCountries.reducer,
        regions: loaderReducer(REGIONS, fromRegionsReducer.reducer),
        consignmentTracking: fromConsignmentTrackingReducer.reducer,
        customerCoupons: loaderReducer(CUSTOMER_COUPONS, fromCustomerCouponReducer.reducer),
        notificationPreferences: loaderReducer(NOTIFICATION_PREFERENCES, fromNotificationPreferenceReducer.reducer),
        productInterests: loaderReducer(PRODUCT_INTERESTS, fromInterestsReducer.reducer),
        costCenters: loaderReducer(USER_COST_CENTERS, fromCostCenterReducer.reducer),
        replenishmentOrder: loaderReducer(USER_REPLENISHMENT_ORDER_DETAILS, fromReplenishmentOrderDetailsReducer.reducer),
    };
}
export const reducerToken = new InjectionToken('UserReducers');
export const reducerProvider = {
    provide: reducerToken,
    useFactory: getReducers,
};
export function clearUserState(reducer) {
    return function (state, action) {
        if (action.type === AuthActions.LOGOUT) {
            state = undefined;
        }
        return reducer(state, action);
    };
}
export const metaReducers = [clearUserState];
//# sourceMappingURL=data:application/json;base64,