import { StateUtils } from '../../../state/utils/index';
import { USER_REPLENISHMENT_ORDERS } from '../user-state';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_USER_REPLENISHMENT_ORDERS = '[User] Load User Replenishment Orders';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_USER_REPLENISHMENT_ORDERS_FAIL = '[User] Load User Replenishment Orders Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS = '[User] Load User Replenishment Orders Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CLEAR_USER_REPLENISHMENT_ORDERS = '[User] Clear User Replenishment Orders';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadUserReplenishmentOrders extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDERS);
        this.payload = payload;
        this.type = LOAD_USER_REPLENISHMENT_ORDERS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadUserReplenishmentOrdersFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDERS, payload);
        this.payload = payload;
        this.type = LOAD_USER_REPLENISHMENT_ORDERS_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadUserReplenishmentOrdersSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDERS);
        this.payload = payload;
        this.type = LOAD_USER_REPLENISHMENT_ORDERS_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearUserReplenishmentOrders extends StateUtils.LoaderResetAction {
    constructor() {
        super(USER_REPLENISHMENT_ORDERS);
        this.type = CLEAR_USER_REPLENISHMENT_ORDERS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1yZXBsZW5pc2htZW50LW9yZGVycy5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy91c2VyL3N0b3JlL2FjdGlvbnMvdXNlci1yZXBsZW5pc2htZW50LW9yZGVycy5hY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3hELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUxRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLDhCQUE4QixHQUN6Qyx1Q0FBdUMsQ0FBQztBQUMxQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUM5Qyw0Q0FBNEMsQ0FBQztBQUMvQzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHNDQUFzQyxHQUNqRCwrQ0FBK0MsQ0FBQztBQUNsRDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLCtCQUErQixHQUMxQyx3Q0FBd0MsQ0FBQztBQUUzQzs7R0FFRztBQUNILE1BQU0sT0FBTywyQkFBNEIsU0FBUSxVQUFVLENBQUMsZ0JBQWdCO0lBRTFFLFlBQ1MsT0FLTjtRQUVELEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBUDFCLFlBQU8sR0FBUCxPQUFPLENBS2I7UUFQTSxTQUFJLEdBQUcsOEJBQThCLENBQUM7SUFVL0MsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUU5RSxZQUFtQixPQUFZO1FBQzdCLEtBQUssQ0FBQyx5QkFBeUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUR6QixZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyxtQ0FBbUMsQ0FBQztJQUdwRCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyxrQ0FBbUMsU0FBUSxVQUFVLENBQUMsbUJBQW1CO0lBRXBGLFlBQW1CLE9BQStCO1FBQ2hELEtBQUssQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO1FBRGhCLFlBQU8sR0FBUCxPQUFPLENBQXdCO1FBRHpDLFNBQUksR0FBRyxzQ0FBc0MsQ0FBQztJQUd2RCxDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxVQUFVLENBQUMsaUJBQWlCO0lBRTVFO1FBQ0UsS0FBSyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFGMUIsU0FBSSxHQUFHLCtCQUErQixDQUFDO0lBR2hELENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcGxlbmlzaG1lbnRPcmRlckxpc3QgfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9yZXBsZW5pc2htZW50LW9yZGVyLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBVU0VSX1JFUExFTklTSE1FTlRfT1JERVJTIH0gZnJvbSAnLi4vdXNlci1zdGF0ZSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBMT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMgPVxuICAnW1VzZXJdIExvYWQgVXNlciBSZXBsZW5pc2htZW50IE9yZGVycyc7XG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgTE9BRF9VU0VSX1JFUExFTklTSE1FTlRfT1JERVJTX0ZBSUwgPVxuICAnW1VzZXJdIExvYWQgVXNlciBSZXBsZW5pc2htZW50IE9yZGVycyBGYWlsJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBMT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlNfU1VDQ0VTUyA9XG4gICdbVXNlcl0gTG9hZCBVc2VyIFJlcGxlbmlzaG1lbnQgT3JkZXJzIFN1Y2Nlc3MnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSA0LjIgLSB1c2Ugb3JkZXIgbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IENMRUFSX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMgPVxuICAnW1VzZXJdIENsZWFyIFVzZXIgUmVwbGVuaXNobWVudCBPcmRlcnMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJMb2FkQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9SRVBMRU5JU0hNRU5UX09SREVSUztcbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIHBheWxvYWQ6IHtcbiAgICAgIHVzZXJJZDogc3RyaW5nO1xuICAgICAgcGFnZVNpemU/OiBudW1iZXI7XG4gICAgICBjdXJyZW50UGFnZT86IG51bWJlcjtcbiAgICAgIHNvcnQ/OiBzdHJpbmc7XG4gICAgfVxuICApIHtcbiAgICBzdXBlcihVU0VSX1JFUExFTklTSE1FTlRfT1JERVJTKTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY2xhc3MgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuTG9hZGVyRmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1VTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFVTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMsIHBheWxvYWQpO1xuICB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjbGFzcyBMb2FkVXNlclJlcGxlbmlzaG1lbnRPcmRlcnNTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfVVNFUl9SRVBMRU5JU0hNRU5UX09SREVSU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogUmVwbGVuaXNobWVudE9yZGVyTGlzdCkge1xuICAgIHN1cGVyKFVTRVJfUkVQTEVOSVNITUVOVF9PUkRFUlMpO1xuICB9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGVhclVzZXJSZXBsZW5pc2htZW50T3JkZXJzIGV4dGVuZHMgU3RhdGVVdGlscy5Mb2FkZXJSZXNldEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBDTEVBUl9VU0VSX1JFUExFTklTSE1FTlRfT1JERVJTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihVU0VSX1JFUExFTklTSE1FTlRfT1JERVJTKTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgdHlwZSBVc2VyUmVwbGVuaXNobWVudE9yZGVyc0FjdGlvbiA9XG4gIHwgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzXG4gIHwgTG9hZFVzZXJSZXBsZW5pc2htZW50T3JkZXJzRmFpbFxuICB8IExvYWRVc2VyUmVwbGVuaXNobWVudE9yZGVyc1N1Y2Nlc3NcbiAgfCBDbGVhclVzZXJSZXBsZW5pc2htZW50T3JkZXJzO1xuIl19