import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, USER_REPLENISHMENT_ORDER_DETAILS, } from '../user-state';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_REPLENISHMENT_ORDER_DETAILS = '[User] Load Replenishment Order Details';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS = '[User] Load Replenishment Order Details Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL = '[User] Load Replenishment Order Details Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const ClEAR_REPLENISHMENT_ORDER_DETAILS = '[User] Clear Replenishment Order Details';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_REPLENISHMENT_ORDER = '[User] Cancel Replenishment Order';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_REPLENISHMENT_ORDER_SUCCESS = '[User] Cancel Replenishment Order Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_REPLENISHMENT_ORDER_FAIL = '[User] Cancel Replenishment Order Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CLEAR_CANCEL_REPLENISHMENT_ORDER = '[User] Clear Cancel Replenishment Order';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadReplenishmentOrderDetails extends StateUtils.LoaderLoadAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_REPLENISHMENT_ORDER_DETAILS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadReplenishmentOrderDetailsSuccess extends StateUtils.LoaderSuccessAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_REPLENISHMENT_ORDER_DETAILS_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadReplenishmentOrderDetailsFail extends StateUtils.LoaderFailAction {
    constructor(payload) {
        super(USER_REPLENISHMENT_ORDER_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_REPLENISHMENT_ORDER_DETAILS_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearReplenishmentOrderDetails extends StateUtils.LoaderResetAction {
    constructor() {
        super(USER_REPLENISHMENT_ORDER_DETAILS);
        this.type = ClEAR_REPLENISHMENT_ORDER_DETAILS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelReplenishmentOrder extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_REPLENISHMENT_ORDER;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelReplenishmentOrderSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_REPLENISHMENT_ORDER_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelReplenishmentOrderFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_REPLENISHMENT_ORDER_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearCancelReplenishmentOrder extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_REPLENISHMENT_ORDER_PROCESS_ID);
        this.type = CLEAR_CANCEL_REPLENISHMENT_ORDER;
    }
}
//# sourceMappingURL=data:application/json;base64,