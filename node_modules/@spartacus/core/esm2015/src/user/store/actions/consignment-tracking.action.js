/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_CONSIGNMENT_TRACKING = '[User] Load Consignment Tracking';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_CONSIGNMENT_TRACKING_FAIL = '[User] Load Consignment Tracking Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_CONSIGNMENT_TRACKING_SUCCESS = '[User] Load Consignment Tracking Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CLEAR_CONSIGNMENT_TRACKING = '[User] Clear Consignment Tracking';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadConsignmentTracking {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_CONSIGNMENT_TRACKING;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadConsignmentTrackingFail {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_CONSIGNMENT_TRACKING_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadConsignmentTrackingSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = LOAD_CONSIGNMENT_TRACKING_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearConsignmentTracking {
    constructor() {
        this.type = CLEAR_CONSIGNMENT_TRACKING;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc2lnbm1lbnQtdHJhY2tpbmcuYWN0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9zcmMvdXNlci9zdG9yZS9hY3Rpb25zL2NvbnNpZ25tZW50LXRyYWNraW5nLmFjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQTs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFHLGtDQUFrQyxDQUFDO0FBQzVFOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sOEJBQThCLEdBQ3pDLHVDQUF1QyxDQUFDO0FBQzFDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUNBQWlDLEdBQzVDLDBDQUEwQyxDQUFDO0FBQzdDOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQUcsbUNBQW1DLENBQUM7QUFFOUU7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXVCO0lBRWxDLFlBQ1MsT0FJTjtRQUpNLFlBQU8sR0FBUCxPQUFPLENBSWI7UUFOTSxTQUFJLEdBQUcseUJBQXlCLENBQUM7SUFPdkMsQ0FBQztDQUNMO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sMkJBQTJCO0lBRXRDLFlBQW1CLE9BQVk7UUFBWixZQUFPLEdBQVAsT0FBTyxDQUFLO1FBRHRCLFNBQUksR0FBRyw4QkFBOEIsQ0FBQztJQUNiLENBQUM7Q0FDcEM7QUFFRDs7R0FFRztBQUNILE1BQU0sT0FBTyw4QkFBOEI7SUFFekMsWUFBbUIsT0FBNEI7UUFBNUIsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFEdEMsU0FBSSxHQUFHLGlDQUFpQyxDQUFDO0lBQ0EsQ0FBQztDQUNwRDtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHdCQUF3QjtJQUVuQztRQURTLFNBQUksR0FBRywwQkFBMEIsQ0FBQztJQUM1QixDQUFDO0NBQ2pCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWN0aW9uIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQ29uc2lnbm1lbnRUcmFja2luZyB9IGZyb20gJy4uLy4uLy4uL21vZGVsL2luZGV4JztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSA0LjIgLSB1c2Ugb3JkZXIgbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IExPQURfQ09OU0lHTk1FTlRfVFJBQ0tJTkcgPSAnW1VzZXJdIExvYWQgQ29uc2lnbm1lbnQgVHJhY2tpbmcnO1xuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSA0LjIgLSB1c2Ugb3JkZXIgbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNvbnN0IExPQURfQ09OU0lHTk1FTlRfVFJBQ0tJTkdfRkFJTCA9XG4gICdbVXNlcl0gTG9hZCBDb25zaWdubWVudCBUcmFja2luZyBGYWlsJztcbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCBjb25zdCBMT0FEX0NPTlNJR05NRU5UX1RSQUNLSU5HX1NVQ0NFU1MgPVxuICAnW1VzZXJdIExvYWQgQ29uc2lnbm1lbnQgVHJhY2tpbmcgU3VjY2Vzcyc7XG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgQ0xFQVJfQ09OU0lHTk1FTlRfVFJBQ0tJTkcgPSAnW1VzZXJdIENsZWFyIENvbnNpZ25tZW50IFRyYWNraW5nJztcblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSA0LjIgLSB1c2Ugb3JkZXIgbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNsYXNzIExvYWRDb25zaWdubWVudFRyYWNraW5nIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ09OU0lHTk1FTlRfVFJBQ0tJTkc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBwYXlsb2FkOiB7XG4gICAgICB1c2VySWQ/OiBzdHJpbmc7XG4gICAgICBvcmRlckNvZGU6IHN0cmluZztcbiAgICAgIGNvbnNpZ25tZW50Q29kZTogc3RyaW5nO1xuICAgIH1cbiAgKSB7fVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY2xhc3MgTG9hZENvbnNpZ25tZW50VHJhY2tpbmdGYWlsIGltcGxlbWVudHMgQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfQ09OU0lHTk1FTlRfVFJBQ0tJTkdfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge31cbn1cblxuLyoqXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSA0LjIgLSB1c2Ugb3JkZXIgbGliIGluc3RlYWRcbiAqL1xuZXhwb3J0IGNsYXNzIExvYWRDb25zaWdubWVudFRyYWNraW5nU3VjY2VzcyBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX0NPTlNJR05NRU5UX1RSQUNLSU5HX1NVQ0NFU1M7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBDb25zaWdubWVudFRyYWNraW5nKSB7fVxufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5leHBvcnQgY2xhc3MgQ2xlYXJDb25zaWdubWVudFRyYWNraW5nIHtcbiAgcmVhZG9ubHkgdHlwZSA9IENMRUFSX0NPTlNJR05NRU5UX1RSQUNLSU5HO1xuICBjb25zdHJ1Y3RvcigpIHt9XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIG9yZGVyIGxpYiBpbnN0ZWFkXG4gKi9cbmV4cG9ydCB0eXBlIENvbnNpZ25tZW50VHJhY2tpbmdBY3Rpb24gPVxuICB8IExvYWRDb25zaWdubWVudFRyYWNraW5nXG4gIHwgTG9hZENvbnNpZ25tZW50VHJhY2tpbmdGYWlsXG4gIHwgTG9hZENvbnNpZ25tZW50VHJhY2tpbmdTdWNjZXNzXG4gIHwgQ2xlYXJDb25zaWdubWVudFRyYWNraW5nO1xuIl19