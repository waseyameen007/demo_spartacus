import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { LoaderFailAction, LoaderLoadAction, LoaderResetAction, LoaderSuccessAction, } from '../../../state/utils/loader/loader.action';
import { CANCEL_ORDER_PROCESS_ID, USER_ORDER_DETAILS } from '../user-state';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_DETAILS = '[User] Load Order Details';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_DETAILS_FAIL = '[User] Load Order Details Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_DETAILS_SUCCESS = '[User] Load Order Details Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CLEAR_ORDER_DETAILS = '[User] Clear Order Details';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_ORDER = '[User] Cancel Order';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_ORDER_FAIL = '[User] Cancel Order Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_ORDER_SUCCESS = '[User] Cancel Order Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const RESET_CANCEL_ORDER_PROCESS = '[User] Reset Cancel Order Process';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderDetails extends LoaderLoadAction {
    constructor(payload) {
        super(USER_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderDetailsFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_ORDER_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderDetailsSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_ORDER_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_DETAILS_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearOrderDetails extends LoaderResetAction {
    constructor() {
        super(USER_ORDER_DETAILS);
        this.type = CLEAR_ORDER_DETAILS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelOrder extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelOrderFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelOrderSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.type = CANCEL_ORDER_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ResetCancelOrderProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_ORDER_PROCESS_ID);
        this.type = RESET_CANCEL_ORDER_PROCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,