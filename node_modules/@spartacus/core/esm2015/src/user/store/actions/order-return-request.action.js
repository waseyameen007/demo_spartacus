import { PROCESS_FEATURE } from '../../../process/store/process-state';
import { StateUtils } from '../../../state/utils/index';
import { LoaderFailAction, LoaderLoadAction, LoaderResetAction, LoaderSuccessAction, } from '../../../state/utils/loader/loader.action';
import { CANCEL_RETURN_PROCESS_ID, USER_RETURN_REQUESTS, USER_RETURN_REQUEST_DETAILS, } from '../user-state';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CREATE_ORDER_RETURN_REQUEST = '[User] Create Order Return Request';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CREATE_ORDER_RETURN_REQUEST_FAIL = '[User] Create Order Return Request Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CREATE_ORDER_RETURN_REQUEST_SUCCESS = '[User] Create Order Return Request Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_RETURN_REQUEST = '[User] Load Order Return Request details';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_RETURN_REQUEST_FAIL = '[User] Load Order Return Request details Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_RETURN_REQUEST_SUCCESS = '[User] Load Order Return Request details Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_ORDER_RETURN_REQUEST = '[User] Cancel Order Return Request';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_ORDER_RETURN_REQUEST_FAIL = '[User] Cancel Order Return Request Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CANCEL_ORDER_RETURN_REQUEST_SUCCESS = '[User] Cancel Order Return Request Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_RETURN_REQUEST_LIST = '[User] Load User Order Return Request List';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_RETURN_REQUEST_LIST_FAIL = '[User] Load User Order Return Request List Fail';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS = '[User] Load User Order Return Request List Success';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CLEAR_ORDER_RETURN_REQUEST = '[User] Clear Order Return Request Details';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const CLEAR_ORDER_RETURN_REQUEST_LIST = '[User] Clear Order Return Request List';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export const RESET_CANCEL_RETURN_PROCESS = '[User] Reset Cancel Return Request Process';
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CreateOrderReturnRequest extends LoaderLoadAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CreateOrderReturnRequestFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CreateOrderReturnRequestSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = CREATE_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderReturnRequest extends LoaderLoadAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderReturnRequestFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderReturnRequestSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_RETURN_REQUEST_DETAILS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelOrderReturnRequest extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelOrderReturnRequestFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID, payload);
        this.payload = payload;
        this.type = CANCEL_ORDER_RETURN_REQUEST_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class CancelOrderReturnRequestSuccess extends StateUtils.EntitySuccessAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = CANCEL_ORDER_RETURN_REQUEST_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderReturnRequestList extends LoaderLoadAction {
    constructor(payload) {
        super(USER_RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderReturnRequestListFail extends LoaderFailAction {
    constructor(payload) {
        super(USER_RETURN_REQUESTS, payload);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_FAIL;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class LoadOrderReturnRequestListSuccess extends LoaderSuccessAction {
    constructor(payload) {
        super(USER_RETURN_REQUESTS);
        this.payload = payload;
        this.type = LOAD_ORDER_RETURN_REQUEST_LIST_SUCCESS;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearOrderReturnRequest extends LoaderResetAction {
    constructor() {
        super(USER_RETURN_REQUEST_DETAILS);
        this.type = CLEAR_ORDER_RETURN_REQUEST;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ClearOrderReturnRequestList extends LoaderResetAction {
    constructor() {
        super(USER_RETURN_REQUESTS);
        this.type = CLEAR_ORDER_RETURN_REQUEST_LIST;
    }
}
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ResetCancelReturnProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, CANCEL_RETURN_PROCESS_ID);
        this.type = RESET_CANCEL_RETURN_PROCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,