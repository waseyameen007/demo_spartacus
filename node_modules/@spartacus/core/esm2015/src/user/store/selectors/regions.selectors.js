import { createSelector } from '@ngrx/store';
import { StateUtils } from '../../../state/utils/index';
import { getUserState } from './feature.selector';
export const getRegionsLoaderState = createSelector(getUserState, (state) => state.regions);
export const getAllRegions = createSelector(getRegionsLoaderState, (state) => {
    return StateUtils.loaderValueSelector(state).entities;
});
export const getRegionsDataAndLoading = createSelector(getRegionsLoaderState, (state) => ({
    loaded: StateUtils.loaderSuccessSelector(state),
    loading: StateUtils.loaderLoadingSelector(state),
    regions: StateUtils.loaderValueSelector(state).entities,
    country: StateUtils.loaderValueSelector(state).country,
}));
export const getRegionsCountry = createSelector(getRegionsLoaderState, (state) => StateUtils.loaderValueSelector(state).country);
export const getRegionsLoading = createSelector(getRegionsLoaderState, (state) => StateUtils.loaderLoadingSelector(state));
export const getRegionsLoaded = createSelector(getRegionsLoaderState, (state) => StateUtils.loaderSuccessSelector(state));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaW9ucy5zZWxlY3RvcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NyYy91c2VyL3N0b3JlL3NlbGVjdG9ycy9yZWdpb25zLnNlbGVjdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFvQixNQUFNLGFBQWEsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFHeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRWxELE1BQU0sQ0FBQyxNQUFNLHFCQUFxQixHQUc5QixjQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsS0FBZ0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRXRFLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FDeEIsY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBZ0MsRUFBRSxFQUFFO0lBQ3pFLE9BQU8sVUFBVSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQztBQUN4RCxDQUFDLENBQUMsQ0FBQztBQUVMLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQVFqQyxjQUFjLENBQ2hCLHFCQUFxQixFQUNyQixDQUFDLEtBQWdDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDckMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDL0MsT0FBTyxFQUFFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUM7SUFDaEQsT0FBTyxFQUFFLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRO0lBQ3ZELE9BQU8sRUFBRSxVQUFVLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTztDQUN2RCxDQUFDLENBQ0gsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUM1QixjQUFjLENBQ1oscUJBQXFCLEVBQ3JCLENBQUMsS0FBZ0MsRUFBRSxFQUFFLENBQ25DLFVBQVUsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQ2hELENBQUM7QUFFSixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FDNUIsY0FBYyxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBZ0MsRUFBRSxFQUFFLENBQ3pFLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsQ0FDeEMsQ0FBQztBQUVKLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUMzQixjQUFjLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxLQUFnQyxFQUFFLEVBQUUsQ0FDekUsVUFBVSxDQUFDLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUN4QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlU2VsZWN0b3IsIE1lbW9pemVkU2VsZWN0b3IgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBSZWdpb24gfSBmcm9tICcuLi8uLi8uLi9tb2RlbC9hZGRyZXNzLm1vZGVsJztcbmltcG9ydCB7IFN0YXRlVXRpbHMgfSBmcm9tICcuLi8uLi8uLi9zdGF0ZS91dGlscy9pbmRleCc7XG5pbXBvcnQgeyBMb2FkZXJTdGF0ZSB9IGZyb20gJy4uLy4uLy4uL3N0YXRlL3V0aWxzL2xvYWRlci9sb2FkZXItc3RhdGUnO1xuaW1wb3J0IHsgUmVnaW9uc1N0YXRlLCBTdGF0ZVdpdGhVc2VyLCBVc2VyU3RhdGUgfSBmcm9tICcuLi91c2VyLXN0YXRlJztcbmltcG9ydCB7IGdldFVzZXJTdGF0ZSB9IGZyb20gJy4vZmVhdHVyZS5zZWxlY3Rvcic7XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGVyU3RhdGU6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT5cbj4gPSBjcmVhdGVTZWxlY3RvcihnZXRVc2VyU3RhdGUsIChzdGF0ZTogVXNlclN0YXRlKSA9PiBzdGF0ZS5yZWdpb25zKTtcblxuZXhwb3J0IGNvbnN0IGdldEFsbFJlZ2lvbnM6IE1lbW9pemVkU2VsZWN0b3I8U3RhdGVXaXRoVXNlciwgUmVnaW9uW10+ID1cbiAgY3JlYXRlU2VsZWN0b3IoZ2V0UmVnaW9uc0xvYWRlclN0YXRlLCAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+IHtcbiAgICByZXR1cm4gU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5lbnRpdGllcztcbiAgfSk7XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zRGF0YUFuZExvYWRpbmc6IE1lbW9pemVkU2VsZWN0b3I8XG4gIFN0YXRlV2l0aFVzZXIsXG4gIHtcbiAgICBsb2FkZWQ6IGJvb2xlYW47XG4gICAgbG9hZGluZzogYm9vbGVhbjtcbiAgICByZWdpb25zOiBSZWdpb25bXTtcbiAgICBjb3VudHJ5OiBzdHJpbmc7XG4gIH1cbj4gPSBjcmVhdGVTZWxlY3RvcihcbiAgZ2V0UmVnaW9uc0xvYWRlclN0YXRlLFxuICAoc3RhdGU6IExvYWRlclN0YXRlPFJlZ2lvbnNTdGF0ZT4pID0+ICh7XG4gICAgbG9hZGVkOiBTdGF0ZVV0aWxzLmxvYWRlclN1Y2Nlc3NTZWxlY3RvcihzdGF0ZSksXG4gICAgbG9hZGluZzogU3RhdGVVdGlscy5sb2FkZXJMb2FkaW5nU2VsZWN0b3Ioc3RhdGUpLFxuICAgIHJlZ2lvbnM6IFN0YXRlVXRpbHMubG9hZGVyVmFsdWVTZWxlY3RvcihzdGF0ZSkuZW50aXRpZXMsXG4gICAgY291bnRyeTogU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5jb3VudHJ5LFxuICB9KVxuKTtcblxuZXhwb3J0IGNvbnN0IGdldFJlZ2lvbnNDb3VudHJ5OiBNZW1vaXplZFNlbGVjdG9yPFN0YXRlV2l0aFVzZXIsIHN0cmluZz4gPVxuICBjcmVhdGVTZWxlY3RvcihcbiAgICBnZXRSZWdpb25zTG9hZGVyU3RhdGUsXG4gICAgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxuICAgICAgU3RhdGVVdGlscy5sb2FkZXJWYWx1ZVNlbGVjdG9yKHN0YXRlKS5jb3VudHJ5XG4gICk7XG5cbmV4cG9ydCBjb25zdCBnZXRSZWdpb25zTG9hZGluZzogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhVc2VyLCBib29sZWFuPiA9XG4gIGNyZWF0ZVNlbGVjdG9yKGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSwgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyTG9hZGluZ1NlbGVjdG9yKHN0YXRlKVxuICApO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVnaW9uc0xvYWRlZDogTWVtb2l6ZWRTZWxlY3RvcjxTdGF0ZVdpdGhVc2VyLCBib29sZWFuPiA9XG4gIGNyZWF0ZVNlbGVjdG9yKGdldFJlZ2lvbnNMb2FkZXJTdGF0ZSwgKHN0YXRlOiBMb2FkZXJTdGF0ZTxSZWdpb25zU3RhdGU+KSA9PlxuICAgIFN0YXRlVXRpbHMubG9hZGVyU3VjY2Vzc1NlbGVjdG9yKHN0YXRlKVxuICApO1xuIl19