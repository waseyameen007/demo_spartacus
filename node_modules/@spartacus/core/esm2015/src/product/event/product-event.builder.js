import { Injectable } from '@angular/core';
import { filter, map, pairwise } from 'rxjs/operators';
import { createFrom } from '../../util/create-from';
import { FacetChangedEvent } from './product.events';
import * as i0 from "@angular/core";
import * as i1 from "../../event/event.service";
import * as i2 from "../facade/product-search.service";
export class ProductEventBuilder {
    constructor(eventService, productSearchService) {
        this.eventService = eventService;
        this.productSearchService = productSearchService;
        this.register();
    }
    register() {
        this.eventService.register(FacetChangedEvent, this.buildFacetChangedEvent());
    }
    /**
     * To get the changed facet, we need to compare the product search results
     * got before and after toggling the facet value. These 2 product searches must
     * have the same search queries except one different solr filter term. That means
     * these 2 searches must have the same 'freeTextSearch'; and if they are category
     * searches, they must have the same root (in the same category or brand).
     */
    buildFacetChangedEvent() {
        return this.productSearchService.getResults().pipe(pairwise(), filter(([prev, curr]) => this.compareSearchResults(prev, curr)), map(([prev, curr]) => {
            const toggled = this.getToggledBreadcrumb(curr.breadcrumbs, prev.breadcrumbs) ||
                this.getToggledBreadcrumb(prev.breadcrumbs, curr.breadcrumbs);
            if (toggled) {
                return createFrom(FacetChangedEvent, {
                    code: toggled.facetCode,
                    name: toggled.facetName,
                    valueCode: toggled.facetValueCode,
                    valueName: toggled.facetValueName,
                    selected: curr.breadcrumbs.length > prev.breadcrumbs.length,
                });
            }
        }));
    }
    /**
     * The 2 product searches (before and after facet changed) must have the same
     * search queries; and if they are category searches, they also must have the
     * same root (in the same category or brand).
     */
    compareSearchResults(prev, curr) {
        var _a, _b, _c;
        if (prev && Object.keys(prev).length !== 0) {
            // for text searches, they must have the same freeTextSearch
            const sameFreeTextSearch = prev.freeTextSearch !== '' &&
                prev.freeTextSearch === curr.freeTextSearch;
            // for category searches, they must have the same root
            const sameCategoryRoot = ((_a = curr.breadcrumbs[0]) === null || _a === void 0 ? void 0 : _a.facetCode) === 'allCategories' &&
                ((_b = prev.breadcrumbs[0]) === null || _b === void 0 ? void 0 : _b.facetCode) === ((_c = curr.breadcrumbs[0]) === null || _c === void 0 ? void 0 : _c.facetCode) &&
                // same category or brand
                prev.breadcrumbs[0].facetValueCode ===
                    curr.breadcrumbs[0].facetValueCode;
            return sameFreeTextSearch || sameCategoryRoot;
        }
    }
    /**
     * Get the toggled breadcrumb. The 2 breadcrumb lists got from the 2 search results
     * only can have one different solr filter term.
     */
    getToggledBreadcrumb(bc1, bc2) {
        if (bc1.length - bc2.length === 1) {
            return bc1.find((x) => !bc2.find((y) => y.facetCode === x.facetCode &&
                y.facetValueCode === x.facetValueCode));
        }
    }
}
ProductEventBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductEventBuilder, deps: [{ token: i1.EventService }, { token: i2.ProductSearchService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductEventBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductEventBuilder, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductEventBuilder, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.EventService }, { type: i2.ProductSearchService }]; } });
//# sourceMappingURL=data:application/json;base64,