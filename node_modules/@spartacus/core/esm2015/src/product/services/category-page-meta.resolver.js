import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { PageMetaResolver } from '../../cms/page/page-meta.resolver';
import { PageType } from '../../model/cms.model';
import * as i0 from "@angular/core";
import * as i1 from "../facade/product-search.service";
import * as i2 from "../../cms/facade/cms.service";
import * as i3 from "../../i18n/translation.service";
import * as i4 from "../../cms/page/base-page-meta.resolver";
/**
 * Resolves the page data for the Product Listing Page.
 *
 * The page title, and breadcrumbs are resolved in this implementation only.
 */
export class CategoryPageMetaResolver extends PageMetaResolver {
    constructor(productSearchService, cms, translation, basePageMetaResolver) {
        super();
        this.productSearchService = productSearchService;
        this.cms = cms;
        this.translation = translation;
        this.basePageMetaResolver = basePageMetaResolver;
        // reusable observable for search page data
        this.searchPage$ = this.cms
            .getCurrentPage()
            .pipe(filter((page) => Boolean(page)), switchMap((page) => 
        // only the existence of a plp component tells us if products
        // are rendered or if this is an ordinary content page
        this.hasProductListComponent(page)
            ? this.productSearchService
                .getResults()
                .pipe(filter((result) => Boolean(result)))
            : of(page)));
        this.pageType = PageType.CATEGORY_PAGE;
    }
    resolveTitle() {
        return this.searchPage$.pipe(filter((page) => !!page.pagination), switchMap((p) => {
            var _a, _b;
            return this.translation.translate('pageMetaResolver.category.title', {
                count: (_a = p.pagination) === null || _a === void 0 ? void 0 : _a.totalResults,
                query: ((_b = p.breadcrumbs) === null || _b === void 0 ? void 0 : _b.length)
                    ? p.breadcrumbs[0].facetValueName
                    : undefined,
            });
        }));
    }
    resolveBreadcrumbs() {
        return combineLatest([
            this.searchPage$.pipe(),
            this.translation.translate('common.home'),
        ]).pipe(map(([page, label]) => page.breadcrumbs
            ? this.resolveBreadcrumbData(page, label)
            : []));
    }
    resolveBreadcrumbData(page, label) {
        var _a;
        const breadcrumbs = [];
        breadcrumbs.push({ label: label, link: '/' });
        for (const br of (_a = page.breadcrumbs) !== null && _a !== void 0 ? _a : []) {
            if (br.facetValueName) {
                if (br.facetCode === 'category' || br.facetCode === 'allCategories') {
                    breadcrumbs.push({
                        label: br.facetValueName,
                        link: `/c/${br.facetValueCode}`,
                    });
                }
                if (br.facetCode === 'brand') {
                    breadcrumbs.push({
                        label: br.facetValueName,
                        link: `/Brands/${br.facetValueName}/c/${br.facetValueCode}`,
                    });
                }
            }
        }
        return breadcrumbs;
    }
    hasProductListComponent(page) {
        return !!Object.keys(page.slots || {}).find((key) => {
            var _a, _b;
            return !!((_b = (_a = page.slots) === null || _a === void 0 ? void 0 : _a[key].components) === null || _b === void 0 ? void 0 : _b.find((comp) => comp.typeCode === 'CMSProductListComponent' ||
                comp.typeCode === 'ProductGridComponent'));
        });
    }
    resolveRobots() {
        return this.basePageMetaResolver.resolveRobots();
    }
    /**
     * Resolves the canonical url for the category listing page.
     *
     * The default options will be used to resolve the url, which means that
     * all query parameters are removed and https and www are added explicitly.
     */
    resolveCanonicalUrl() {
        return this.basePageMetaResolver.resolveCanonicalUrl();
    }
}
CategoryPageMetaResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CategoryPageMetaResolver, deps: [{ token: i1.ProductSearchService }, { token: i2.CmsService }, { token: i3.TranslationService }, { token: i4.BasePageMetaResolver }], target: i0.ɵɵFactoryTarget.Injectable });
CategoryPageMetaResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CategoryPageMetaResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CategoryPageMetaResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ProductSearchService }, { type: i2.CmsService }, { type: i3.TranslationService }, { type: i4.BasePageMetaResolver }]; } });
//# sourceMappingURL=data:application/json;base64,