import { Injectable } from '@angular/core';
import { combineLatest, of } from 'rxjs';
import { filter, map, switchMap } from 'rxjs/operators';
import { PageMetaResolver } from '../../cms/page/page-meta.resolver';
import { PageType } from '../../model/cms.model';
import * as i0 from "@angular/core";
import * as i1 from "../../routing/facade/routing.service";
import * as i2 from "../facade/product.service";
import * as i3 from "../../i18n/translation.service";
import * as i4 from "../../cms/page/base-page-meta.resolver";
import * as i5 from "../../cms/page/routing/page-link.service";
/**
 * Resolves the page data for the Product Detail Page
 * based on the `PageType.PRODUCT_PAGE`.
 *
 * The page title, heading, description, breadcrumbs and
 * first GALLERY image are resolved if available in the data.
 */
export class ProductPageMetaResolver extends PageMetaResolver {
    constructor(routingService, productService, translation, basePageMetaResolver, pageLinkService) {
        super();
        this.routingService = routingService;
        this.productService = productService;
        this.translation = translation;
        this.basePageMetaResolver = basePageMetaResolver;
        this.pageLinkService = pageLinkService;
        // reusable observable for product data based on the current page
        this.product$ = this.routingService
            .getRouterState()
            .pipe(map((state) => state.state.params['productCode']), filter((code) => !!code), switchMap((code) => this.productService.get(code, "details" /* DETAILS */)), filter((p) => Boolean(p)));
        this.pageType = PageType.PRODUCT_PAGE;
    }
    /**
     * Resolves the page heading for the Product Detail Page.
     * The page heading is used in the UI (`<h1>`), where as the page
     * title is used by the browser and crawlers.
     */
    resolveHeading() {
        return this.product$.pipe(switchMap((p) => this.translation.translate('pageMetaResolver.product.heading', {
            heading: p.name,
        })));
    }
    /**
     * Resolves the page title for the Product Detail Page. The page title
     * is resolved with the product name, the first category and the manufacturer.
     * The page title used by the browser (history, tabs) and crawlers.
     */
    resolveTitle() {
        return this.product$.pipe(switchMap((product) => {
            let title = product.name;
            title += this.resolveFirstCategory(product);
            title += this.resolveManufacturer(product);
            return this.translation.translate('pageMetaResolver.product.title', {
                title: title,
            });
        }));
    }
    /**
     * Resolves the page description for the Product Detail Page. The description
     * is based on the `product.summary`.
     */
    resolveDescription() {
        return this.product$.pipe(switchMap((product) => this.translation.translate('pageMetaResolver.product.description', {
            description: product.summary,
        })));
    }
    /**
     * Resolves breadcrumbs for the Product Detail Page. The breadcrumbs are driven by
     * a static home page crumb and a crumb for each category.
     */
    resolveBreadcrumbs() {
        return combineLatest([
            this.product$.pipe(),
            this.translation.translate('common.home'),
        ]).pipe(map(([product, label]) => {
            const breadcrumbs = [];
            breadcrumbs.push({ label, link: '/' });
            for (const { name, code, url } of product.categories || []) {
                breadcrumbs.push({
                    label: name || code,
                    link: url,
                });
            }
            return breadcrumbs;
        }));
    }
    /**
     * Resolves the main page image for the Product Detail Page. The product image
     * is based on the PRIMARY product image. The zoom format is used by default.
     */
    resolveImage() {
        return this.product$.pipe(map((product) => { var _a, _b, _c, _d; return (_d = (_c = (_b = (_a = product.images) === null || _a === void 0 ? void 0 : _a.PRIMARY) === null || _b === void 0 ? void 0 : _b.zoom) === null || _c === void 0 ? void 0 : _c.url) !== null && _d !== void 0 ? _d : null; }));
    }
    resolveFirstCategory(product) {
        var _a;
        const firstCategory = (_a = product === null || product === void 0 ? void 0 : product.categories) === null || _a === void 0 ? void 0 : _a[0];
        return firstCategory
            ? ` | ${firstCategory.name || firstCategory.code}`
            : '';
    }
    resolveManufacturer(product) {
        return product.manufacturer ? ` | ${product.manufacturer}` : '';
    }
    resolveRobots() {
        return this.basePageMetaResolver.resolveRobots();
    }
    /**
     * Resolves the canonical url for the product page using the default canonical url
     * configuration.
     *
     * In case of a variant product, the baseProduct code is used to resolve the url. It's important
     * to know that this has a few limitations:
     * - We're not always able to get the super baseProduct, in case of multi-level variants.
     *   OCC only exposes the direct baseProduct, which might still not resolve in the correct
     *   canonical URL. This is business driven and subject to change in a customization.
     * - The url resolved for the variant doesn't contain any content other then the product code.
     *   This means that we do not provide any product data to resolve pretty URLs (for example
     *   the product title).
     */
    resolveCanonicalUrl() {
        return this.product$.pipe(switchMap((product) => this.findBaseProduct(product)), map((product) => {
            const url = this.routingService.getFullUrl({
                cxRoute: 'product',
                params: product,
            });
            return this.pageLinkService.getCanonicalUrl({}, url);
        }));
    }
    /**
     * Resolves the base product whenever the given product is a variant product.
     *
     * Since product variants can be multi-layered, we recursively try to find the base product
     * this might be too opinionated for your business though.
     */
    findBaseProduct(product) {
        if (product === null || product === void 0 ? void 0 : product.baseProduct) {
            return this.productService
                .get(product.baseProduct, "list" /* LIST */)
                .pipe(filter((product) => Boolean(product)), switchMap((baseProduct) => this.findBaseProduct(baseProduct)));
        }
        return of(product);
    }
}
ProductPageMetaResolver.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductPageMetaResolver, deps: [{ token: i1.RoutingService }, { token: i2.ProductService }, { token: i3.TranslationService }, { token: i4.BasePageMetaResolver }, { token: i5.PageLinkService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductPageMetaResolver.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductPageMetaResolver, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductPageMetaResolver, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.ProductService }, { type: i3.TranslationService }, { type: i4.BasePageMetaResolver }, { type: i5.PageLinkService }]; } });
//# sourceMappingURL=data:application/json;base64,