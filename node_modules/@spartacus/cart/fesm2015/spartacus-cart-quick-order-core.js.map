{"version":3,"file":"spartacus-cart-quick-order-core.js","sources":["../../../feature-libs/cart/quick-order/core/services/quick-order.service.ts","../../../feature-libs/cart/quick-order/core/facade/facade-providers.ts","../../../feature-libs/cart/quick-order/core/services/quick-order-state-persistance.service.ts","../../../feature-libs/cart/quick-order/core/quick-order-core.module.ts","../../../feature-libs/cart/quick-order/core/spartacus-cart-quick-order-core.ts"],"sourcesContent":["import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  defaultQuickOrderConfig,\n  QuickOrderAddEntryEvent,\n  QuickOrderFacade,\n} from '@spartacus/cart/quick-order/root';\nimport {\n  ActiveCartService,\n  CartAddEntryFailEvent,\n  CartAddEntrySuccessEvent,\n  EventService,\n  HttpErrorModel,\n  OrderEntry,\n  Product,\n  ProductAdapter,\n  ProductSearchConnector,\n  ProductSearchPage,\n  SearchConfig,\n} from '@spartacus/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  of,\n  Subject,\n  Subscription,\n  timer,\n} from 'rxjs';\nimport { filter, first, map, switchMap, take, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class QuickOrderService implements QuickOrderFacade, OnDestroy {\n  protected productAdded$: Subject<string> = new Subject<string>();\n  protected entries$: BehaviorSubject<OrderEntry[]> = new BehaviorSubject<\n    OrderEntry[]\n  >([]);\n  protected softDeletedEntries$: BehaviorSubject<Record<string, OrderEntry>> =\n    new BehaviorSubject<Record<string, OrderEntry>>({});\n  protected nonPurchasableProductError$: BehaviorSubject<Product | null> =\n    new BehaviorSubject<Product | null>(null);\n  protected hardDeleteTimeout = 5000;\n  protected quickOrderListLimit = 0;\n  protected clearDeleteTimeouts: Record<string, Subscription> = {};\n\n  /**\n   * @deprecated since version 4.2\n   * Use constructor(activeCartService: ActiveCartService, productAdapter: ProductAdapter, eventService: EventService, productSearchConnector: ProductSearchConnector); instead\n   */\n  // TODO(#14059): Remove deprecated constructor\n  constructor(\n    activeCartService: ActiveCartService,\n    productAdapter: ProductAdapter,\n    eventService: EventService\n  );\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected productAdapter: ProductAdapter, // TODO(#14059): Remove this service\n    protected eventService: EventService,\n    protected productSearchConnector?: ProductSearchConnector //TODO(#14059): Make it required\n  ) {}\n\n  ngOnDestroy(): void {\n    this.clearDeletedEntries();\n  }\n\n  /**\n   * Get entries\n   */\n  getEntries(): BehaviorSubject<OrderEntry[]> {\n    return this.entries$;\n  }\n\n  /**\n   * @deprecated since 4.2 - use searchProducts instead\n   * Search product using SKU\n   */\n  search(productCode: string): Observable<Product> {\n    return this.productAdapter.load(productCode);\n  }\n\n  /**\n   * Search products using query\n   */\n  searchProducts(query: string, maxProducts?: number): Observable<Product[]> {\n    // TODO(#14059): Remove condition\n    if (this.productSearchConnector) {\n      const searchConfig: SearchConfig = {\n        pageSize:\n          maxProducts ||\n          defaultQuickOrderConfig.quickOrder?.searchForm?.maxProducts,\n      };\n      return this.productSearchConnector\n        .search(query, searchConfig)\n        .pipe(\n          map((searchPage: ProductSearchPage) => searchPage.products || [])\n        );\n    } else {\n      return of([]);\n    }\n  }\n\n  /**\n   * Clear a list of added entries\n   */\n  clearList(): void {\n    this.entries$.next([]);\n  }\n\n  /**\n   * Get information about the possibility to add the next product\n   */\n  canAdd(code?: string): Observable<boolean> {\n    if (code) {\n      return of(this.isProductOnTheList(code) || !this.isLimitExceeded());\n    } else {\n      return of(!this.isLimitExceeded());\n    }\n  }\n\n  /**\n   * Set quick order list limit property\n   */\n  setListLimit(limit: number): void {\n    this.quickOrderListLimit = limit;\n  }\n\n  /**\n   * Load a list of entries\n   */\n  loadEntries(entries: OrderEntry[] = []): void {\n    this.entries$.next(entries);\n  }\n\n  /**\n   * Load a list of entries\n   */\n  updateEntryQuantity(entryIndex: number, quantity: number): void {\n    const entries = this.entries$.getValue() || [];\n    entries[entryIndex].quantity = quantity;\n\n    this.entries$.next(entries);\n  }\n\n  /**\n   * Delete single entry from the list\n   */\n  softDeleteEntry(index: number): void {\n    this.entries$.pipe(take(1)).subscribe((entries: OrderEntry[]) => {\n      const entriesList = entries;\n      this.addSoftEntryDeletion(entriesList[index], true);\n      entriesList.splice(index, 1);\n      this.entries$.next(entriesList);\n    });\n  }\n\n  /**\n   * @deprecated since 4.2 - use softDeleteEntry instead\n   */\n  removeEntry(index: number): void {\n    this.softDeleteEntry(index);\n  }\n\n  /**\n   * Add product to the quick order list\n   */\n  addProduct(product: Product, quantity: number = 1): void {\n    const entry = this.generateOrderEntry(product, quantity);\n    this.addEntry(entry);\n  }\n\n  /**\n   * Return product added subject\n   */\n  getProductAdded(): Subject<string> {\n    return this.productAdded$;\n  }\n\n  /**\n   * Set product added subject\n   */\n  setProductAdded(productCode: string): void {\n    this.productAdded$.next(productCode);\n  }\n\n  /**\n   * Adding to cart all products from the list\n   */\n  addToCart(): Observable<[OrderEntry[], QuickOrderAddEntryEvent[]]> {\n    let entries: OrderEntry[] = [];\n    const events: QuickOrderAddEntryEvent[] = [];\n    const subscription = this.eventService\n      .get(CartAddEntrySuccessEvent)\n      .subscribe((cartEvent: CartAddEntrySuccessEvent) => {\n        if (\n          cartEvent.quantityAdded === 0 ||\n          (!!cartEvent.quantityAdded &&\n            cartEvent.quantityAdded < cartEvent.quantity)\n        ) {\n          events.push(this.createQuickOrderResultEvent(cartEvent));\n        }\n      });\n\n    subscription.add(\n      this.eventService\n        .get(CartAddEntryFailEvent)\n        .subscribe((cartEvent: CartAddEntryFailEvent) => {\n          events.push(this.createQuickOrderResultEvent(cartEvent));\n        })\n    );\n\n    return this.getEntries().pipe(\n      first(),\n      switchMap((elements) => {\n        entries = elements;\n        this.activeCartService.addEntries(elements);\n        this.clearList();\n\n        return this.activeCartService.isStable();\n      }),\n      filter((isStable) => isStable),\n      map(() => [entries, events] as [OrderEntry[], QuickOrderAddEntryEvent[]]),\n      tap(() => subscription.unsubscribe())\n    );\n  }\n\n  /**\n   * Return soft deleted entries\n   */\n  getSoftDeletedEntries(): Observable<Record<string, OrderEntry>> {\n    return this.softDeletedEntries$;\n  }\n\n  /**\n   * Restore soft deleted entry\n   */\n  restoreSoftDeletedEntry(productCode: string): void {\n    const entry = this.getSoftDeletedEntry(productCode);\n\n    this.addEntry(entry);\n    this.hardDeleteEntry(productCode);\n  }\n\n  /**\n   * Clear deleted entry from the list\n   */\n  hardDeleteEntry(productCode: string): void {\n    const entry = this.getSoftDeletedEntry(productCode);\n    const deletedEntries = this.softDeletedEntries$.getValue();\n\n    if (entry) {\n      delete deletedEntries[productCode];\n      this.softDeletedEntries$.next(deletedEntries);\n    }\n\n    this.clearDeleteTimeout(productCode);\n  }\n\n  /**\n   * Clear all deleted entries and timeout subscriptions\n   */\n  clearDeletedEntries(): void {\n    Object.values(this.clearDeleteTimeouts).forEach(\n      (subscription: Subscription) => subscription.unsubscribe()\n    );\n\n    this.softDeletedEntries$.next({});\n    this.clearDeleteTimeouts = {};\n  }\n\n  /**\n   *  Return non purchasable product error\n   */\n  getNonPurchasableProductError(): Observable<Product | null> {\n    return this.nonPurchasableProductError$;\n  }\n\n  /**\n   * Set error that selected product is not purchasable\n   */\n  setNonPurchasableProductError(product: Product): void {\n    this.nonPurchasableProductError$.next(product);\n  }\n\n  /**\n   * Clear not purchasable product error\n   */\n  clearNonPurchasableProductError(): void {\n    this.nonPurchasableProductError$.next(null);\n  }\n\n  /**\n   * Add soft deleted entry to the cached list\n   */\n  protected addSoftEntryDeletion(\n    entry: OrderEntry,\n    clearTimeout: boolean = true\n  ): void {\n    const deletedEntries = this.softDeletedEntries$.getValue();\n    const productCode = entry?.product?.code;\n\n    if (productCode) {\n      deletedEntries[productCode] = entry;\n\n      this.softDeletedEntries$.next(deletedEntries);\n\n      if (clearTimeout) {\n        const subscription: Subscription = timer(\n          this.hardDeleteTimeout\n        ).subscribe(() => {\n          this.hardDeleteEntry(productCode);\n        });\n\n        this.clearDeleteTimeouts[productCode] = subscription;\n      }\n    }\n  }\n\n  /**\n   * Get soft deletion entry\n   */\n  protected getSoftDeletedEntry(productCode: string): OrderEntry {\n    const deletedEntries = this.softDeletedEntries$.getValue();\n\n    return deletedEntries[productCode];\n  }\n\n  /**\n   * Generate Order Entry from Product\n   */\n  protected generateOrderEntry(\n    product: Product,\n    quantity?: number\n  ): OrderEntry {\n    return {\n      basePrice: product.price,\n      product,\n      quantity,\n      totalPrice: product.price,\n    } as OrderEntry;\n  }\n\n  /**\n   * Add single entry to the list\n   */\n  protected addEntry(entry: OrderEntry): void {\n    if (\n      entry?.product?.code &&\n      !this.isProductOnTheList(entry.product.code) &&\n      this.isLimitExceeded()\n    ) {\n      return;\n    }\n\n    const entries = this.entries$.getValue() || [];\n    const entryStockLevel = entry.product?.stock?.stockLevel;\n\n    if (entryStockLevel && entry.quantity && entry.quantity > entryStockLevel) {\n      entry.quantity = entryStockLevel;\n    }\n\n    if (entry.product?.code && this.isProductOnTheList(entry.product.code)) {\n      const entryIndex = entries.findIndex(\n        (item: OrderEntry) => item.product?.code === entry.product?.code\n      );\n      let quantity = entries[entryIndex].quantity;\n\n      if (quantity && entry.quantity) {\n        entries[entryIndex].quantity = quantity + entry?.quantity;\n        let newQuantity = entries[entryIndex].quantity;\n\n        if (newQuantity && entryStockLevel && newQuantity > entryStockLevel) {\n          entries[entryIndex].quantity = entryStockLevel;\n        }\n\n        this.entries$.next([...entries]);\n      }\n    } else {\n      this.entries$.next([...entries, ...[entry]]);\n    }\n\n    this.productAdded$.next(entry.product?.code);\n  }\n\n  /**\n   * Verify if product is already on the list\n   */\n  protected isProductOnTheList(productCode: string): boolean {\n    const entries = this.entries$.getValue() || [];\n\n    return !!entries.find(\n      (item: OrderEntry) => item.product?.code === productCode\n    );\n  }\n\n  protected isLimitExceeded(): boolean {\n    const entries = this.entries$.getValue() || [];\n\n    return entries.length >= this.quickOrderListLimit;\n  }\n\n  private createQuickOrderResultEvent(\n    cartEvent: CartAddEntrySuccessEvent | CartAddEntryFailEvent\n  ): QuickOrderAddEntryEvent {\n    const evt: QuickOrderAddEntryEvent = {\n      productCode: cartEvent.productCode,\n      quantity: cartEvent.quantity,\n    };\n\n    if ('entry' in cartEvent) {\n      evt.entry = cartEvent.entry;\n    }\n    if ('quantityAdded' in cartEvent) {\n      evt.quantityAdded = cartEvent.quantityAdded;\n    }\n    if ('error' in cartEvent && cartEvent.error instanceof HttpErrorModel) {\n      evt.error = cartEvent.error;\n    }\n\n    if (evt.error?.details?.length) {\n      const isOutOfStock = evt.error?.details.some(\n        (e) => e.type === 'InsufficientStockError'\n      );\n      evt.quantityAdded = isOutOfStock ? 0 : evt.quantity;\n    }\n\n    return evt;\n  }\n\n  protected clearDeleteTimeout(productCode: string): void {\n    const clearMessageTimout = this.clearDeleteTimeouts[productCode];\n\n    if (clearMessageTimout) {\n      clearMessageTimout.unsubscribe();\n      delete this.clearDeleteTimeouts[productCode];\n    }\n  }\n}\n","import { Provider } from '@angular/core';\nimport { QuickOrderFacade } from '@spartacus/cart/quick-order/root';\nimport { QuickOrderService } from '../services/quick-order.service';\n\nexport const facadeProviders: Provider[] = [\n  QuickOrderService,\n  {\n    provide: QuickOrderFacade,\n    useExisting: QuickOrderService,\n  },\n];\n","import { Injectable, OnDestroy } from '@angular/core';\nimport { QuickOrderFacade } from '@spartacus/cart/quick-order/root';\nimport {\n  BASE_SITE_CONTEXT_ID,\n  OrderEntry,\n  SiteContextParamsService,\n  StatePersistenceService,\n  StorageSyncType,\n} from '@spartacus/core';\nimport { Subscription } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuickOrderStatePersistenceService implements OnDestroy {\n  protected subscription = new Subscription();\n\n  constructor(\n    protected quickOrderService: QuickOrderFacade,\n    protected siteContextParamsService: SiteContextParamsService,\n    protected statePersistenceService: StatePersistenceService\n  ) {}\n\n  /**\n   * Identifier used for storage key.\n   */\n  protected key = 'quick-order';\n\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  initSync(): void {\n    this.subscription.add(\n      this.statePersistenceService.syncWithStorage({\n        key: this.key,\n        state$: this.quickOrderService.getEntries(),\n        context$: this.siteContextParamsService.getValues([\n          BASE_SITE_CONTEXT_ID,\n        ]),\n        storageType: StorageSyncType.SESSION_STORAGE,\n        onRead: (state) => this.onRead(state),\n      })\n    );\n  }\n\n  protected onRead(state: OrderEntry[] | undefined): void {\n    if (state) {\n      this.quickOrderService.loadEntries(state);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { facadeProviders } from './facade/facade-providers';\nimport { QuickOrderStatePersistenceService } from './services/quick-order-state-persistance.service';\n\n@NgModule({\n  providers: [...facadeProviders, QuickOrderStatePersistenceService],\n})\nexport class QuickOrderCoreModule {\n  static forRoot(): ModuleWithProviders<QuickOrderCoreModule> {\n    return {\n      ngModule: QuickOrderCoreModule,\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}