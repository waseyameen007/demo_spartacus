{"version":3,"file":"spartacus-cart-quick-order-root.js","sources":["../../../feature-libs/cart/quick-order/root/config/default-quick-order.config.ts","../../../feature-libs/cart/quick-order/root/config/quick-order-config.ts","../../../feature-libs/cart/quick-order/root/feature-name.ts","../../../feature-libs/cart/quick-order/root/facade/quick-order.facade.ts","../../../feature-libs/cart/quick-order/root/pages/quick-order-order-entries-context.ts","../../../feature-libs/cart/quick-order/root/quick-order-root.module.ts","../../../feature-libs/cart/quick-order/root/spartacus-cart-quick-order-root.ts"],"sourcesContent":["import { QuickOrderConfig } from './quick-order-config';\n\nexport const defaultQuickOrderConfig: QuickOrderConfig = {\n  quickOrder: {\n    searchForm: {\n      displayProductImages: true,\n      maxProducts: 5,\n      minCharactersBeforeRequest: 3,\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class QuickOrderConfig {\n  quickOrder?: {\n    searchForm?: {\n      displayProductImages: boolean;\n      maxProducts: number;\n      minCharactersBeforeRequest: number;\n    };\n  };\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends QuickOrderConfig {}\n}\n","export const CART_QUICK_ORDER_FEATURE = 'cartQuickOrder';\nexport const CART_QUICK_ORDER_CORE_FEATURE = 'cartQuickOrderCore';\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { facadeFactory, OrderEntry, Product } from '@spartacus/core';\nimport { CART_QUICK_ORDER_CORE_FEATURE } from '../feature-name';\nimport { QuickOrderAddEntryEvent } from '../models/quick-order.model';\n\nexport function quickOrderFacadeFactory() {\n  return facadeFactory({\n    facade: QuickOrderFacade,\n    feature: CART_QUICK_ORDER_CORE_FEATURE,\n    methods: [\n      'addProduct',\n      'addToCart',\n      'clearList',\n      'canAdd',\n      'setListLimit',\n      'getEntries',\n      'getProductAdded',\n      'loadEntries',\n      'softDeleteEntry',\n      'search',\n      'searchProducts',\n      'setProductAdded',\n      'updateEntryQuantity',\n      'getSoftDeletedEntries',\n      'restoreSoftDeletedEntry',\n      'hardDeleteEntry',\n      'clearDeletedEntries',\n      'getNonPurchasableProductError',\n      'setNonPurchasableProductError',\n      'clearNonPurchasableProductError',\n    ],\n  });\n}\n\n@Injectable({\n  providedIn: 'root',\n  useFactory: quickOrderFacadeFactory,\n})\nexport abstract class QuickOrderFacade {\n  /**\n   * Get entries\n   */\n  abstract getEntries(): BehaviorSubject<OrderEntry[]>;\n\n  /**\n   * @deprecated since 4.2 - use searchProducts instead\n   * Search product using SKU\n   */\n  abstract search(productCode: string): Observable<Product>;\n\n  /**\n   * Search products using query\n   */\n  abstract searchProducts(\n    query: string,\n    maxProducts?: number\n  ): Observable<Product[]>;\n\n  /**\n   * Clear a list of added entries\n   */\n  abstract clearList(): void;\n\n  /**\n   * Get information about the possibility to add the next product\n   */\n  abstract canAdd(code?: string): Observable<boolean>;\n\n  /**\n   * Set quick order list limit property\n   */\n  abstract setListLimit(limit: number): void;\n\n  /**\n   * Load a list of entries\n   */\n  abstract loadEntries(entries: OrderEntry[]): void;\n\n  /**\n   * Load a list of entries\n   */\n  abstract updateEntryQuantity(entryIndex: number, quantity: number): void;\n\n  /**\n   * Delete single entry from the list\n   */\n  abstract softDeleteEntry(index: number): void;\n\n  /**\n   * @deprecated since 4.2 - use softDeleteEntry instead\n   */\n  abstract removeEntry(index: number): void;\n\n  /**\n   * Add product to the quick order list\n   */\n  abstract addProduct(product: Product, quantity?: number): void;\n\n  /**\n   * Return product added subject\n   */\n  abstract getProductAdded(): Subject<string>;\n\n  /**\n   * Set product added subject\n   */\n  abstract setProductAdded(productCode: string): void;\n\n  /**\n   * Adding to cart all products from the list\n   */\n  abstract addToCart(): Observable<[OrderEntry[], QuickOrderAddEntryEvent[]]>;\n\n  /**\n   * Return soft deleted entries\n   */\n  abstract getSoftDeletedEntries(): Observable<Record<string, OrderEntry>>;\n\n  /**\n   * Restore soft deleted entry\n   */\n  abstract restoreSoftDeletedEntry(productCode: string): void;\n\n  /**\n   * Clear deleted entry from the list\n   */\n  abstract hardDeleteEntry(productCode: string): void;\n\n  /**\n   * Clear all deleted entries and timeout subscriptions\n   */\n  abstract clearDeletedEntries(): void;\n\n  /**\n   *  Return non purchasable product error\n   */\n  abstract getNonPurchasableProductError(): Observable<Product | null>;\n\n  /**\n   * Set error that selected product is not purchasable\n   */\n  abstract setNonPurchasableProductError(product: Product): void;\n\n  /**\n   * Clear not purchasable product error\n   */\n  abstract clearNonPurchasableProductError(): void;\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable, isDevMode } from '@angular/core';\nimport { forkJoin, from, Observable, of, Subject } from 'rxjs';\nimport { catchError, filter, switchMap, take, tap } from 'rxjs/operators';\nimport { OrderEntry, Product, ProductConnector } from '@spartacus/core';\nimport {\n  OrderEntriesSource,\n  GetOrderEntriesContext,\n  AddOrderEntriesContext,\n  ProductData,\n  ProductImportInfo,\n  ProductImportStatus,\n} from '@spartacus/storefront';\nimport { QuickOrderFacade } from '../facade/quick-order.facade';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class QuickOrderOrderEntriesContext\n  implements AddOrderEntriesContext, GetOrderEntriesContext\n{\n  readonly type = OrderEntriesSource.QUICK_ORDER;\n\n  constructor(\n    protected quickOrderService: QuickOrderFacade,\n    protected productConnector: ProductConnector\n  ) {}\n\n  getEntries(): Observable<OrderEntry[]> {\n    return this.quickOrderService.getEntries();\n  }\n\n  addEntries(productsData: ProductData[]): Observable<ProductImportInfo> {\n    const results$ = new Subject<ProductImportInfo>();\n\n    forkJoin(\n      productsData.map((productData) =>\n        this.productConnector.get(productData.productCode).pipe(\n          take(1),\n          catchError((response: HttpErrorResponse) => {\n            this.handleErrors(response, productData.productCode, results$);\n            return of(null);\n          })\n        )\n      )\n    )\n      .pipe(\n        switchMap((products) =>\n          from(products as Product[]).pipe(\n            filter((product) => !!product),\n            switchMap((product: Product) =>\n              this.quickOrderService.canAdd(product.code).pipe(\n                take(1),\n                tap((canAdd: boolean) => {\n                  const productData = productsData.find(\n                    (p) => p.productCode === product.code\n                  ) as ProductData;\n                  if (canAdd) {\n                    this.handleResults(product, productData, results$);\n                    this.quickOrderService.addProduct(\n                      product,\n                      productData.quantity\n                    );\n                  } else {\n                    results$.next({\n                      productCode: productData.productCode,\n                      statusCode: ProductImportStatus.LIMIT_EXCEEDED,\n                    });\n                  }\n                })\n              )\n            )\n          )\n        )\n      )\n      .subscribe();\n    return results$.pipe(take(productsData.length));\n  }\n\n  protected handleResults(\n    product: Product,\n    productData: ProductData,\n    results$: Subject<ProductImportInfo>\n  ) {\n    if (\n      product.stock?.stockLevel &&\n      productData.quantity >= product.stock.stockLevel\n    ) {\n      results$.next({\n        productCode: productData.productCode,\n        productName: product?.name,\n        statusCode: ProductImportStatus.LOW_STOCK,\n        quantity: productData.quantity,\n        quantityAdded: product.stock.stockLevel,\n      });\n    } else if (product.stock?.stockLevelStatus === 'outOfStock') {\n      results$.next({\n        productCode: productData.productCode,\n        statusCode: ProductImportStatus.NO_STOCK,\n        productName: product?.name,\n      });\n    } else {\n      results$.next({\n        productCode: productData.productCode,\n        statusCode: ProductImportStatus.SUCCESS,\n      });\n    }\n  }\n\n  protected handleErrors(\n    response: HttpErrorResponse,\n    productCode: string,\n    results$: Subject<ProductImportInfo>\n  ) {\n    if (response?.error?.errors[0].type === 'UnknownIdentifierError') {\n      results$.next({\n        productCode,\n        statusCode: ProductImportStatus.UNKNOWN_IDENTIFIER,\n      });\n    } else {\n      if (isDevMode()) {\n        console.warn(\n          'Unrecognized cart add entry action type while mapping messages',\n          response\n        );\n      }\n      results$.next({\n        productCode,\n        statusCode: ProductImportStatus.UNKNOWN_ERROR,\n      });\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  provideDefaultConfig,\n  provideDefaultConfigFactory,\n  RoutingConfig,\n} from '@spartacus/core';\nimport {\n  CmsPageGuard,\n  ORDER_ENTRIES_CONTEXT,\n  PageLayoutComponent,\n} from '@spartacus/storefront';\nimport { defaultQuickOrderConfig } from './config/default-quick-order.config';\nimport {\n  CART_QUICK_ORDER_CORE_FEATURE,\n  CART_QUICK_ORDER_FEATURE,\n} from './feature-name';\nimport { QuickOrderOrderEntriesContext } from './pages/quick-order-order-entries-context';\n\nexport function defaultQuickOrderComponentsConfig() {\n  const config = {\n    featureModules: {\n      [CART_QUICK_ORDER_FEATURE]: {\n        cmsComponents: ['QuickOrderComponent', 'CartQuickOrderFormComponent'],\n      },\n      // by default core is bundled together with components\n      [CART_QUICK_ORDER_CORE_FEATURE]: CART_QUICK_ORDER_FEATURE,\n    },\n  };\n  return config;\n}\n\nexport const defaultQuickOrderRoutingConfig: RoutingConfig = {\n  routing: {\n    routes: {\n      quickOrder: {\n        paths: ['my-account/quick-order'],\n      },\n    },\n  },\n};\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n      {\n        // @ts-ignore\n        path: null,\n        canActivate: [CmsPageGuard],\n        component: PageLayoutComponent,\n        data: {\n          cxRoute: 'quickOrder',\n          cxContext: {\n            [ORDER_ENTRIES_CONTEXT]: QuickOrderOrderEntriesContext,\n          },\n        },\n      },\n    ]),\n  ],\n  providers: [\n    provideDefaultConfigFactory(defaultQuickOrderComponentsConfig),\n    provideDefaultConfig(defaultQuickOrderRoutingConfig),\n    provideDefaultConfig(defaultQuickOrderConfig),\n  ],\n})\nexport class QuickOrderRootModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}