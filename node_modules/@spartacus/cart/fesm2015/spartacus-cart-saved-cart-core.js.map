{"version":3,"file":"spartacus-cart-saved-cart-core.js","sources":["../../../feature-libs/cart/saved-cart/core/connectors/saved-cart.adapter.ts","../../../feature-libs/cart/saved-cart/core/connectors/saved-cart.connector.ts","../../../feature-libs/cart/saved-cart/core/store/saved-cart-constants.ts","../../../feature-libs/cart/saved-cart/core/store/actions/saved-cart.action.ts","../../../feature-libs/cart/saved-cart/core/events/saved-cart-event.builder.ts","../../../feature-libs/cart/saved-cart/core/events/saved-cart-events.module.ts","../../../feature-libs/cart/saved-cart/core/store/effects/saved-cart.effect.ts","../../../feature-libs/cart/saved-cart/core/store/effects/index.ts","../../../feature-libs/cart/saved-cart/core/store/saved-cart-store.module.ts","../../../feature-libs/cart/saved-cart/core/facade/saved-cart.service.ts","../../../feature-libs/cart/saved-cart/core/facade/facade-providers.ts","../../../feature-libs/cart/saved-cart/core/saved-cart-core.module.ts","../../../feature-libs/cart/saved-cart/core/spartacus-cart-saved-cart-core.ts"],"sourcesContent":["import { Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\nexport abstract class SavedCartAdapter {\n  /**\n   *\n   * Abstract method used to load a single saved cart\n   */\n  abstract load(userId: String, cartId: String): Observable<Cart>;\n  /**\n   *\n   * Abstract method used to load a list of saved carts\n   */\n  abstract loadList(userId: string): Observable<Cart[]>;\n  /**\n   *\n   * Abstract method used to restore a saved cart to an active cart\n   */\n  abstract restoreSavedCart(userId: string, cartId: string): Observable<Cart>;\n  /**\n   *\n   * Abstract method used to save a cart or update a saved cart\n   */\n  abstract saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<Cart>;\n\n  /**\n   *\n   * Abstract method used to clone a saved cart\n   */\n  abstract cloneSavedCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string\n  ): Observable<Cart>;\n}\n","import { Injectable } from '@angular/core';\nimport { Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { SavedCartAdapter } from './saved-cart.adapter';\n\n@Injectable()\nexport class SavedCartConnector {\n  constructor(protected adapter: SavedCartAdapter) {}\n\n  get(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.load(userId, cartId);\n  }\n\n  getList(userId: string): Observable<Cart[]> {\n    return this.adapter.loadList(userId);\n  }\n\n  restoreSavedCart(userId: string, cartId: string): Observable<Cart> {\n    return this.adapter.restoreSavedCart(userId, cartId);\n  }\n\n  saveCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string,\n    saveCartDescription?: string\n  ): Observable<Cart> {\n    return this.adapter.saveCart(\n      userId,\n      cartId,\n      saveCartName,\n      saveCartDescription\n    );\n  }\n\n  cloneSavedCart(\n    userId: string,\n    cartId: string,\n    saveCartName?: string\n  ): Observable<Cart> {\n    return this.adapter.cloneSavedCart(userId, cartId, saveCartName);\n  }\n}\n","export const SAVED_CART_LIST_PROCESS_ID = 'saved-cart-list';\nexport const SAVED_CART_RESTORE_CART_PROCESS_ID = 'saved-cart-restore-cart';\nexport const SAVED_CART_SAVE_CART_PROCESS_ID = 'saved-cart-save-cart';\nexport const SAVED_CART_CLONE_CART_PROCESS_ID = 'saved-cart-clone-cart';\n","import { MULTI_CART_DATA, PROCESS_FEATURE, StateUtils } from '@spartacus/core';\nimport {\n  SAVED_CART_CLONE_CART_PROCESS_ID,\n  SAVED_CART_LIST_PROCESS_ID,\n  SAVED_CART_RESTORE_CART_PROCESS_ID,\n  SAVED_CART_SAVE_CART_PROCESS_ID,\n} from '../saved-cart-constants';\n\nexport const LOAD_SAVED_CART = '[Saved Cart] Load Saved Cart';\nexport const LOAD_SAVED_CART_SUCCESS = '[Saved Cart] Load Saved Cart Success';\nexport const LOAD_SAVED_CART_FAIL = '[Saved Cart] Load Saved Cart Fail';\n\nexport const LOAD_SAVED_CARTS = '[Saved Cart] Load Saved Carts';\nexport const LOAD_SAVED_CARTS_SUCCESS = '[Saved Cart] Load Saved Carts Success';\nexport const LOAD_SAVED_CARTS_FAIL = '[Saved Cart] Load Saved Carts Fail';\nexport const CLEAR_SAVED_CARTS = '[Saved Cart] Clear Saved Carts';\n\nexport const RESTORE_SAVED_CART = '[Saved Cart] Restore Saved Cart';\nexport const RESTORE_SAVED_CART_SUCCESS =\n  '[Saved Cart] Restore Saved Cart Success';\nexport const RESTORE_SAVED_CART_FAIL = '[Saved Cart] Restore Saved Cart Fail';\nexport const CLEAR_RESTORE_SAVED_CART = '[Saved Cart] Clear Restore Saved Cart';\n\nexport const SAVE_CART = '[Saved Cart] Save Cart';\nexport const SAVE_CART_SUCCESS = '[Saved Cart] Save Cart Success';\nexport const SAVE_CART_FAIL = '[Saved Cart] Save Cart Fail';\nexport const CLEAR_SAVE_CART = '[Saved Cart] Clear Save Cart';\n\nexport const EDIT_SAVED_CART = '[Saved Cart] Edit Saved Cart';\nexport const EDIT_SAVED_CART_SUCCESS = '[Saved Cart] Edit Saved Cart Success';\nexport const EDIT_SAVED_CART_FAIL = '[Saved Cart] Edit Saved Cart Fail';\n\nexport const CLONE_SAVED_CART = '[Saved Cart] Clone Saved Cart';\nexport const CLONE_SAVED_CART_SUCCESS = '[Saved Cart] Clone Saved Cart Success';\nexport const CLONE_SAVED_CART_FAIL = '[Saved Cart] Clone Saved Cart Fail';\nexport const CLEAR_CLONE_SAVED_CART = '[Saved Cart] Clear Clone Saved Cart';\n\nexport class LoadSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(MULTI_CART_DATA, payload.cartId);\n  }\n}\n\nexport class LoadSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SAVED_CART_FAIL;\n  constructor(public payload: { userId: string; cartId: string; error: any }) {\n    super(MULTI_CART_DATA, payload.cartId, payload?.error);\n  }\n}\n\nexport class LoadSavedCarts extends StateUtils.EntityLoadAction {\n  readonly type = LOAD_SAVED_CARTS;\n  constructor(\n    public payload: {\n      userId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n  }\n}\n\nexport class LoadSavedCartsSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = LOAD_SAVED_CARTS_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n  }\n}\n\nexport class LoadSavedCartsFail extends StateUtils.EntityFailAction {\n  readonly type = LOAD_SAVED_CARTS_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearSavedCarts extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_SAVED_CARTS;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);\n  }\n}\n\nexport class RestoreSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = RESTORE_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n  }\n}\n\nexport class RestoreSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = RESTORE_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n  }\n}\n\nexport class RestoreSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = RESTORE_SAVED_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearRestoreSavedCart extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_RESTORE_SAVED_CART;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);\n  }\n}\n\nexport class SaveCart extends StateUtils.EntityLoadAction {\n  readonly type = SAVE_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class SaveCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = SAVE_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class SaveCartFail extends StateUtils.EntityFailAction {\n  readonly type = SAVE_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearSaveCart extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_SAVE_CART;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class EditSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = EDIT_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class EditSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = EDIT_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);\n  }\n}\n\nexport class EditSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = EDIT_SAVED_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      saveCartDescription?: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class CloneSavedCart extends StateUtils.EntityLoadAction {\n  readonly type = CLONE_SAVED_CART;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n  }\n}\n\nexport class CloneSavedCartSuccess extends StateUtils.EntitySuccessAction {\n  readonly type = CLONE_SAVED_CART_SUCCESS;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n  }\n}\n\nexport class CloneSavedCartFail extends StateUtils.EntityFailAction {\n  readonly type = CLONE_SAVED_CART_FAIL;\n  constructor(\n    public payload: {\n      userId: string;\n      cartId: string;\n      saveCartName?: string;\n      error: any;\n    }\n  ) {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID, payload.error);\n  }\n}\n\nexport class ClearCloneSavedCart extends StateUtils.EntityLoaderResetAction {\n  readonly type = CLEAR_CLONE_SAVED_CART;\n  constructor() {\n    super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);\n  }\n}\n\nexport type SavedCartActions =\n  | LoadSavedCart\n  | LoadSavedCartSuccess\n  | LoadSavedCartFail\n  | LoadSavedCarts\n  | LoadSavedCartsSuccess\n  | LoadSavedCartsFail\n  | ClearSavedCarts\n  | RestoreSavedCart\n  | RestoreSavedCartSuccess\n  | RestoreSavedCartFail\n  | ClearRestoreSavedCart\n  | SaveCart\n  | SaveCartSuccess\n  | SaveCartFail\n  | ClearSaveCart\n  | EditSavedCart\n  | EditSavedCartSuccess\n  | EditSavedCartFail\n  | CloneSavedCart\n  | CloneSavedCartSuccess\n  | CloneSavedCartFail\n  | ClearCloneSavedCart;\n","import { Injectable, Type } from '@angular/core';\nimport { ofType } from '@ngrx/effects';\nimport { ActionsSubject } from '@ngrx/store';\nimport {\n  CloneSavedCartEvent,\n  CloneSavedCartFailEvent,\n  CloneSavedCartSuccessEvent,\n  DeleteSavedCartEvent,\n  DeleteSavedCartFailEvent,\n  DeleteSavedCartSuccessEvent,\n  EditSavedCartEvent,\n  EditSavedCartFailEvent,\n  EditSavedCartSuccessEvent,\n  RestoreSavedCartEvent,\n  RestoreSavedCartFailEvent,\n  RestoreSavedCartSuccessEvent,\n  SaveCartEvent,\n  SaveCartFailEvent,\n  SaveCartSuccessEvent,\n} from '@spartacus/cart/saved-cart/root';\nimport {\n  ActionToEventMapping,\n  CartActions,\n  createFrom,\n  EventService,\n  MultiCartService,\n  StateEventService,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { filter, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { SavedCartActions } from '../store/actions/index';\n\n@Injectable({ providedIn: 'root' })\nexport class SavedCartEventBuilder {\n  constructor(\n    protected actionsSubject: ActionsSubject,\n    protected eventService: EventService,\n    protected stateEventService: StateEventService,\n    protected multiCartService: MultiCartService\n  ) {\n    this.register();\n  }\n\n  /**\n   * Registers events for the saved cart\n   */\n  protected register(): void {\n    this.registerRestoreSavedCartEvents();\n    this.registerDeleteSavedCartEvents();\n    this.registerSaveCartEvents();\n    this.registerEditSavedCartEvents();\n    this.registerCloneSavedCartEvents();\n  }\n\n  /**\n   * Registers restore saved cart events\n   */\n  protected registerRestoreSavedCartEvents(): void {\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.RESTORE_SAVED_CART,\n      event: RestoreSavedCartEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.RESTORE_SAVED_CART_SUCCESS,\n      event: RestoreSavedCartSuccessEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.RESTORE_SAVED_CART_FAIL,\n      event: RestoreSavedCartFailEvent,\n    });\n  }\n\n  /**\n   * Registers delete saved cart events\n   */\n  protected registerDeleteSavedCartEvents(): void {\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART,\n      event: DeleteSavedCartEvent,\n      factory: (action: CartActions.DeleteCart) =>\n        createFrom(DeleteSavedCartEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART_SUCCESS,\n      event: DeleteSavedCartSuccessEvent,\n      factory: (action: CartActions.DeleteCartSuccess) =>\n        createFrom(DeleteSavedCartSuccessEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: CartActions.DELETE_CART_FAIL,\n      event: DeleteSavedCartFailEvent,\n      factory: (action: CartActions.DeleteCartFail) =>\n        createFrom(DeleteSavedCartFailEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n  }\n\n  /**\n   * Registers save cart events\n   */\n  protected registerSaveCartEvents(): void {\n    this.buildSaveCartSuccessEvent({\n      action: SavedCartActions.SAVE_CART_SUCCESS,\n      event: SaveCartSuccessEvent,\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.SAVE_CART_FAIL,\n      event: SaveCartFailEvent,\n      factory: (action: SavedCartActions.SaveCartFail) =>\n        createFrom(SaveCartFailEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.SAVE_CART,\n      event: SaveCartEvent,\n      factory: (action: SavedCartActions.SaveCart) => {\n        return createFrom(SaveCartEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        });\n      },\n    });\n  }\n\n  /**\n   * Registers edit saved cart events\n   */\n  protected registerEditSavedCartEvents(): void {\n    this.buildSaveCartSuccessEvent({\n      action: SavedCartActions.EDIT_SAVED_CART_SUCCESS,\n      event: EditSavedCartSuccessEvent,\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.EDIT_SAVED_CART_FAIL,\n      event: EditSavedCartFailEvent,\n      factory: (action: SavedCartActions.EditSavedCartFail) =>\n        createFrom(EditSavedCartFailEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        }),\n    });\n\n    this.stateEventService.register({\n      action: SavedCartActions.EDIT_SAVED_CART,\n      event: EditSavedCartEvent,\n      factory: (action: SavedCartActions.EditSavedCart) => {\n        return createFrom(EditSavedCartEvent, {\n          ...action.payload,\n          cartCode: action.payload.cartId,\n        });\n      },\n    });\n  }\n\n  /**\n   * Registers clone saved cart events\n   */\n  protected registerCloneSavedCartEvents(): void {\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.CLONE_SAVED_CART,\n      event: CloneSavedCartEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.CLONE_SAVED_CART_SUCCESS,\n      event: CloneSavedCartSuccessEvent,\n    });\n\n    this.buildRestoreSavedCartEvents({\n      action: SavedCartActions.CLONE_SAVED_CART_FAIL,\n      event: CloneSavedCartFailEvent,\n    });\n  }\n\n  /**\n   * Builds the restore save cart events from the action and cart\n   *\n   * @param mapping mapping declaration from `action` string type to `event` class type\n   * @param saveTime should the saveTime attribute be added to the event\n   * @returns\n   */\n  protected buildRestoreSavedCartEvents<T>(\n    mapping: ActionToEventMapping<T>\n  ): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      switchMap((action) =>\n        of(action).pipe(\n          withLatestFrom(this.multiCartService.getCart(action.payload.cartId))\n        )\n      ),\n      map(([action, cart]) =>\n        createFrom(mapping.event as Type<T>, {\n          ...action.payload,\n          cartCode: cart.code,\n          saveCartName: cart.name,\n          saveCartDescription: cart.description,\n          ...(cart.saveTime && { saveTime: cart.saveTime }),\n        })\n      )\n    );\n    return this.eventService.register(mapping.event as Type<T>, eventStream$);\n  }\n\n  /**\n   * Builds save cart event by adding the saveTime from the cart\n   *\n   * @param mapping mapping declaration from `action` string type to `event` class type\n   * @returns events register function\n   */\n  protected buildSaveCartSuccessEvent<T>(\n    mapping: ActionToEventMapping<T>\n  ): () => void {\n    const eventStream$ = this.getAction(mapping.action).pipe(\n      switchMap((action) =>\n        of(action).pipe(\n          withLatestFrom(this.multiCartService.getCart(action.payload.cartId))\n        )\n      ),\n      filter(([, cart]) => Boolean(cart)),\n      map(([action, cart]) =>\n        createFrom(mapping.event as Type<T>, {\n          ...action.payload,\n          cartCode: cart.code,\n          saveTime: cart.saveTime,\n        })\n      )\n    );\n    return this.eventService.register(mapping.event as Type<T>, eventStream$);\n  }\n\n  /**\n   * Returns a stream of actions only of a given type(s)\n   *\n   * @param actionType type(s) of actions\n   */\n  protected getAction(\n    actionType: string | string[]\n  ): Observable<{ type: string; payload?: any }> {\n    return this.actionsSubject.pipe(\n      ofType(...([] as string[]).concat(actionType))\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { SavedCartEventBuilder } from './saved-cart-event.builder';\n\n@NgModule({})\nexport class SavedCartEventsModule {\n  constructor(_savedCartEventBuilder: SavedCartEventBuilder) {}\n}\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport {\n  ActiveCartService,\n  Cart,\n  CartActions,\n  GlobalMessageService,\n  GlobalMessageType,\n  normalizeHttpError,\n} from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';\nimport { SavedCartConnector } from '../../connectors/saved-cart.connector';\nimport { SavedCartActions } from '../actions/index';\n\n@Injectable()\nexport class SavedCartEffects {\n  @Effect()\n  loadSavedCart$: Observable<\n    | CartActions.LoadCartSuccess\n    | SavedCartActions.LoadSavedCartFail\n    | SavedCartActions.LoadSavedCartSuccess\n  > = this.actions$.pipe(\n    ofType(SavedCartActions.LOAD_SAVED_CART),\n    map((action: SavedCartActions.LoadSavedCart) => action.payload),\n    switchMap(({ userId, cartId }) =>\n      this.savedCartConnector.get(userId, cartId).pipe(\n        switchMap((savedCart: Cart) => {\n          return [\n            new CartActions.LoadCartSuccess({\n              userId,\n              cartId,\n              cart: savedCart,\n            }),\n            new SavedCartActions.LoadSavedCartSuccess({ userId, cartId }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new SavedCartActions.LoadSavedCartFail({\n              userId,\n              cartId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  loadSavedCarts$: Observable<\n    | CartActions.LoadCartsSuccess\n    | SavedCartActions.LoadSavedCartsFail\n    | SavedCartActions.LoadSavedCartsSuccess\n  > = this.actions$.pipe(\n    ofType(SavedCartActions.LOAD_SAVED_CARTS),\n    map((action: SavedCartActions.LoadSavedCarts) => action.payload),\n    switchMap(({ userId }) =>\n      this.savedCartConnector.getList(userId).pipe(\n        switchMap((savedCarts: Cart[]) => {\n          return [\n            new CartActions.LoadCartsSuccess(savedCarts),\n            new SavedCartActions.LoadSavedCartsSuccess({ userId }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new SavedCartActions.LoadSavedCartsFail({\n              userId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      )\n    )\n  );\n\n  @Effect()\n  restoreSavedCart$: Observable<\n    | SavedCartActions.RestoreSavedCartFail\n    | SavedCartActions.RestoreSavedCartSuccess\n    | SavedCartActions.LoadSavedCarts\n    | SavedCartActions.SaveCart\n    | CartActions.LoadCartSuccess\n    | CartActions.SetActiveCartId\n  > = this.actions$.pipe(\n    ofType(SavedCartActions.RESTORE_SAVED_CART),\n    map((action: SavedCartActions.RestoreSavedCart) => action.payload),\n    withLatestFrom(this.activeCartService.getActive()),\n    switchMap(([{ userId, cartId }, activeCart]) => {\n      const actions: any[] = [];\n\n      if ((activeCart?.entries ?? []).length > 0) {\n        if (activeCart.code) {\n          /**\n           * Instead of calling the SaveCartAction, we are calling the edit saved cart\n           * because we do not want to clear the state when we swap carts between active and saved cart\n           */\n          actions.push(\n            new SavedCartActions.EditSavedCart({\n              userId,\n              cartId: activeCart.code,\n              saveCartName: '',\n              saveCartDescription: '',\n            })\n          );\n        }\n      }\n\n      return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(\n        switchMap((savedCart: Cart) => {\n          this.globalMessageService.add(\n            {\n              key:\n                (activeCart?.entries ?? []).length > 0\n                  ? 'savedCartList.swapCartWithActiveCart'\n                  : 'savedCartList.swapCartNoActiveCart',\n              params: {\n                cartName: cartId,\n                previousCartName: activeCart.code,\n              },\n            },\n            GlobalMessageType.MSG_TYPE_CONFIRMATION\n          );\n\n          return [\n            ...actions,\n            new CartActions.SetActiveCartId(cartId),\n            new CartActions.LoadCartSuccess({\n              userId,\n              cartId,\n              cart: savedCart,\n            }),\n            new SavedCartActions.RestoreSavedCartSuccess({ userId, cartId }),\n          ];\n        }),\n        catchError((error: HttpErrorResponse) =>\n          of(\n            new SavedCartActions.RestoreSavedCartFail({\n              userId,\n              cartId,\n              error: normalizeHttpError(error),\n            })\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  saveCart$: Observable<\n    | SavedCartActions.SaveCartFail\n    | SavedCartActions.SaveCartSuccess\n    | SavedCartActions.SaveCart\n    | CartActions.LoadCartSuccess\n    | CartActions.ClearCartState\n  > = this.actions$.pipe(\n    ofType(SavedCartActions.SAVE_CART),\n    map((action: SavedCartActions.SaveCart) => action.payload),\n    switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {\n      return this.savedCartConnector\n        .saveCart(userId, cartId, saveCartName, saveCartDescription)\n        .pipe(\n          switchMap((savedCart: Cart) => {\n            return [\n              new CartActions.ClearCartState(),\n              new CartActions.LoadCartSuccess({\n                userId,\n                cartId,\n                cart: savedCart,\n              }),\n              new SavedCartActions.SaveCartSuccess({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n              }),\n            ];\n          }),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new SavedCartActions.SaveCartFail({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  editSavedCart$: Observable<\n    | SavedCartActions.EditSavedCartFail\n    | SavedCartActions.EditSavedCartSuccess\n    | SavedCartActions.EditSavedCart\n    | CartActions.LoadCartSuccess\n  > = this.actions$.pipe(\n    ofType(SavedCartActions.EDIT_SAVED_CART),\n    map((action: SavedCartActions.EditSavedCart) => action.payload),\n    switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {\n      return this.savedCartConnector\n        .saveCart(userId, cartId, saveCartName, saveCartDescription)\n        .pipe(\n          switchMap((savedCart: Cart) => {\n            return [\n              new CartActions.LoadCartSuccess({\n                userId,\n                cartId,\n                cart: savedCart,\n              }),\n              new SavedCartActions.EditSavedCartSuccess({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n              }),\n            ];\n          }),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new SavedCartActions.EditSavedCartFail({\n                userId,\n                cartId,\n                saveCartName,\n                saveCartDescription,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        );\n    })\n  );\n\n  @Effect()\n  cloneSavedCart$: Observable<\n    | SavedCartActions.CloneSavedCartFail\n    | SavedCartActions.CloneSavedCartSuccess\n    | SavedCartActions.CloneSavedCart\n    | SavedCartActions.RestoreSavedCart\n    | SavedCartActions.LoadSavedCarts\n  > = this.actions$.pipe(\n    ofType(SavedCartActions.CLONE_SAVED_CART),\n    map((action: SavedCartActions.CloneSavedCart) => action.payload),\n    switchMap(({ userId, cartId, saveCartName }) => {\n      return this.savedCartConnector\n        .cloneSavedCart(userId, cartId, saveCartName)\n        .pipe(\n          switchMap((_) => {\n            return [\n              new SavedCartActions.CloneSavedCartSuccess({\n                userId,\n                cartId,\n                saveCartName,\n              }),\n              new SavedCartActions.RestoreSavedCart({\n                userId,\n                cartId,\n              }),\n              new SavedCartActions.LoadSavedCarts({ userId }),\n            ];\n          }),\n          catchError((error: HttpErrorResponse) =>\n            of(\n              new SavedCartActions.CloneSavedCartFail({\n                userId,\n                cartId,\n                saveCartName,\n                error: normalizeHttpError(error),\n              })\n            )\n          )\n        );\n    })\n  );\n\n  constructor(\n    private actions$: Actions,\n    private savedCartConnector: SavedCartConnector,\n    private activeCartService: ActiveCartService,\n    private globalMessageService: GlobalMessageService\n  ) {}\n}\n","import { SavedCartEffects } from './saved-cart.effect';\n\nexport const effects: any[] = [SavedCartEffects];\n\nexport * from './saved-cart.effect';\n","import { NgModule } from '@angular/core';\nimport { EffectsModule } from '@ngrx/effects';\nimport { effects } from './effects/index';\n\n@NgModule({\n  imports: [EffectsModule.forFeature(effects)],\n})\nexport class SavedCartStoreModule {}\n","import { Injectable } from '@angular/core';\nimport { select, Store } from '@ngrx/store';\nimport {\n  DeleteSavedCartEvent,\n  SavedCartFacade,\n} from '@spartacus/cart/saved-cart/root';\nimport {\n  Cart,\n  EventService,\n  getWishlistName,\n  isSelectiveCart,\n  MultiCartService,\n  ProcessSelectors,\n  StateUtils,\n  StateWithMultiCart,\n  StateWithProcess,\n  UserIdService,\n  UserService,\n} from '@spartacus/core';\nimport { combineLatest, EMPTY, Observable, queueScheduler } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  observeOn,\n  pluck,\n  shareReplay,\n  startWith,\n  tap,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { SavedCartActions } from '../store/actions/index';\nimport {\n  SAVED_CART_CLONE_CART_PROCESS_ID,\n  SAVED_CART_LIST_PROCESS_ID,\n  SAVED_CART_RESTORE_CART_PROCESS_ID,\n  SAVED_CART_SAVE_CART_PROCESS_ID,\n} from '../store/saved-cart-constants';\n\n@Injectable()\nexport class SavedCartService implements SavedCartFacade {\n  constructor(\n    protected store: Store<StateWithMultiCart | StateWithProcess<void>>,\n    protected userIdService: UserIdService,\n    protected userService: UserService,\n    protected multiCartService: MultiCartService,\n    protected eventService: EventService\n  ) {}\n\n  /**\n   * Loads a single saved cart\n   */\n  loadSavedCart(cartId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.LoadSavedCart({ userId, cartId })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets a single saved cart\n   * it won't emit if the delete saved cart event gets triggered to avoid race condition between actions\n   *\n   * @param cartId\n   * @returns observable with cart\n   */\n  get(cartId: string): Observable<Cart | undefined> {\n    return this.getSavedCart(cartId).pipe(\n      observeOn(queueScheduler),\n      withLatestFrom(\n        this.eventService.get(DeleteSavedCartEvent).pipe(startWith({}))\n      ),\n      filter(([state, _event]) => !!state),\n      tap(([state, event]) => {\n        if (Object.keys(event).length > 0) {\n          return EMPTY;\n        }\n\n        if (!(state.loading || state.success || state.error)) {\n          this.loadSavedCart(cartId);\n        }\n      }),\n      filter(([state]) => state.success || !!state.error),\n      map(([state]) => state.value)\n    );\n  }\n\n  /**\n   * Gets the selected cart state\n   *\n   * @param cartId\n   * @returns observable of selected cart with loader state\n   */\n  getSavedCart(\n    cartId: string\n  ): Observable<StateUtils.ProcessesLoaderState<Cart>> {\n    return this.multiCartService.getCartEntity(cartId);\n  }\n\n  /**\n   * Returns true when there are no operations on that in progress and it is not currently loading\n   *\n   * @param cartId\n   */\n  isStable(cartId: string): Observable<boolean> {\n    return this.multiCartService.isStable(cartId);\n  }\n\n  /**\n   * Loads a list of saved carts\n   */\n  loadSavedCarts(): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.LoadSavedCarts({ userId })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets a list of saved carts\n   *\n   * @returns observable with list of saved carts\n   */\n  getList(): Observable<Cart[]> {\n    return this.getSavedCartList().pipe(\n      withLatestFrom(this.getSavedCartListProcess()),\n      tap(([_, state]) => {\n        if (!(state.loading || state.success || state.error)) {\n          this.loadSavedCarts();\n        }\n      }),\n      pluck(0),\n      shareReplay({ bufferSize: 1, refCount: true })\n    );\n  }\n\n  /**\n   * Gets a list of saved carts from all carts in the state\n   * by filtering through the carts that are not wishlist and not saved cart\n   *\n   * @returns observable with list of saved carts\n   */\n  getSavedCartList(): Observable<Cart[]> {\n    return combineLatest([\n      this.multiCartService.getCarts(),\n      this.userService.get(),\n    ]).pipe(\n      distinctUntilChanged(),\n      map(([carts, user]) =>\n        carts.filter(\n          (cart) =>\n            (user?.customerId !== undefined\n              ? cart?.name !== getWishlistName(user?.customerId)\n              : true) &&\n            !isSelectiveCart(cart?.code) &&\n            cart?.saveTime\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the loading flag of getting a list of saved carts\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getSavedCartListProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(SAVED_CART_LIST_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Gets the loading state of getting a list of saved carts\n   *\n   * @returns observable with boolean of the loader state\n   */\n  getSavedCartListProcess(): Observable<StateUtils.LoaderState<any>> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessStateFactory(SAVED_CART_LIST_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of performing a saved cart\n   */\n  clearSavedCarts(): void {\n    this.store.dispatch(new SavedCartActions.ClearSavedCarts());\n  }\n\n  /**\n   * Triggers a restore saved cart\n   *\n   * @param cartId\n   */\n  restoreSavedCart(cartId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.RestoreSavedCart({\n            userId,\n            cartId,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets the loading state of restoring saved cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getRestoreSavedCartProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          SAVED_CART_RESTORE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the success state of restoring saved cart\n   *\n   * @returns observable with boolean of the success state\n   */\n  getRestoreSavedCartProcessSuccess(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          SAVED_CART_RESTORE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the error state of restoring saved cart\n   *\n   * @returns observable with boolean of the error state\n   */\n  getRestoreSavedCartProcessError(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          SAVED_CART_RESTORE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of performing a restore saved cart\n   */\n  clearRestoreSavedCart(): void {\n    this.store.dispatch(new SavedCartActions.ClearRestoreSavedCart());\n  }\n\n  /**\n   * Triggers delete saved cart\n   * @param cartId\n   */\n  deleteSavedCart(cartId: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.multiCartService.deleteCart(cartId, userId);\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Triggers a saved cart\n   *\n   */\n  saveCart({\n    cartId,\n    saveCartName,\n    saveCartDescription,\n  }: {\n    cartId: string;\n    saveCartName?: string;\n    saveCartDescription?: string;\n  }): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.SaveCart({\n            userId,\n            cartId,\n            saveCartName,\n            saveCartDescription,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets the loading state of saving a cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getSaveCartProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          SAVED_CART_SAVE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the success state of saving a cart\n   *\n   * @returns observable with boolean of the success state\n   */\n  getSaveCartProcessSuccess(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          SAVED_CART_SAVE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the error state of saving a cart\n   *\n   * @returns observable with boolean of the error state\n   */\n  getSaveCartProcessError(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(SAVED_CART_SAVE_CART_PROCESS_ID)\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of performing a save cart\n   */\n  clearSaveCart(): void {\n    this.store.dispatch(new SavedCartActions.ClearSaveCart());\n  }\n\n  /**\n   * Triggers an edit saved cart\n   *\n   */\n  editSavedCart({\n    cartId,\n    saveCartName,\n    saveCartDescription,\n  }: {\n    cartId: string;\n    saveCartName?: string;\n    saveCartDescription?: string;\n  }): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.EditSavedCart({\n            userId,\n            cartId,\n            saveCartName,\n            saveCartDescription,\n          })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Triggers a clone saved cart\n   *\n   * @param cartId\n   */\n  cloneSavedCart(cartId: string, saveCartName?: string): void {\n    this.userIdService.takeUserId(true).subscribe(\n      (userId) => {\n        return this.store.dispatch(\n          new SavedCartActions.CloneSavedCart({ userId, cartId, saveCartName })\n        );\n      },\n      () => {\n        // TODO: for future releases, refactor this part to thrown errors\n      }\n    );\n  }\n\n  /**\n   * Gets the loading state of cloning a saved cart\n   *\n   * @returns observable with boolean of the loading state\n   */\n  getCloneSavedCartProcessLoading(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessLoadingFactory(\n          SAVED_CART_CLONE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the success state of cloning a saved cart\n   *\n   * @returns observable with boolean of the success state\n   */\n  getCloneSavedCartProcessSuccess(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessSuccessFactory(\n          SAVED_CART_CLONE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Gets the error state of cloning a saved cart\n   *\n   * @returns observable with boolean of the error state\n   */\n  getCloneSavedCartProcessError(): Observable<boolean> {\n    return (<Store<StateWithProcess<void>>>this.store).pipe(\n      select(\n        ProcessSelectors.getProcessErrorFactory(\n          SAVED_CART_CLONE_CART_PROCESS_ID\n        )\n      )\n    );\n  }\n\n  /**\n   * Clears the process state of cloning a saved cart\n   */\n  clearCloneSavedCart(): void {\n    this.store.dispatch(new SavedCartActions.ClearCloneSavedCart());\n  }\n}\n","import { Provider } from '@angular/core';\nimport { SavedCartFacade } from '@spartacus/cart/saved-cart/root';\nimport { SavedCartService } from './saved-cart.service';\n\nexport const facadeProviders: Provider[] = [\n  SavedCartService,\n  {\n    provide: SavedCartFacade,\n    useExisting: SavedCartService,\n  },\n];\n","import { NgModule } from '@angular/core';\nimport { SavedCartConnector } from './connectors/saved-cart.connector';\nimport { SavedCartEventsModule } from './events/saved-cart-events.module';\nimport { SavedCartStoreModule } from './store/saved-cart-store.module';\nimport { facadeProviders } from './facade/facade-providers';\n\n@NgModule({\n  imports: [SavedCartStoreModule, SavedCartEventsModule],\n  providers: [SavedCartConnector, ...facadeProviders],\n})\nexport class SavedCartCoreModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["SavedCartActions.RESTORE_SAVED_CART","SavedCartActions.RESTORE_SAVED_CART_SUCCESS","SavedCartActions.RESTORE_SAVED_CART_FAIL","SavedCartActions.SAVE_CART_SUCCESS","SavedCartActions.SAVE_CART_FAIL","SavedCartActions.SAVE_CART","SavedCartActions.EDIT_SAVED_CART_SUCCESS","SavedCartActions.EDIT_SAVED_CART_FAIL","SavedCartActions.EDIT_SAVED_CART","SavedCartActions.CLONE_SAVED_CART","SavedCartActions.CLONE_SAVED_CART_SUCCESS","SavedCartActions.CLONE_SAVED_CART_FAIL","SavedCartActions.LOAD_SAVED_CART","SavedCartActions.LoadSavedCartSuccess","SavedCartActions.LoadSavedCartFail","SavedCartActions.LOAD_SAVED_CARTS","SavedCartActions.LoadSavedCartsSuccess","SavedCartActions.LoadSavedCartsFail","SavedCartActions.EditSavedCart","SavedCartActions.RestoreSavedCartSuccess","SavedCartActions.RestoreSavedCartFail","SavedCartActions.SaveCartSuccess","SavedCartActions.SaveCartFail","SavedCartActions.EditSavedCartSuccess","SavedCartActions.EditSavedCartFail","SavedCartActions.CloneSavedCartSuccess","SavedCartActions.RestoreSavedCart","SavedCartActions.LoadSavedCarts","SavedCartActions.CloneSavedCartFail","SavedCartActions.LoadSavedCart","SavedCartActions.ClearSavedCarts","SavedCartActions.ClearRestoreSavedCart","SavedCartActions.SaveCart","SavedCartActions.ClearSaveCart","SavedCartActions.CloneSavedCart","SavedCartActions.ClearCloneSavedCart"],"mappings":"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"}