import { Injectable } from '@angular/core';
import { facadeFactory } from '@spartacus/core';
import { CART_QUICK_ORDER_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export function quickOrderFacadeFactory() {
    return facadeFactory({
        facade: QuickOrderFacade,
        feature: CART_QUICK_ORDER_CORE_FEATURE,
        methods: [
            'addProduct',
            'addToCart',
            'clearList',
            'canAdd',
            'setListLimit',
            'getEntries',
            'getProductAdded',
            'loadEntries',
            'softDeleteEntry',
            'search',
            'searchProducts',
            'setProductAdded',
            'updateEntryQuantity',
            'getSoftDeletedEntries',
            'restoreSoftDeletedEntry',
            'hardDeleteEntry',
            'clearDeletedEntries',
            'getNonPurchasableProductError',
            'setNonPurchasableProductError',
            'clearNonPurchasableProductError',
        ],
    });
}
export class QuickOrderFacade {
}
QuickOrderFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
QuickOrderFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderFacade, providedIn: 'root', useFactory: quickOrderFacadeFactory });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: quickOrderFacadeFactory,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2stb3JkZXIuZmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2NhcnQvcXVpY2stb3JkZXIvcm9vdC9mYWNhZGUvcXVpY2stb3JkZXIuZmFjYWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGFBQWEsRUFBdUIsTUFBTSxpQkFBaUIsQ0FBQztBQUNyRSxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFHaEUsTUFBTSxVQUFVLHVCQUF1QjtJQUNyQyxPQUFPLGFBQWEsQ0FBQztRQUNuQixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLE9BQU8sRUFBRSw2QkFBNkI7UUFDdEMsT0FBTyxFQUFFO1lBQ1AsWUFBWTtZQUNaLFdBQVc7WUFDWCxXQUFXO1lBQ1gsUUFBUTtZQUNSLGNBQWM7WUFDZCxZQUFZO1lBQ1osaUJBQWlCO1lBQ2pCLGFBQWE7WUFDYixpQkFBaUI7WUFDakIsUUFBUTtZQUNSLGdCQUFnQjtZQUNoQixpQkFBaUI7WUFDakIscUJBQXFCO1lBQ3JCLHVCQUF1QjtZQUN2Qix5QkFBeUI7WUFDekIsaUJBQWlCO1lBQ2pCLHFCQUFxQjtZQUNyQiwrQkFBK0I7WUFDL0IsK0JBQStCO1lBQy9CLGlDQUFpQztTQUNsQztLQUNGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFNRCxNQUFNLE9BQWdCLGdCQUFnQjs7NkdBQWhCLGdCQUFnQjtpSEFBaEIsZ0JBQWdCLGNBSHhCLE1BQU0sY0FDTix1QkFBdUI7MkZBRWYsZ0JBQWdCO2tCQUpyQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO29CQUNsQixVQUFVLEVBQUUsdUJBQXVCO2lCQUNwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmFjYWRlRmFjdG9yeSwgT3JkZXJFbnRyeSwgUHJvZHVjdCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBDQVJUX1FVSUNLX09SREVSX0NPUkVfRkVBVFVSRSB9IGZyb20gJy4uL2ZlYXR1cmUtbmFtZSc7XG5pbXBvcnQgeyBRdWlja09yZGVyQWRkRW50cnlFdmVudCB9IGZyb20gJy4uL21vZGVscy9xdWljay1vcmRlci5tb2RlbCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBxdWlja09yZGVyRmFjYWRlRmFjdG9yeSgpIHtcbiAgcmV0dXJuIGZhY2FkZUZhY3Rvcnkoe1xuICAgIGZhY2FkZTogUXVpY2tPcmRlckZhY2FkZSxcbiAgICBmZWF0dXJlOiBDQVJUX1FVSUNLX09SREVSX0NPUkVfRkVBVFVSRSxcbiAgICBtZXRob2RzOiBbXG4gICAgICAnYWRkUHJvZHVjdCcsXG4gICAgICAnYWRkVG9DYXJ0JyxcbiAgICAgICdjbGVhckxpc3QnLFxuICAgICAgJ2NhbkFkZCcsXG4gICAgICAnc2V0TGlzdExpbWl0JyxcbiAgICAgICdnZXRFbnRyaWVzJyxcbiAgICAgICdnZXRQcm9kdWN0QWRkZWQnLFxuICAgICAgJ2xvYWRFbnRyaWVzJyxcbiAgICAgICdzb2Z0RGVsZXRlRW50cnknLFxuICAgICAgJ3NlYXJjaCcsXG4gICAgICAnc2VhcmNoUHJvZHVjdHMnLFxuICAgICAgJ3NldFByb2R1Y3RBZGRlZCcsXG4gICAgICAndXBkYXRlRW50cnlRdWFudGl0eScsXG4gICAgICAnZ2V0U29mdERlbGV0ZWRFbnRyaWVzJyxcbiAgICAgICdyZXN0b3JlU29mdERlbGV0ZWRFbnRyeScsXG4gICAgICAnaGFyZERlbGV0ZUVudHJ5JyxcbiAgICAgICdjbGVhckRlbGV0ZWRFbnRyaWVzJyxcbiAgICAgICdnZXROb25QdXJjaGFzYWJsZVByb2R1Y3RFcnJvcicsXG4gICAgICAnc2V0Tm9uUHVyY2hhc2FibGVQcm9kdWN0RXJyb3InLFxuICAgICAgJ2NsZWFyTm9uUHVyY2hhc2FibGVQcm9kdWN0RXJyb3InLFxuICAgIF0sXG4gIH0pO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRmFjdG9yeTogcXVpY2tPcmRlckZhY2FkZUZhY3RvcnksXG59KVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFF1aWNrT3JkZXJGYWNhZGUge1xuICAvKipcbiAgICogR2V0IGVudHJpZXNcbiAgICovXG4gIGFic3RyYWN0IGdldEVudHJpZXMoKTogQmVoYXZpb3JTdWJqZWN0PE9yZGVyRW50cnlbXT47XG5cbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBzZWFyY2hQcm9kdWN0cyBpbnN0ZWFkXG4gICAqIFNlYXJjaCBwcm9kdWN0IHVzaW5nIFNLVVxuICAgKi9cbiAgYWJzdHJhY3Qgc2VhcmNoKHByb2R1Y3RDb2RlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFByb2R1Y3Q+O1xuXG4gIC8qKlxuICAgKiBTZWFyY2ggcHJvZHVjdHMgdXNpbmcgcXVlcnlcbiAgICovXG4gIGFic3RyYWN0IHNlYXJjaFByb2R1Y3RzKFxuICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgbWF4UHJvZHVjdHM/OiBudW1iZXJcbiAgKTogT2JzZXJ2YWJsZTxQcm9kdWN0W10+O1xuXG4gIC8qKlxuICAgKiBDbGVhciBhIGxpc3Qgb2YgYWRkZWQgZW50cmllc1xuICAgKi9cbiAgYWJzdHJhY3QgY2xlYXJMaXN0KCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEdldCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcG9zc2liaWxpdHkgdG8gYWRkIHRoZSBuZXh0IHByb2R1Y3RcbiAgICovXG4gIGFic3RyYWN0IGNhbkFkZChjb2RlPzogc3RyaW5nKTogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICAvKipcbiAgICogU2V0IHF1aWNrIG9yZGVyIGxpc3QgbGltaXQgcHJvcGVydHlcbiAgICovXG4gIGFic3RyYWN0IHNldExpc3RMaW1pdChsaW1pdDogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogTG9hZCBhIGxpc3Qgb2YgZW50cmllc1xuICAgKi9cbiAgYWJzdHJhY3QgbG9hZEVudHJpZXMoZW50cmllczogT3JkZXJFbnRyeVtdKTogdm9pZDtcblxuICAvKipcbiAgICogTG9hZCBhIGxpc3Qgb2YgZW50cmllc1xuICAgKi9cbiAgYWJzdHJhY3QgdXBkYXRlRW50cnlRdWFudGl0eShlbnRyeUluZGV4OiBudW1iZXIsIHF1YW50aXR5OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBEZWxldGUgc2luZ2xlIGVudHJ5IGZyb20gdGhlIGxpc3RcbiAgICovXG4gIGFic3RyYWN0IHNvZnREZWxldGVFbnRyeShpbmRleDogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgNC4yIC0gdXNlIHNvZnREZWxldGVFbnRyeSBpbnN0ZWFkXG4gICAqL1xuICBhYnN0cmFjdCByZW1vdmVFbnRyeShpbmRleDogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogQWRkIHByb2R1Y3QgdG8gdGhlIHF1aWNrIG9yZGVyIGxpc3RcbiAgICovXG4gIGFic3RyYWN0IGFkZFByb2R1Y3QocHJvZHVjdDogUHJvZHVjdCwgcXVhbnRpdHk/OiBudW1iZXIpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXR1cm4gcHJvZHVjdCBhZGRlZCBzdWJqZWN0XG4gICAqL1xuICBhYnN0cmFjdCBnZXRQcm9kdWN0QWRkZWQoKTogU3ViamVjdDxzdHJpbmc+O1xuXG4gIC8qKlxuICAgKiBTZXQgcHJvZHVjdCBhZGRlZCBzdWJqZWN0XG4gICAqL1xuICBhYnN0cmFjdCBzZXRQcm9kdWN0QWRkZWQocHJvZHVjdENvZGU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEFkZGluZyB0byBjYXJ0IGFsbCBwcm9kdWN0cyBmcm9tIHRoZSBsaXN0XG4gICAqL1xuICBhYnN0cmFjdCBhZGRUb0NhcnQoKTogT2JzZXJ2YWJsZTxbT3JkZXJFbnRyeVtdLCBRdWlja09yZGVyQWRkRW50cnlFdmVudFtdXT47XG5cbiAgLyoqXG4gICAqIFJldHVybiBzb2Z0IGRlbGV0ZWQgZW50cmllc1xuICAgKi9cbiAgYWJzdHJhY3QgZ2V0U29mdERlbGV0ZWRFbnRyaWVzKCk6IE9ic2VydmFibGU8UmVjb3JkPHN0cmluZywgT3JkZXJFbnRyeT4+O1xuXG4gIC8qKlxuICAgKiBSZXN0b3JlIHNvZnQgZGVsZXRlZCBlbnRyeVxuICAgKi9cbiAgYWJzdHJhY3QgcmVzdG9yZVNvZnREZWxldGVkRW50cnkocHJvZHVjdENvZGU6IHN0cmluZyk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENsZWFyIGRlbGV0ZWQgZW50cnkgZnJvbSB0aGUgbGlzdFxuICAgKi9cbiAgYWJzdHJhY3QgaGFyZERlbGV0ZUVudHJ5KHByb2R1Y3RDb2RlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgZGVsZXRlZCBlbnRyaWVzIGFuZCB0aW1lb3V0IHN1YnNjcmlwdGlvbnNcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyRGVsZXRlZEVudHJpZXMoKTogdm9pZDtcblxuICAvKipcbiAgICogIFJldHVybiBub24gcHVyY2hhc2FibGUgcHJvZHVjdCBlcnJvclxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0Tm9uUHVyY2hhc2FibGVQcm9kdWN0RXJyb3IoKTogT2JzZXJ2YWJsZTxQcm9kdWN0IHwgbnVsbD47XG5cbiAgLyoqXG4gICAqIFNldCBlcnJvciB0aGF0IHNlbGVjdGVkIHByb2R1Y3QgaXMgbm90IHB1cmNoYXNhYmxlXG4gICAqL1xuICBhYnN0cmFjdCBzZXROb25QdXJjaGFzYWJsZVByb2R1Y3RFcnJvcihwcm9kdWN0OiBQcm9kdWN0KTogdm9pZDtcblxuICAvKipcbiAgICogQ2xlYXIgbm90IHB1cmNoYXNhYmxlIHByb2R1Y3QgZXJyb3JcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyTm9uUHVyY2hhc2FibGVQcm9kdWN0RXJyb3IoKTogdm9pZDtcbn1cbiJdfQ==