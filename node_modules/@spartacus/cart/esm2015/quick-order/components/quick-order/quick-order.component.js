import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { GlobalMessageType, } from '@spartacus/core';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { first, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@spartacus/cart/quick-order/root";
import * as i4 from "@spartacus/cart/quick-order/core";
import * as i5 from "./form/quick-order-form.component";
import * as i6 from "./table/quick-order-table.component";
import * as i7 from "@angular/common";
export class QuickOrderComponent {
    constructor(activeCartService, component, globalMessageService, quickOrderService, quickOrderStatePersistenceService) {
        this.activeCartService = activeCartService;
        this.component = component;
        this.globalMessageService = globalMessageService;
        this.quickOrderService = quickOrderService;
        this.quickOrderStatePersistenceService = quickOrderStatePersistenceService;
        this.quickOrderListLimit$ = this.component.data$.pipe(map((data) => data.quickOrderListLimit), tap((limit) => {
            if (!!limit) {
                this.quickOrderService.setListLimit(limit);
            }
        }));
        this.isCartStable$ = combineLatest([
            this.activeCartService.getActiveCartId(),
            this.activeCartService.isStable(),
        ]).pipe(map(([activeCartId, isStable]) => (!activeCartId ? true : isStable)));
        this.globalMessageType = GlobalMessageType;
        this.cartErrors$ = new BehaviorSubject([]);
        this.cartWarnings$ = new BehaviorSubject([]);
        this.cartSuccesses$ = new BehaviorSubject([]);
        this.showAddToCartInformation$ = new BehaviorSubject(false);
        this.nonPurchasableProductError$ = new BehaviorSubject(null);
    }
    ngOnInit() {
        this.cartId$ = this.activeCartService.getActiveCartId();
        this.entries$ = this.quickOrderService.getEntries();
        this.quickOrderStatePersistenceService.initSync();
    }
    ngOnDestroy() {
        this.quickOrderService.clearDeletedEntries();
    }
    get errors$() {
        return this.cartErrors$.asObservable();
    }
    get warnings$() {
        return this.cartWarnings$.asObservable();
    }
    get successes$() {
        return this.cartSuccesses$.asObservable();
    }
    get nonPurchasableError$() {
        return this.quickOrderService.getNonPurchasableProductError();
    }
    get addToCartInformation$() {
        return this.showAddToCartInformation$.asObservable();
    }
    get softDeletedEntries$() {
        return this.quickOrderService.getSoftDeletedEntries();
    }
    clear() {
        this.quickOrderService.clearList();
        this.globalMessageService.add({
            key: 'quickOrderTable.listCleared',
        }, GlobalMessageType.MSG_TYPE_INFO);
    }
    addToCart(orderEntries) {
        if (!orderEntries.length) {
            this.showAddToCartInformation$.next(true);
            return;
        }
        this.clearStatuses();
        this.quickOrderService
            .addToCart()
            .pipe(first())
            .subscribe(([entries, errors]) => {
            errors.forEach((err) => {
                if (!err.entry) {
                    err.entry = orderEntries.find((e) => { var _a; return ((_a = e.product) === null || _a === void 0 ? void 0 : _a.code) === err.productCode; });
                }
            });
            this.extractErrors(errors);
            this.extractWarnings(errors);
            if (!errors.length) {
                this.showAddedToCartSuccessMessage();
            }
            else {
                this.extractSuccesses(errors, entries);
            }
        });
    }
    clearErrors() {
        this.cartErrors$.next([]);
    }
    clearWarnings() {
        this.cartWarnings$.next([]);
    }
    clearSuccesses() {
        this.cartSuccesses$.next([]);
    }
    clearAddToCartInformation() {
        this.showAddToCartInformation$.next(false);
    }
    undoDeletion(entry) {
        var _a;
        if ((_a = entry.product) === null || _a === void 0 ? void 0 : _a.code) {
            this.quickOrderService.restoreSoftDeletedEntry(entry.product.code);
        }
    }
    clearDeletion(entry) {
        var _a;
        if ((_a = entry.product) === null || _a === void 0 ? void 0 : _a.code) {
            this.quickOrderService.hardDeleteEntry(entry.product.code);
        }
    }
    clearNonPurchasableError() {
        this.quickOrderService.clearNonPurchasableProductError();
    }
    canAddProduct() {
        return this.quickOrderService.canAdd();
    }
    extractErrors(errors) {
        const noAddedEntries = errors.filter((error) => error.quantityAdded === 0);
        this.setErrors(noAddedEntries);
    }
    extractWarnings(errors) {
        const warnings = errors.filter((error) => error.quantityAdded !== 0);
        this.setWarnings(warnings);
    }
    extractSuccesses(errors, entries) {
        const successAddedEntries = [];
        entries.forEach((entry) => {
            const element = errors.find((error) => { var _a; return error.productCode === ((_a = entry.product) === null || _a === void 0 ? void 0 : _a.code); });
            if (!element) {
                successAddedEntries.push(entry);
            }
        });
        this.setSuccesses(successAddedEntries);
    }
    clearStatuses() {
        this.clearErrors();
        this.clearWarnings();
        this.clearSuccesses();
    }
    showAddedToCartSuccessMessage() {
        this.globalMessageService.add({
            key: 'quickOrderTable.addedtoCart',
        }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
    }
    setErrors(errors) {
        this.cartErrors$.next(errors);
    }
    setWarnings(warnings) {
        this.cartWarnings$.next(warnings);
    }
    setSuccesses(entries) {
        this.cartSuccesses$.next(entries);
    }
}
QuickOrderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderComponent, deps: [{ token: i1.ActiveCartService }, { token: i2.CmsComponentData }, { token: i1.GlobalMessageService }, { token: i3.QuickOrderFacade }, { token: i4.QuickOrderStatePersistenceService }], target: i0.ɵɵFactoryTarget.Component });
QuickOrderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: QuickOrderComponent, selector: "cx-quick-order", viewQueries: [{ propertyName: "quickOrderForm", first: true, predicate: ["quickOrderForm"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"entries$ | async as entries\">\n  <ng-container *ngIf=\"!(canAddProduct() | async)\">\n    <ng-container *ngIf=\"quickOrderForm?.form?.get('product')?.dirty\">\n      <cx-message\n        [text]=\"\n          'quickOrderList.errors.listIsFull'\n            | cxTranslate: { count: entries.length }\n        \"\n        [isVisibleCloseButton]=\"false\"\n        [type]=\"globalMessageType.MSG_TYPE_ERROR\"\n        class=\"quick-order-list-limit-message\"\n      >\n      </cx-message>\n    </ng-container>\n  </ng-container>\n</ng-container>\n\n<ng-container *ngIf=\"addToCartInformation$ | async\">\n  <cx-message\n    (closeMessage)=\"clearAddToCartInformation()\"\n    [text]=\"\n      'quickOrderList.informations.addProductBeforeAddingToCart' | cxTranslate\n    \"\n    [type]=\"globalMessageType.MSG_TYPE_ERROR\"\n    class=\"quick-order-add-to-cart-information-message\"\n  >\n  </cx-message>\n</ng-container>\n\n<ng-container *ngIf=\"nonPurchasableError$ | async as nonPurchasableError\">\n  <cx-message\n    (closeMessage)=\"clearNonPurchasableError()\"\n    [text]=\"\n      'quickOrderList.errors.nonPurchasableError'\n        | cxTranslate: { name: nonPurchasableError.name }\n    \"\n    [type]=\"globalMessageType.MSG_TYPE_ERROR\"\n    class=\"quick-order-non-purchasable-product-error-message\"\n  >\n  </cx-message>\n</ng-container>\n\n<ng-container *ngIf=\"softDeletedEntries$ | async as deletedEntries\">\n  <cx-message\n    *ngFor=\"let deletedEntry of deletedEntries | keyvalue\"\n    (buttonAction)=\"undoDeletion(deletedEntry.value)\"\n    (closeMessage)=\"clearDeletion(deletedEntry.value)\"\n    [actionButtonText]=\"'quickOrderList.undo' | cxTranslate\"\n    [text]=\"\n      'quickOrderList.productWasDeleted'\n        | cxTranslate: { name: deletedEntry.value.product?.name }\n    \"\n    [type]=\"globalMessageType.MSG_TYPE_CONFIRMATION\"\n    class=\"quick-order-deletions-message\"\n  >\n  </cx-message>\n</ng-container>\n\n<ng-container *ngIf=\"errors$ | async as errors\">\n  <cx-message\n    *ngIf=\"errors.length\"\n    (closeMessage)=\"clearErrors()\"\n    [accordionText]=\"'quickOrderList.errors.reviewErrors' | cxTranslate\"\n    [text]=\"'quickOrderList.errorProceedingToCart' | cxTranslate\"\n    [type]=\"globalMessageType.MSG_TYPE_ERROR\"\n    class=\"quick-order-errors-message\"\n  >\n    <ul class=\"quick-order-errors\">\n      <li *ngFor=\"let error of errors\" class=\"quick-order-error-item\">\n        <span>\n          {{\n            'quickOrderList.errors.productIsOutOfStock'\n              | cxTranslate\n                : {\n                    name: error.entry.product.name,\n                    code: error.entry.product.code\n                  }\n          }}\n        </span>\n      </li>\n    </ul>\n  </cx-message>\n</ng-container>\n\n<ng-container *ngIf=\"warnings$ | async as warnings\">\n  <cx-message\n    *ngIf=\"warnings.length\"\n    (closeMessage)=\"clearWarnings()\"\n    [accordionText]=\"'quickOrderList.warnings.reviewWarnings' | cxTranslate\"\n    [text]=\"'quickOrderList.warningProceedingToCart' | cxTranslate\"\n    [type]=\"globalMessageType.MSG_TYPE_WARNING\"\n    class=\"quick-order-warnings-message\"\n  >\n    <ul class=\"quick-order-warnings\">\n      <li *ngFor=\"let warning of warnings\" class=\"quick-order-warning-item\">\n        <span>\n          {{\n            'quickOrderList.warnings.productWasReduced'\n              | cxTranslate\n                : {\n                    name: warning.entry.product.name,\n                    code: warning.entry.product.code,\n                    quantityAdded: warning.quantityAdded\n                  }\n          }}\n        </span>\n      </li>\n    </ul>\n  </cx-message>\n</ng-container>\n\n<ng-container *ngIf=\"successes$ | async as successes\">\n  <cx-message\n    *ngIf=\"successes.length\"\n    (closeMessage)=\"clearSuccesses()\"\n    [text]=\"'quickOrderList.successfullyAddedToCart' | cxTranslate\"\n    [type]=\"globalMessageType.MSG_TYPE_CONFIRMATION\"\n    class=\"quick-order-successes-message\"\n  >\n    <ul class=\"quick-order-successes\">\n      <li *ngFor=\"let entry of successes\" class=\"quick-order-success-item\">\n        <span>{{\n          'quickOrderList.successes.productAddedToCart'\n            | cxTranslate\n              : {\n                  name: entry.product.name,\n                  code: entry.product.code\n                }\n        }}</span>\n      </li>\n    </ul>\n  </cx-message>\n</ng-container>\n\n<ng-container *ngIf=\"quickOrderListLimit$ | async as quickOrderListLimit\">\n  <ng-container *ngIf=\"entries$ | async as entries\">\n    <div class=\"quick-order-header\">\n      <h3>{{ 'quickOrderList.header' | cxTranslate }}</h3>\n      <p>\n        {{\n          'quickOrderList.subHeader'\n            | cxTranslate: { limit: quickOrderListLimit }\n        }}\n      </p>\n    </div>\n\n    <div class=\"quick-order-form-body\">\n      <cx-quick-order-form #quickOrderForm> </cx-quick-order-form>\n    </div>\n\n    <div class=\"quick-order-table-body\">\n      <cx-quick-order-table\n        [entries]=\"entries\"\n        [loading]=\"!(isCartStable$ | async)\"\n      ></cx-quick-order-table>\n    </div>\n\n    <div class=\"quick-order-footer row\">\n      <div class=\"col-xs-12 col-md-5 col-lg-4\">\n        <button\n          *ngIf=\"entries.length\"\n          (click)=\"clear()\"\n          [attr.aria-label]=\"'quickOrderList.emptyList' | cxTranslate\"\n          [disabled]=\"!(isCartStable$ | async)\"\n          class=\"btn btn-block btn-action clear-button\"\n          type=\"button\"\n        >\n          {{ 'quickOrderList.emptyList' | cxTranslate }}\n        </button>\n      </div>\n\n      <div class=\"col-xs-12 col-md-5 col-lg-4\">\n        <cx-progress-button\n          (clikEvent)=\"addToCart(entries)\"\n          [ariaLabel]=\"'quickOrderList.addToCart' | cxTranslate\"\n          [class]=\"'btn-block add-button'\"\n          [loading]=\"!(isCartStable$ | async)\"\n        >\n          {{ 'quickOrderList.addToCart' | cxTranslate }}\n        </cx-progress-button>\n      </div>\n    </div>\n  </ng-container>\n</ng-container>\n", components: [{ type: i2.MessageComponent, selector: "cx-message", inputs: ["text", "actionButtonText", "accordionText", "showBody", "isVisibleCloseButton", "type"], outputs: ["closeMessage", "buttonAction"] }, { type: i5.QuickOrderFormComponent, selector: "cx-quick-order-form" }, { type: i6.QuickOrderTableComponent, selector: "cx-quick-order-table", inputs: ["entries", "loading"] }, { type: i2.ProgressButtonComponent, selector: "cx-progress-button", inputs: ["ariaLabel", "class", "disabled", "loading"], outputs: ["clikEvent"] }], directives: [{ type: i7.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i7.AsyncPipe, "cxTranslate": i1.TranslatePipe, "keyvalue": i7.KeyValuePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-quick-order',
                    templateUrl: './quick-order.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ActiveCartService }, { type: i2.CmsComponentData }, { type: i1.GlobalMessageService }, { type: i3.QuickOrderFacade }, { type: i4.QuickOrderStatePersistenceService }]; }, propDecorators: { quickOrderForm: [{
                type: ViewChild,
                args: ['quickOrderForm']
            }] } });
//# sourceMappingURL=data:application/json;base64,