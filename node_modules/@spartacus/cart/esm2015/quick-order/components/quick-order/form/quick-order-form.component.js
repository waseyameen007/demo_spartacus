import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { ICON_TYPE } from '@spartacus/storefront';
import { Subscription } from 'rxjs';
import { debounceTime, distinctUntilChanged, filter, switchMap, take, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/cart/quick-order/root";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
export class QuickOrderFormComponent {
    constructor(globalMessageService, // TODO(#14058): Remove it as it is not in use anymore
    quickOrderService, config, // TODO(#14058): Make it required
    cd, // TODO(#14058): Make it required
    winRef // TODO(#14058): Make it required
    ) {
        this.globalMessageService = globalMessageService;
        this.quickOrderService = quickOrderService;
        this.config = config;
        this.cd = cd;
        this.winRef = winRef;
        this.iconTypes = ICON_TYPE;
        this.isSearching = false;
        this.noResults = false;
        this.results = [];
        this.subscription = new Subscription();
        this.searchSubscription = new Subscription();
    }
    ngOnInit() {
        this.buildForm();
        this.subscription.add(this.watchProductAdd());
        this.subscription.add(this.watchQueryChange());
    }
    onBlur(event) {
        // Use timeout to detect changes
        setTimeout(() => {
            if (!this.isSuggestionFocused()) {
                this.blurSuggestionBox(event);
            }
        });
    }
    clear(event) {
        var _a, _b;
        event === null || event === void 0 ? void 0 : event.preventDefault();
        if (this.isResultsBoxOpen()) {
            this.toggleBodyClass('quick-order-searchbox-is-active', false);
        }
        let product = (_a = this.form.get('product')) === null || _a === void 0 ? void 0 : _a.value;
        if (!!product) {
            this.form.reset();
        }
        // We have to call 'close' method every time to make sure results list is empty and call detectChanges to change icon type in form
        this.close();
        (_b = this.cd) === null || _b === void 0 ? void 0 : _b.detectChanges();
    }
    add(product, event) {
        event === null || event === void 0 ? void 0 : event.preventDefault();
        // TODO change to nonpurchasable flag once we will support multidimensional products in search and when the purchasable flag will be available in search product response
        // Check if product is purchasable / non multidimensional
        if (product.multidimensional) {
            this.quickOrderService.setNonPurchasableProductError(product);
            this.clear();
            return;
        }
        else {
            this.quickOrderService.clearNonPurchasableProductError();
        }
        this.quickOrderService.addProduct(product);
    }
    addProduct(event) {
        this.quickOrderService
            .canAdd()
            .pipe(take(1))
            .subscribe((canAdd) => {
            if (canAdd) {
                // Add product if there is only one in the result list
                if (this.results.length === 1) {
                    this.add(this.results[0], event);
                    // Add product if there is focus on it
                }
                else if (this.getFocusedIndex() !== -1) {
                    const product = this.results[this.getFocusedIndex()];
                    this.add(product, event);
                }
            }
        });
    }
    focusNextChild(event) {
        event.preventDefault(); // Negate normal keyscroll
        if (!this.results.length) {
            return;
        }
        const [results, focusedIndex] = [
            this.getResultElements(),
            this.getFocusedIndex(),
        ];
        // Focus on first index moving to last
        if (results.length) {
            if (focusedIndex >= results.length - 1) {
                results[0].focus();
            }
            else {
                results[focusedIndex + 1].focus();
            }
        }
    }
    focusPreviousChild(event) {
        event.preventDefault(); // Negate normal keyscroll
        if (!this.results.length) {
            return;
        }
        const [results, focusedIndex] = [
            this.getResultElements(),
            this.getFocusedIndex(),
        ];
        // Focus on last index moving to first
        if (results.length) {
            if (focusedIndex < 1) {
                results[results.length - 1].focus();
            }
            else {
                results[focusedIndex - 1].focus();
            }
        }
    }
    isResultsBoxOpen() {
        return this.winRef
            ? !!this.winRef.document.querySelector('.quick-order-searchbox-is-active')
            : false;
    }
    canAddProduct() {
        return this.quickOrderService.canAdd();
    }
    open() {
        this.toggleBodyClass('quick-order-searchbox-is-active', true);
    }
    // Return result list as HTMLElement array
    getResultElements() {
        if (this.winRef) {
            return Array.from(this.winRef.document.querySelectorAll('.quick-order-results-products > li button'));
        }
        else {
            return [];
        }
    }
    blurSuggestionBox(event) {
        this.toggleBodyClass('quick-order-searchbox-is-active', false);
        if (event && event.target) {
            event.target.blur();
        }
    }
    // Return focused element as HTMLElement
    getFocusedElement() {
        if (this.winRef) {
            return this.winRef.document.activeElement;
        }
    }
    getFocusedIndex() {
        return this.getResultElements().indexOf(this.getFocusedElement());
    }
    isSuggestionFocused() {
        return this.getResultElements().includes(this.getFocusedElement());
    }
    toggleBodyClass(className, add) {
        // TODO(#14058): Remove condition
        if (this.winRef) {
            if (add === undefined) {
                this.winRef.document.body.classList.toggle(className);
            }
            else {
                add
                    ? this.winRef.document.body.classList.add(className)
                    : this.winRef.document.body.classList.remove(className);
            }
        }
    }
    buildForm() {
        const form = new FormGroup({});
        form.setControl('product', new FormControl(null));
        this.form = form;
    }
    isEmpty(string) {
        return (string === null || string === void 0 ? void 0 : string.trim()) === '' || string == null;
    }
    watchQueryChange() {
        return this.form.valueChanges
            .pipe(distinctUntilChanged(), debounceTime(300), filter((value) => {
            var _a, _b, _c, _d;
            if ((_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.quickOrder) === null || _b === void 0 ? void 0 : _b.searchForm) {
                //Check if input to quick order is an empty after deleting input manually
                if (this.isEmpty(value.product)) {
                    //Clear recommendation results on empty string
                    this.clear();
                    return false;
                }
                return (!!value.product &&
                    value.product.length >=
                        ((_d = (_c = this.config.quickOrder) === null || _c === void 0 ? void 0 : _c.searchForm) === null || _d === void 0 ? void 0 : _d.minCharactersBeforeRequest));
            }
            return value;
        }))
            .subscribe((value) => {
            this.searchProducts(value.product);
        });
    }
    searchProducts(query) {
        this.searchSubscription.add(this.canAddProduct()
            .pipe(filter(Boolean), switchMap(() => {
            var _a, _b, _c;
            return this.quickOrderService
                .searchProducts(query, (_c = (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.quickOrder) === null || _b === void 0 ? void 0 : _b.searchForm) === null || _c === void 0 ? void 0 : _c.maxProducts)
                .pipe(take(1));
        }))
            .subscribe((products) => {
            var _a;
            this.results = products;
            if (this.results.length) {
                this.noResults = false;
                this.open();
            }
            else {
                this.noResults = true;
            }
            (_a = this.cd) === null || _a === void 0 ? void 0 : _a.detectChanges();
        }));
    }
    clearResults() {
        this.results = [];
    }
    close() {
        this.resetSearchSubscription();
        this.clearResults();
        this.noResults = false;
    }
    resetSearchSubscription() {
        this.searchSubscription.unsubscribe();
        this.searchSubscription = new Subscription();
    }
    watchProductAdd() {
        return this.quickOrderService
            .getProductAdded()
            .subscribe(() => this.clear());
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
QuickOrderFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderFormComponent, deps: [{ token: i1.GlobalMessageService }, { token: i2.QuickOrderFacade }, { token: i1.Config }, { token: i0.ChangeDetectorRef }, { token: i1.WindowRef }], target: i0.ɵɵFactoryTarget.Component });
QuickOrderFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: QuickOrderFormComponent, selector: "cx-quick-order-form", ngImport: i0, template: "<form [formGroup]=\"form\" class=\"quick-order-form-container\">\n  <div class=\"quick-order-form-input\">\n    <input\n      (blur)=\"onBlur($event)\"\n      (focus)=\"open()\"\n      (keydown.arrowdown)=\"focusNextChild($event)\"\n      (keydown.arrowup)=\"focusPreviousChild($event)\"\n      (keydown.enter)=\"addProduct($event)\"\n      (keydown.escape)=\"clear($event)\"\n      [attr.aria-label]=\"'common.search' | cxTranslate\"\n      class=\"form-control\"\n      formControlName=\"product\"\n      placeholder=\"{{ 'quickOrderForm.placeholder' | cxTranslate }}\"\n      type=\"text\"\n    />\n\n    <button\n      *ngIf=\"form.get('product')?.value; else searchIcon\"\n      (click)=\"clear($event)\"\n      (keydown.enter)=\"clear($event)\"\n      [attr.aria-label]=\"'common.reset' | cxTranslate\"\n      class=\"quick-order-form-reset-icon\"\n    >\n      <cx-icon [type]=\"iconTypes.RESET\"></cx-icon>\n    </button>\n\n    <ng-template #searchIcon>\n      <button\n        [attr.aria-label]=\"'common.search' | cxTranslate\"\n        class=\"quick-order-form-search-icon\"\n        tabindex=\"-1\"\n      >\n        <cx-icon [type]=\"iconTypes.SEARCH\"></cx-icon>\n      </button>\n    </ng-template>\n\n    <span\n      *ngIf=\"!(canAddProduct() | async) && form.get('product')?.dirty\"\n      class=\"list-limit-reached-text\"\n    >\n      {{ 'quickOrderForm.listLimitReached' | cxTranslate }}\n    </span>\n  </div>\n\n  <div *ngIf=\"isResultsBoxOpen()\" role=\"listbox\" class=\"quick-order-results\">\n    <ul *ngIf=\"results.length\" class=\"quick-order-results-products\">\n      <li\n        *ngFor=\"let product of results; let i = index\"\n        class=\"quick-order-results-product-container\"\n      >\n        <button\n          (blur)=\"onBlur($event)\"\n          (click)=\"add(product, $event)\"\n          (keydown.arrowdown)=\"focusNextChild($event)\"\n          (keydown.arrowup)=\"focusPreviousChild($event)\"\n          (keydown.enter)=\"add(product, $event)\"\n          (keydown.escape)=\"clear($event)\"\n          [attr.aria-label]=\"\n            'quickOrderForm.addProduct' | cxTranslate: { product: product.name }\n          \"\n          [class.has-media]=\"\n            config?.quickOrder?.searchForm?.displayProductImages\n          \"\n          class=\"quick-order-results-product\"\n        >\n          <cx-media\n            *ngIf=\"config?.quickOrder?.searchForm?.displayProductImages\"\n            [container]=\"product.images?.PRIMARY\"\n            class=\"media\"\n            format=\"thumbnail\"\n            role=\"presentation\"\n          ></cx-media>\n          <div class=\"name\" [innerHTML]=\"product.name\"></div>\n          <span class=\"id\">\n            {{\n              'quickOrderForm.id'\n                | cxTranslate\n                  : {\n                      id: product.code\n                    }\n            }}\n          </span>\n          <span class=\"price\">{{ product.price?.formattedValue }}</span>\n        </button>\n      </li>\n    </ul>\n\n    <span *ngIf=\"noResults\" class=\"quick-order-no-results\">\n      {{ 'quickOrderForm.noResults' | cxTranslate }}\n    </span>\n  </div>\n</form>\n", components: [{ type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: i3.MediaComponent, selector: "cx-media", inputs: ["container", "format", "alt", "role", "loading"], outputs: ["loaded"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "cxTranslate": i1.TranslatePipe, "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: QuickOrderFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-quick-order-form',
                    templateUrl: './quick-order-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.GlobalMessageService }, { type: i2.QuickOrderFacade }, { type: i1.Config }, { type: i0.ChangeDetectorRef }, { type: i1.WindowRef }]; } });
//# sourceMappingURL=data:application/json;base64,