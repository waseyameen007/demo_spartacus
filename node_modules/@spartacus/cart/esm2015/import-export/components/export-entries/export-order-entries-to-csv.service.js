import { Injectable } from '@angular/core';
import { combineLatest } from 'rxjs';
import { map, take } from 'rxjs/operators';
import { GlobalMessageType, } from '@spartacus/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@spartacus/cart/import-export/core";
import * as i3 from "@spartacus/core";
export class ExportOrderEntriesToCsvService {
    constructor(exportCsvFileService, importExportConfig, globalMessageService, translationService) {
        var _a, _b;
        this.exportCsvFileService = exportCsvFileService;
        this.importExportConfig = importExportConfig;
        this.globalMessageService = globalMessageService;
        this.translationService = translationService;
        this.columns = [
            {
                name: {
                    key: 'code',
                },
                value: 'product.code',
            },
            {
                name: {
                    key: 'quantity',
                },
                value: 'quantity',
            },
            ...((_b = (_a = this.exportConfig) === null || _a === void 0 ? void 0 : _a.additionalColumns) !== null && _b !== void 0 ? _b : []),
        ];
    }
    get exportConfig() {
        var _a;
        return (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.export;
    }
    get separator() {
        var _a;
        return (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.file.separator;
    }
    downloadCsv(entries) {
        this.getResolvedEntries(entries)
            .pipe(take(1))
            .subscribe((csvData) => this.download(csvData));
    }
    resolveValue(combinedKeys, entry) {
        var _a, _b;
        return ((_b = (_a = combinedKeys
            .split('.')
            .reduce((obj, key) => (obj ? obj[key] : ''), entry)) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '');
    }
    resolveValues(entries) {
        return entries.map((entry) => this.columns.map((column) => this.resolveValue(column.value, entry)));
    }
    getTranslatedColumnHeaders() {
        return combineLatest(this.columns.map((column) => this.translationService.translate(`exportEntries.columnNames.${column.name.key}`)));
    }
    displayExportMessage() {
        this.globalMessageService.add({ key: 'exportEntries.exportMessage' }, GlobalMessageType.MSG_TYPE_INFO);
    }
    limitValues(data) {
        var _a, _b;
        return ((_a = this.exportConfig) === null || _a === void 0 ? void 0 : _a.maxEntries)
            ? data.splice(0, (_b = this.exportConfig) === null || _b === void 0 ? void 0 : _b.maxEntries)
            : data;
    }
    getResolvedEntries(entries) {
        const values = this.limitValues(this.resolveValues(entries));
        return this.getTranslatedColumnHeaders().pipe(map((headers) => {
            return [headers, ...values];
        }));
    }
    download(entries) {
        var _a, _b, _c;
        if ((_a = this.exportConfig) === null || _a === void 0 ? void 0 : _a.messageEnabled) {
            this.displayExportMessage();
        }
        setTimeout(() => {
            if (this.exportConfig !== undefined && this.separator !== undefined) {
                this.exportCsvFileService.download(entries, this.separator, this.exportConfig.fileOptions);
            }
        }, (_c = (_b = this.exportConfig) === null || _b === void 0 ? void 0 : _b.downloadDelay) !== null && _c !== void 0 ? _c : 0);
    }
}
ExportOrderEntriesToCsvService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ExportOrderEntriesToCsvService, deps: [{ token: i1.ExportCsvFileService }, { token: i2.ImportExportConfig }, { token: i3.GlobalMessageService }, { token: i3.TranslationService }], target: i0.ɵɵFactoryTarget.Injectable });
ExportOrderEntriesToCsvService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ExportOrderEntriesToCsvService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ExportOrderEntriesToCsvService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ExportCsvFileService }, { type: i2.ImportExportConfig }, { type: i3.GlobalMessageService }, { type: i3.TranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,