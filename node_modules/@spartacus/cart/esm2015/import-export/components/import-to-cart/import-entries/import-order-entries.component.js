import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { ORDER_ENTRIES_CONTEXT, } from '@spartacus/storefront';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/common";
import * as i3 from "@spartacus/core";
export class ImportOrderEntriesComponent {
    constructor(launchDialogService, contextService) {
        this.launchDialogService = launchDialogService;
        this.contextService = contextService;
        this.subscription = new Subscription();
        this.orderEntriesContext$ = this.contextService.get(ORDER_ENTRIES_CONTEXT);
    }
    openDialog(orderEntriesContext) {
        this.launchDialogService.openDialogAndSubscribe("IMPORT_TO_CART" /* IMPORT_TO_CART */, this.element, { orderEntriesContext });
    }
}
ImportOrderEntriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportOrderEntriesComponent, deps: [{ token: i1.LaunchDialogService }, { token: i1.ContextService }], target: i0.ɵɵFactoryTarget.Component });
ImportOrderEntriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ImportOrderEntriesComponent, selector: "cx-import-order-entries", viewQueries: [{ propertyName: "element", first: true, predicate: ["open"], descendants: true }], ngImport: i0, template: "<button\n  *ngIf=\"orderEntriesContext$ | async as orderEntriesContext\"\n  class=\"link cx-action-link\"\n  (click)=\"openDialog(orderEntriesContext)\"\n>\n  {{ 'importEntries.importProducts' | cxTranslate }}\n</button>\n", directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe, "cxTranslate": i3.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportOrderEntriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-import-order-entries',
                    templateUrl: './import-order-entries.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i1.ContextService }]; }, propDecorators: { element: [{
                type: ViewChild,
                args: ['open']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LW9yZGVyLWVudHJpZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2NhcnQvaW1wb3J0LWV4cG9ydC9jb21wb25lbnRzL2ltcG9ydC10by1jYXJ0L2ltcG9ydC1lbnRyaWVzL2ltcG9ydC1vcmRlci1lbnRyaWVzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9jYXJ0L2ltcG9ydC1leHBvcnQvY29tcG9uZW50cy9pbXBvcnQtdG8tY2FydC9pbXBvcnQtZW50cmllcy9pbXBvcnQtb3JkZXItZW50cmllcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxTQUFTLEdBQ1YsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUtMLHFCQUFxQixHQUN0QixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBYyxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7O0FBT2hELE1BQU0sT0FBTywyQkFBMkI7SUFJdEMsWUFDWSxtQkFBd0MsRUFDeEMsY0FBOEI7UUFEOUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFMaEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBUTVDLHlCQUFvQixHQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBc0IscUJBQXFCLENBQUMsQ0FBQztJQUhuRSxDQUFDO0lBS0osVUFBVSxDQUFDLG1CQUF3QztRQUNqRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLHdDQUU3QyxJQUFJLENBQUMsT0FBTyxFQUNaLEVBQUUsbUJBQW1CLEVBQUUsQ0FDeEIsQ0FBQztJQUNKLENBQUM7O3dIQWxCVSwyQkFBMkI7NEdBQTNCLDJCQUEyQixnS0NwQnhDLGdPQU9BOzJGRGFhLDJCQUEyQjtrQkFMdkMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUseUJBQXlCO29CQUNuQyxXQUFXLEVBQUUsdUNBQXVDO29CQUNwRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7dUlBR29CLE9BQU87c0JBQXpCLFNBQVM7dUJBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBDb250ZXh0U2VydmljZSxcbiAgTGF1bmNoRGlhbG9nU2VydmljZSxcbiAgTEFVTkNIX0NBTExFUixcbiAgT3JkZXJFbnRyaWVzQ29udGV4dCxcbiAgT1JERVJfRU5UUklFU19DT05URVhULFxufSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZnJvbnQnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LWltcG9ydC1vcmRlci1lbnRyaWVzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ltcG9ydC1vcmRlci1lbnRyaWVzLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEltcG9ydE9yZGVyRW50cmllc0NvbXBvbmVudCB7XG4gIHByb3RlY3RlZCBzdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gIEBWaWV3Q2hpbGQoJ29wZW4nKSBlbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlOiBMYXVuY2hEaWFsb2dTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBjb250ZXh0U2VydmljZTogQ29udGV4dFNlcnZpY2VcbiAgKSB7fVxuXG4gIG9yZGVyRW50cmllc0NvbnRleHQkOiBPYnNlcnZhYmxlPE9yZGVyRW50cmllc0NvbnRleHQgfCB1bmRlZmluZWQ+ID1cbiAgICB0aGlzLmNvbnRleHRTZXJ2aWNlLmdldDxPcmRlckVudHJpZXNDb250ZXh0PihPUkRFUl9FTlRSSUVTX0NPTlRFWFQpO1xuXG4gIG9wZW5EaWFsb2cob3JkZXJFbnRyaWVzQ29udGV4dDogT3JkZXJFbnRyaWVzQ29udGV4dCk6IHZvaWQge1xuICAgIHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5vcGVuRGlhbG9nQW5kU3Vic2NyaWJlKFxuICAgICAgTEFVTkNIX0NBTExFUi5JTVBPUlRfVE9fQ0FSVCxcbiAgICAgIHRoaXMuZWxlbWVudCxcbiAgICAgIHsgb3JkZXJFbnRyaWVzQ29udGV4dCB9XG4gICAgKTtcbiAgfVxufVxuIiwiPGJ1dHRvblxuICAqbmdJZj1cIm9yZGVyRW50cmllc0NvbnRleHQkIHwgYXN5bmMgYXMgb3JkZXJFbnRyaWVzQ29udGV4dFwiXG4gIGNsYXNzPVwibGluayBjeC1hY3Rpb24tbGlua1wiXG4gIChjbGljayk9XCJvcGVuRGlhbG9nKG9yZGVyRW50cmllc0NvbnRleHQpXCJcbj5cbiAge3sgJ2ltcG9ydEVudHJpZXMuaW1wb3J0UHJvZHVjdHMnIHwgY3hUcmFuc2xhdGUgfX1cbjwvYnV0dG9uPlxuIl19