import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { FormUtils, } from '@spartacus/storefront';
import { of, Subject } from 'rxjs';
import { filter, startWith, switchMap, take, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "../../import-products-from-csv.service";
import * as i3 from "@spartacus/cart/import-export/core";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
import * as i6 from "@spartacus/core";
export class ImportEntriesFormComponent {
    constructor(launchDialogService, importToCartService, importCsvService, filesFormValidators, importExportConfig) {
        this.launchDialogService = launchDialogService;
        this.importToCartService = importToCartService;
        this.importCsvService = importCsvService;
        this.filesFormValidators = filesFormValidators;
        this.importExportConfig = importExportConfig;
        this.formSubmitSubject$ = new Subject();
        this.submitEvent = new EventEmitter();
    }
    ngOnInit() {
        this.form = this.buildForm();
        this.formSubmitSubject$
            .pipe(tap(() => {
            if (this.form.invalid) {
                this.form.markAllAsTouched();
                FormUtils.deepUpdateValueAndValidity(this.form);
            }
        }), switchMap(() => {
            var _a;
            return this.form.statusChanges.pipe(startWith((_a = this.form.get('file')) === null || _a === void 0 ? void 0 : _a.status), filter((status) => status !== 'PENDING'), take(1));
        }), filter((status) => status === 'VALID'))
            .subscribe(() => {
            this.save();
        });
    }
    close(reason) {
        this.launchDialogService.closeDialog(reason);
    }
    save() {
        var _a, _b;
        const file = (_b = (_a = this.form.get('file')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b[0];
        if (this.separator !== undefined) {
            this.importCsvService
                .loadFile(file, this.separator)
                .subscribe((loadedFile) => {
                this.submitEvent.emit({
                    products: this.importToCartService.csvDataToProduct(loadedFile),
                });
            });
        }
    }
    buildForm() {
        const form = new FormGroup({});
        form.setControl('file', new FormControl('', [Validators.required, this.filesFormValidators.maxSize(this.maxSize)], [
            (control) => this.separator !== undefined
                ? this.importCsvService.validateFile(control.value[0], {
                    separator: this.separator,
                    isDataParsable: this.importToCartService.isDataParsableToProducts,
                    maxEntries: this.maxEntries,
                })
                : of(null),
        ]));
        return form;
    }
    get allowedTypes() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.import) === null || _b === void 0 ? void 0 : _b.fileValidity) === null || _c === void 0 ? void 0 : _c.allowedTypes;
    }
    get maxSize() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.import) === null || _b === void 0 ? void 0 : _b.fileValidity) === null || _c === void 0 ? void 0 : _c.maxSize;
    }
    get maxEntries() {
        var _a, _b, _c, _d;
        return (_d = (_c = (_b = (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.import) === null || _b === void 0 ? void 0 : _b.fileValidity) === null || _c === void 0 ? void 0 : _c.maxEntries) === null || _d === void 0 ? void 0 : _d[this.type];
    }
    get separator() {
        var _a;
        return (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.file.separator;
    }
}
ImportEntriesFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportEntriesFormComponent, deps: [{ token: i1.LaunchDialogService }, { token: i2.ImportProductsFromCsvService }, { token: i1.ImportCsvFileService }, { token: i1.FilesFormValidators }, { token: i3.ImportExportConfig }], target: i0.ɵɵFactoryTarget.Component });
ImportEntriesFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ImportEntriesFormComponent, selector: "cx-import-entries-form", inputs: { type: "type" }, outputs: { submitEvent: "submitEvent" }, ngImport: i0, template: "<form *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"formSubmitSubject$.next()\">\n  <p class=\"cx-import-entries-subtitle\">\n    {{ 'importEntriesDialog.importProductsSubtitle' | cxTranslate }}\n  </p>\n  <p>\n    {{ 'importEntriesDialog.importProductFileDetails' | cxTranslate }}\n  </p>\n  <label>\n    <cx-file-upload [formControl]=\"form.get('file')\" [accept]=\"allowedTypes\">\n      {{ 'importEntriesDialog.selectFile' | cxTranslate }}\n    </cx-file-upload>\n    <cx-form-errors\n      [control]=\"form.get('file')\"\n      prefix=\"formErrors.file\"\n    ></cx-form-errors>\n  </label>\n  <div class=\"cx-import-entries-footer\">\n    <button\n      (click)=\"close('Close Import Products Dialog')\"\n      class=\"btn btn-action\"\n      type=\"button\"\n    >\n      {{ 'importEntriesDialog.cancel' | cxTranslate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"form.get('file')?.status === 'PENDING'\"\n    >\n      {{ 'importEntriesDialog.upload' | cxTranslate }}\n    </button>\n  </div>\n</form>\n", components: [{ type: i1.FileUploadComponent, selector: "cx-file-upload", inputs: ["accept", "multiple"], outputs: ["update"] }, { type: i1.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i5.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i5.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }], pipes: { "cxTranslate": i6.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportEntriesFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-import-entries-form',
                    templateUrl: './import-entries-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i2.ImportProductsFromCsvService }, { type: i1.ImportCsvFileService }, { type: i1.FilesFormValidators }, { type: i3.ImportExportConfig }]; }, propDecorators: { submitEvent: [{
                type: Output
            }], type: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,