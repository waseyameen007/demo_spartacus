import { ChangeDetectionStrategy, Component, EventEmitter, Output, } from '@angular/core';
import { FormControl, FormGroup, Validators, } from '@angular/forms';
import { CartNameSource, } from '@spartacus/cart/import-export/core';
import { CxDatePipe } from '@spartacus/core';
import { of } from 'rxjs';
import { ImportEntriesFormComponent } from '../import-entries-form/import-entries-form.component';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "../../import-products-from-csv.service";
import * as i3 from "@spartacus/cart/import-export/core";
import * as i4 from "@spartacus/core";
import * as i5 from "@angular/common";
import * as i6 from "@angular/forms";
export class ImportToNewSavedCartFormComponent extends ImportEntriesFormComponent {
    constructor(launchDialogService, importToCartService, importCsvService, filesFormValidators, importExportConfig, datePipe) {
        super(launchDialogService, importToCartService, importCsvService, filesFormValidators, importExportConfig);
        this.launchDialogService = launchDialogService;
        this.importToCartService = importToCartService;
        this.importCsvService = importCsvService;
        this.filesFormValidators = filesFormValidators;
        this.importExportConfig = importExportConfig;
        this.datePipe = datePipe;
        this.descriptionMaxLength = 250;
        this.nameMaxLength = 50;
        this.submitEvent = new EventEmitter();
    }
    get descriptionsCharacterLeft() {
        var _a, _b;
        return (this.descriptionMaxLength -
            (((_b = (_a = this.form.get('description')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b.length) || 0));
    }
    save() {
        var _a, _b;
        const file = (_b = (_a = this.form.get('file')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b[0];
        if (this.separator !== undefined) {
            this.importCsvService
                .loadFile(file, this.separator)
                .subscribe((loadedFile) => {
                var _a, _b;
                this.submitEvent.emit({
                    products: this.importToCartService.csvDataToProduct(loadedFile),
                    savedCartInfo: {
                        name: (_a = this.form.get('name')) === null || _a === void 0 ? void 0 : _a.value,
                        description: (_b = this.form.get('description')) === null || _b === void 0 ? void 0 : _b.value,
                    },
                });
            });
        }
    }
    buildForm() {
        const form = new FormGroup({});
        form.setControl('file', new FormControl('', [Validators.required, this.filesFormValidators.maxSize(this.maxSize)], [
            (control) => this.separator !== undefined
                ? this.importCsvService.validateFile(control.value[0], {
                    separator: this.separator,
                    isDataParsable: this.importToCartService.isDataParsableToProducts,
                    maxEntries: this.maxEntries,
                })
                : of(null),
        ]));
        form.setControl('name', new FormControl('', [
            Validators.required,
            Validators.maxLength(this.nameMaxLength),
        ]));
        form.setControl('description', new FormControl('', [Validators.maxLength(this.descriptionMaxLength)]));
        return form;
    }
    updateCartName() {
        var _a;
        const nameField = this.form.get('name');
        if (nameField && !(nameField === null || nameField === void 0 ? void 0 : nameField.value) && ((_a = this.cartNameGeneration) === null || _a === void 0 ? void 0 : _a.source)) {
            switch (this.cartNameGeneration.source) {
                case CartNameSource.FILE_NAME: {
                    this.setFieldValueByFileName(nameField);
                    break;
                }
                case CartNameSource.DATE_TIME: {
                    this.setFieldValueByDatetime(nameField);
                    break;
                }
                default: {
                    break;
                }
            }
        }
    }
    setFieldValueByFileName(nameField) {
        var _a, _b, _c, _d;
        const fileName = (_d = (_c = (_b = (_a = this.form
            .get('file')) === null || _a === void 0 ? void 0 : _a.value) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.name) === null || _d === void 0 ? void 0 : _d.replace(/\.[^/.]+$/, '');
        nameField.setValue(fileName);
    }
    setFieldValueByDatetime(nameField) {
        var _a, _b, _c;
        const date = new Date();
        const fromDateOptions = (_a = this.cartNameGeneration) === null || _a === void 0 ? void 0 : _a.fromDateOptions;
        const mask = fromDateOptions === null || fromDateOptions === void 0 ? void 0 : fromDateOptions.mask;
        const prefix = (_b = fromDateOptions === null || fromDateOptions === void 0 ? void 0 : fromDateOptions.prefix) !== null && _b !== void 0 ? _b : '';
        const suffix = (_c = fromDateOptions === null || fromDateOptions === void 0 ? void 0 : fromDateOptions.suffix) !== null && _c !== void 0 ? _c : '';
        const dateString = mask
            ? this.datePipe.transform(date, mask)
            : this.datePipe.transform(date);
        nameField.setValue(`${prefix}${dateString}${suffix}`);
    }
    get cartNameGeneration() {
        var _a, _b;
        return (_b = (_a = this.importExportConfig.cartImportExport) === null || _a === void 0 ? void 0 : _a.import) === null || _b === void 0 ? void 0 : _b.cartNameGeneration;
    }
}
ImportToNewSavedCartFormComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportToNewSavedCartFormComponent, deps: [{ token: i1.LaunchDialogService }, { token: i2.ImportProductsFromCsvService }, { token: i1.ImportCsvFileService }, { token: i1.FilesFormValidators }, { token: i3.ImportExportConfig }, { token: i4.CxDatePipe }], target: i0.ɵɵFactoryTarget.Component });
ImportToNewSavedCartFormComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ImportToNewSavedCartFormComponent, selector: "cx-import-to-new-saved-cart-form", outputs: { submitEvent: "submitEvent" }, providers: [CxDatePipe], usesInheritance: true, ngImport: i0, template: "<form *ngIf=\"form\" [formGroup]=\"form\" (submit)=\"formSubmitSubject$.next()\">\n  <p class=\"cx-import-entries-subtitle\">\n    {{ 'importEntriesDialog.importProductsNewSavedCartSubtitle' | cxTranslate }}\n  </p>\n  <p>\n    {{ 'importEntriesDialog.importProductFileDetails' | cxTranslate }}\n  </p>\n  <label>\n    <cx-file-upload\n      [formControl]=\"form.get('file')\"\n      (update)=\"updateCartName()\"\n      [accept]=\"allowedTypes\"\n    >\n      {{ 'importEntriesDialog.selectFile' | cxTranslate }}\n    </cx-file-upload>\n    <cx-form-errors\n      [control]=\"form.get('file')\"\n      prefix=\"formErrors.file\"\n    ></cx-form-errors>\n  </label>\n  <div class=\"cx-import-entries-row\">\n    <label>\n      <span class=\"cx-import-entries-label label-content\">\n        {{ 'importEntriesDialog.savedCartName' | cxTranslate }}\n      </span>\n      <input\n        [maxLength]=\"nameMaxLength\"\n        class=\"form-control\"\n        formControlName=\"name\"\n        required\n        type=\"text\"\n      />\n      <cx-form-errors [control]=\"form.get('name')\"></cx-form-errors>\n    </label>\n  </div>\n\n  <div class=\"cx-import-entries-row\">\n    <label>\n      <span class=\"cx-import-entries-label label-content\">\n        {{ 'importEntriesDialog.savedCartDescription' | cxTranslate }}\n        <span class=\"cx-import-entries-label-optional\">\n          ({{ 'importEntriesDialog.optional' | cxTranslate }})\n        </span></span\n      >\n      <textarea\n        [maxLength]=\"descriptionMaxLength\"\n        class=\"form-control\"\n        formControlName=\"description\"\n        rows=\"5\"\n      ></textarea>\n      <cx-form-errors [control]=\"form.get('description')\"></cx-form-errors>\n\n      <p class=\"cx-import-entries-input-hint\">\n        {{\n          'importEntriesDialog.charactersLeft'\n            | cxTranslate: { count: descriptionsCharacterLeft }\n        }}\n      </p>\n    </label>\n  </div>\n  <div class=\"cx-import-entries-footer\">\n    <button\n      (click)=\"close('Close Import Products Dialog')\"\n      class=\"btn btn-action\"\n      type=\"button\"\n    >\n      {{ 'importEntriesDialog.cancel' | cxTranslate }}\n    </button>\n    <button\n      class=\"btn btn-primary\"\n      type=\"submit\"\n      [disabled]=\"form.get('file')?.status === 'PENDING'\"\n    >\n      {{ 'importEntriesDialog.upload' | cxTranslate }}\n    </button>\n  </div>\n</form>\n", components: [{ type: i1.FileUploadComponent, selector: "cx-file-upload", inputs: ["accept", "multiple"], outputs: ["update"] }, { type: i1.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i6.FormControlDirective, selector: "[formControl]", inputs: ["disabled", "formControl", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }], pipes: { "cxTranslate": i4.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportToNewSavedCartFormComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-import-to-new-saved-cart-form',
                    templateUrl: './import-to-new-saved-cart-form.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [CxDatePipe],
                }]
        }], ctorParameters: function () { return [{ type: i1.LaunchDialogService }, { type: i2.ImportProductsFromCsvService }, { type: i1.ImportCsvFileService }, { type: i1.FilesFormValidators }, { type: i3.ImportExportConfig }, { type: i4.CxDatePipe }]; }, propDecorators: { submitEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,