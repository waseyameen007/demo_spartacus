import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { OrderEntriesSource, ICON_TYPE, } from '@spartacus/storefront';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/common";
import * as i3 from "@spartacus/core";
export class ImportEntriesSummaryComponent {
    constructor() {
        this.iconTypes = ICON_TYPE;
        this.orderEntriesSource = OrderEntriesSource;
        this.warningDetailsOpened = false;
        this.errorDetailsOpened = false;
        this.closeEvent = new EventEmitter();
    }
    close(reason) {
        this.closeEvent.emit(reason);
    }
    toggleWarningList() {
        this.warningDetailsOpened = !this.warningDetailsOpened;
    }
    toggleErrorList() {
        this.errorDetailsOpened = !this.errorDetailsOpened;
    }
}
ImportEntriesSummaryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportEntriesSummaryComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ImportEntriesSummaryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ImportEntriesSummaryComponent, selector: "cx-import-entries-summary", inputs: { type: "type", summary: "summary" }, outputs: { closeEvent: "closeEvent" }, ngImport: i0, template: "<div class=\"cx-import-entries-summary-status\">\n  <p *ngIf=\"!summary.loading; else loading\" [ngSwitch]=\"type\">\n    <ng-container *ngSwitchCase=\"orderEntriesSource.QUICK_ORDER\">\n      {{ 'importEntriesDialog.summary.loaded' | cxTranslate: summary }}\n    </ng-container>\n    <ng-container *ngSwitchDefault>\n      {{ 'importEntriesDialog.summary.loadedToCart' | cxTranslate: summary }}\n    </ng-container>\n  </p>\n  <ng-template #loading>\n    <p>\n      {{ 'importEntriesDialog.summary.loading' | cxTranslate: summary }}\n    </p>\n  </ng-template>\n</div>\n<p\n  *ngIf=\"summary.successesCount > 0\"\n  class=\"cx-import-entries-summary-successes\"\n>\n  <cx-icon class=\"success\" [type]=\"iconTypes.SUCCESS\"></cx-icon>\n  {{ 'importEntriesDialog.summary.successes' | cxTranslate: summary }}\n</p>\n<div\n  *ngIf=\"summary.warningMessages.length > 0\"\n  class=\"cx-import-entries-summary-warnings\"\n>\n  <p>\n    <cx-icon class=\"warning\" [type]=\"iconTypes.ERROR\"></cx-icon>\n    {{\n      'importEntriesDialog.summary.warning'\n        | cxTranslate: { count: summary.warningMessages.length }\n    }}\n    <button class=\"link cx-action-link\" (click)=\"toggleWarningList()\">\n      {{\n        (warningDetailsOpened\n          ? 'importEntriesDialog.summary.hide'\n          : 'importEntriesDialog.summary.show'\n        ) | cxTranslate\n      }}\n    </button>\n  </p>\n  <ul *ngIf=\"warningDetailsOpened\">\n    <li *ngFor=\"let message of summary.warningMessages\">\n      {{\n        'importEntriesDialog.summary.messages.' + message.statusCode\n          | cxTranslate: message\n      }}\n    </li>\n  </ul>\n</div>\n<div\n  *ngIf=\"summary.errorMessages.length > 0\"\n  class=\"cx-import-entries-summary-errors\"\n>\n  <p>\n    <cx-icon class=\"error\" [type]=\"iconTypes.RESET\"></cx-icon>\n    {{\n      'importEntriesDialog.summary.error'\n        | cxTranslate: { count: summary.errorMessages.length }\n    }}\n    <button class=\"link cx-action-link\" (click)=\"toggleErrorList()\">\n      {{\n        (errorDetailsOpened\n          ? 'importEntriesDialog.summary.hide'\n          : 'importEntriesDialog.summary.show'\n        ) | cxTranslate\n      }}\n    </button>\n  </p>\n  <ul *ngIf=\"errorDetailsOpened\">\n    <li *ngFor=\"let message of summary.errorMessages\">\n      {{\n        'importEntriesDialog.summary.messages.' + message.statusCode\n          | cxTranslate: message\n      }}\n    </li>\n  </ul>\n</div>\n<div class=\"cx-import-entries-summary-footer\">\n  <button\n    *ngIf=\"!summary.loading; else info\"\n    (click)=\"close('Close Import Products Dialog')\"\n    class=\"btn btn-action\"\n    type=\"button\"\n  >\n    {{ 'importEntriesDialog.close' | cxTranslate }}\n  </button>\n  <ng-template #info>\n    <p>{{ 'importEntriesDialog.summary.info' | cxTranslate }}</p>\n  </ng-template>\n</div>\n", components: [{ type: i1.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i2.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "cxTranslate": i3.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ImportEntriesSummaryComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-import-entries-summary',
                    templateUrl: './import-entries-summary.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { type: [{
                type: Input
            }], summary: [{
                type: Input
            }], closeEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LWVudHJpZXMtc3VtbWFyeS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2FydC9pbXBvcnQtZXhwb3J0L2NvbXBvbmVudHMvaW1wb3J0LXRvLWNhcnQvaW1wb3J0LWVudHJpZXMtZGlhbG9nL2ltcG9ydC1lbnRyaWVzLXN1bW1hcnkvaW1wb3J0LWVudHJpZXMtc3VtbWFyeS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2FydC9pbXBvcnQtZXhwb3J0L2NvbXBvbmVudHMvaW1wb3J0LXRvLWNhcnQvaW1wb3J0LWVudHJpZXMtZGlhbG9nL2ltcG9ydC1lbnRyaWVzLXN1bW1hcnkvaW1wb3J0LWVudHJpZXMtc3VtbWFyeS5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0wsa0JBQWtCLEVBQ2xCLFNBQVMsR0FFVixNQUFNLHVCQUF1QixDQUFDOzs7OztBQU8vQixNQUFNLE9BQU8sNkJBQTZCO0lBTDFDO1FBTUUsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0Qix1QkFBa0IsR0FBRyxrQkFBa0IsQ0FBQztRQUV4Qyx5QkFBb0IsR0FBWSxLQUFLLENBQUM7UUFDdEMsdUJBQWtCLEdBQVksS0FBSyxDQUFDO1FBU3BDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBVSxDQUFDO0tBYXpDO0lBWEMsS0FBSyxDQUFDLE1BQWM7UUFDbEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELGlCQUFpQjtRQUNmLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQztJQUN6RCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztJQUNyRCxDQUFDOzswSEExQlUsNkJBQTZCOzhHQUE3Qiw2QkFBNkIsc0pDbEIxQywweUZBMkZBOzJGRHpFYSw2QkFBNkI7a0JBTHpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsV0FBVyxFQUFFLHlDQUF5QztvQkFDdEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzhCQVNDLElBQUk7c0JBREgsS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUs7Z0JBSU4sVUFBVTtzQkFEVCxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIE9yZGVyRW50cmllc1NvdXJjZSxcbiAgSUNPTl9UWVBFLFxuICBQcm9kdWN0SW1wb3J0U3VtbWFyeSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtaW1wb3J0LWVudHJpZXMtc3VtbWFyeScsXG4gIHRlbXBsYXRlVXJsOiAnLi9pbXBvcnQtZW50cmllcy1zdW1tYXJ5LmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIEltcG9ydEVudHJpZXNTdW1tYXJ5Q29tcG9uZW50IHtcbiAgaWNvblR5cGVzID0gSUNPTl9UWVBFO1xuICBvcmRlckVudHJpZXNTb3VyY2UgPSBPcmRlckVudHJpZXNTb3VyY2U7XG5cbiAgd2FybmluZ0RldGFpbHNPcGVuZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgZXJyb3JEZXRhaWxzT3BlbmVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgQElucHV0KClcbiAgdHlwZTogc3RyaW5nO1xuXG4gIEBJbnB1dCgpXG4gIHN1bW1hcnk6IFByb2R1Y3RJbXBvcnRTdW1tYXJ5O1xuXG4gIEBPdXRwdXQoKVxuICBjbG9zZUV2ZW50ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgY2xvc2UocmVhc29uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNsb3NlRXZlbnQuZW1pdChyZWFzb24pO1xuICB9XG5cbiAgdG9nZ2xlV2FybmluZ0xpc3QoKTogdm9pZCB7XG4gICAgdGhpcy53YXJuaW5nRGV0YWlsc09wZW5lZCA9ICF0aGlzLndhcm5pbmdEZXRhaWxzT3BlbmVkO1xuICB9XG5cbiAgdG9nZ2xlRXJyb3JMaXN0KCk6IHZvaWQge1xuICAgIHRoaXMuZXJyb3JEZXRhaWxzT3BlbmVkID0gIXRoaXMuZXJyb3JEZXRhaWxzT3BlbmVkO1xuICB9XG59XG4iLCI8ZGl2IGNsYXNzPVwiY3gtaW1wb3J0LWVudHJpZXMtc3VtbWFyeS1zdGF0dXNcIj5cbiAgPHAgKm5nSWY9XCIhc3VtbWFyeS5sb2FkaW5nOyBlbHNlIGxvYWRpbmdcIiBbbmdTd2l0Y2hdPVwidHlwZVwiPlxuICAgIDxuZy1jb250YWluZXIgKm5nU3dpdGNoQ2FzZT1cIm9yZGVyRW50cmllc1NvdXJjZS5RVUlDS19PUkRFUlwiPlxuICAgICAge3sgJ2ltcG9ydEVudHJpZXNEaWFsb2cuc3VtbWFyeS5sb2FkZWQnIHwgY3hUcmFuc2xhdGU6IHN1bW1hcnkgfX1cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8bmctY29udGFpbmVyICpuZ1N3aXRjaERlZmF1bHQ+XG4gICAgICB7eyAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5LmxvYWRlZFRvQ2FydCcgfCBjeFRyYW5zbGF0ZTogc3VtbWFyeSB9fVxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L3A+XG4gIDxuZy10ZW1wbGF0ZSAjbG9hZGluZz5cbiAgICA8cD5cbiAgICAgIHt7ICdpbXBvcnRFbnRyaWVzRGlhbG9nLnN1bW1hcnkubG9hZGluZycgfCBjeFRyYW5zbGF0ZTogc3VtbWFyeSB9fVxuICAgIDwvcD5cbiAgPC9uZy10ZW1wbGF0ZT5cbjwvZGl2PlxuPHBcbiAgKm5nSWY9XCJzdW1tYXJ5LnN1Y2Nlc3Nlc0NvdW50ID4gMFwiXG4gIGNsYXNzPVwiY3gtaW1wb3J0LWVudHJpZXMtc3VtbWFyeS1zdWNjZXNzZXNcIlxuPlxuICA8Y3gtaWNvbiBjbGFzcz1cInN1Y2Nlc3NcIiBbdHlwZV09XCJpY29uVHlwZXMuU1VDQ0VTU1wiPjwvY3gtaWNvbj5cbiAge3sgJ2ltcG9ydEVudHJpZXNEaWFsb2cuc3VtbWFyeS5zdWNjZXNzZXMnIHwgY3hUcmFuc2xhdGU6IHN1bW1hcnkgfX1cbjwvcD5cbjxkaXZcbiAgKm5nSWY9XCJzdW1tYXJ5Lndhcm5pbmdNZXNzYWdlcy5sZW5ndGggPiAwXCJcbiAgY2xhc3M9XCJjeC1pbXBvcnQtZW50cmllcy1zdW1tYXJ5LXdhcm5pbmdzXCJcbj5cbiAgPHA+XG4gICAgPGN4LWljb24gY2xhc3M9XCJ3YXJuaW5nXCIgW3R5cGVdPVwiaWNvblR5cGVzLkVSUk9SXCI+PC9jeC1pY29uPlxuICAgIHt7XG4gICAgICAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5Lndhcm5pbmcnXG4gICAgICAgIHwgY3hUcmFuc2xhdGU6IHsgY291bnQ6IHN1bW1hcnkud2FybmluZ01lc3NhZ2VzLmxlbmd0aCB9XG4gICAgfX1cbiAgICA8YnV0dG9uIGNsYXNzPVwibGluayBjeC1hY3Rpb24tbGlua1wiIChjbGljayk9XCJ0b2dnbGVXYXJuaW5nTGlzdCgpXCI+XG4gICAgICB7e1xuICAgICAgICAod2FybmluZ0RldGFpbHNPcGVuZWRcbiAgICAgICAgICA/ICdpbXBvcnRFbnRyaWVzRGlhbG9nLnN1bW1hcnkuaGlkZSdcbiAgICAgICAgICA6ICdpbXBvcnRFbnRyaWVzRGlhbG9nLnN1bW1hcnkuc2hvdydcbiAgICAgICAgKSB8IGN4VHJhbnNsYXRlXG4gICAgICB9fVxuICAgIDwvYnV0dG9uPlxuICA8L3A+XG4gIDx1bCAqbmdJZj1cIndhcm5pbmdEZXRhaWxzT3BlbmVkXCI+XG4gICAgPGxpICpuZ0Zvcj1cImxldCBtZXNzYWdlIG9mIHN1bW1hcnkud2FybmluZ01lc3NhZ2VzXCI+XG4gICAgICB7e1xuICAgICAgICAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5Lm1lc3NhZ2VzLicgKyBtZXNzYWdlLnN0YXR1c0NvZGVcbiAgICAgICAgICB8IGN4VHJhbnNsYXRlOiBtZXNzYWdlXG4gICAgICB9fVxuICAgIDwvbGk+XG4gIDwvdWw+XG48L2Rpdj5cbjxkaXZcbiAgKm5nSWY9XCJzdW1tYXJ5LmVycm9yTWVzc2FnZXMubGVuZ3RoID4gMFwiXG4gIGNsYXNzPVwiY3gtaW1wb3J0LWVudHJpZXMtc3VtbWFyeS1lcnJvcnNcIlxuPlxuICA8cD5cbiAgICA8Y3gtaWNvbiBjbGFzcz1cImVycm9yXCIgW3R5cGVdPVwiaWNvblR5cGVzLlJFU0VUXCI+PC9jeC1pY29uPlxuICAgIHt7XG4gICAgICAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5LmVycm9yJ1xuICAgICAgICB8IGN4VHJhbnNsYXRlOiB7IGNvdW50OiBzdW1tYXJ5LmVycm9yTWVzc2FnZXMubGVuZ3RoIH1cbiAgICB9fVxuICAgIDxidXR0b24gY2xhc3M9XCJsaW5rIGN4LWFjdGlvbi1saW5rXCIgKGNsaWNrKT1cInRvZ2dsZUVycm9yTGlzdCgpXCI+XG4gICAgICB7e1xuICAgICAgICAoZXJyb3JEZXRhaWxzT3BlbmVkXG4gICAgICAgICAgPyAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5LmhpZGUnXG4gICAgICAgICAgOiAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5LnNob3cnXG4gICAgICAgICkgfCBjeFRyYW5zbGF0ZVxuICAgICAgfX1cbiAgICA8L2J1dHRvbj5cbiAgPC9wPlxuICA8dWwgKm5nSWY9XCJlcnJvckRldGFpbHNPcGVuZWRcIj5cbiAgICA8bGkgKm5nRm9yPVwibGV0IG1lc3NhZ2Ugb2Ygc3VtbWFyeS5lcnJvck1lc3NhZ2VzXCI+XG4gICAgICB7e1xuICAgICAgICAnaW1wb3J0RW50cmllc0RpYWxvZy5zdW1tYXJ5Lm1lc3NhZ2VzLicgKyBtZXNzYWdlLnN0YXR1c0NvZGVcbiAgICAgICAgICB8IGN4VHJhbnNsYXRlOiBtZXNzYWdlXG4gICAgICB9fVxuICAgIDwvbGk+XG4gIDwvdWw+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJjeC1pbXBvcnQtZW50cmllcy1zdW1tYXJ5LWZvb3RlclwiPlxuICA8YnV0dG9uXG4gICAgKm5nSWY9XCIhc3VtbWFyeS5sb2FkaW5nOyBlbHNlIGluZm9cIlxuICAgIChjbGljayk9XCJjbG9zZSgnQ2xvc2UgSW1wb3J0IFByb2R1Y3RzIERpYWxvZycpXCJcbiAgICBjbGFzcz1cImJ0biBidG4tYWN0aW9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgPlxuICAgIHt7ICdpbXBvcnRFbnRyaWVzRGlhbG9nLmNsb3NlJyB8IGN4VHJhbnNsYXRlIH19XG4gIDwvYnV0dG9uPlxuICA8bmctdGVtcGxhdGUgI2luZm8+XG4gICAgPHA+e3sgJ2ltcG9ydEVudHJpZXNEaWFsb2cuc3VtbWFyeS5pbmZvJyB8IGN4VHJhbnNsYXRlIH19PC9wPlxuICA8L25nLXRlbXBsYXRlPlxuPC9kaXY+XG4iXX0=