import { Injectable } from '@angular/core';
import { facadeFactory } from '@spartacus/core';
import { CART_SAVED_CART_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export class SavedCartFacade {
}
SavedCartFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
SavedCartFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartFacade, providedIn: 'root', useFactory: () => facadeFactory({
        facade: SavedCartFacade,
        feature: CART_SAVED_CART_CORE_FEATURE,
        methods: [
            'editSavedCart',
            'deleteSavedCart',
            'getSavedCart',
            'getSavedCartList',
            'loadSavedCart',
            'clearCloneSavedCart',
            'clearRestoreSavedCart',
            'clearSaveCart',
            'clearSavedCarts',
            'get',
            'getList',
            'getCloneSavedCartProcessError',
            'getCloneSavedCartProcessLoading',
            'getCloneSavedCartProcessSuccess',
            'getRestoreSavedCartProcessError',
            'getRestoreSavedCartProcessLoading',
            'getRestoreSavedCartProcessSuccess',
            'getSaveCartProcessError',
            'getSaveCartProcessLoading',
            'getSaveCartProcessSuccess',
            'getSavedCartListProcess',
            'getSavedCartListProcessLoading',
            'isStable',
            'cloneSavedCart',
            'loadSavedCarts',
            'restoreSavedCart',
            'saveCart',
        ],
        async: true,
    }) });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: () => facadeFactory({
                        facade: SavedCartFacade,
                        feature: CART_SAVED_CART_CORE_FEATURE,
                        methods: [
                            'editSavedCart',
                            'deleteSavedCart',
                            'getSavedCart',
                            'getSavedCartList',
                            'loadSavedCart',
                            'clearCloneSavedCart',
                            'clearRestoreSavedCart',
                            'clearSaveCart',
                            'clearSavedCarts',
                            'get',
                            'getList',
                            'getCloneSavedCartProcessError',
                            'getCloneSavedCartProcessLoading',
                            'getCloneSavedCartProcessSuccess',
                            'getRestoreSavedCartProcessError',
                            'getRestoreSavedCartProcessLoading',
                            'getRestoreSavedCartProcessSuccess',
                            'getSaveCartProcessError',
                            'getSaveCartProcessLoading',
                            'getSaveCartProcessSuccess',
                            'getSavedCartListProcess',
                            'getSavedCartListProcessLoading',
                            'isStable',
                            'cloneSavedCart',
                            'loadSavedCarts',
                            'restoreSavedCart',
                            'saveCart',
                        ],
                        async: true,
                    }),
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,