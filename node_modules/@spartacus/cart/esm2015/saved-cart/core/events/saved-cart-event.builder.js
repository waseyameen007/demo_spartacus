import { Injectable } from '@angular/core';
import { ofType } from '@ngrx/effects';
import { CloneSavedCartEvent, CloneSavedCartFailEvent, CloneSavedCartSuccessEvent, DeleteSavedCartEvent, DeleteSavedCartFailEvent, DeleteSavedCartSuccessEvent, EditSavedCartEvent, EditSavedCartFailEvent, EditSavedCartSuccessEvent, RestoreSavedCartEvent, RestoreSavedCartFailEvent, RestoreSavedCartSuccessEvent, SaveCartEvent, SaveCartFailEvent, SaveCartSuccessEvent, } from '@spartacus/cart/saved-cart/root';
import { CartActions, createFrom, } from '@spartacus/core';
import { of } from 'rxjs';
import { filter, map, switchMap, withLatestFrom } from 'rxjs/operators';
import { SavedCartActions } from '../store/actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class SavedCartEventBuilder {
    constructor(actionsSubject, eventService, stateEventService, multiCartService) {
        this.actionsSubject = actionsSubject;
        this.eventService = eventService;
        this.stateEventService = stateEventService;
        this.multiCartService = multiCartService;
        this.register();
    }
    /**
     * Registers events for the saved cart
     */
    register() {
        this.registerRestoreSavedCartEvents();
        this.registerDeleteSavedCartEvents();
        this.registerSaveCartEvents();
        this.registerEditSavedCartEvents();
        this.registerCloneSavedCartEvents();
    }
    /**
     * Registers restore saved cart events
     */
    registerRestoreSavedCartEvents() {
        this.buildRestoreSavedCartEvents({
            action: SavedCartActions.RESTORE_SAVED_CART,
            event: RestoreSavedCartEvent,
        });
        this.buildRestoreSavedCartEvents({
            action: SavedCartActions.RESTORE_SAVED_CART_SUCCESS,
            event: RestoreSavedCartSuccessEvent,
        });
        this.buildRestoreSavedCartEvents({
            action: SavedCartActions.RESTORE_SAVED_CART_FAIL,
            event: RestoreSavedCartFailEvent,
        });
    }
    /**
     * Registers delete saved cart events
     */
    registerDeleteSavedCartEvents() {
        this.stateEventService.register({
            action: CartActions.DELETE_CART,
            event: DeleteSavedCartEvent,
            factory: (action) => createFrom(DeleteSavedCartEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),
        });
        this.stateEventService.register({
            action: CartActions.DELETE_CART_SUCCESS,
            event: DeleteSavedCartSuccessEvent,
            factory: (action) => createFrom(DeleteSavedCartSuccessEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),
        });
        this.stateEventService.register({
            action: CartActions.DELETE_CART_FAIL,
            event: DeleteSavedCartFailEvent,
            factory: (action) => createFrom(DeleteSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),
        });
    }
    /**
     * Registers save cart events
     */
    registerSaveCartEvents() {
        this.buildSaveCartSuccessEvent({
            action: SavedCartActions.SAVE_CART_SUCCESS,
            event: SaveCartSuccessEvent,
        });
        this.stateEventService.register({
            action: SavedCartActions.SAVE_CART_FAIL,
            event: SaveCartFailEvent,
            factory: (action) => createFrom(SaveCartFailEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),
        });
        this.stateEventService.register({
            action: SavedCartActions.SAVE_CART,
            event: SaveCartEvent,
            factory: (action) => {
                return createFrom(SaveCartEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId }));
            },
        });
    }
    /**
     * Registers edit saved cart events
     */
    registerEditSavedCartEvents() {
        this.buildSaveCartSuccessEvent({
            action: SavedCartActions.EDIT_SAVED_CART_SUCCESS,
            event: EditSavedCartSuccessEvent,
        });
        this.stateEventService.register({
            action: SavedCartActions.EDIT_SAVED_CART_FAIL,
            event: EditSavedCartFailEvent,
            factory: (action) => createFrom(EditSavedCartFailEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId })),
        });
        this.stateEventService.register({
            action: SavedCartActions.EDIT_SAVED_CART,
            event: EditSavedCartEvent,
            factory: (action) => {
                return createFrom(EditSavedCartEvent, Object.assign(Object.assign({}, action.payload), { cartCode: action.payload.cartId }));
            },
        });
    }
    /**
     * Registers clone saved cart events
     */
    registerCloneSavedCartEvents() {
        this.buildRestoreSavedCartEvents({
            action: SavedCartActions.CLONE_SAVED_CART,
            event: CloneSavedCartEvent,
        });
        this.buildRestoreSavedCartEvents({
            action: SavedCartActions.CLONE_SAVED_CART_SUCCESS,
            event: CloneSavedCartSuccessEvent,
        });
        this.buildRestoreSavedCartEvents({
            action: SavedCartActions.CLONE_SAVED_CART_FAIL,
            event: CloneSavedCartFailEvent,
        });
    }
    /**
     * Builds the restore save cart events from the action and cart
     *
     * @param mapping mapping declaration from `action` string type to `event` class type
     * @param saveTime should the saveTime attribute be added to the event
     * @returns
     */
    buildRestoreSavedCartEvents(mapping) {
        const eventStream$ = this.getAction(mapping.action).pipe(switchMap((action) => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign(Object.assign({}, action.payload), { cartCode: cart.code, saveCartName: cart.name, saveCartDescription: cart.description }), (cart.saveTime && { saveTime: cart.saveTime })))));
        return this.eventService.register(mapping.event, eventStream$);
    }
    /**
     * Builds save cart event by adding the saveTime from the cart
     *
     * @param mapping mapping declaration from `action` string type to `event` class type
     * @returns events register function
     */
    buildSaveCartSuccessEvent(mapping) {
        const eventStream$ = this.getAction(mapping.action).pipe(switchMap((action) => of(action).pipe(withLatestFrom(this.multiCartService.getCart(action.payload.cartId)))), filter(([, cart]) => Boolean(cart)), map(([action, cart]) => createFrom(mapping.event, Object.assign(Object.assign({}, action.payload), { cartCode: cart.code, saveTime: cart.saveTime }))));
        return this.eventService.register(mapping.event, eventStream$);
    }
    /**
     * Returns a stream of actions only of a given type(s)
     *
     * @param actionType type(s) of actions
     */
    getAction(actionType) {
        return this.actionsSubject.pipe(ofType(...[].concat(actionType)));
    }
}
SavedCartEventBuilder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartEventBuilder, deps: [{ token: i1.ActionsSubject }, { token: i2.EventService }, { token: i2.StateEventService }, { token: i2.MultiCartService }], target: i0.ɵɵFactoryTarget.Injectable });
SavedCartEventBuilder.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartEventBuilder, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartEventBuilder, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1.ActionsSubject }, { type: i2.EventService }, { type: i2.StateEventService }, { type: i2.MultiCartService }]; } });
//# sourceMappingURL=data:application/json;base64,