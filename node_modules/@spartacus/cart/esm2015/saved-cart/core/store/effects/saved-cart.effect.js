import { __decorate } from "tslib";
import { Injectable } from '@angular/core';
import { Effect, ofType } from '@ngrx/effects';
import { CartActions, GlobalMessageType, normalizeHttpError, } from '@spartacus/core';
import { of } from 'rxjs';
import { catchError, map, switchMap, withLatestFrom } from 'rxjs/operators';
import { SavedCartActions } from '../actions/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/effects";
import * as i2 from "../../connectors/saved-cart.connector";
import * as i3 from "@spartacus/core";
export class SavedCartEffects {
    constructor(actions$, savedCartConnector, activeCartService, globalMessageService) {
        this.actions$ = actions$;
        this.savedCartConnector = savedCartConnector;
        this.activeCartService = activeCartService;
        this.globalMessageService = globalMessageService;
        this.loadSavedCart$ = this.actions$.pipe(ofType(SavedCartActions.LOAD_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId }) => this.savedCartConnector.get(userId, cartId).pipe(switchMap((savedCart) => {
            return [
                new CartActions.LoadCartSuccess({
                    userId,
                    cartId,
                    cart: savedCart,
                }),
                new SavedCartActions.LoadSavedCartSuccess({ userId, cartId }),
            ];
        }), catchError((error) => of(new SavedCartActions.LoadSavedCartFail({
            userId,
            cartId,
            error: normalizeHttpError(error),
        }))))));
        this.loadSavedCarts$ = this.actions$.pipe(ofType(SavedCartActions.LOAD_SAVED_CARTS), map((action) => action.payload), switchMap(({ userId }) => this.savedCartConnector.getList(userId).pipe(switchMap((savedCarts) => {
            return [
                new CartActions.LoadCartsSuccess(savedCarts),
                new SavedCartActions.LoadSavedCartsSuccess({ userId }),
            ];
        }), catchError((error) => of(new SavedCartActions.LoadSavedCartsFail({
            userId,
            error: normalizeHttpError(error),
        }))))));
        this.restoreSavedCart$ = this.actions$.pipe(ofType(SavedCartActions.RESTORE_SAVED_CART), map((action) => action.payload), withLatestFrom(this.activeCartService.getActive()), switchMap(([{ userId, cartId }, activeCart]) => {
            var _a;
            const actions = [];
            if (((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0) {
                if (activeCart.code) {
                    /**
                     * Instead of calling the SaveCartAction, we are calling the edit saved cart
                     * because we do not want to clear the state when we swap carts between active and saved cart
                     */
                    actions.push(new SavedCartActions.EditSavedCart({
                        userId,
                        cartId: activeCart.code,
                        saveCartName: '',
                        saveCartDescription: '',
                    }));
                }
            }
            return this.savedCartConnector.restoreSavedCart(userId, cartId).pipe(switchMap((savedCart) => {
                var _a;
                this.globalMessageService.add({
                    key: ((_a = activeCart === null || activeCart === void 0 ? void 0 : activeCart.entries) !== null && _a !== void 0 ? _a : []).length > 0
                        ? 'savedCartList.swapCartWithActiveCart'
                        : 'savedCartList.swapCartNoActiveCart',
                    params: {
                        cartName: cartId,
                        previousCartName: activeCart.code,
                    },
                }, GlobalMessageType.MSG_TYPE_CONFIRMATION);
                return [
                    ...actions,
                    new CartActions.SetActiveCartId(cartId),
                    new CartActions.LoadCartSuccess({
                        userId,
                        cartId,
                        cart: savedCart,
                    }),
                    new SavedCartActions.RestoreSavedCartSuccess({ userId, cartId }),
                ];
            }), catchError((error) => of(new SavedCartActions.RestoreSavedCartFail({
                userId,
                cartId,
                error: normalizeHttpError(error),
            }))));
        }));
        this.saveCart$ = this.actions$.pipe(ofType(SavedCartActions.SAVE_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {
            return this.savedCartConnector
                .saveCart(userId, cartId, saveCartName, saveCartDescription)
                .pipe(switchMap((savedCart) => {
                return [
                    new CartActions.ClearCartState(),
                    new CartActions.LoadCartSuccess({
                        userId,
                        cartId,
                        cart: savedCart,
                    }),
                    new SavedCartActions.SaveCartSuccess({
                        userId,
                        cartId,
                        saveCartName,
                        saveCartDescription,
                    }),
                ];
            }), catchError((error) => of(new SavedCartActions.SaveCartFail({
                userId,
                cartId,
                saveCartName,
                saveCartDescription,
                error: normalizeHttpError(error),
            }))));
        }));
        this.editSavedCart$ = this.actions$.pipe(ofType(SavedCartActions.EDIT_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName, saveCartDescription }) => {
            return this.savedCartConnector
                .saveCart(userId, cartId, saveCartName, saveCartDescription)
                .pipe(switchMap((savedCart) => {
                return [
                    new CartActions.LoadCartSuccess({
                        userId,
                        cartId,
                        cart: savedCart,
                    }),
                    new SavedCartActions.EditSavedCartSuccess({
                        userId,
                        cartId,
                        saveCartName,
                        saveCartDescription,
                    }),
                ];
            }), catchError((error) => of(new SavedCartActions.EditSavedCartFail({
                userId,
                cartId,
                saveCartName,
                saveCartDescription,
                error: normalizeHttpError(error),
            }))));
        }));
        this.cloneSavedCart$ = this.actions$.pipe(ofType(SavedCartActions.CLONE_SAVED_CART), map((action) => action.payload), switchMap(({ userId, cartId, saveCartName }) => {
            return this.savedCartConnector
                .cloneSavedCart(userId, cartId, saveCartName)
                .pipe(switchMap((_) => {
                return [
                    new SavedCartActions.CloneSavedCartSuccess({
                        userId,
                        cartId,
                        saveCartName,
                    }),
                    new SavedCartActions.RestoreSavedCart({
                        userId,
                        cartId,
                    }),
                    new SavedCartActions.LoadSavedCarts({ userId }),
                ];
            }), catchError((error) => of(new SavedCartActions.CloneSavedCartFail({
                userId,
                cartId,
                saveCartName,
                error: normalizeHttpError(error),
            }))));
        }));
    }
}
SavedCartEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartEffects, deps: [{ token: i1.Actions }, { token: i2.SavedCartConnector }, { token: i3.ActiveCartService }, { token: i3.GlobalMessageService }], target: i0.ɵɵFactoryTarget.Injectable });
SavedCartEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartEffects });
__decorate([
    Effect()
], SavedCartEffects.prototype, "loadSavedCart$", void 0);
__decorate([
    Effect()
], SavedCartEffects.prototype, "loadSavedCarts$", void 0);
__decorate([
    Effect()
], SavedCartEffects.prototype, "restoreSavedCart$", void 0);
__decorate([
    Effect()
], SavedCartEffects.prototype, "saveCart$", void 0);
__decorate([
    Effect()
], SavedCartEffects.prototype, "editSavedCart$", void 0);
__decorate([
    Effect()
], SavedCartEffects.prototype, "cloneSavedCart$", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: SavedCartEffects, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: i2.SavedCartConnector }, { type: i3.ActiveCartService }, { type: i3.GlobalMessageService }]; }, propDecorators: { loadSavedCart$: [], loadSavedCarts$: [], restoreSavedCart$: [], saveCart$: [], editSavedCart$: [], cloneSavedCart$: [] } });
//# sourceMappingURL=data:application/json;base64,