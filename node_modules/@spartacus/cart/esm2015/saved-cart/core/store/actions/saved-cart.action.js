import { MULTI_CART_DATA, PROCESS_FEATURE, StateUtils } from '@spartacus/core';
import { SAVED_CART_CLONE_CART_PROCESS_ID, SAVED_CART_LIST_PROCESS_ID, SAVED_CART_RESTORE_CART_PROCESS_ID, SAVED_CART_SAVE_CART_PROCESS_ID, } from '../saved-cart-constants';
export const LOAD_SAVED_CART = '[Saved Cart] Load Saved Cart';
export const LOAD_SAVED_CART_SUCCESS = '[Saved Cart] Load Saved Cart Success';
export const LOAD_SAVED_CART_FAIL = '[Saved Cart] Load Saved Cart Fail';
export const LOAD_SAVED_CARTS = '[Saved Cart] Load Saved Carts';
export const LOAD_SAVED_CARTS_SUCCESS = '[Saved Cart] Load Saved Carts Success';
export const LOAD_SAVED_CARTS_FAIL = '[Saved Cart] Load Saved Carts Fail';
export const CLEAR_SAVED_CARTS = '[Saved Cart] Clear Saved Carts';
export const RESTORE_SAVED_CART = '[Saved Cart] Restore Saved Cart';
export const RESTORE_SAVED_CART_SUCCESS = '[Saved Cart] Restore Saved Cart Success';
export const RESTORE_SAVED_CART_FAIL = '[Saved Cart] Restore Saved Cart Fail';
export const CLEAR_RESTORE_SAVED_CART = '[Saved Cart] Clear Restore Saved Cart';
export const SAVE_CART = '[Saved Cart] Save Cart';
export const SAVE_CART_SUCCESS = '[Saved Cart] Save Cart Success';
export const SAVE_CART_FAIL = '[Saved Cart] Save Cart Fail';
export const CLEAR_SAVE_CART = '[Saved Cart] Clear Save Cart';
export const EDIT_SAVED_CART = '[Saved Cart] Edit Saved Cart';
export const EDIT_SAVED_CART_SUCCESS = '[Saved Cart] Edit Saved Cart Success';
export const EDIT_SAVED_CART_FAIL = '[Saved Cart] Edit Saved Cart Fail';
export const CLONE_SAVED_CART = '[Saved Cart] Clone Saved Cart';
export const CLONE_SAVED_CART_SUCCESS = '[Saved Cart] Clone Saved Cart Success';
export const CLONE_SAVED_CART_FAIL = '[Saved Cart] Clone Saved Cart Fail';
export const CLEAR_CLONE_SAVED_CART = '[Saved Cart] Clear Clone Saved Cart';
export class LoadSavedCart extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = LOAD_SAVED_CART;
    }
}
export class LoadSavedCartSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId);
        this.payload = payload;
        this.type = LOAD_SAVED_CART_SUCCESS;
    }
}
export class LoadSavedCartFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(MULTI_CART_DATA, payload.cartId, payload === null || payload === void 0 ? void 0 : payload.error);
        this.payload = payload;
        this.type = LOAD_SAVED_CART_FAIL;
    }
}
export class LoadSavedCarts extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_SAVED_CARTS;
    }
}
export class LoadSavedCartsSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_SAVED_CARTS_SUCCESS;
    }
}
export class LoadSavedCartsFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID, payload.error);
        this.payload = payload;
        this.type = LOAD_SAVED_CARTS_FAIL;
    }
}
export class ClearSavedCarts extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, SAVED_CART_LIST_PROCESS_ID);
        this.type = CLEAR_SAVED_CARTS;
    }
}
export class RestoreSavedCart extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = RESTORE_SAVED_CART;
    }
}
export class RestoreSavedCartSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = RESTORE_SAVED_CART_SUCCESS;
    }
}
export class RestoreSavedCartFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID, payload.error);
        this.payload = payload;
        this.type = RESTORE_SAVED_CART_FAIL;
    }
}
export class ClearRestoreSavedCart extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, SAVED_CART_RESTORE_CART_PROCESS_ID);
        this.type = CLEAR_RESTORE_SAVED_CART;
    }
}
export class SaveCart extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = SAVE_CART;
    }
}
export class SaveCartSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = SAVE_CART_SUCCESS;
    }
}
export class SaveCartFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);
        this.payload = payload;
        this.type = SAVE_CART_FAIL;
    }
}
export class ClearSaveCart extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);
        this.type = CLEAR_SAVE_CART;
    }
}
export class EditSavedCart extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = EDIT_SAVED_CART;
    }
}
export class EditSavedCartSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = EDIT_SAVED_CART_SUCCESS;
    }
}
export class EditSavedCartFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_SAVE_CART_PROCESS_ID, payload.error);
        this.payload = payload;
        this.type = EDIT_SAVED_CART_FAIL;
    }
}
export class CloneSavedCart extends StateUtils.EntityLoadAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = CLONE_SAVED_CART;
    }
}
export class CloneSavedCartSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);
        this.payload = payload;
        this.type = CLONE_SAVED_CART_SUCCESS;
    }
}
export class CloneSavedCartFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID, payload.error);
        this.payload = payload;
        this.type = CLONE_SAVED_CART_FAIL;
    }
}
export class ClearCloneSavedCart extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, SAVED_CART_CLONE_CART_PROCESS_ID);
        this.type = CLEAR_CLONE_SAVED_CART;
    }
}
//# sourceMappingURL=data:application/json;base64,