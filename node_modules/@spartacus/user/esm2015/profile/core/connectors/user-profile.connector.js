import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./user-profile.adapter";
export class UserProfileConnector {
    constructor(userProfileAdapter) {
        this.userProfileAdapter = userProfileAdapter;
    }
    update(username, user) {
        return this.userProfileAdapter.update(username, user);
    }
    register(user) {
        return this.userProfileAdapter.register(user);
    }
    registerGuest(guid, password) {
        return this.userProfileAdapter.registerGuest(guid, password);
    }
    requestForgotPasswordEmail(userEmailAddress) {
        return this.userProfileAdapter.requestForgotPasswordEmail(userEmailAddress);
    }
    resetPassword(token, newPassword) {
        return this.userProfileAdapter.resetPassword(token, newPassword);
    }
    updateEmail(userId, currentPassword, newUserId) {
        return this.userProfileAdapter.updateEmail(userId, currentPassword, newUserId);
    }
    updatePassword(userId, oldPassword, newPassword) {
        return this.userProfileAdapter.updatePassword(userId, oldPassword, newPassword);
    }
    remove(userId) {
        return this.userProfileAdapter.close(userId);
    }
    getTitles() {
        return this.userProfileAdapter.loadTitles();
    }
}
UserProfileConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserProfileConnector, deps: [{ token: i1.UserProfileAdapter }], target: i0.ɵɵFactoryTarget.Injectable });
UserProfileConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserProfileConnector });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UserProfileConnector, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.UserProfileAdapter }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlci1wcm9maWxlLmNvbm5lY3Rvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29yZS9jb25uZWN0b3JzL3VzZXItcHJvZmlsZS5jb25uZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBTzNDLE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFBc0Isa0JBQXNDO1FBQXRDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBb0I7SUFBRyxDQUFDO0lBRWhFLE1BQU0sQ0FBQyxRQUFnQixFQUFFLElBQVU7UUFDakMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBRUQsUUFBUSxDQUFDLElBQWdCO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQVksRUFBRSxRQUFnQjtRQUMxQyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCwwQkFBMEIsQ0FBQyxnQkFBd0I7UUFDakQsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsMEJBQTBCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUM5RSxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQWEsRUFBRSxXQUFtQjtRQUM5QyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFFRCxXQUFXLENBQ1QsTUFBYyxFQUNkLGVBQXVCLEVBQ3ZCLFNBQWlCO1FBRWpCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FDeEMsTUFBTSxFQUNOLGVBQWUsRUFDZixTQUFTLENBQ1YsQ0FBQztJQUNKLENBQUM7SUFFRCxjQUFjLENBQ1osTUFBYyxFQUNkLFdBQW1CLEVBQ25CLFdBQW1CO1FBRW5CLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FDM0MsTUFBTSxFQUNOLFdBQVcsRUFDWCxXQUFXLENBQ1osQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBYztRQUNuQixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELFNBQVM7UUFDUCxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM5QyxDQUFDOztpSEFyRFUsb0JBQW9CO3FIQUFwQixvQkFBb0I7MkZBQXBCLG9CQUFvQjtrQkFEaEMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFVzZXIgfSBmcm9tICdAc3BhcnRhY3VzL3VzZXIvYWNjb3VudC9yb290JztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFRpdGxlLCBVc2VyU2lnblVwIH0gZnJvbSAnQHNwYXJ0YWN1cy91c2VyL3Byb2ZpbGUvcm9vdCc7XG5pbXBvcnQgeyBVc2VyUHJvZmlsZUFkYXB0ZXIgfSBmcm9tICcuL3VzZXItcHJvZmlsZS5hZGFwdGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFVzZXJQcm9maWxlQ29ubmVjdG9yIHtcbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIHVzZXJQcm9maWxlQWRhcHRlcjogVXNlclByb2ZpbGVBZGFwdGVyKSB7fVxuXG4gIHVwZGF0ZSh1c2VybmFtZTogc3RyaW5nLCB1c2VyOiBVc2VyKTogT2JzZXJ2YWJsZTx1bmtub3duPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlclByb2ZpbGVBZGFwdGVyLnVwZGF0ZSh1c2VybmFtZSwgdXNlcik7XG4gIH1cblxuICByZWdpc3Rlcih1c2VyOiBVc2VyU2lnblVwKTogT2JzZXJ2YWJsZTxVc2VyPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlclByb2ZpbGVBZGFwdGVyLnJlZ2lzdGVyKHVzZXIpO1xuICB9XG5cbiAgcmVnaXN0ZXJHdWVzdChndWlkOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPFVzZXI+IHtcbiAgICByZXR1cm4gdGhpcy51c2VyUHJvZmlsZUFkYXB0ZXIucmVnaXN0ZXJHdWVzdChndWlkLCBwYXNzd29yZCk7XG4gIH1cblxuICByZXF1ZXN0Rm9yZ290UGFzc3dvcmRFbWFpbCh1c2VyRW1haWxBZGRyZXNzOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy51c2VyUHJvZmlsZUFkYXB0ZXIucmVxdWVzdEZvcmdvdFBhc3N3b3JkRW1haWwodXNlckVtYWlsQWRkcmVzcyk7XG4gIH1cblxuICByZXNldFBhc3N3b3JkKHRva2VuOiBzdHJpbmcsIG5ld1Bhc3N3b3JkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy51c2VyUHJvZmlsZUFkYXB0ZXIucmVzZXRQYXNzd29yZCh0b2tlbiwgbmV3UGFzc3dvcmQpO1xuICB9XG5cbiAgdXBkYXRlRW1haWwoXG4gICAgdXNlcklkOiBzdHJpbmcsXG4gICAgY3VycmVudFBhc3N3b3JkOiBzdHJpbmcsXG4gICAgbmV3VXNlcklkOiBzdHJpbmdcbiAgKTogT2JzZXJ2YWJsZTx1bmtub3duPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlclByb2ZpbGVBZGFwdGVyLnVwZGF0ZUVtYWlsKFxuICAgICAgdXNlcklkLFxuICAgICAgY3VycmVudFBhc3N3b3JkLFxuICAgICAgbmV3VXNlcklkXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZVBhc3N3b3JkKFxuICAgIHVzZXJJZDogc3RyaW5nLFxuICAgIG9sZFBhc3N3b3JkOiBzdHJpbmcsXG4gICAgbmV3UGFzc3dvcmQ6IHN0cmluZ1xuICApOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gdGhpcy51c2VyUHJvZmlsZUFkYXB0ZXIudXBkYXRlUGFzc3dvcmQoXG4gICAgICB1c2VySWQsXG4gICAgICBvbGRQYXNzd29yZCxcbiAgICAgIG5ld1Bhc3N3b3JkXG4gICAgKTtcbiAgfVxuXG4gIHJlbW92ZSh1c2VySWQ6IHN0cmluZyk6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJQcm9maWxlQWRhcHRlci5jbG9zZSh1c2VySWQpO1xuICB9XG5cbiAgZ2V0VGl0bGVzKCk6IE9ic2VydmFibGU8VGl0bGVbXT4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJQcm9maWxlQWRhcHRlci5sb2FkVGl0bGVzKCk7XG4gIH1cbn1cbiJdfQ==