import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./forgot-password-component.service";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/router";
import * as i6 from "@spartacus/core";
export class ForgotPasswordComponent {
    constructor(service) {
        this.service = service;
        this.form = this.service.form;
        this.isUpdating$ = this.service.isUpdating$;
    }
    onSubmit() {
        this.service.requestEmail();
    }
}
ForgotPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ForgotPasswordComponent, deps: [{ token: i1.ForgotPasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });
ForgotPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ForgotPasswordComponent, selector: "cx-forgot-password", ngImport: i0, template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'forgottenPassword.emailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      class=\"form-control\"\n      placeholder=\"{{\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"userEmail\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('userEmail')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n    >{{ 'common.cancel' | cxTranslate }}</a\n  >\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.submit' | cxTranslate }}\n  </button>\n</form>\n", components: [{ type: i2.SpinnerComponent, selector: "cx-spinner" }, { type: i2.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i6.TranslatePipe, "cxUrl": i6.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ForgotPasswordComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-forgot-password',
                    templateUrl: './forgot-password.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ForgotPasswordComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29tcG9uZW50cy9mb3Jnb3QtcGFzc3dvcmQvZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29tcG9uZW50cy9mb3Jnb3QtcGFzc3dvcmQvZm9yZ290LXBhc3N3b3JkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBU25FLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBc0IsT0FBdUM7UUFBdkMsWUFBTyxHQUFQLE9BQU8sQ0FBZ0M7UUFFN0QsU0FBSSxHQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFIeUIsQ0FBQztJQUtqRSxRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM5QixDQUFDOztvSEFSVSx1QkFBdUI7d0dBQXZCLHVCQUF1QiwwRENUcEMseTdCQWdDQTsyRkR2QmEsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFdBQVcsRUFBRSxrQ0FBa0M7b0JBQy9DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IEZvcmdvdFBhc3N3b3JkQ29tcG9uZW50U2VydmljZSB9IGZyb20gJy4vZm9yZ290LXBhc3N3b3JkLWNvbXBvbmVudC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtZm9yZ290LXBhc3N3b3JkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2ZvcmdvdC1wYXNzd29yZC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBGb3Jnb3RQYXNzd29yZENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBGb3Jnb3RQYXNzd29yZENvbXBvbmVudFNlcnZpY2UpIHt9XG5cbiAgZm9ybTogRm9ybUdyb3VwID0gdGhpcy5zZXJ2aWNlLmZvcm07XG4gIGlzVXBkYXRpbmckID0gdGhpcy5zZXJ2aWNlLmlzVXBkYXRpbmckO1xuXG4gIG9uU3VibWl0KCk6IHZvaWQge1xuICAgIHRoaXMuc2VydmljZS5yZXF1ZXN0RW1haWwoKTtcbiAgfVxufVxuIiwiPGN4LXNwaW5uZXIgY2xhc3M9XCJvdmVybGF5XCIgKm5nSWY9XCJpc1VwZGF0aW5nJCB8IGFzeW5jXCI+IDwvY3gtc3Bpbm5lcj5cblxuPGZvcm0gKG5nU3VibWl0KT1cIm9uU3VibWl0KClcIiBbZm9ybUdyb3VwXT1cImZvcm1cIj5cbiAgPGxhYmVsPlxuICAgIDxzcGFuIGNsYXNzPVwibGFiZWwtY29udGVudFwiPnt7XG4gICAgICAnZm9yZ290dGVuUGFzc3dvcmQuZW1haWxBZGRyZXNzLmxhYmVsJyB8IGN4VHJhbnNsYXRlXG4gICAgfX08L3NwYW4+XG4gICAgPGlucHV0XG4gICAgICBhcmlhLXJlcXVpcmVkPVwidHJ1ZVwiXG4gICAgICB0eXBlPVwiZW1haWxcIlxuICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7e1xuICAgICAgICAnZm9yZ290dGVuUGFzc3dvcmQuZW1haWxBZGRyZXNzLnBsYWNlaG9sZGVyJyB8IGN4VHJhbnNsYXRlXG4gICAgICB9fVwiXG4gICAgICBmb3JtQ29udHJvbE5hbWU9XCJ1c2VyRW1haWxcIlxuICAgIC8+XG4gICAgPGN4LWZvcm0tZXJyb3JzXG4gICAgICBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIlxuICAgICAgYXJpYS1hdG9taWM9XCJ0cnVlXCJcbiAgICAgIFtjb250cm9sXT1cImZvcm0uZ2V0KCd1c2VyRW1haWwnKVwiXG4gICAgPjwvY3gtZm9ybS1lcnJvcnM+XG4gIDwvbGFiZWw+XG5cbiAgPGFcbiAgICBjbGFzcz1cImJ0biBidG4tYmxvY2sgYnRuLXNlY29uZGFyeVwiXG4gICAgW3JvdXRlckxpbmtdPVwieyBjeFJvdXRlOiAnbG9naW4nIH0gfCBjeFVybFwiXG4gICAgPnt7ICdjb21tb24uY2FuY2VsJyB8IGN4VHJhbnNsYXRlIH19PC9hXG4gID5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tYmxvY2sgYnRuLXByaW1hcnlcIiBbZGlzYWJsZWRdPVwiZm9ybS5kaXNhYmxlZFwiPlxuICAgIHt7ICdjb21tb24uc3VibWl0JyB8IGN4VHJhbnNsYXRlIH19XG4gIDwvYnV0dG9uPlxuPC9mb3JtPlxuIl19