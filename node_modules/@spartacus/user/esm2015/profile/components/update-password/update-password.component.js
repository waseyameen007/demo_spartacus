import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./update-password-component.service";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/router";
import * as i6 from "@spartacus/core";
export class UpdatePasswordComponent {
    constructor(service) {
        this.service = service;
        this.form = this.service.form;
        this.isUpdating$ = this.service.isUpdating$;
    }
    onSubmit() {
        this.service.updatePassword();
    }
}
UpdatePasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UpdatePasswordComponent, deps: [{ token: i1.UpdatePasswordComponentService }], target: i0.ɵɵFactoryTarget.Component });
UpdatePasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UpdatePasswordComponent, selector: "cx-update-password", host: { classAttribute: "user-form" }, ngImport: i0, template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.oldPassword.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"oldPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"oldPassword\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('oldPassword')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.newPassword.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPassword\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('newPassword')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      placeholder=\"{{\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPasswordConfirm\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('newPasswordConfirm')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n", components: [{ type: i2.SpinnerComponent, selector: "cx-spinner" }, { type: i2.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i6.TranslatePipe, "cxUrl": i6.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UpdatePasswordComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-update-password',
                    templateUrl: './update-password.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'user-form' },
                }]
        }], ctorParameters: function () { return [{ type: i1.UpdatePasswordComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLXBhc3N3b3JkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29tcG9uZW50cy91cGRhdGUtcGFzc3dvcmQvdXBkYXRlLXBhc3N3b3JkLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29tcG9uZW50cy91cGRhdGUtcGFzc3dvcmQvdXBkYXRlLXBhc3N3b3JkLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBVW5FLE1BQU0sT0FBTyx1QkFBdUI7SUFDbEMsWUFBc0IsT0FBdUM7UUFBdkMsWUFBTyxHQUFQLE9BQU8sQ0FBZ0M7UUFFN0QsU0FBSSxHQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFIeUIsQ0FBQztJQUtqRSxRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUNoQyxDQUFDOztvSEFSVSx1QkFBdUI7d0dBQXZCLHVCQUF1QixpR0NWcEMsa21FQTZFQTsyRkRuRWEsdUJBQXVCO2tCQU5uQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFdBQVcsRUFBRSxrQ0FBa0M7b0JBQy9DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO2lCQUM3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVwZGF0ZVBhc3N3b3JkQ29tcG9uZW50U2VydmljZSB9IGZyb20gJy4vdXBkYXRlLXBhc3N3b3JkLWNvbXBvbmVudC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtdXBkYXRlLXBhc3N3b3JkJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VwZGF0ZS1wYXNzd29yZC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7IGNsYXNzOiAndXNlci1mb3JtJyB9LFxufSlcbmV4cG9ydCBjbGFzcyBVcGRhdGVQYXNzd29yZENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBVcGRhdGVQYXNzd29yZENvbXBvbmVudFNlcnZpY2UpIHt9XG5cbiAgZm9ybTogRm9ybUdyb3VwID0gdGhpcy5zZXJ2aWNlLmZvcm07XG4gIGlzVXBkYXRpbmckID0gdGhpcy5zZXJ2aWNlLmlzVXBkYXRpbmckO1xuXG4gIG9uU3VibWl0KCk6IHZvaWQge1xuICAgIHRoaXMuc2VydmljZS51cGRhdGVQYXNzd29yZCgpO1xuICB9XG59XG4iLCI8Y3gtc3Bpbm5lciBjbGFzcz1cIm92ZXJsYXlcIiAqbmdJZj1cImlzVXBkYXRpbmckIHwgYXN5bmNcIj4gPC9jeC1zcGlubmVyPlxuXG48Zm9ybSAobmdTdWJtaXQpPVwib25TdWJtaXQoKVwiIFtmb3JtR3JvdXBdPVwiZm9ybVwiPlxuICA8bGFiZWw+XG4gICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50XCI+e3tcbiAgICAgICd1cGRhdGVQYXNzd29yZEZvcm0ub2xkUGFzc3dvcmQubGFiZWwnIHwgY3hUcmFuc2xhdGVcbiAgICB9fTwvc3Bhbj5cbiAgICA8aW5wdXRcbiAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICBuYW1lPVwib2xkUGFzc3dvcmRcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7e1xuICAgICAgICAndXBkYXRlUGFzc3dvcmRGb3JtLm9sZFBhc3N3b3JkLnBsYWNlaG9sZGVyJyB8IGN4VHJhbnNsYXRlXG4gICAgICB9fVwiXG4gICAgICBmb3JtQ29udHJvbE5hbWU9XCJvbGRQYXNzd29yZFwiXG4gICAgLz5cbiAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiXG4gICAgICBhcmlhLWF0b21pYz1cInRydWVcIlxuICAgICAgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ29sZFBhc3N3b3JkJylcIlxuICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICA8L2xhYmVsPlxuXG4gIDxsYWJlbD5cbiAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnRcIj57e1xuICAgICAgJ3VwZGF0ZVBhc3N3b3JkRm9ybS5uZXdQYXNzd29yZC5sYWJlbCcgfCBjeFRyYW5zbGF0ZVxuICAgIH19PC9zcGFuPlxuICAgIDxpbnB1dFxuICAgICAgYXJpYS1yZXF1aXJlZD1cInRydWVcIlxuICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgIG5hbWU9XCJuZXdQYXNzd29yZFwiXG4gICAgICBwbGFjZWhvbGRlcj1cInt7XG4gICAgICAgICd1cGRhdGVQYXNzd29yZEZvcm0ubmV3UGFzc3dvcmQucGxhY2Vob2xkZXInIHwgY3hUcmFuc2xhdGVcbiAgICAgIH19XCJcbiAgICAgIGZvcm1Db250cm9sTmFtZT1cIm5ld1Bhc3N3b3JkXCJcbiAgICAvPlxuICAgIDxjeC1mb3JtLWVycm9yc1xuICAgICAgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCJcbiAgICAgIGFyaWEtYXRvbWljPVwidHJ1ZVwiXG4gICAgICBbY29udHJvbF09XCJmb3JtLmdldCgnbmV3UGFzc3dvcmQnKVwiXG4gICAgPjwvY3gtZm9ybS1lcnJvcnM+XG4gIDwvbGFiZWw+XG5cbiAgPGxhYmVsPlxuICAgIDxzcGFuIGNsYXNzPVwibGFiZWwtY29udGVudFwiPnt7XG4gICAgICAndXBkYXRlUGFzc3dvcmRGb3JtLmNvbmZpcm1QYXNzd29yZC5sYWJlbCcgfCBjeFRyYW5zbGF0ZVxuICAgIH19PC9zcGFuPlxuICAgIDxpbnB1dFxuICAgICAgYXJpYS1yZXF1aXJlZD1cInRydWVcIlxuICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgIG5hbWU9XCJuZXdQYXNzd29yZENvbmZpcm1cIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7e1xuICAgICAgICAndXBkYXRlUGFzc3dvcmRGb3JtLmNvbmZpcm1QYXNzd29yZC5wbGFjZWhvbGRlcicgfCBjeFRyYW5zbGF0ZVxuICAgICAgfX1cIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwibmV3UGFzc3dvcmRDb25maXJtXCJcbiAgICAvPlxuICAgIDxjeC1mb3JtLWVycm9yc1xuICAgICAgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCJcbiAgICAgIGFyaWEtYXRvbWljPVwidHJ1ZVwiXG4gICAgICBbY29udHJvbF09XCJmb3JtLmdldCgnbmV3UGFzc3dvcmRDb25maXJtJylcIlxuICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICA8L2xhYmVsPlxuXG4gIDxhXG4gICAgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1zZWNvbmRhcnlcIlxuICAgIFtyb3V0ZXJMaW5rXT1cInsgY3hSb3V0ZTogJ2hvbWUnIH0gfCBjeFVybFwiXG4gID5cbiAgICB7eyAnY29tbW9uLmNhbmNlbCcgfCBjeFRyYW5zbGF0ZSB9fVxuICA8L2E+XG5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tYmxvY2sgYnRuLXByaW1hcnlcIiBbZGlzYWJsZWRdPVwiZm9ybS5kaXNhYmxlZFwiPlxuICAgIHt7ICdjb21tb24uc2F2ZScgfCBjeFRyYW5zbGF0ZSB9fVxuICA8L2J1dHRvbj5cbjwvZm9ybT5cbiJdfQ==