import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./update-email-component.service";
import * as i2 from "@spartacus/storefront";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/router";
import * as i6 from "@spartacus/core";
export class UpdateEmailComponent {
    constructor(service) {
        this.service = service;
        this.form = this.service.form;
        this.isUpdating$ = this.service.isUpdating$;
    }
    onSubmit() {
        this.service.save();
    }
}
UpdateEmailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UpdateEmailComponent, deps: [{ token: i1.UpdateEmailComponentService }], target: i0.ɵɵFactoryTarget.Component });
UpdateEmailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: UpdateEmailComponent, selector: "cx-update-email", host: { classAttribute: "user-form" }, ngImport: i0, template: "<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      name=\"email\"\n      formControlName=\"email\"\n      placeholder=\"{{\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('email')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      name=\"confirmEmail\"\n      formControlName=\"confirmEmail\"\n      placeholder=\"{{\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('confirmEmail')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.password.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"password\"\n      name=\"password\"\n      formControlName=\"password\"\n      placeholder=\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\"\n      class=\"form-control\"\n      autocomplete=\"new-password\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('password')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n", components: [{ type: i2.SpinnerComponent, selector: "cx-spinner" }, { type: i2.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i5.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i6.TranslatePipe, "cxUrl": i6.UrlPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: UpdateEmailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-update-email',
                    templateUrl: './update-email.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: 'user-form' },
                }]
        }], ctorParameters: function () { return [{ type: i1.UpdateEmailComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlLWVtYWlsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29tcG9uZW50cy91cGRhdGUtZW1haWwvdXBkYXRlLWVtYWlsLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy91c2VyL3Byb2ZpbGUvY29tcG9uZW50cy91cGRhdGUtZW1haWwvdXBkYXRlLWVtYWlsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBVW5FLE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFBc0IsT0FBb0M7UUFBcEMsWUFBTyxHQUFQLE9BQU8sQ0FBNkI7UUFFMUQsU0FBSSxHQUFjLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUM7SUFIc0IsQ0FBQztJQUs5RCxRQUFRO1FBQ04sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDOztpSEFSVSxvQkFBb0I7cUdBQXBCLG9CQUFvQiw4RkNWakMsa2tFQTRFQTsyRkRsRWEsb0JBQW9CO2tCQU5oQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFdBQVcsRUFBRSwrQkFBK0I7b0JBQzVDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO29CQUMvQyxJQUFJLEVBQUUsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFO2lCQUM3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IFVwZGF0ZUVtYWlsQ29tcG9uZW50U2VydmljZSB9IGZyb20gJy4vdXBkYXRlLWVtYWlsLWNvbXBvbmVudC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtdXBkYXRlLWVtYWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3VwZGF0ZS1lbWFpbC5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxuICBob3N0OiB7IGNsYXNzOiAndXNlci1mb3JtJyB9LFxufSlcbmV4cG9ydCBjbGFzcyBVcGRhdGVFbWFpbENvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzZXJ2aWNlOiBVcGRhdGVFbWFpbENvbXBvbmVudFNlcnZpY2UpIHt9XG5cbiAgZm9ybTogRm9ybUdyb3VwID0gdGhpcy5zZXJ2aWNlLmZvcm07XG4gIGlzVXBkYXRpbmckID0gdGhpcy5zZXJ2aWNlLmlzVXBkYXRpbmckO1xuXG4gIG9uU3VibWl0KCk6IHZvaWQge1xuICAgIHRoaXMuc2VydmljZS5zYXZlKCk7XG4gIH1cbn1cbiIsIjxjeC1zcGlubmVyIGNsYXNzPVwib3ZlcmxheVwiICpuZ0lmPVwiaXNVcGRhdGluZyQgfCBhc3luY1wiPiA8L2N4LXNwaW5uZXI+XG5cbjxmb3JtIChuZ1N1Ym1pdCk9XCJvblN1Ym1pdCgpXCIgW2Zvcm1Hcm91cF09XCJmb3JtXCI+XG4gIDxsYWJlbD5cbiAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnRcIj57e1xuICAgICAgJ3VwZGF0ZUVtYWlsRm9ybS5uZXdFbWFpbEFkZHJlc3MubGFiZWwnIHwgY3hUcmFuc2xhdGVcbiAgICB9fTwvc3Bhbj5cbiAgICA8aW5wdXRcbiAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgIHR5cGU9XCJlbWFpbFwiXG4gICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiZW1haWxcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7e1xuICAgICAgICAndXBkYXRlRW1haWxGb3JtLm5ld0VtYWlsQWRkcmVzcy5wbGFjZWhvbGRlcicgfCBjeFRyYW5zbGF0ZVxuICAgICAgfX1cIlxuICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgIC8+XG4gICAgPGN4LWZvcm0tZXJyb3JzXG4gICAgICBhcmlhLWxpdmU9XCJhc3NlcnRpdmVcIlxuICAgICAgYXJpYS1hdG9taWM9XCJ0cnVlXCJcbiAgICAgIFtjb250cm9sXT1cImZvcm0uZ2V0KCdlbWFpbCcpXCJcbiAgICA+PC9jeC1mb3JtLWVycm9ycz5cbiAgPC9sYWJlbD5cblxuICA8bGFiZWw+XG4gICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50XCI+e3tcbiAgICAgICd1cGRhdGVFbWFpbEZvcm0uY29uZmlybU5ld0VtYWlsQWRkcmVzcy5sYWJlbCcgfCBjeFRyYW5zbGF0ZVxuICAgIH19PC9zcGFuPlxuICAgIDxpbnB1dFxuICAgICAgYXJpYS1yZXF1aXJlZD1cInRydWVcIlxuICAgICAgdHlwZT1cImVtYWlsXCJcbiAgICAgIG5hbWU9XCJjb25maXJtRW1haWxcIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwiY29uZmlybUVtYWlsXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwie3tcbiAgICAgICAgJ3VwZGF0ZUVtYWlsRm9ybS5jb25maXJtTmV3RW1haWxBZGRyZXNzLnBsYWNlaG9sZGVyJyB8IGN4VHJhbnNsYXRlXG4gICAgICB9fVwiXG4gICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgLz5cbiAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiXG4gICAgICBhcmlhLWF0b21pYz1cInRydWVcIlxuICAgICAgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ2NvbmZpcm1FbWFpbCcpXCJcbiAgICA+PC9jeC1mb3JtLWVycm9ycz5cbiAgPC9sYWJlbD5cblxuICA8bGFiZWw+XG4gICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50XCI+e3tcbiAgICAgICd1cGRhdGVFbWFpbEZvcm0ucGFzc3dvcmQubGFiZWwnIHwgY3hUcmFuc2xhdGVcbiAgICB9fTwvc3Bhbj5cbiAgICA8aW5wdXRcbiAgICAgIGFyaWEtcmVxdWlyZWQ9XCJ0cnVlXCJcbiAgICAgIHR5cGU9XCJwYXNzd29yZFwiXG4gICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgZm9ybUNvbnRyb2xOYW1lPVwicGFzc3dvcmRcIlxuICAgICAgcGxhY2Vob2xkZXI9XCJ7eyAndXBkYXRlRW1haWxGb3JtLnBhc3N3b3JkLnBsYWNlaG9sZGVyJyB8IGN4VHJhbnNsYXRlIH19XCJcbiAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgIGF1dG9jb21wbGV0ZT1cIm5ldy1wYXNzd29yZFwiXG4gICAgLz5cbiAgICA8Y3gtZm9ybS1lcnJvcnNcbiAgICAgIGFyaWEtbGl2ZT1cImFzc2VydGl2ZVwiXG4gICAgICBhcmlhLWF0b21pYz1cInRydWVcIlxuICAgICAgW2NvbnRyb2xdPVwiZm9ybS5nZXQoJ3Bhc3N3b3JkJylcIlxuICAgID48L2N4LWZvcm0tZXJyb3JzPlxuICA8L2xhYmVsPlxuXG4gIDxhXG4gICAgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1zZWNvbmRhcnlcIlxuICAgIFtyb3V0ZXJMaW5rXT1cInsgY3hSb3V0ZTogJ2hvbWUnIH0gfCBjeFVybFwiXG4gID5cbiAgICB7eyAnY29tbW9uLmNhbmNlbCcgfCBjeFRyYW5zbGF0ZSB9fVxuICA8L2E+XG5cbiAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tYmxvY2sgYnRuLXByaW1hcnlcIiBbZGlzYWJsZWRdPVwiZm9ybS5kaXNhYmxlZFwiPlxuICAgIHt7ICdjb21tb24uc2F2ZScgfCBjeFRyYW5zbGF0ZSB9fVxuICA8L2J1dHRvbj5cbjwvZm9ybT5cbiJdfQ==