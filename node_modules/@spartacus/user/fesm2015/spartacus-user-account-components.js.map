{"version":3,"file":"spartacus-user-account-components.js","sources":["../../../feature-libs/user/account/components/login-form/login-form-component.service.ts","../../../feature-libs/user/account/components/login-form/login-form.component.ts","../../../feature-libs/user/account/components/login-form/login-form.component.html","../../../feature-libs/user/account/components/login-form/login-form.module.ts","../../../feature-libs/user/account/components/login-register/login-register.component.ts","../../../feature-libs/user/account/components/login-register/login-register.component.html","../../../feature-libs/user/account/components/login-register/login-register.module.ts","../../../feature-libs/user/account/components/login/login.component.ts","../../../feature-libs/user/account/components/login/login.component.html","../../../feature-libs/user/account/components/login/login.module.ts","../../../feature-libs/user/account/components/user-account-component.module.ts","../../../feature-libs/user/account/components/spartacus-user-account-components.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  WindowRef,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { BehaviorSubject, from } from 'rxjs';\nimport { tap, withLatestFrom } from 'rxjs/operators';\n\n@Injectable()\nexport class LoginFormComponentService {\n  constructor(\n    protected auth: AuthService,\n    protected globalMessage: GlobalMessageService,\n    protected winRef: WindowRef\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => {\n      const userId = this.winRef.nativeWindow?.history?.state?.['newUid'];\n      if (userId) {\n        this.form.patchValue({ userId });\n      }\n      state === true ? this.form.disable() : this.form.enable();\n    })\n  );\n\n  form: FormGroup = new FormGroup({\n    userId: new FormControl('', [\n      Validators.required,\n      CustomFormValidators.emailValidator,\n    ]),\n    password: new FormControl('', Validators.required),\n  });\n\n  login() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    from(\n      this.auth.loginWithCredentials(\n        // TODO: consider dropping toLowerCase as this should not be part of the UI,\n        // as it's too opinionated and doesn't work with other AUTH services\n        this.form.value.userId.toLowerCase(),\n        this.form.value.password\n      )\n    )\n      .pipe(\n        withLatestFrom(this.auth.isUserLoggedIn()),\n        tap(([_, isLoggedIn]) => this.onSuccess(isLoggedIn))\n      )\n      .subscribe();\n  }\n\n  protected onSuccess(isLoggedIn: boolean): void {\n    if (isLoggedIn) {\n      // We want to remove error messages on successful login (primary the bad\n      // username/password combination)\n      this.globalMessage.remove(GlobalMessageType.MSG_TYPE_ERROR);\n      this.form.reset();\n    }\n\n    this.busy$.next(false);\n  }\n}\n","import { ChangeDetectionStrategy, Component, HostBinding } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { LoginFormComponentService } from './login-form-component.service';\n\n@Component({\n  selector: 'cx-login-form',\n  templateUrl: './login-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginFormComponent {\n  constructor(protected service: LoginFormComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  @HostBinding('class.user-form') style = true;\n\n  onSubmit(): void {\n    this.service.login();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'loginForm.emailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      class=\"form-control\"\n      formControlName=\"userId\"\n      placeholder=\"{{ 'loginForm.emailAddress.placeholder' | cxTranslate }}\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('userId')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'loginForm.password.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"password\"\n      class=\"form-control\"\n      placeholder=\"{{ 'loginForm.password.placeholder' | cxTranslate }}\"\n      formControlName=\"password\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('password')\"\n    ></cx-form-errors>\n  </label>\n\n  <a [routerLink]=\"{ cxRoute: 'forgotPassword' } | cxUrl\" class=\"btn-link\">\n    {{ 'loginForm.forgotPassword' | cxTranslate }}\n  </a>\n\n  <button\n    type=\"submit\"\n    class=\"btn btn-block btn-primary\"\n    [disabled]=\"form.disabled\"\n  >\n    {{ 'loginForm.signIn' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n  WindowRef,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { LoginFormComponentService } from './login-form-component.service';\nimport { LoginFormComponent } from './login-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerLoginComponent: {\n          component: LoginFormComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: LoginFormComponentService,\n              useClass: LoginFormComponentService,\n              deps: [AuthService, GlobalMessageService, WindowRef],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginFormComponent],\n})\nexport class LoginFormModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'cx-login-register',\n  templateUrl: './login-register.component.html',\n})\nexport class LoginRegisterComponent implements OnInit {\n  loginAsGuest = false;\n\n  constructor(protected activatedRoute: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.loginAsGuest = this.activatedRoute.snapshot.queryParams['forced'];\n  }\n}\n","<div class=\"register\">\n  <p class=\"cx-section-title\">\n    {{ 'loginForm.dontHaveAccount' | cxTranslate }}\n  </p>\n\n  <ng-container *ngIf=\"!loginAsGuest\">\n    <a\n      [routerLink]=\"{ cxRoute: 'register' } | cxUrl\"\n      class=\"btn btn-block btn-secondary btn-register\"\n      >{{ 'loginForm.register' | cxTranslate }}</a\n    >\n  </ng-container>\n\n  <ng-container *ngIf=\"loginAsGuest\">\n    <a\n      [routerLink]=\"{ cxRoute: 'checkoutLogin' } | cxUrl\"\n      class=\"btn btn-block btn-secondary btn-guest\"\n      >{{ 'loginForm.guestCheckout' | cxTranslate }}</a\n    >\n  </ng-container>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '@spartacus/storefront';\nimport { LoginRegisterComponent } from './login-register.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReturningCustomerRegisterComponent: {\n          component: LoginRegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [LoginRegisterComponent],\n})\nexport class LoginRegisterModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '@spartacus/core';\nimport { User, UserAccountFacade } from '@spartacus/user/account/root';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-login',\n  templateUrl: './login.component.html',\n})\nexport class LoginComponent implements OnInit {\n  user$: Observable<User | undefined>;\n\n  constructor(\n    private auth: AuthService,\n    private userAccount: UserAccountFacade\n  ) {}\n\n  ngOnInit(): void {\n    this.user$ = this.auth.isUserLoggedIn().pipe(\n      switchMap((isUserLoggedIn) => {\n        if (isUserLoggedIn) {\n          return this.userAccount.get();\n        } else {\n          return of(undefined);\n        }\n      })\n    );\n  }\n}\n","<ng-container *ngIf=\"user$ | async as user; else login\">\n  <div class=\"cx-login-greet\">\n    {{ 'miniLogin.userGreeting' | cxTranslate: { name: user.name } }}\n  </div>\n  <cx-page-slot position=\"HeaderLinks\"></cx-page-slot>\n</ng-container>\n\n<ng-template #login>\n  <a role=\"link\" [routerLink]=\"{ cxRoute: 'login' } | cxUrl\">{{\n    'miniLogin.signInRegister' | cxTranslate\n  }}</a>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { PageSlotModule } from '@spartacus/storefront';\nimport { LoginComponent } from './login.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, UrlModule, PageSlotModule, I18nModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        LoginComponent: {\n          component: LoginComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [LoginComponent],\n})\nexport class LoginModule {}\n","import { NgModule } from '@angular/core';\nimport { LoginFormModule } from './login-form/login-form.module';\nimport { LoginRegisterModule } from './login-register/login-register.module';\nimport { LoginModule } from './login/login.module';\n\n@NgModule({\n  imports: [LoginModule, LoginFormModule, LoginRegisterModule],\n})\nexport class UserAccountComponentsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;MAaa,yBAAyB;IACpC,YACY,IAAiB,EACjB,aAAmC,EACnC,MAAiB;QAFjB,SAAI,GAAJ,IAAI,CAAa;QACjB,kBAAa,GAAb,aAAa,CAAsB;QACnC,WAAM,GAAN,MAAM,CAAW;QAGnB,UAAK,GAAG,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC;QAE7C,gBAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAC3B,GAAG,CAAC,CAAC,KAAK;;YACR,MAAM,MAAM,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,MAAM,CAAC,YAAY,0CAAE,OAAO,0CAAE,KAAK,0CAAG,QAAQ,CAAC,CAAC;YACpE,IAAI,MAAM,EAAE;gBACV,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC;aAClC;YACD,KAAK,KAAK,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC;SAC3D,CAAC,CACH,CAAC;QAEF,SAAI,GAAc,IAAI,SAAS,CAAC;YAC9B,MAAM,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE;gBAC1B,UAAU,CAAC,QAAQ;gBACnB,oBAAoB,CAAC,cAAc;aACpC,CAAC;YACF,QAAQ,EAAE,IAAI,WAAW,CAAC,EAAE,EAAE,UAAU,CAAC,QAAQ,CAAC;SACnD,CAAC,CAAC;KApBC;IAsBJ,KAAK;QACH,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACpB,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;YAC7B,OAAO;SACR;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEtB,IAAI,CACF,IAAI,CAAC,IAAI,CAAC,oBAAoB;;;QAG5B,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,EAAE,EACpC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CACzB,CACF;aACE,IAAI,CACH,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,EAC1C,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,KAAK,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CACrD;aACA,SAAS,EAAE,CAAC;KAChB;IAES,SAAS,CAAC,UAAmB;QACrC,IAAI,UAAU,EAAE;;;YAGd,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;YAC5D,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;SACnB;QAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACxB;;sHA3DU,yBAAyB;0HAAzB,yBAAyB;2FAAzB,yBAAyB;kBADrC,UAAU;;;MCHE,kBAAkB;IAC7B,YAAsB,OAAkC;QAAlC,YAAO,GAAP,OAAO,CAA2B;QAExD,SAAI,GAAc,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;QACpC,gBAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;QAEP,UAAK,GAAG,IAAI,CAAC;KALe;IAO5D,QAAQ;QACN,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;KACtB;;+GAVU,kBAAkB;mGAAlB,kBAAkB,gHCT/B,25CAmDA;2FD1Ca,kBAAkB;kBAL9B,SAAS;mBAAC;oBACT,QAAQ,EAAE,eAAe;oBACzB,WAAW,EAAE,6BAA6B;oBAC1C,eAAe,EAAE,uBAAuB,CAAC,MAAM;iBAChD;6GAOiC,KAAK;sBAApC,WAAW;uBAAC,iBAAiB;;;MEiCnB,eAAe;;4GAAf,eAAe;6GAAf,eAAe,iBAFX,kBAAkB,aA1B/B,YAAY;QACZ,WAAW;QACX,mBAAmB;QACnB,YAAY;QACZ,SAAS;QACT,UAAU;QACV,gBAAgB;QAChB,aAAa;6GAqBJ,eAAe,aAnBf;QACT,oBAAoB,CAAY;YAC9B,aAAa,EAAE;gBACb,+BAA+B,EAAE;oBAC/B,SAAS,EAAE,kBAAkB;oBAC7B,MAAM,EAAE,CAAC,YAAY,CAAC;oBACtB,SAAS,EAAE;wBACT;4BACE,OAAO,EAAE,yBAAyB;4BAClC,QAAQ,EAAE,yBAAyB;4BACnC,IAAI,EAAE,CAAC,WAAW,EAAE,oBAAoB,EAAE,SAAS,CAAC;yBACrD;qBACF;iBACF;aACF;SACF,CAAC;KACH,YA1BQ;YACP,YAAY;YACZ,WAAW;YACX,mBAAmB;YACnB,YAAY;YACZ,SAAS;YACT,UAAU;YACV,gBAAgB;YAChB,aAAa;SACd;2FAoBU,eAAe;kBA9B3B,QAAQ;mBAAC;oBACR,OAAO,EAAE;wBACP,YAAY;wBACZ,WAAW;wBACX,mBAAmB;wBACnB,YAAY;wBACZ,SAAS;wBACT,UAAU;wBACV,gBAAgB;wBAChB,aAAa;qBACd;oBACD,SAAS,EAAE;wBACT,oBAAoB,CAAY;4BAC9B,aAAa,EAAE;gCACb,+BAA+B,EAAE;oCAC/B,SAAS,EAAE,kBAAkB;oCAC7B,MAAM,EAAE,CAAC,YAAY,CAAC;oCACtB,SAAS,EAAE;wCACT;4CACE,OAAO,EAAE,yBAAyB;4CAClC,QAAQ,EAAE,yBAAyB;4CACnC,IAAI,EAAE,CAAC,WAAW,EAAE,oBAAoB,EAAE,SAAS,CAAC;yCACrD;qCACF;iCACF;6BACF;yBACF,CAAC;qBACH;oBACD,YAAY,EAAE,CAAC,kBAAkB,CAAC;iBACnC;;;MCxCY,sBAAsB;IAGjC,YAAsB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QAFpD,iBAAY,GAAG,KAAK,CAAC;KAEmC;IAExD,QAAQ;QACN,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;KACxE;;mHAPU,sBAAsB;uGAAtB,sBAAsB,yDCPnC,inBAqBA;2FDda,sBAAsB;kBAJlC,SAAS;mBAAC;oBACT,QAAQ,EAAE,mBAAmB;oBAC7B,WAAW,EAAE,iCAAiC;iBAC/C;;;MEqBY,mBAAmB;;gHAAnB,mBAAmB;iHAAnB,mBAAmB,iBAFf,sBAAsB,aAX3B,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU;iHAahE,mBAAmB,aAZnB;QACT,oBAAoB,CAAY;YAC9B,aAAa,EAAE;gBACb,kCAAkC,EAAE;oBAClC,SAAS,EAAE,sBAAsB;oBACjC,MAAM,EAAE,CAAC,YAAY,CAAC;iBACvB;aACF;SACF,CAAC;KACH,YAVQ,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,CAAC;2FAajE,mBAAmB;kBAd/B,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,CAAC;oBAC5E,SAAS,EAAE;wBACT,oBAAoB,CAAY;4BAC9B,aAAa,EAAE;gCACb,kCAAkC,EAAE;oCAClC,SAAS,EAAE,sBAAsB;oCACjC,MAAM,EAAE,CAAC,YAAY,CAAC;iCACvB;6BACF;yBACF,CAAC;qBACH;oBACD,YAAY,EAAE,CAAC,sBAAsB,CAAC;iBACvC;;;MChBY,cAAc;IAGzB,YACU,IAAiB,EACjB,WAA8B;QAD9B,SAAI,GAAJ,IAAI,CAAa;QACjB,gBAAW,GAAX,WAAW,CAAmB;KACpC;IAEJ,QAAQ;QACN,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAC1C,SAAS,CAAC,CAAC,cAAc;YACvB,IAAI,cAAc,EAAE;gBAClB,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;aAC/B;iBAAM;gBACL,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC;aACtB;SACF,CAAC,CACH,CAAC;KACH;;2GAlBU,cAAc;+FAAd,cAAc,gDCV3B,iaAYA;2FDFa,cAAc;kBAJ1B,SAAS;mBAAC;oBACT,QAAQ,EAAE,UAAU;oBACpB,WAAW,EAAE,wBAAwB;iBACtC;;;MEgBY,WAAW;;wGAAX,WAAW;yGAAX,WAAW,iBAFP,cAAc,aAVnB,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU;yGAYhE,WAAW,aAXX;QACT,oBAAoB,CAAY;YAC9B,aAAa,EAAE;gBACb,cAAc,EAAE;oBACd,SAAS,EAAE,cAAc;iBAC1B;aACF;SACF,CAAC;KACH,YATQ,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,CAAC;2FAYjE,WAAW;kBAbvB,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,YAAY,EAAE,YAAY,EAAE,SAAS,EAAE,cAAc,EAAE,UAAU,CAAC;oBAC5E,SAAS,EAAE;wBACT,oBAAoB,CAAY;4BAC9B,aAAa,EAAE;gCACb,cAAc,EAAE;oCACd,SAAS,EAAE,cAAc;iCAC1B;6BACF;yBACF,CAAC;qBACH;oBACD,YAAY,EAAE,CAAC,cAAc,CAAC;iBAC/B;;;MChBY,2BAA2B;;wHAA3B,2BAA2B;yHAA3B,2BAA2B,YAF5B,WAAW,EAAE,eAAe,EAAE,mBAAmB;yHAEhD,2BAA2B,YAF7B,CAAC,WAAW,EAAE,eAAe,EAAE,mBAAmB,CAAC;2FAEjD,2BAA2B;kBAHvC,QAAQ;mBAAC;oBACR,OAAO,EAAE,CAAC,WAAW,EAAE,eAAe,EAAE,mBAAmB,CAAC;iBAC7D;;;ACPD;;;;;;"}