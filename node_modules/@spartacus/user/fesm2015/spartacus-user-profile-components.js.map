{"version":3,"file":"spartacus-user-profile-components.js","sources":["../../../feature-libs/user/profile/components/close-account/components/close-account-modal/close-account-modal.component.ts","../../../feature-libs/user/profile/components/close-account/components/close-account-modal/close-account-modal.component.html","../../../feature-libs/user/profile/components/close-account/components/close-account/close-account.component.ts","../../../feature-libs/user/profile/components/close-account/components/close-account/close-account.component.html","../../../feature-libs/user/profile/components/close-account/close-account.module.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password-component.service.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password.component.ts","../../../feature-libs/user/profile/components/forgot-password/forgot-password.component.html","../../../feature-libs/user/profile/components/forgot-password/forgot-password.module.ts","../../../feature-libs/user/profile/components/register/register.component.ts","../../../feature-libs/user/profile/components/register/register.component.html","../../../feature-libs/user/profile/components/register/register.module.ts","../../../feature-libs/user/profile/components/reset-password/reset-password-component.service.ts","../../../feature-libs/user/profile/components/reset-password/reset-password.component.ts","../../../feature-libs/user/profile/components/reset-password/reset-password.component.html","../../../feature-libs/user/profile/components/reset-password/reset-password.module.ts","../../../feature-libs/user/profile/components/update-email/update-email-component.service.ts","../../../feature-libs/user/profile/components/update-email/update-email.component.ts","../../../feature-libs/user/profile/components/update-email/update-email.component.html","../../../feature-libs/user/profile/components/update-email/update-email.module.ts","../../../feature-libs/user/profile/components/update-password/update-password-component.service.ts","../../../feature-libs/user/profile/components/update-password/update-password.component.ts","../../../feature-libs/user/profile/components/update-password/update-password.component.html","../../../feature-libs/user/profile/components/update-password/update-password.module.ts","../../../feature-libs/user/profile/components/update-profile/update-profile-component.service.ts","../../../feature-libs/user/profile/components/update-profile/update-profile.component.ts","../../../feature-libs/user/profile/components/update-profile/update-profile.component.html","../../../feature-libs/user/profile/components/update-profile/update-profile.module.ts","../../../feature-libs/user/profile/components/user-profile-components.module.ts","../../../feature-libs/user/profile/components/spartacus-user-profile-components.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport {\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n  TranslationService,\n} from '@spartacus/core';\nimport { ICON_TYPE, ModalService } from '@spartacus/storefront';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { first } from 'rxjs/operators';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\n\n@Component({\n  selector: 'cx-close-account-modal',\n  templateUrl: './close-account-modal.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountModalComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  isLoggedIn$: Observable<boolean>;\n  isLoading$ = new BehaviorSubject(false);\n\n  constructor(\n    protected modalService: ModalService,\n    protected authService: AuthService,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    protected translationService: TranslationService,\n    protected userProfile: UserProfileFacade\n  ) {}\n\n  ngOnInit() {\n    this.isLoggedIn$ = this.authService.isUserLoggedIn();\n  }\n\n  onSuccess(): void {\n    this.dismissModal();\n    this.translationService\n      .translate('closeAccount.accountClosedSuccessfully')\n      .pipe(first())\n      .subscribe((text) => {\n        this.globalMessageService.add(\n          text,\n          GlobalMessageType.MSG_TYPE_CONFIRMATION\n        );\n      });\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  onError(): void {\n    this.dismissModal();\n    this.translationService\n      .translate('closeAccount.accountClosedFailure')\n      .pipe(first())\n      .subscribe((text) => {\n        this.globalMessageService.add(text, GlobalMessageType.MSG_TYPE_ERROR);\n      });\n  }\n\n  dismissModal(reason?: any): void {\n    this.modalService.dismissActiveModal(reason);\n  }\n\n  closeAccount() {\n    this.isLoading$.next(true);\n\n    this.userProfile.close().subscribe({\n      next: () => {\n        this.onSuccess();\n        this.isLoading$.next(false);\n      },\n      error: () => {\n        this.onError();\n        this.isLoading$.next(false);\n      },\n    });\n  }\n}\n","<ng-container *ngIf=\"isLoggedIn$ | async\">\n  <div class=\"modal-header cx-dialog-header\">\n    <h3 class=\"modal-title\">\n      {{ 'closeAccount.confirmAccountClosure' | cxTranslate }}\n    </h3>\n    <button\n      type=\"button\"\n      class=\"close\"\n      [attr.aria-label]=\"'common.close' | cxTranslate\"\n      (click)=\"dismissModal()\"\n    >\n      <span aria-hidden=\"true\">\n        <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n      </span>\n    </button>\n  </div>\n\n  <div *ngIf=\"isLoading$ | async; else loaded\">\n    <div class=\"cx-spinner\">\n      <cx-spinner> </cx-spinner>\n    </div>\n  </div>\n\n  <ng-template #loaded>\n    <div class=\"modal-body\">\n      <div class=\"cx-row\">\n        <p class=\"cx-confirmation\">\n          {{ 'closeAccount.confirmAccountClosureMessage' | cxTranslate }}\n        </p>\n      </div>\n      <div class=\"cx-row\">\n        <div class=\"cx-btn-group\">\n          <button class=\"btn btn-primary\" (click)=\"closeAccount()\">\n            {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n          </button>\n          <button (click)=\"dismissModal()\" class=\"btn btn-block btn-secondary\">\n            {{ 'common.cancel' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </div>\n  </ng-template>\n</ng-container>\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ModalService } from '@spartacus/storefront';\nimport { CloseAccountModalComponent } from '../close-account-modal/close-account-modal.component';\n\n@Component({\n  selector: 'cx-close-account',\n  templateUrl: './close-account.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CloseAccountComponent {\n  modal: any;\n  constructor(protected modalService: ModalService) {}\n\n  openModal(): void {\n    this.modal = this.modalService.open(CloseAccountModalComponent, {\n      centered: true,\n    }).componentInstance;\n  }\n}\n","<div class=\"col-lg-8 col-md-9\">\n  <div class=\"row cx-btn-group\">\n    <div class=\"col-sm-3\">\n      <a\n        [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n        class=\"btn btn-block btn-secondary\"\n        >{{ 'common.cancel' | cxTranslate }}</a\n      >\n    </div>\n    <div class=\"col-sm-6\">\n      <button class=\"btn btn-primary\" (click)=\"openModal()\">\n        {{ 'closeAccount.closeMyAccount' | cxTranslate }}\n      </button>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { IconModule, SpinnerModule } from '@spartacus/storefront';\nimport { CloseAccountModalComponent } from './components/close-account-modal/close-account-modal.component';\nimport { CloseAccountComponent } from './components/close-account/close-account.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CloseAccountComponent: {\n          component: CloseAccountComponent,\n          guards: [AuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CloseAccountComponent, CloseAccountModalComponent],\n})\nexport class CloseAccountModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthConfigService,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ForgotPasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected authConfigService: AuthConfigService,\n    protected globalMessage: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: FormGroup = new FormGroup({\n    userEmail: new FormControl('', [\n      Validators.required,\n      CustomFormValidators.emailValidator,\n    ]),\n  });\n\n  /**\n   * Sends an email to the user to reset the password.\n   *\n   * When the `ResourceOwnerPasswordFlow` is used, the user is routed\n   * to the login page.\n   */\n  requestEmail() {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    this.userPasswordService\n      .requestForgotPasswordEmail(this.form.value.userEmail)\n      .subscribe({\n        next: () => this.onSuccess(),\n        error: (error: Error) => this.onError(error),\n      });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessage.add(\n      { key: 'forgottenPassword.passwordResetEmailSent' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n\n  /**\n   * Redirects the user back to the login page.\n   *\n   * This only happens in case of the `ResourceOwnerPasswordFlow` OAuth flow.\n   */\n  protected redirect() {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.routingService.go({ cxRoute: 'login' });\n    }\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { ForgotPasswordComponentService } from './forgot-password-component.service';\n\n@Component({\n  selector: 'cx-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ForgotPasswordComponent {\n  constructor(protected service: ForgotPasswordComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.requestEmail();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'forgottenPassword.emailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      class=\"form-control\"\n      placeholder=\"{{\n        'forgottenPassword.emailAddress.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"userEmail\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('userEmail')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n    >{{ 'common.cancel' | cxTranslate }}</a\n  >\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.submit' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthConfigService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { ForgotPasswordComponentService } from './forgot-password-component.service';\nimport { ForgotPasswordComponent } from './forgot-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ForgotPasswordComponent: {\n          component: ForgotPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: ForgotPasswordComponentService,\n              useClass: ForgotPasswordComponentService,\n              deps: [\n                UserPasswordFacade,\n                RoutingService,\n                AuthConfigService,\n                GlobalMessageService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ForgotPasswordComponent],\n})\nexport class ForgotPasswordModule {}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport {\n  FormBuilder,\n  FormControl,\n  FormGroup,\n  Validators,\n} from '@angular/forms';\nimport {\n  AnonymousConsent,\n  AnonymousConsentsConfig,\n  AnonymousConsentsService,\n  AuthConfigService,\n  ConsentTemplate,\n  GlobalMessageEntities,\n  GlobalMessageService,\n  GlobalMessageType,\n  OAuthFlow,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators, sortTitles } from '@spartacus/storefront';\nimport {\n  Title,\n  UserRegisterFacade,\n  UserSignUp,\n} from '@spartacus/user/profile/root';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-register',\n  templateUrl: './register.component.html',\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  titles$: Observable<Title[]>;\n\n  isLoading$ = new BehaviorSubject(false);\n\n  private subscription = new Subscription();\n\n  anonymousConsent$: Observable<{\n    consent: AnonymousConsent;\n    template: string;\n  }>;\n\n  registerForm: FormGroup = this.fb.group(\n    {\n      titleCode: [''],\n      firstName: ['', Validators.required],\n      lastName: ['', Validators.required],\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n      newsletter: new FormControl({\n        value: false,\n        disabled: this.isConsentRequired(),\n      }),\n      termsandconditions: [false, Validators.requiredTrue],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userRegister: UserRegisterFacade,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected router: RoutingService,\n    protected anonymousConsentsService: AnonymousConsentsService,\n    protected anonymousConsentsConfig: AnonymousConsentsConfig,\n    protected authConfigService: AuthConfigService\n  ) {}\n\n  ngOnInit() {\n    this.titles$ = this.userRegister.getTitles().pipe(\n      map((titles: Title[]) => {\n        return titles.sort(sortTitles);\n      })\n    );\n\n    // TODO: Workaround: allow server for decide is titleCode mandatory (if yes, provide personalized message)\n    this.subscription.add(\n      this.globalMessageService\n        .get()\n        .pipe(filter((messages) => !!Object.keys(messages).length))\n        .subscribe((globalMessageEntities: GlobalMessageEntities) => {\n          const messages =\n            globalMessageEntities &&\n            globalMessageEntities[GlobalMessageType.MSG_TYPE_ERROR];\n\n          if (\n            messages &&\n            messages.some((message) => message === 'This field is required.')\n          ) {\n            this.globalMessageService.remove(GlobalMessageType.MSG_TYPE_ERROR);\n            this.globalMessageService.add(\n              { key: 'register.titleRequired' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n          }\n        })\n    );\n\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent ?? '';\n\n    this.anonymousConsent$ = combineLatest([\n      this.anonymousConsentsService.getConsent(registerConsent),\n      this.anonymousConsentsService.getTemplate(registerConsent),\n    ]).pipe(\n      map(([consent, template]: [AnonymousConsent, ConsentTemplate]) => {\n        return {\n          consent,\n          template: template?.description ? template.description : '',\n        };\n      })\n    );\n\n    this.subscription.add(\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      this.registerForm.get('newsletter')!.valueChanges.subscribe(() => {\n        this.toggleAnonymousConsent();\n      })\n    );\n  }\n\n  submitForm(): void {\n    if (this.registerForm.valid) {\n      this.registerUser();\n    } else {\n      this.registerForm.markAllAsTouched();\n    }\n  }\n\n  registerUser(): void {\n    this.isLoading$.next(true);\n    this.userRegister\n      .register(this.collectDataFromRegisterForm(this.registerForm.value))\n      .subscribe({\n        next: () => this.onRegisterUserSuccess(),\n        complete: () => this.isLoading$.next(false),\n      });\n  }\n\n  titleSelected(title: Title): void {\n    this.registerForm['controls'].titleCode.setValue(title.code);\n  }\n\n  collectDataFromRegisterForm(formData: any): UserSignUp {\n    const { firstName, lastName, email, password, titleCode } = formData;\n\n    return {\n      firstName,\n      lastName,\n      uid: email.toLowerCase(),\n      password,\n      titleCode,\n    };\n  }\n\n  isConsentGiven(consent: AnonymousConsent): boolean {\n    return this.anonymousConsentsService.isConsentGiven(consent);\n  }\n\n  private isConsentRequired(): boolean {\n    const requiredConsents =\n      this.anonymousConsentsConfig?.anonymousConsents?.requiredConsents;\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent;\n\n    if (requiredConsents && registerConsent) {\n      return requiredConsents.includes(registerConsent);\n    }\n\n    return false;\n  }\n\n  private onRegisterUserSuccess(): void {\n    if (\n      this.authConfigService.getOAuthFlow() ===\n      OAuthFlow.ResourceOwnerPasswordFlow\n    ) {\n      this.router.go('login');\n    }\n    this.globalMessageService.add(\n      { key: 'register.postRegisterMessage' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n  }\n\n  toggleAnonymousConsent(): void {\n    const registerConsent =\n      this.anonymousConsentsConfig?.anonymousConsents?.registerConsent;\n\n    if (registerConsent) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      if (Boolean(this.registerForm.get('newsletter')!.value)) {\n        this.anonymousConsentsService.giveConsent(registerConsent);\n      } else {\n        this.anonymousConsentsService.withdrawConsent(registerConsent);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\n","<section\n  class=\"cx-page-section container\"\n  *ngIf=\"!(isLoading$ | async); else loading\"\n>\n  <div class=\"row justify-content-center\">\n    <div class=\"col-md-6\">\n      <div class=\"cx-section\">\n        <form (ngSubmit)=\"submitForm()\" [formGroup]=\"registerForm\">\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.title' | cxTranslate\n              }}</span>\n              <select formControlName=\"titleCode\" class=\"form-control\">\n                <option selected value=\"\" disabled>\n                  {{ 'register.selectTitle' | cxTranslate }}\n                </option>\n                <option\n                  *ngFor=\"let title of titles$ | async\"\n                  [value]=\"title.code\"\n                >\n                  {{ title.name }}\n                </option>\n              </select>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.firstName.label' | cxTranslate\n              }}</span>\n              <input\n                aria-required=\"true\"\n                class=\"form-control\"\n                type=\"text\"\n                name=\"firstname\"\n                placeholder=\"{{\n                  'register.firstName.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"firstName\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"registerForm.get('firstName')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.lastName.label' | cxTranslate\n              }}</span>\n              <input\n                aria-required=\"true\"\n                class=\"form-control\"\n                type=\"text\"\n                name=\"lastname\"\n                placeholder=\"{{\n                  'register.lastName.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"lastName\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"registerForm.get('lastName')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.emailAddress.label' | cxTranslate\n              }}</span>\n              <input\n                aria-required=\"true\"\n                class=\"form-control\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"{{\n                  'register.emailAddress.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"email\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"registerForm.get('email')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.password.label' | cxTranslate\n              }}</span>\n              <input\n                aria-required=\"true\"\n                class=\"form-control\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"{{\n                  'register.password.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"password\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"registerForm.get('password')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <label>\n              <span class=\"label-content\">{{\n                'register.confirmPassword.label' | cxTranslate\n              }}</span>\n              <input\n                aria-required=\"true\"\n                class=\"form-control\"\n                type=\"password\"\n                name=\"confirmpassword\"\n                placeholder=\"{{\n                  'register.confirmPassword.placeholder' | cxTranslate\n                }}\"\n                formControlName=\"passwordconf\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"registerForm.get('passwordconf')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"form-check\">\n              <label *ngIf=\"anonymousConsent$ | async as anonymousConsent\">\n                <input\n                  type=\"checkbox\"\n                  name=\"newsletter\"\n                  class=\"form-check-input\"\n                  formControlName=\"newsletter\"\n                  [checked]=\"isConsentGiven(anonymousConsent.consent)\"\n                />\n                <span class=\"form-check-label\">\n                  {{ anonymousConsent.template }}\n                </span>\n              </label>\n            </div>\n          </div>\n\n          <div class=\"form-group\">\n            <div class=\"form-check\">\n              <label>\n                <input\n                  aria-required=\"true\"\n                  type=\"checkbox\"\n                  name=\"termsandconditions\"\n                  formControlName=\"termsandconditions\"\n                />\n                <span class=\"form-check-label\">\n                  {{ 'register.confirmThatRead' | cxTranslate }}\n                  <a\n                    [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n                    target=\"_blank\"\n                  >\n                    {{ 'register.termsAndConditions' | cxTranslate }}\n                  </a>\n                </span>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"registerForm.get('termsandconditions')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </div>\n          <button type=\"submit\" class=\"btn btn-block btn-primary\">\n            {{ 'register.register' | cxTranslate }}\n          </button>\n          <a\n            class=\"cx-login-link btn-link\"\n            [routerLink]=\"{ cxRoute: 'login' } | cxUrl\"\n            >{{ 'register.signIn' | cxTranslate }}</a\n          >\n        </form>\n      </div>\n    </div>\n  </div>\n</section>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { RegisterComponent } from './register.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        RegisterCustomerComponent: {\n          component: RegisterComponent,\n          guards: [NotAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [RegisterComponent],\n})\nexport class RegisterComponentModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  HttpErrorModel,\n  RouterState,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class ResetPasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected globalMessage: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  resetToken$: Observable<string> = this.routingService\n    .getRouterState()\n    .pipe(\n      map((routerState: RouterState) => routerState.state.queryParams['token'])\n    );\n\n  form: FormGroup = new FormGroup(\n    {\n      password: new FormControl('', [\n        Validators.required,\n        CustomFormValidators.passwordValidator,\n      ]),\n      passwordConfirm: new FormControl('', Validators.required),\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordConfirm'\n      ),\n    }\n  );\n\n  /**\n   * Resets the password by the given token.\n   *\n   * The token has been provided during the request password flow.\n   * The token is not validated on the client.\n   */\n  resetPassword(token: string): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const password = (this.form.get('password') as FormControl).value;\n\n    this.userPasswordService.reset(token, password).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: unknown) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessage.add(\n      { key: 'forgottenPassword.passwordResetSuccess' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.redirect();\n  }\n\n  protected onError(error: unknown): void {\n    this.busy$.next(false);\n    if (error instanceof HttpErrorModel) {\n      (error.details ?? []).forEach((err) => {\n        if (err.message) {\n          this.globalMessage.add(\n            { raw: err.message },\n            GlobalMessageType.MSG_TYPE_ERROR\n          );\n        }\n      });\n    }\n  }\n\n  /**\n   * Redirects the user to the login page.\n   */\n  protected redirect() {\n    this.routingService.go({ cxRoute: 'login' });\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { ResetPasswordComponentService } from './reset-password-component.service';\n\n@Component({\n  selector: 'cx-reset-password',\n  templateUrl: './reset-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class ResetPasswordComponent {\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  token$: Observable<string> = this.service.resetToken$;\n\n  constructor(protected service: ResetPasswordComponentService) {}\n\n  onSubmit(token: string) {\n    this.service.resetPassword(token);\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form\n  *ngIf=\"token$ | async as token\"\n  (ngSubmit)=\"onSubmit(token)\"\n  [formGroup]=\"form\"\n>\n  <label>\n    <span class=\"label-content\">{{\n      'register.newPassword' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      placeholder=\"{{ 'register.password.placeholder' | cxTranslate }}\"\n      formControlName=\"password\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('password')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'register.passwordMinRequirements' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      placeholder=\"{{ 'register.confirmPassword.placeholder' | cxTranslate }}\"\n      formControlName=\"passwordConfirm\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('passwordConfirm')\"\n    ></cx-form-errors>\n  </label>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'register.resetPassword' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  NotAuthGuard,\n  provideDefaultConfig,\n  RoutingService,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { ResetPasswordComponentService } from './reset-password-component.service';\nimport { ResetPasswordComponent } from './reset-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n    SpinnerModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ResetPasswordComponent: {\n          component: ResetPasswordComponent,\n          guards: [NotAuthGuard],\n          providers: [\n            {\n              provide: ResetPasswordComponentService,\n              useClass: ResetPasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [ResetPasswordComponent],\n})\nexport class ResetPasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  AuthRedirectService,\n  AuthService,\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdateEmailComponentService {\n  constructor(\n    protected userEmail: UserEmailFacade,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService,\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: FormGroup = new FormGroup(\n    {\n      email: new FormControl('', [\n        Validators.required,\n        CustomFormValidators.emailValidator,\n      ]),\n      confirmEmail: new FormControl('', [Validators.required]),\n      password: new FormControl('', [Validators.required]),\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch('email', 'confirmEmail'),\n    }\n  );\n\n  save(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const newEmail = this.form.get('confirmEmail')?.value;\n    const password = this.form.get('password')?.value;\n\n    this.userEmail.update(password, newEmail).subscribe({\n      next: () => this.onSuccess(newEmail),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  /**\n   * Handles successful updating of the user email.\n   */\n  protected onSuccess(newUid: string): void {\n    this.globalMessageService.add(\n      {\n        key: 'updateEmailForm.emailUpdateSuccess',\n        params: { newUid },\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    // sets the redirect url after login\n    this.authRedirectService.setRedirectUrl(\n      this.routingService.getUrl({ cxRoute: 'home' })\n    );\n    // TODO(#9638): Use logout route when it will support passing redirect url\n    this.authService.coreLogout().then(() => {\n      this.routingService.go(\n        { cxRoute: 'login' },\n        {\n          state: {\n            newUid,\n          },\n        }\n      );\n    });\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { UpdateEmailComponentService } from './update-email-component.service';\n\n@Component({\n  selector: 'cx-update-email',\n  templateUrl: './update-email.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdateEmailComponent {\n  constructor(protected service: UpdateEmailComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.save();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.newEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      name=\"email\"\n      formControlName=\"email\"\n      placeholder=\"{{\n        'updateEmailForm.newEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('email')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.confirmNewEmailAddress.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"email\"\n      name=\"confirmEmail\"\n      formControlName=\"confirmEmail\"\n      placeholder=\"{{\n        'updateEmailForm.confirmNewEmailAddress.placeholder' | cxTranslate\n      }}\"\n      class=\"form-control\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('confirmEmail')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateEmailForm.password.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"password\"\n      name=\"password\"\n      formControlName=\"password\"\n      placeholder=\"{{ 'updateEmailForm.password.placeholder' | cxTranslate }}\"\n      class=\"form-control\"\n      autocomplete=\"new-password\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('password')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  AuthRedirectService,\n  AuthService,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserEmailFacade } from '@spartacus/user/profile/root';\nimport { UpdateEmailComponentService } from './update-email-component.service';\nimport { UpdateEmailComponent } from './update-email.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    UrlModule,\n    RouterModule,\n    I18nModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateEmailComponent: {\n          component: UpdateEmailComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdateEmailComponentService,\n              useClass: UpdateEmailComponentService,\n              deps: [\n                UserEmailFacade,\n                RoutingService,\n                GlobalMessageService,\n                AuthService,\n                AuthRedirectService,\n              ],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateEmailComponent],\n})\nexport class UpdateEmailModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport {\n  GlobalMessageService,\n  GlobalMessageType,\n  RoutingService,\n} from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdatePasswordComponentService {\n  constructor(\n    protected userPasswordService: UserPasswordFacade,\n    protected routingService: RoutingService,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$ = this.busy$.pipe(\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  form: FormGroup = new FormGroup(\n    {\n      oldPassword: new FormControl('', Validators.required),\n      newPassword: new FormControl('', [\n        Validators.required,\n        CustomFormValidators.passwordValidator,\n      ]),\n      newPasswordConfirm: new FormControl('', Validators.required),\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'newPassword',\n        'newPasswordConfirm'\n      ),\n    }\n  );\n\n  /**\n   * Updates the password for the user.\n   */\n  updatePassword(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    const oldPassword = this.form.get('oldPassword')?.value;\n    const newPassword = this.form.get('newPassword')?.value;\n\n    this.userPasswordService.update(oldPassword, newPassword).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessageService.add(\n      { key: 'updatePasswordForm.passwordUpdateSuccess' },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n    this.busy$.next(false);\n    this.form.reset();\n    this.routingService.go({ cxRoute: 'home' });\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n    this.form.reset();\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { UpdatePasswordComponentService } from './update-password-component.service';\n\n@Component({\n  selector: 'cx-update-password',\n  templateUrl: './update-password.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdatePasswordComponent {\n  constructor(protected service: UpdatePasswordComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n\n  onSubmit(): void {\n    this.service.updatePassword();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.oldPassword.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"oldPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.oldPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"oldPassword\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('oldPassword')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.newPassword.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPassword\"\n      placeholder=\"{{\n        'updatePasswordForm.newPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPassword\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('newPassword')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updatePasswordForm.confirmPassword.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      class=\"form-control\"\n      type=\"password\"\n      name=\"newPasswordConfirm\"\n      placeholder=\"{{\n        'updatePasswordForm.confirmPassword.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"newPasswordConfirm\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('newPasswordConfirm')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  RoutingService,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserPasswordFacade } from '@spartacus/user/profile/root';\nimport { UpdatePasswordComponentService } from './update-password-component.service';\nimport { UpdatePasswordComponent } from './update-password.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n    UrlModule,\n    RouterModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdatePasswordComponent: {\n          component: UpdatePasswordComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdatePasswordComponentService,\n              useClass: UpdatePasswordComponentService,\n              deps: [UserPasswordFacade, RoutingService, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdatePasswordComponent],\n})\nexport class UpdatePasswordModule {}\n","import { Injectable } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { GlobalMessageService, GlobalMessageType } from '@spartacus/core';\nimport { User } from '@spartacus/user/account/root';\nimport { Title, UserProfileFacade } from '@spartacus/user/profile/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { filter, switchMap, tap } from 'rxjs/operators';\n\n@Injectable()\nexport class UpdateProfileComponentService {\n  constructor(\n    protected userProfile: UserProfileFacade,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  protected user$ = this.userProfile\n    .get()\n    .pipe(filter((user): user is User => Boolean(user)));\n\n  protected busy$ = new BehaviorSubject(false);\n\n  isUpdating$: Observable<boolean> = this.user$.pipe(\n    tap((user) => this.form.patchValue(user)),\n    switchMap((_user: User) => this.busy$),\n    tap((state) => (state === true ? this.form.disable() : this.form.enable()))\n  );\n\n  titles$: Observable<Title[]> = this.userProfile.getTitles();\n\n  form: FormGroup = new FormGroup({\n    customerId: new FormControl(''),\n    titleCode: new FormControl(''),\n    firstName: new FormControl('', Validators.required),\n    lastName: new FormControl('', Validators.required),\n  });\n\n  /**\n   * Updates the user's details and handles the UI.\n   */\n  updateProfile(): void {\n    if (!this.form.valid) {\n      this.form.markAllAsTouched();\n      return;\n    }\n\n    this.busy$.next(true);\n\n    this.userProfile.update(this.form.value).subscribe({\n      next: () => this.onSuccess(),\n      error: (error: Error) => this.onError(error),\n    });\n  }\n\n  protected onSuccess(): void {\n    this.globalMessageService.add(\n      {\n        key: 'updateProfileForm.profileUpdateSuccess',\n      },\n      GlobalMessageType.MSG_TYPE_CONFIRMATION\n    );\n\n    this.busy$.next(false);\n    this.form.reset();\n  }\n\n  protected onError(_error: Error): void {\n    this.busy$.next(false);\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { Title } from '@spartacus/user/profile/root';\nimport { Observable } from 'rxjs';\nimport { UpdateProfileComponentService } from './update-profile-component.service';\n\n@Component({\n  selector: 'cx-update-profile',\n  templateUrl: './update-profile.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: { class: 'user-form' },\n})\nexport class UpdateProfileComponent {\n  constructor(protected service: UpdateProfileComponentService) {}\n\n  form: FormGroup = this.service.form;\n  isUpdating$ = this.service.isUpdating$;\n  titles$: Observable<Title[]> = this.service.titles$;\n\n  onSubmit(): void {\n    this.service.updateProfile();\n  }\n}\n","<cx-spinner class=\"overlay\" *ngIf=\"isUpdating$ | async\"> </cx-spinner>\n\n<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\">\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.title' | cxTranslate\n    }}</span>\n    <select formControlName=\"titleCode\" class=\"form-control\">\n      <option value=\"\">{{ 'updateProfileForm.none' | cxTranslate }}</option>\n      <option *ngFor=\"let title of titles$ | async\" [value]=\"title.code\">\n        {{ title.name }}\n      </option>\n    </select>\n  </label>\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.firstName.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"text\"\n      class=\"form-control\"\n      name=\"firstName\"\n      placeholder=\"{{\n        'updateProfileForm.firstName.placeholder' | cxTranslate\n      }}\"\n      formControlName=\"firstName\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('firstName')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.lastName.label' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"text\"\n      class=\"form-control\"\n      name=\"lastName\"\n      placeholder=\"{{ 'updateProfileForm.lastName.placeholder' | cxTranslate }}\"\n      formControlName=\"lastName\"\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('lastName')\"\n    ></cx-form-errors>\n  </label>\n\n  <label>\n    <span class=\"label-content\">{{\n      'updateProfileForm.customerId' | cxTranslate\n    }}</span>\n    <input\n      aria-required=\"true\"\n      type=\"text\"\n      class=\"form-control\"\n      name=\"customerId\"\n      formControlName=\"customerId\"\n      readonly\n    />\n    <cx-form-errors\n      aria-live=\"assertive\"\n      aria-atomic=\"true\"\n      [control]=\"form.get('lastName')\"\n    ></cx-form-errors>\n  </label>\n\n  <a\n    class=\"btn btn-block btn-secondary\"\n    [routerLink]=\"{ cxRoute: 'home' } | cxUrl\"\n  >\n    {{ 'common.cancel' | cxTranslate }}\n  </a>\n\n  <button class=\"btn btn-block btn-primary\" [disabled]=\"form.disabled\">\n    {{ 'common.save' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  AuthGuard,\n  CmsConfig,\n  GlobalMessageService,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { FormErrorsModule, SpinnerModule } from '@spartacus/storefront';\nimport { UserProfileFacade } from '@spartacus/user/profile/root';\nimport { UpdateProfileComponentService } from './update-profile-component.service';\nimport { UpdateProfileComponent } from './update-profile.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    SpinnerModule,\n    I18nModule,\n    FormErrorsModule,\n    RouterModule,\n    UrlModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        UpdateProfileComponent: {\n          component: UpdateProfileComponent,\n          guards: [AuthGuard],\n          providers: [\n            {\n              provide: UpdateProfileComponentService,\n              useClass: UpdateProfileComponentService,\n              deps: [UserProfileFacade, GlobalMessageService],\n            },\n          ],\n        },\n      },\n    }),\n  ],\n  declarations: [UpdateProfileComponent],\n})\nexport class UpdateProfileModule {}\n","import { NgModule } from '@angular/core';\nimport { CloseAccountModule } from './close-account/close-account.module';\nimport { ForgotPasswordModule } from './forgot-password/forgot-password.module';\nimport { RegisterComponentModule } from './register/register.module';\nimport { ResetPasswordModule } from './reset-password/reset-password.module';\nimport { UpdateEmailModule } from './update-email/update-email.module';\nimport { UpdatePasswordModule } from './update-password/update-password.module';\nimport { UpdateProfileModule } from './update-profile/update-profile.module';\n\n@NgModule({\n  imports: [\n    RegisterComponentModule,\n    UpdateProfileModule,\n    UpdateEmailModule,\n    UpdatePasswordModule,\n    ForgotPasswordModule,\n    ResetPasswordModule,\n    CloseAccountModule,\n  ],\n})\nexport class UserProfileComponentsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}