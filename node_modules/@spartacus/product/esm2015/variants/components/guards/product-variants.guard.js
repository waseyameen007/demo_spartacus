import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@angular/router";
/**
 * Guard that will redirect to purchasable variant of product, if the navigation
 * is for the non-purchasable one
 */
export class ProductVariantsGuard {
    constructor(productService, semanticPathService, router) {
        this.productService = productService;
        this.semanticPathService = semanticPathService;
        this.router = router;
    }
    canActivate(activatedRoute) {
        var _a;
        const productCode = (_a = activatedRoute.params) === null || _a === void 0 ? void 0 : _a.productCode;
        if (!productCode) {
            return of(true);
        }
        return this.productService.get(productCode, "variants" /* VARIANTS */).pipe(filter((p) => !!p), switchMap((product) => {
            if (!product.purchasable) {
                const purchasableCode = this.findPurchasableProductCode(product);
                if (purchasableCode) {
                    return this.productService
                        .get(purchasableCode, "list" /* LIST */)
                        .pipe(filter((p) => !!p), take(1), map((_product) => {
                        return this.router.createUrlTree(this.semanticPathService.transform({
                            cxRoute: 'product',
                            params: _product,
                        }));
                    }));
                }
            }
            return of(true);
        }));
    }
    /**
     * Finds a purchasable product code looking at variant options, if any
     *
     * @param product
     */
    findPurchasableProductCode(product) {
        var _a, _b, _c;
        if ((_a = product.variantOptions) === null || _a === void 0 ? void 0 : _a.length) {
            const results = product.variantOptions.filter((variant) => {
                return variant.stock && variant.stock.stockLevel ? variant : false;
            });
            return results && results.length
                ? (_b = results[0]) === null || _b === void 0 ? void 0 : _b.code
                : (_c = product.variantOptions[0]) === null || _c === void 0 ? void 0 : _c.code;
        }
        return undefined;
    }
}
ProductVariantsGuard.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductVariantsGuard, deps: [{ token: i1.ProductService }, { token: i1.SemanticPathService }, { token: i2.Router }], target: i0.ɵɵFactoryTarget.Injectable });
ProductVariantsGuard.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductVariantsGuard, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductVariantsGuard, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ProductService }, { type: i1.SemanticPathService }, { type: i2.Router }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC12YXJpYW50cy5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2ZlYXR1cmUtbGlicy9wcm9kdWN0L3ZhcmlhbnRzL2NvbXBvbmVudHMvZ3VhcmRzL3Byb2R1Y3QtdmFyaWFudHMuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWMzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUM5RDs7O0dBR0c7QUFJSCxNQUFNLE9BQU8sb0JBQW9CO0lBQy9CLFlBQ1ksY0FBOEIsRUFDOUIsbUJBQXdDLEVBQ3hDLE1BQWM7UUFGZCxtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQUN4QyxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3ZCLENBQUM7SUFDSixXQUFXLENBQ1QsY0FBc0M7O1FBRXRDLE1BQU0sV0FBVyxHQUFHLE1BQUEsY0FBYyxDQUFDLE1BQU0sMENBQUUsV0FBVyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsNEJBQXdCLENBQUMsSUFBSSxDQUNyRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEIsU0FBUyxDQUFDLENBQUMsT0FBZ0IsRUFBRSxFQUFFO1lBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFO2dCQUN4QixNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7Z0JBQ2pFLElBQUksZUFBZSxFQUFFO29CQUNuQixPQUFPLElBQUksQ0FBQyxjQUFjO3lCQUN2QixHQUFHLENBQUMsZUFBZSxvQkFBb0I7eUJBQ3ZDLElBQUksQ0FDSCxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxDQUFDLFFBQWlCLEVBQUUsRUFBRTt3QkFDeEIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FDOUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQzs0QkFDakMsT0FBTyxFQUFFLFNBQVM7NEJBQ2xCLE1BQU0sRUFBRSxRQUFRO3lCQUNqQixDQUFDLENBQ0gsQ0FBQztvQkFDSixDQUFDLENBQUMsQ0FDSCxDQUFDO2lCQUNMO2FBQ0Y7WUFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUNEOzs7O09BSUc7SUFDTywwQkFBMEIsQ0FBQyxPQUFnQjs7UUFDbkQsSUFBSSxNQUFBLE9BQU8sQ0FBQyxjQUFjLDBDQUFFLE1BQU0sRUFBRTtZQUNsQyxNQUFNLE9BQU8sR0FBb0IsT0FBTyxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQzVELENBQUMsT0FBTyxFQUFFLEVBQUU7Z0JBQ1YsT0FBTyxPQUFPLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNyRSxDQUFDLENBQ0YsQ0FBQztZQUNGLE9BQU8sT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNO2dCQUM5QixDQUFDLENBQUMsTUFBQSxPQUFPLENBQUMsQ0FBQyxDQUFDLDBDQUFFLElBQUk7Z0JBQ2xCLENBQUMsQ0FBQyxNQUFBLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLDBDQUFFLElBQUksQ0FBQztTQUNyQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7O2lIQXhEVSxvQkFBb0I7cUhBQXBCLG9CQUFvQixjQUZuQixNQUFNOzJGQUVQLG9CQUFvQjtrQkFIaEMsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LFxuICBDYW5BY3RpdmF0ZSxcbiAgUm91dGVyLFxuICBVcmxUcmVlLFxufSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtcbiAgUHJvZHVjdCxcbiAgUHJvZHVjdFNjb3BlLFxuICBQcm9kdWN0U2VydmljZSxcbiAgU2VtYW50aWNQYXRoU2VydmljZSxcbiAgVmFyaWFudE9wdGlvbixcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgc3dpdGNoTWFwLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuLyoqXG4gKiBHdWFyZCB0aGF0IHdpbGwgcmVkaXJlY3QgdG8gcHVyY2hhc2FibGUgdmFyaWFudCBvZiBwcm9kdWN0LCBpZiB0aGUgbmF2aWdhdGlvblxuICogaXMgZm9yIHRoZSBub24tcHVyY2hhc2FibGUgb25lXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0VmFyaWFudHNHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHByb2R1Y3RTZXJ2aWNlOiBQcm9kdWN0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgc2VtYW50aWNQYXRoU2VydmljZTogU2VtYW50aWNQYXRoU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcm91dGVyOiBSb3V0ZXJcbiAgKSB7fVxuICBjYW5BY3RpdmF0ZShcbiAgICBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdFxuICApOiBPYnNlcnZhYmxlPGJvb2xlYW4gfCBVcmxUcmVlPiB7XG4gICAgY29uc3QgcHJvZHVjdENvZGUgPSBhY3RpdmF0ZWRSb3V0ZS5wYXJhbXM/LnByb2R1Y3RDb2RlO1xuICAgIGlmICghcHJvZHVjdENvZGUpIHtcbiAgICAgIHJldHVybiBvZih0cnVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJvZHVjdFNlcnZpY2UuZ2V0KHByb2R1Y3RDb2RlLCBQcm9kdWN0U2NvcGUuVkFSSUFOVFMpLnBpcGUoXG4gICAgICBmaWx0ZXIoKHApID0+ICEhcCksXG4gICAgICBzd2l0Y2hNYXAoKHByb2R1Y3Q6IFByb2R1Y3QpID0+IHtcbiAgICAgICAgaWYgKCFwcm9kdWN0LnB1cmNoYXNhYmxlKSB7XG4gICAgICAgICAgY29uc3QgcHVyY2hhc2FibGVDb2RlID0gdGhpcy5maW5kUHVyY2hhc2FibGVQcm9kdWN0Q29kZShwcm9kdWN0KTtcbiAgICAgICAgICBpZiAocHVyY2hhc2FibGVDb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9kdWN0U2VydmljZVxuICAgICAgICAgICAgICAuZ2V0KHB1cmNoYXNhYmxlQ29kZSwgUHJvZHVjdFNjb3BlLkxJU1QpXG4gICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcigocCkgPT4gISFwKSxcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIG1hcCgoX3Byb2R1Y3Q6IFByb2R1Y3QpID0+IHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJvdXRlci5jcmVhdGVVcmxUcmVlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbWFudGljUGF0aFNlcnZpY2UudHJhbnNmb3JtKHtcbiAgICAgICAgICAgICAgICAgICAgICBjeFJvdXRlOiAncHJvZHVjdCcsXG4gICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBfcHJvZHVjdCxcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBGaW5kcyBhIHB1cmNoYXNhYmxlIHByb2R1Y3QgY29kZSBsb29raW5nIGF0IHZhcmlhbnQgb3B0aW9ucywgaWYgYW55XG4gICAqXG4gICAqIEBwYXJhbSBwcm9kdWN0XG4gICAqL1xuICBwcm90ZWN0ZWQgZmluZFB1cmNoYXNhYmxlUHJvZHVjdENvZGUocHJvZHVjdDogUHJvZHVjdCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHByb2R1Y3QudmFyaWFudE9wdGlvbnM/Lmxlbmd0aCkge1xuICAgICAgY29uc3QgcmVzdWx0czogVmFyaWFudE9wdGlvbltdID0gcHJvZHVjdC52YXJpYW50T3B0aW9ucy5maWx0ZXIoXG4gICAgICAgICh2YXJpYW50KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHZhcmlhbnQuc3RvY2sgJiYgdmFyaWFudC5zdG9jay5zdG9ja0xldmVsID8gdmFyaWFudCA6IGZhbHNlO1xuICAgICAgICB9XG4gICAgICApO1xuICAgICAgcmV0dXJuIHJlc3VsdHMgJiYgcmVzdWx0cy5sZW5ndGhcbiAgICAgICAgPyByZXN1bHRzWzBdPy5jb2RlXG4gICAgICAgIDogcHJvZHVjdC52YXJpYW50T3B0aW9uc1swXT8uY29kZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuIl19