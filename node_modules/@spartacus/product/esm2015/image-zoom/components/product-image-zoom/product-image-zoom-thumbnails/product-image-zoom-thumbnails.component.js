import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, } from '@angular/core';
import { isNotNullable } from '@spartacus/core';
import { BehaviorSubject, Subscription } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefront";
import * as i2 from "@angular/common";
export class ProductImageZoomThumbnailsComponent {
    constructor() {
        this.mainMediaContainer = new BehaviorSubject({});
        this.productImage = new EventEmitter();
        this.subscription = new Subscription();
    }
    ngOnInit() {
        this.subscription.add(this.activeThumb.subscribe((image) => {
            this.mainMediaContainer.next(image);
        }));
    }
    openImage(image) {
        var _a;
        this.mainMediaContainer.next(image);
        if (typeof ((_a = image.zoom) === null || _a === void 0 ? void 0 : _a.galleryIndex) === 'number') {
            this.productImage.emit({ image, index: image.zoom.galleryIndex });
        }
    }
    isActive(thumbnail) {
        return this.mainMediaContainer.asObservable().pipe(filter(isNotNullable), map((container) => {
            var _a, _b;
            return (((_a = container.zoom) === null || _a === void 0 ? void 0 : _a.url) &&
                ((_b = thumbnail.zoom) === null || _b === void 0 ? void 0 : _b.url) &&
                container.zoom.url === thumbnail.zoom.url);
        }));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ProductImageZoomThumbnailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductImageZoomThumbnailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
ProductImageZoomThumbnailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ProductImageZoomThumbnailsComponent, selector: "cx-product-image-zoom-thumbnails", inputs: { thumbs$: "thumbs$", activeThumb: "activeThumb" }, outputs: { productImage: "productImage" }, ngImport: i0, template: "<ng-container *ngIf=\"thumbs$ | async as thumbs\">\n  <cx-carousel\n    *ngIf=\"thumbs.length\"\n    class=\"thumbs\"\n    [items]=\"thumbs\"\n    itemWidth=\"70px\"\n    [hideIndicators]=\"false\"\n    [template]=\"thumb\"\n  ></cx-carousel>\n</ng-container>\n\n<ng-template #thumb let-item=\"item\">\n  <cx-media\n    [container]=\"item.container\"\n    tabindex=\"0\"\n    (focus)=\"openImage(item.container)\"\n    [class.is-active]=\"isActive(item.container) | async\"\n  >\n  </cx-media>\n</ng-template>\n", components: [{ type: i1.CarouselComponent, selector: "cx-carousel", inputs: ["title", "items", "template", "itemWidth", "hideIndicators", "indicatorIcon", "previousIcon", "nextIcon"] }, { type: i1.MediaComponent, selector: "cx-media", inputs: ["container", "format", "alt", "role", "loading"], outputs: ["loaded"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductImageZoomThumbnailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-product-image-zoom-thumbnails',
                    templateUrl: './product-image-zoom-thumbnails.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { productImage: [{
                type: Output
            }], thumbs$: [{
                type: Input
            }], activeThumb: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1pbWFnZS16b29tLXRodW1ibmFpbHMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3Byb2R1Y3QvaW1hZ2Utem9vbS9jb21wb25lbnRzL3Byb2R1Y3QtaW1hZ2Utem9vbS9wcm9kdWN0LWltYWdlLXpvb20tdGh1bWJuYWlscy9wcm9kdWN0LWltYWdlLXpvb20tdGh1bWJuYWlscy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvcHJvZHVjdC9pbWFnZS16b29tL2NvbXBvbmVudHMvcHJvZHVjdC1pbWFnZS16b29tL3Byb2R1Y3QtaW1hZ2Utem9vbS10aHVtYm5haWxzL3Byb2R1Y3QtaW1hZ2Utem9vbS10aHVtYm5haWxzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixLQUFLLEVBQ0wsTUFBTSxHQUdQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBYyxhQUFhLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUU1RCxPQUFPLEVBQUUsZUFBZSxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNqRSxPQUFPLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBTzdDLE1BQU0sT0FBTyxtQ0FBbUM7SUFhOUM7UUFaUSx1QkFBa0IsR0FBRyxJQUFJLGVBQWUsQ0FBYSxFQUFFLENBQUMsQ0FBQztRQUV2RCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFpQyxDQUFDO1FBTWpFLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUk3QixDQUFDO0lBRWhCLFFBQVE7UUFDTixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNuQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUNILENBQUM7SUFDSixDQUFDO0lBRUQsU0FBUyxDQUFDLEtBQWlCOztRQUN6QixJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BDLElBQUksT0FBTyxDQUFBLE1BQUEsS0FBSyxDQUFDLElBQUksMENBQUUsWUFBWSxDQUFBLEtBQUssUUFBUSxFQUFFO1lBQ2hELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDbkU7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLFNBQXFCO1FBQzVCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FDaEQsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUNyQixHQUFHLENBQUMsQ0FBQyxTQUFxQixFQUFFLEVBQUU7O1lBQzVCLE9BQU8sQ0FBQyxDQUFBLE1BQUEsU0FBUyxDQUFDLElBQUksMENBQUUsR0FBRztpQkFDekIsTUFBQSxTQUFTLENBQUMsSUFBSSwwQ0FBRSxHQUFHLENBQUE7Z0JBQ25CLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFZLENBQUM7UUFDMUQsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOztnSUEzQ1UsbUNBQW1DO29IQUFuQyxtQ0FBbUMsK0tDbkJoRCxpZ0JBb0JBOzJGRERhLG1DQUFtQztrQkFML0MsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsa0NBQWtDO29CQUM1QyxXQUFXLEVBQUUsZ0RBQWdEO29CQUM3RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7MEVBSVcsWUFBWTtzQkFBckIsTUFBTTtnQkFFRSxPQUFPO3NCQUFmLEtBQUs7Z0JBRUcsV0FBVztzQkFBbkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE91dHB1dCxcbiAgT25Jbml0LFxuICBPbkRlc3Ryb3ksXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW1hZ2VHcm91cCwgaXNOb3ROdWxsYWJsZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBUaHVtYm5haWxzR3JvdXAgfSBmcm9tICdAc3BhcnRhY3VzL3Byb2R1Y3QvaW1hZ2Utem9vbS9yb290JztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtcHJvZHVjdC1pbWFnZS16b29tLXRodW1ibmFpbHMnLFxuICB0ZW1wbGF0ZVVybDogJy4vcHJvZHVjdC1pbWFnZS16b29tLXRodW1ibmFpbHMuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdEltYWdlWm9vbVRodW1ibmFpbHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgbWFpbk1lZGlhQ29udGFpbmVyID0gbmV3IEJlaGF2aW9yU3ViamVjdDxJbWFnZUdyb3VwPih7fSk7XG5cbiAgQE91dHB1dCgpIHByb2R1Y3RJbWFnZSA9IG5ldyBFdmVudEVtaXR0ZXI8eyBpbWFnZTogYW55OyBpbmRleDogbnVtYmVyIH0+KCk7XG5cbiAgQElucHV0KCkgdGh1bWJzJDogT2JzZXJ2YWJsZTxUaHVtYm5haWxzR3JvdXBbXT47XG5cbiAgQElucHV0KCkgYWN0aXZlVGh1bWI6IEV2ZW50RW1pdHRlcjxJbWFnZUdyb3VwPjtcblxuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIHNlbGVjdGVkSW5kZXg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgdGhpcy5hY3RpdmVUaHVtYi5zdWJzY3JpYmUoKGltYWdlKSA9PiB7XG4gICAgICAgIHRoaXMubWFpbk1lZGlhQ29udGFpbmVyLm5leHQoaW1hZ2UpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgb3BlbkltYWdlKGltYWdlOiBJbWFnZUdyb3VwKTogdm9pZCB7XG4gICAgdGhpcy5tYWluTWVkaWFDb250YWluZXIubmV4dChpbWFnZSk7XG4gICAgaWYgKHR5cGVvZiBpbWFnZS56b29tPy5nYWxsZXJ5SW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICB0aGlzLnByb2R1Y3RJbWFnZS5lbWl0KHsgaW1hZ2UsIGluZGV4OiBpbWFnZS56b29tLmdhbGxlcnlJbmRleCB9KTtcbiAgICB9XG4gIH1cblxuICBpc0FjdGl2ZSh0aHVtYm5haWw6IEltYWdlR3JvdXApOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5tYWluTWVkaWFDb250YWluZXIuYXNPYnNlcnZhYmxlKCkucGlwZShcbiAgICAgIGZpbHRlcihpc05vdE51bGxhYmxlKSxcbiAgICAgIG1hcCgoY29udGFpbmVyOiBJbWFnZUdyb3VwKSA9PiB7XG4gICAgICAgIHJldHVybiAoY29udGFpbmVyLnpvb20/LnVybCAmJlxuICAgICAgICAgIHRodW1ibmFpbC56b29tPy51cmwgJiZcbiAgICAgICAgICBjb250YWluZXIuem9vbS51cmwgPT09IHRodW1ibmFpbC56b29tLnVybCkgYXMgYm9vbGVhbjtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJ0aHVtYnMkIHwgYXN5bmMgYXMgdGh1bWJzXCI+XG4gIDxjeC1jYXJvdXNlbFxuICAgICpuZ0lmPVwidGh1bWJzLmxlbmd0aFwiXG4gICAgY2xhc3M9XCJ0aHVtYnNcIlxuICAgIFtpdGVtc109XCJ0aHVtYnNcIlxuICAgIGl0ZW1XaWR0aD1cIjcwcHhcIlxuICAgIFtoaWRlSW5kaWNhdG9yc109XCJmYWxzZVwiXG4gICAgW3RlbXBsYXRlXT1cInRodW1iXCJcbiAgPjwvY3gtY2Fyb3VzZWw+XG48L25nLWNvbnRhaW5lcj5cblxuPG5nLXRlbXBsYXRlICN0aHVtYiBsZXQtaXRlbT1cIml0ZW1cIj5cbiAgPGN4LW1lZGlhXG4gICAgW2NvbnRhaW5lcl09XCJpdGVtLmNvbnRhaW5lclwiXG4gICAgdGFiaW5kZXg9XCIwXCJcbiAgICAoZm9jdXMpPVwib3BlbkltYWdlKGl0ZW0uY29udGFpbmVyKVwiXG4gICAgW2NsYXNzLmlzLWFjdGl2ZV09XCJpc0FjdGl2ZShpdGVtLmNvbnRhaW5lcikgfCBhc3luY1wiXG4gID5cbiAgPC9jeC1tZWRpYT5cbjwvbmctdGVtcGxhdGU+XG4iXX0=