import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class BulkPricingService {
    constructor(productService) {
        this.productService = productService;
        this.PRODUCT_SCOPE = "bulkPrices" /* BULK_PRICES */;
    }
    getBulkPrices(productCode) {
        return this.productService.get(productCode, this.PRODUCT_SCOPE).pipe(switchMap((productPriceScope) => {
            return of(this.convert(productPriceScope));
        }));
    }
    convert(productPriceScope) {
        var _a;
        let bulkPrices = [];
        if (productPriceScope) {
            const basePrice = (_a = productPriceScope.price) === null || _a === void 0 ? void 0 : _a.value;
            const volumePrices = productPriceScope.volumePrices;
            bulkPrices = volumePrices === null || volumePrices === void 0 ? void 0 : volumePrices.map((volumePrice) => this.parsePrice(volumePrice, basePrice));
        }
        return bulkPrices;
    }
    parsePrice(priceTier, basePrice) {
        const bulkPriceTemplate = {
            currencyIso: priceTier.currencyIso,
            formattedValue: priceTier.formattedValue,
            maxQuantity: priceTier.maxQuantity,
            minQuantity: priceTier.minQuantity,
            priceType: priceTier.priceType,
            value: priceTier.value,
            formattedDiscount: '',
            discount: 0,
        };
        return this.calculateDiscount(bulkPriceTemplate, basePrice);
    }
    calculateDiscount(bulkPriceTemplate, basePrice) {
        const bulkPrice = Object.assign({}, bulkPriceTemplate);
        const tierPrice = bulkPriceTemplate.value;
        if (tierPrice && basePrice) {
            const discount = Math.round(100.0 - (tierPrice / basePrice) * 100);
            const formatted = discount === 0 ? `${discount}%` : `-${discount}%`;
            bulkPrice.formattedDiscount = formatted;
            bulkPrice.discount = discount;
        }
        return bulkPrice;
    }
}
BulkPricingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BulkPricingService, deps: [{ token: i1.ProductService }], target: i0.ɵɵFactoryTarget.Injectable });
BulkPricingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BulkPricingService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: BulkPricingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ProductService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVsay1wcmljaW5nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvcHJvZHVjdC9idWxrLXByaWNpbmcvY29yZS9zZXJ2aWNlcy9idWxrLXByaWNpbmcuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdEMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7QUFNM0MsTUFBTSxPQUFPLGtCQUFrQjtJQUc3QixZQUFzQixjQUE4QjtRQUE5QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFGakMsa0JBQWEsa0NBQTRCO0lBRUwsQ0FBQztJQUV4RCxhQUFhLENBQUMsV0FBbUI7UUFDL0IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FDbEUsU0FBUyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtZQUM5QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQztJQUVTLE9BQU8sQ0FBQyxpQkFBMEI7O1FBQzFDLElBQUksVUFBVSxHQUE0QixFQUFFLENBQUM7UUFFN0MsSUFBSSxpQkFBaUIsRUFBRTtZQUNyQixNQUFNLFNBQVMsR0FBdUIsTUFBQSxpQkFBaUIsQ0FBQyxLQUFLLDBDQUFFLEtBQUssQ0FBQztZQUNyRSxNQUFNLFlBQVksR0FBd0IsaUJBQWlCLENBQUMsWUFBWSxDQUFDO1lBRXpFLFVBQVUsR0FBRyxZQUFZLGFBQVosWUFBWSx1QkFBWixZQUFZLENBQUUsR0FBRyxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FDN0MsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQ3hDLENBQUM7U0FDSDtRQUVELE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFFUyxVQUFVLENBQ2xCLFNBQWdCLEVBQ2hCLFNBQTZCO1FBRTdCLE1BQU0saUJBQWlCLEdBQWM7WUFDbkMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxXQUFXO1lBQ2xDLGNBQWMsRUFBRSxTQUFTLENBQUMsY0FBYztZQUN4QyxXQUFXLEVBQUUsU0FBUyxDQUFDLFdBQVc7WUFDbEMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxXQUFXO1lBQ2xDLFNBQVMsRUFBRSxTQUFTLENBQUMsU0FBUztZQUM5QixLQUFLLEVBQUUsU0FBUyxDQUFDLEtBQUs7WUFDdEIsaUJBQWlCLEVBQUUsRUFBRTtZQUNyQixRQUFRLEVBQUUsQ0FBQztTQUNaLENBQUM7UUFFRixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRVMsaUJBQWlCLENBQ3pCLGlCQUE0QixFQUM1QixTQUE2QjtRQUU3QixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRXZELE1BQU0sU0FBUyxHQUF1QixpQkFBaUIsQ0FBQyxLQUFLLENBQUM7UUFFOUQsSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO1lBQzFCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ25FLE1BQU0sU0FBUyxHQUFHLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksUUFBUSxHQUFHLENBQUM7WUFDcEUsU0FBUyxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztZQUN4QyxTQUFTLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztTQUMvQjtRQUVELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7OytHQTlEVSxrQkFBa0I7bUhBQWxCLGtCQUFrQixjQUZqQixNQUFNOzJGQUVQLGtCQUFrQjtrQkFIOUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcmljZSwgUHJvZHVjdCwgUHJvZHVjdFNlcnZpY2UsIFByb2R1Y3RTY29wZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQnVsa1ByaWNlIH0gZnJvbSAnLi4vbW9kZWwvYnVsay1wcmljZS5tb2RlbCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBCdWxrUHJpY2luZ1NlcnZpY2Uge1xuICBwcm90ZWN0ZWQgcmVhZG9ubHkgUFJPRFVDVF9TQ09QRSA9IFByb2R1Y3RTY29wZS5CVUxLX1BSSUNFUztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcHJvZHVjdFNlcnZpY2U6IFByb2R1Y3RTZXJ2aWNlKSB7fVxuXG4gIGdldEJ1bGtQcmljZXMocHJvZHVjdENvZGU6IHN0cmluZyk6IE9ic2VydmFibGU8QnVsa1ByaWNlW10gfCB1bmRlZmluZWQ+IHtcbiAgICByZXR1cm4gdGhpcy5wcm9kdWN0U2VydmljZS5nZXQocHJvZHVjdENvZGUsIHRoaXMuUFJPRFVDVF9TQ09QRSkucGlwZShcbiAgICAgIHN3aXRjaE1hcCgocHJvZHVjdFByaWNlU2NvcGUpID0+IHtcbiAgICAgICAgcmV0dXJuIG9mKHRoaXMuY29udmVydChwcm9kdWN0UHJpY2VTY29wZSkpO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNvbnZlcnQocHJvZHVjdFByaWNlU2NvcGU6IFByb2R1Y3QpOiBCdWxrUHJpY2VbXSB8IHVuZGVmaW5lZCB7XG4gICAgbGV0IGJ1bGtQcmljZXM6IEJ1bGtQcmljZVtdIHwgdW5kZWZpbmVkID0gW107XG5cbiAgICBpZiAocHJvZHVjdFByaWNlU2NvcGUpIHtcbiAgICAgIGNvbnN0IGJhc2VQcmljZTogbnVtYmVyIHwgdW5kZWZpbmVkID0gcHJvZHVjdFByaWNlU2NvcGUucHJpY2U/LnZhbHVlO1xuICAgICAgY29uc3Qgdm9sdW1lUHJpY2VzOiBQcmljZVtdIHwgdW5kZWZpbmVkID0gcHJvZHVjdFByaWNlU2NvcGUudm9sdW1lUHJpY2VzO1xuXG4gICAgICBidWxrUHJpY2VzID0gdm9sdW1lUHJpY2VzPy5tYXAoKHZvbHVtZVByaWNlKSA9PlxuICAgICAgICB0aGlzLnBhcnNlUHJpY2Uodm9sdW1lUHJpY2UsIGJhc2VQcmljZSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJ1bGtQcmljZXM7XG4gIH1cblxuICBwcm90ZWN0ZWQgcGFyc2VQcmljZShcbiAgICBwcmljZVRpZXI6IFByaWNlLFxuICAgIGJhc2VQcmljZTogbnVtYmVyIHwgdW5kZWZpbmVkXG4gICk6IEJ1bGtQcmljZSB7XG4gICAgY29uc3QgYnVsa1ByaWNlVGVtcGxhdGU6IEJ1bGtQcmljZSA9IHtcbiAgICAgIGN1cnJlbmN5SXNvOiBwcmljZVRpZXIuY3VycmVuY3lJc28sXG4gICAgICBmb3JtYXR0ZWRWYWx1ZTogcHJpY2VUaWVyLmZvcm1hdHRlZFZhbHVlLFxuICAgICAgbWF4UXVhbnRpdHk6IHByaWNlVGllci5tYXhRdWFudGl0eSxcbiAgICAgIG1pblF1YW50aXR5OiBwcmljZVRpZXIubWluUXVhbnRpdHksXG4gICAgICBwcmljZVR5cGU6IHByaWNlVGllci5wcmljZVR5cGUsXG4gICAgICB2YWx1ZTogcHJpY2VUaWVyLnZhbHVlLFxuICAgICAgZm9ybWF0dGVkRGlzY291bnQ6ICcnLFxuICAgICAgZGlzY291bnQ6IDAsXG4gICAgfTtcblxuICAgIHJldHVybiB0aGlzLmNhbGN1bGF0ZURpc2NvdW50KGJ1bGtQcmljZVRlbXBsYXRlLCBiYXNlUHJpY2UpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGNhbGN1bGF0ZURpc2NvdW50KFxuICAgIGJ1bGtQcmljZVRlbXBsYXRlOiBCdWxrUHJpY2UsXG4gICAgYmFzZVByaWNlOiBudW1iZXIgfCB1bmRlZmluZWRcbiAgKTogQnVsa1ByaWNlIHtcbiAgICBjb25zdCBidWxrUHJpY2UgPSBPYmplY3QuYXNzaWduKHt9LCBidWxrUHJpY2VUZW1wbGF0ZSk7XG5cbiAgICBjb25zdCB0aWVyUHJpY2U6IG51bWJlciB8IHVuZGVmaW5lZCA9IGJ1bGtQcmljZVRlbXBsYXRlLnZhbHVlO1xuXG4gICAgaWYgKHRpZXJQcmljZSAmJiBiYXNlUHJpY2UpIHtcbiAgICAgIGNvbnN0IGRpc2NvdW50ID0gTWF0aC5yb3VuZCgxMDAuMCAtICh0aWVyUHJpY2UgLyBiYXNlUHJpY2UpICogMTAwKTtcbiAgICAgIGNvbnN0IGZvcm1hdHRlZCA9IGRpc2NvdW50ID09PSAwID8gYCR7ZGlzY291bnR9JWAgOiBgLSR7ZGlzY291bnR9JWA7XG4gICAgICBidWxrUHJpY2UuZm9ybWF0dGVkRGlzY291bnQgPSBmb3JtYXR0ZWQ7XG4gICAgICBidWxrUHJpY2UuZGlzY291bnQgPSBkaXNjb3VudDtcbiAgICB9XG5cbiAgICByZXR1cm4gYnVsa1ByaWNlO1xuICB9XG59XG4iXX0=