import { CheckoutStepType, DeliveryModePreferences } from '@spartacus/checkout/root';

// While it is not strictly required to define checkout endpoints in a separate `CheckoutOccEndpoints`
// variable, type augmentation does require that this file imports `CheckoutOccEndpoints`.
// A good way to make sure the `CheckoutOccEndpoints` import is not removed by mistake is to use
// `CheckoutOccEndpoints` in the code.
const defaultB2bCheckoutOccEndpoints = {
    setDeliveryAddress: 'orgUsers/${userId}/carts/${cartId}/addresses/delivery',
    placeOrder: 'orgUsers/${userId}/orders?fields=FULL',
};
const defaultB2bUserAccountOccEndpoints = {
    user: 'orgUsers/${userId}',
};
const defaultB2bUserProfileOccEndpoints = {
    userUpdateProfile: 'users/${userId}',
    userCloseAccount: 'users/${userId}',
};
const defaultB2bOccConfig = {
    backend: {
        occ: {
            endpoints: Object.assign(Object.assign(Object.assign(Object.assign({}, defaultB2bCheckoutOccEndpoints), defaultB2bUserAccountOccEndpoints), defaultB2bUserProfileOccEndpoints), { user: 'orgUsers/${userId}', userUpdateProfile: 'users/${userId}', userCloseAccount: 'users/${userId}', addEntries: 'orgUsers/${userId}/carts/${cartId}/entries?quantity=${quantity}', scheduleReplenishmentOrder: 'orgUsers/${userId}/replenishmentOrders?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType', replenishmentOrderDetails: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user', replenishmentOrderDetailsHistory: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}/orders', cancelReplenishmentOrder: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user', replenishmentOrderHistory: 'users/${userId}/replenishmentOrders?fields=FULL,replenishmentOrders(FULL, purchaseOrderNumber)' }),
        },
    },
};

const defaultB2bCheckoutConfig = {
    checkout: {
        steps: [
            {
                id: 'paymentType',
                name: 'checkoutProgress.methodOfPayment',
                routeName: 'checkoutPaymentType',
                type: [CheckoutStepType.PAYMENT_TYPE],
            },
            {
                id: 'shippingAddress',
                name: 'checkoutProgress.shippingAddress',
                routeName: 'checkoutShippingAddress',
                type: [CheckoutStepType.SHIPPING_ADDRESS],
            },
            {
                id: 'deliveryMode',
                name: 'checkoutProgress.deliveryMode',
                routeName: 'checkoutDeliveryMode',
                type: [CheckoutStepType.DELIVERY_MODE],
            },
            {
                id: 'paymentDetails',
                name: 'checkoutProgress.paymentDetails',
                routeName: 'checkoutPaymentDetails',
                type: [CheckoutStepType.PAYMENT_DETAILS],
            },
            {
                id: 'reviewOrder',
                name: 'checkoutProgress.reviewOrder',
                routeName: 'checkoutReviewOrder',
                type: [CheckoutStepType.REVIEW_ORDER],
            },
        ],
        express: false,
        defaultDeliveryMode: [DeliveryModePreferences.FREE],
        guest: false,
    },
};

/**
 * Generated bundle index. Do not edit.
 */

export { defaultB2bCheckoutConfig, defaultB2bOccConfig };
//# sourceMappingURL=spartacus-setup.js.map
