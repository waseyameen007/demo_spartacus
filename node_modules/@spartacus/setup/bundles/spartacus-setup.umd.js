(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@spartacus/checkout/root')) :
    typeof define === 'function' && define.amd ? define('@spartacus/setup', ['exports', '@spartacus/checkout/root'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.setup = {}), global.checkoutRoot));
}(this, (function (exports, root) { 'use strict';

    // While it is not strictly required to define checkout endpoints in a separate `CheckoutOccEndpoints`
    // variable, type augmentation does require that this file imports `CheckoutOccEndpoints`.
    // A good way to make sure the `CheckoutOccEndpoints` import is not removed by mistake is to use
    // `CheckoutOccEndpoints` in the code.
    var defaultB2bCheckoutOccEndpoints = {
        setDeliveryAddress: 'orgUsers/${userId}/carts/${cartId}/addresses/delivery',
        placeOrder: 'orgUsers/${userId}/orders?fields=FULL',
    };
    var defaultB2bUserAccountOccEndpoints = {
        user: 'orgUsers/${userId}',
    };
    var defaultB2bUserProfileOccEndpoints = {
        userUpdateProfile: 'users/${userId}',
        userCloseAccount: 'users/${userId}',
    };
    var defaultB2bOccConfig = {
        backend: {
            occ: {
                endpoints: Object.assign(Object.assign(Object.assign(Object.assign({}, defaultB2bCheckoutOccEndpoints), defaultB2bUserAccountOccEndpoints), defaultB2bUserProfileOccEndpoints), { user: 'orgUsers/${userId}', userUpdateProfile: 'users/${userId}', userCloseAccount: 'users/${userId}', addEntries: 'orgUsers/${userId}/carts/${cartId}/entries?quantity=${quantity}', scheduleReplenishmentOrder: 'orgUsers/${userId}/replenishmentOrders?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType', replenishmentOrderDetails: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user', replenishmentOrderDetailsHistory: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}/orders', cancelReplenishmentOrder: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user', replenishmentOrderHistory: 'users/${userId}/replenishmentOrders?fields=FULL,replenishmentOrders(FULL, purchaseOrderNumber)' }),
            },
        },
    };

    var defaultB2bCheckoutConfig = {
        checkout: {
            steps: [
                {
                    id: 'paymentType',
                    name: 'checkoutProgress.methodOfPayment',
                    routeName: 'checkoutPaymentType',
                    type: [root.CheckoutStepType.PAYMENT_TYPE],
                },
                {
                    id: 'shippingAddress',
                    name: 'checkoutProgress.shippingAddress',
                    routeName: 'checkoutShippingAddress',
                    type: [root.CheckoutStepType.SHIPPING_ADDRESS],
                },
                {
                    id: 'deliveryMode',
                    name: 'checkoutProgress.deliveryMode',
                    routeName: 'checkoutDeliveryMode',
                    type: [root.CheckoutStepType.DELIVERY_MODE],
                },
                {
                    id: 'paymentDetails',
                    name: 'checkoutProgress.paymentDetails',
                    routeName: 'checkoutPaymentDetails',
                    type: [root.CheckoutStepType.PAYMENT_DETAILS],
                },
                {
                    id: 'reviewOrder',
                    name: 'checkoutProgress.reviewOrder',
                    routeName: 'checkoutReviewOrder',
                    type: [root.CheckoutStepType.REVIEW_ORDER],
                },
            ],
            express: false,
            defaultDeliveryMode: [root.DeliveryModePreferences.FREE],
            guest: false,
        },
    };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.defaultB2bCheckoutConfig = defaultB2bCheckoutConfig;
    exports.defaultB2bOccConfig = defaultB2bOccConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-setup.umd.js.map
