// While it is not strictly required to define checkout endpoints in a separate `CheckoutOccEndpoints`
// variable, type augmentation does require that this file imports `CheckoutOccEndpoints`.
// A good way to make sure the `CheckoutOccEndpoints` import is not removed by mistake is to use
// `CheckoutOccEndpoints` in the code.
const defaultB2bCheckoutOccEndpoints = {
    setDeliveryAddress: 'orgUsers/${userId}/carts/${cartId}/addresses/delivery',
    placeOrder: 'orgUsers/${userId}/orders?fields=FULL',
};
const defaultB2bUserAccountOccEndpoints = {
    user: 'orgUsers/${userId}',
};
const defaultB2bUserProfileOccEndpoints = {
    userUpdateProfile: 'users/${userId}',
    userCloseAccount: 'users/${userId}',
};
export const defaultB2bOccConfig = {
    backend: {
        occ: {
            endpoints: Object.assign(Object.assign(Object.assign(Object.assign({}, defaultB2bCheckoutOccEndpoints), defaultB2bUserAccountOccEndpoints), defaultB2bUserProfileOccEndpoints), { user: 'orgUsers/${userId}', userUpdateProfile: 'users/${userId}', userCloseAccount: 'users/${userId}', addEntries: 'orgUsers/${userId}/carts/${cartId}/entries?quantity=${quantity}', scheduleReplenishmentOrder: 'orgUsers/${userId}/replenishmentOrders?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType', replenishmentOrderDetails: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user', replenishmentOrderDetailsHistory: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}/orders', cancelReplenishmentOrder: 'users/${userId}/replenishmentOrders/${replenishmentOrderCode}?fields=FULL,costCenter(FULL),purchaseOrderNumber,paymentType,user', replenishmentOrderHistory: 'users/${userId}/replenishmentOrders?fields=FULL,replenishmentOrders(FULL, purchaseOrderNumber)' }),
        },
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1iMmItb2NjLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL2NvcmUtbGlicy9zZXR1cC9yZWNpcGVzL2IyYi9jb25maWcvZGVmYXVsdC1iMmItb2NjLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxzR0FBc0c7QUFDdEcsMEZBQTBGO0FBQzFGLGdHQUFnRztBQUNoRyxzQ0FBc0M7QUFDdEMsTUFBTSw4QkFBOEIsR0FBeUI7SUFDM0Qsa0JBQWtCLEVBQUUsdURBQXVEO0lBQzNFLFVBQVUsRUFBRSx1Q0FBdUM7Q0FDcEQsQ0FBQztBQUVGLE1BQU0saUNBQWlDLEdBQTRCO0lBQ2pFLElBQUksRUFBRSxvQkFBb0I7Q0FDM0IsQ0FBQztBQUVGLE1BQU0saUNBQWlDLEdBQTRCO0lBQ2pFLGlCQUFpQixFQUFFLGlCQUFpQjtJQUNwQyxnQkFBZ0IsRUFBRSxpQkFBaUI7Q0FDcEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFjO0lBQzVDLE9BQU8sRUFBRTtRQUNQLEdBQUcsRUFBRTtZQUNILFNBQVMsOERBQ0osOEJBQThCLEdBQzlCLGlDQUFpQyxHQUNqQyxpQ0FBaUMsS0FDcEMsSUFBSSxFQUFFLG9CQUFvQixFQUMxQixpQkFBaUIsRUFBRSxpQkFBaUIsRUFDcEMsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQ25DLFVBQVUsRUFDUixpRUFBaUUsRUFDbkUsMEJBQTBCLEVBQ3hCLHFHQUFxRyxFQUN2Ryx5QkFBeUIsRUFDdkIsaUlBQWlJLEVBQ25JLGdDQUFnQyxFQUM5QixzRUFBc0UsRUFDeEUsd0JBQXdCLEVBQ3RCLGlJQUFpSSxFQUNuSSx5QkFBeUIsRUFDdkIsZ0dBQWdHLEdBQ25HO1NBQ0Y7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBXZSBuZWVkIHRoaXMgaW1wb3J0IGZvciBhdWdtZW50YXRpb24gb2YgT2NjRW5kcG9pbnRzIHRvIHBpY2sgdXBcbmltcG9ydCB7IENoZWNrb3V0T2NjRW5kcG9pbnRzIH0gZnJvbSAnQHNwYXJ0YWN1cy9jaGVja291dC9vY2MnO1xuaW1wb3J0IHsgVXNlckFjY291bnRPY2NFbmRwb2ludHMgfSBmcm9tICdAc3BhcnRhY3VzL3VzZXIvYWNjb3VudC9vY2MnO1xuaW1wb3J0IHsgVXNlclByb2ZpbGVPY2NFbmRwb2ludHMgfSBmcm9tICdAc3BhcnRhY3VzL3VzZXIvcHJvZmlsZS9vY2MnO1xuaW1wb3J0IHsgT2NjQ29uZmlnIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcblxuLy8gV2hpbGUgaXQgaXMgbm90IHN0cmljdGx5IHJlcXVpcmVkIHRvIGRlZmluZSBjaGVja291dCBlbmRwb2ludHMgaW4gYSBzZXBhcmF0ZSBgQ2hlY2tvdXRPY2NFbmRwb2ludHNgXG4vLyB2YXJpYWJsZSwgdHlwZSBhdWdtZW50YXRpb24gZG9lcyByZXF1aXJlIHRoYXQgdGhpcyBmaWxlIGltcG9ydHMgYENoZWNrb3V0T2NjRW5kcG9pbnRzYC5cbi8vIEEgZ29vZCB3YXkgdG8gbWFrZSBzdXJlIHRoZSBgQ2hlY2tvdXRPY2NFbmRwb2ludHNgIGltcG9ydCBpcyBub3QgcmVtb3ZlZCBieSBtaXN0YWtlIGlzIHRvIHVzZVxuLy8gYENoZWNrb3V0T2NjRW5kcG9pbnRzYCBpbiB0aGUgY29kZS5cbmNvbnN0IGRlZmF1bHRCMmJDaGVja291dE9jY0VuZHBvaW50czogQ2hlY2tvdXRPY2NFbmRwb2ludHMgPSB7XG4gIHNldERlbGl2ZXJ5QWRkcmVzczogJ29yZ1VzZXJzLyR7dXNlcklkfS9jYXJ0cy8ke2NhcnRJZH0vYWRkcmVzc2VzL2RlbGl2ZXJ5JyxcbiAgcGxhY2VPcmRlcjogJ29yZ1VzZXJzLyR7dXNlcklkfS9vcmRlcnM/ZmllbGRzPUZVTEwnLFxufTtcblxuY29uc3QgZGVmYXVsdEIyYlVzZXJBY2NvdW50T2NjRW5kcG9pbnRzOiBVc2VyQWNjb3VudE9jY0VuZHBvaW50cyA9IHtcbiAgdXNlcjogJ29yZ1VzZXJzLyR7dXNlcklkfScsXG59O1xuXG5jb25zdCBkZWZhdWx0QjJiVXNlclByb2ZpbGVPY2NFbmRwb2ludHM6IFVzZXJQcm9maWxlT2NjRW5kcG9pbnRzID0ge1xuICB1c2VyVXBkYXRlUHJvZmlsZTogJ3VzZXJzLyR7dXNlcklkfScsXG4gIHVzZXJDbG9zZUFjY291bnQ6ICd1c2Vycy8ke3VzZXJJZH0nLFxufTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRCMmJPY2NDb25maWc6IE9jY0NvbmZpZyA9IHtcbiAgYmFja2VuZDoge1xuICAgIG9jYzoge1xuICAgICAgZW5kcG9pbnRzOiB7XG4gICAgICAgIC4uLmRlZmF1bHRCMmJDaGVja291dE9jY0VuZHBvaW50cyxcbiAgICAgICAgLi4uZGVmYXVsdEIyYlVzZXJBY2NvdW50T2NjRW5kcG9pbnRzLFxuICAgICAgICAuLi5kZWZhdWx0QjJiVXNlclByb2ZpbGVPY2NFbmRwb2ludHMsXG4gICAgICAgIHVzZXI6ICdvcmdVc2Vycy8ke3VzZXJJZH0nLFxuICAgICAgICB1c2VyVXBkYXRlUHJvZmlsZTogJ3VzZXJzLyR7dXNlcklkfScsXG4gICAgICAgIHVzZXJDbG9zZUFjY291bnQ6ICd1c2Vycy8ke3VzZXJJZH0nLFxuICAgICAgICBhZGRFbnRyaWVzOlxuICAgICAgICAgICdvcmdVc2Vycy8ke3VzZXJJZH0vY2FydHMvJHtjYXJ0SWR9L2VudHJpZXM/cXVhbnRpdHk9JHtxdWFudGl0eX0nLFxuICAgICAgICBzY2hlZHVsZVJlcGxlbmlzaG1lbnRPcmRlcjpcbiAgICAgICAgICAnb3JnVXNlcnMvJHt1c2VySWR9L3JlcGxlbmlzaG1lbnRPcmRlcnM/ZmllbGRzPUZVTEwsY29zdENlbnRlcihGVUxMKSxwdXJjaGFzZU9yZGVyTnVtYmVyLHBheW1lbnRUeXBlJyxcbiAgICAgICAgcmVwbGVuaXNobWVudE9yZGVyRGV0YWlsczpcbiAgICAgICAgICAndXNlcnMvJHt1c2VySWR9L3JlcGxlbmlzaG1lbnRPcmRlcnMvJHtyZXBsZW5pc2htZW50T3JkZXJDb2RlfT9maWVsZHM9RlVMTCxjb3N0Q2VudGVyKEZVTEwpLHB1cmNoYXNlT3JkZXJOdW1iZXIscGF5bWVudFR5cGUsdXNlcicsXG4gICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlckRldGFpbHNIaXN0b3J5OlxuICAgICAgICAgICd1c2Vycy8ke3VzZXJJZH0vcmVwbGVuaXNobWVudE9yZGVycy8ke3JlcGxlbmlzaG1lbnRPcmRlckNvZGV9L29yZGVycycsXG4gICAgICAgIGNhbmNlbFJlcGxlbmlzaG1lbnRPcmRlcjpcbiAgICAgICAgICAndXNlcnMvJHt1c2VySWR9L3JlcGxlbmlzaG1lbnRPcmRlcnMvJHtyZXBsZW5pc2htZW50T3JkZXJDb2RlfT9maWVsZHM9RlVMTCxjb3N0Q2VudGVyKEZVTEwpLHB1cmNoYXNlT3JkZXJOdW1iZXIscGF5bWVudFR5cGUsdXNlcicsXG4gICAgICAgIHJlcGxlbmlzaG1lbnRPcmRlckhpc3Rvcnk6XG4gICAgICAgICAgJ3VzZXJzLyR7dXNlcklkfS9yZXBsZW5pc2htZW50T3JkZXJzP2ZpZWxkcz1GVUxMLHJlcGxlbmlzaG1lbnRPcmRlcnMoRlVMTCwgcHVyY2hhc2VPcmRlck51bWJlciknLFxuICAgICAgfSxcbiAgICB9LFxuICB9LFxufTtcbiJdfQ==