import { ChangeDetectionStrategy, Component, HostBinding, HostListener, TemplateRef, } from '@angular/core';
import { NavigationStart } from '@angular/router';
import { filter } from 'rxjs/operators';
import { PopoverEvent } from './popover.model';
import { ICON_TYPE } from '../../../cms-components/misc/icon/icon.model';
import * as i0 from "@angular/core";
import * as i1 from "../../services/positioning/positioning.service";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/router";
import * as i4 from "../../../cms-components/misc/icon/icon.component";
import * as i5 from "../../../layout/a11y/keyboard-focus/focus.directive";
import * as i6 from "@angular/common";
export class PopoverComponent {
    constructor(positioningService, winRef, changeDetectionRef, renderer, router) {
        this.positioningService = positioningService;
        this.winRef = winRef;
        this.changeDetectionRef = changeDetectionRef;
        this.renderer = renderer;
        this.router = router;
        /**
         * Icon types for close button icon.
         */
        this.iconTypes = ICON_TYPE;
    }
    /**
     * Listens for click inside popover component wrapper.
     */
    insideClick() {
        this.eventSubject.next(PopoverEvent.INSIDE_CLICK);
    }
    /**
     * Listens for every document click and ignores clicks
     * inside component.
     */
    outsideClick(event) {
        if (!this.isClickedOnPopover(event) && !this.isClickedOnDirective(event)) {
            this.eventSubject.next(PopoverEvent.OUTSIDE_CLICK);
        }
    }
    /**
     * Listens for `escape` keydown event.
     */
    escapeKeydown() {
        this.eventSubject.next(PopoverEvent.ESCAPE_KEYDOWN);
    }
    isClickedOnPopover(event) {
        return this.popoverInstance.location.nativeElement.contains(event.target);
    }
    isClickedOnDirective(event) {
        return this.triggerElement.nativeElement.contains(event.target);
    }
    /**
     * Emits close event trigger.
     */
    close(event) {
        event.preventDefault();
        if (event instanceof MouseEvent) {
            this.eventSubject.next(PopoverEvent.CLOSE_BUTTON_CLICK);
        }
        else {
            this.eventSubject.next(PopoverEvent.CLOSE_BUTTON_KEYDOWN);
        }
    }
    /**
     * Method uses `Renderer2` service to listen window scroll event.
     *
     * Registered only if property `positionOnScroll` is set to `true`.
     */
    triggerScrollEvent() {
        this.scrollEventUnlistener = this.renderer.listen(this.winRef.nativeWindow, 'scroll', () => this.positionPopover());
    }
    /**
     * Method uses positioning service calculation and based on that
     * updates class name for popover component instance.
     */
    positionPopover() {
        this.popoverClass = this.positioningService.positionElements(this.triggerElement.nativeElement, this.popoverInstance.location.nativeElement, this.positioningService.getPositioningClass(this.position, this.autoPositioning), this.appendToBody);
        this.changeDetectionRef.markForCheck();
        this.baseClass = `${this.customClass} ${this.popoverClass} opened`;
    }
    ngOnInit() {
        this.isTemplate = this.content instanceof TemplateRef;
        if (!this.customClass)
            this.customClass = 'cx-popover';
        if (!this.position)
            this.position = 'top';
        if (this.autoPositioning === undefined)
            this.autoPositioning = true;
        this.baseClass = `${this.customClass}`;
        this.resizeSub = this.winRef.resize$.subscribe(() => {
            this.positionPopover();
        });
        this.routeChangeSub = this.router.events
            .pipe(filter((event) => event instanceof NavigationStart))
            .subscribe(() => {
            this.eventSubject.next(PopoverEvent.ROUTE_CHANGE);
        });
        if (this.positionOnScroll) {
            this.triggerScrollEvent();
        }
    }
    ngAfterViewChecked() {
        this.positionPopover();
    }
    ngOnDestroy() {
        if (this.resizeSub) {
            this.resizeSub.unsubscribe();
        }
        if (this.routeChangeSub) {
            this.routeChangeSub.unsubscribe();
        }
        if (this.scrollEventUnlistener) {
            this.scrollEventUnlistener();
        }
    }
}
PopoverComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PopoverComponent, deps: [{ token: i1.PositioningService }, { token: i2.WindowRef }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i3.Router }], target: i0.ɵɵFactoryTarget.Component });
PopoverComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PopoverComponent, selector: "cx-popover", host: { listeners: { "click": "insideClick()", "document:click": "outsideClick($event)", "keydown.escape": "escapeKeydown()" }, properties: { "className": "this.baseClass" } }, ngImport: i0, template: "<div class=\"arrow\"></div>\n<div class=\"popover-body\" [cxFocus]=\"focusConfig\">\n  <div class=\"cx-close-row\">\n    <button\n      *ngIf=\"displayCloseButton\"\n      type=\"button\"\n      class=\"close\"\n      (keydown.enter)=\"close($event)\"\n      (keydown.space)=\"close($event)\"\n      (click)=\"close($event)\"\n    >\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </button>\n  </div>\n  <ng-container *ngIf=\"isTemplate\">\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n  </ng-container>\n  <span *ngIf=\"!isTemplate\">{{ content }}</span>\n</div>\n", components: [{ type: i4.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PopoverComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-popover',
                    templateUrl: './popover.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.PositioningService }, { type: i2.WindowRef }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i3.Router }]; }, propDecorators: { baseClass: [{
                type: HostBinding,
                args: ['className']
            }], insideClick: [{
                type: HostListener,
                args: ['click']
            }], outsideClick: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], escapeKeydown: [{
                type: HostListener,
                args: ['keydown.escape']
            }] } });
//# sourceMappingURL=data:application/json;base64,