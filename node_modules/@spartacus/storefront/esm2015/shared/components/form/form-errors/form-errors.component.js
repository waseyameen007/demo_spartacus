import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import { isObject } from '@spartacus/core';
import { map, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@spartacus/core";
/**
 * Renders translated form errors for a given form control, based on its `errors` property.
 *
 * The translation key consists of the optional input `prefix`
 * concatenated with the error key.
 *
 * And the translation params object consist of the error details
 * (if only it's an object) merged with the optional input object `translationParams`.
 */
export class FormErrorsComponent {
    constructor() {
        /**
         * Prefix prepended to the translation key.
         */
        this.prefix = 'formErrors';
    }
    set control(control) {
        this._control = control;
        this.errorsDetails$ = control === null || control === void 0 ? void 0 : control.statusChanges.pipe(startWith({}), map(() => control.errors || {}), map((errors) => Object.entries(errors).filter(([_key, details]) => details)));
        this.errors$ = this.errorsDetails$.pipe(map((errors) => errors.map(([key, _details]) => key)));
    }
    get control() {
        return this._control;
    }
    /**
     * Returns translation params composed of
     * the argument `errorDetails` (if only is an object) merged with
     * the component input object `translationParams`.
     *
     * In case of a conflicting object key, the value from
     * `translationParams` takes precedence.
     */
    getTranslationParams(errorDetails) {
        errorDetails = isObject(errorDetails) ? errorDetails : {};
        return Object.assign(Object.assign({}, errorDetails), this.translationParams);
    }
    get invalid() {
        var _a;
        return (_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid;
    }
    get dirty() {
        var _a;
        return (_a = this.control) === null || _a === void 0 ? void 0 : _a.dirty;
    }
    get touched() {
        var _a;
        return (_a = this.control) === null || _a === void 0 ? void 0 : _a.touched;
    }
}
FormErrorsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormErrorsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
FormErrorsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: FormErrorsComponent, selector: "cx-form-errors", inputs: { prefix: "prefix", translationParams: "translationParams", control: "control" }, host: { properties: { "class.control-invalid": "this.invalid", "class.control-dirty": "this.dirty", "class.control-touched": "this.touched" } }, ngImport: i0, template: "<p *ngFor=\"let error of errorsDetails$ | async\">\n  {{ prefix + '.' + error[0] | cxTranslate: getTranslationParams(error[1]) }}\n</p>\n", directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i1.AsyncPipe, "cxTranslate": i2.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FormErrorsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-form-errors',
                    templateUrl: './form-errors.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { prefix: [{
                type: Input
            }], translationParams: [{
                type: Input
            }], control: [{
                type: Input
            }], invalid: [{
                type: HostBinding,
                args: ['class.control-invalid']
            }], dirty: [{
                type: HostBinding,
                args: ['class.control-dirty']
            }], touched: [{
                type: HostBinding,
                args: ['class.control-touched']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1lcnJvcnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9zaGFyZWQvY29tcG9uZW50cy9mb3JtL2Zvcm0tZXJyb3JzL2Zvcm0tZXJyb3JzLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvc2hhcmVkL2NvbXBvbmVudHMvZm9ybS9mb3JtLWVycm9ycy9mb3JtLWVycm9ycy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxXQUFXLEVBQ1gsS0FBSyxHQUNOLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRWhEOzs7Ozs7OztHQVFHO0FBTUgsTUFBTSxPQUFPLG1CQUFtQjtJQUxoQztRQW9CRTs7V0FFRztRQUNNLFdBQU0sR0FBRyxZQUFZLENBQUM7S0FtRGhDO0lBM0NDLElBQ0ksT0FBTyxDQUFDLE9BQW9CO1FBQzlCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBRXhCLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLGFBQWEsQ0FBQyxJQUFJLENBQy9DLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFDYixHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsRUFDL0IsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDYixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FDNUQsQ0FDRixDQUFDO1FBRUYsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDckMsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3RELENBQUM7SUFDSixDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsb0JBQW9CLENBQUMsWUFBa0I7UUFDckMsWUFBWSxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDMUQsdUNBQVksWUFBWSxHQUFLLElBQUksQ0FBQyxpQkFBaUIsRUFBRztJQUN4RCxDQUFDO0lBRUQsSUFBMEMsT0FBTzs7UUFDL0MsT0FBTyxNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLE9BQU8sQ0FBQztJQUMvQixDQUFDO0lBQ0QsSUFBd0MsS0FBSzs7UUFDM0MsT0FBTyxNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLEtBQUssQ0FBQztJQUM3QixDQUFDO0lBQ0QsSUFBMEMsT0FBTzs7UUFDL0MsT0FBTyxNQUFBLElBQUksQ0FBQyxPQUFPLDBDQUFFLE9BQU8sQ0FBQztJQUMvQixDQUFDOztnSEFwRVUsbUJBQW1CO29HQUFuQixtQkFBbUIsaVNDekJoQywySUFHQTsyRkRzQmEsbUJBQW1CO2tCQUwvQixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFdBQVcsRUFBRSw4QkFBOEI7b0JBQzNDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNoRDs4QkFtQlUsTUFBTTtzQkFBZCxLQUFLO2dCQU1OLGlCQUFpQjtzQkFEaEIsS0FBSztnQkFJRixPQUFPO3NCQURWLEtBQUs7Z0JBa0NvQyxPQUFPO3NCQUFoRCxXQUFXO3VCQUFDLHVCQUF1QjtnQkFHSSxLQUFLO3NCQUE1QyxXQUFXO3VCQUFDLHFCQUFxQjtnQkFHUSxPQUFPO3NCQUFoRCxXQUFXO3VCQUFDLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IGlzT2JqZWN0IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3RhcnRXaXRoIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIFJlbmRlcnMgdHJhbnNsYXRlZCBmb3JtIGVycm9ycyBmb3IgYSBnaXZlbiBmb3JtIGNvbnRyb2wsIGJhc2VkIG9uIGl0cyBgZXJyb3JzYCBwcm9wZXJ0eS5cbiAqXG4gKiBUaGUgdHJhbnNsYXRpb24ga2V5IGNvbnNpc3RzIG9mIHRoZSBvcHRpb25hbCBpbnB1dCBgcHJlZml4YFxuICogY29uY2F0ZW5hdGVkIHdpdGggdGhlIGVycm9yIGtleS5cbiAqXG4gKiBBbmQgdGhlIHRyYW5zbGF0aW9uIHBhcmFtcyBvYmplY3QgY29uc2lzdCBvZiB0aGUgZXJyb3IgZGV0YWlsc1xuICogKGlmIG9ubHkgaXQncyBhbiBvYmplY3QpIG1lcmdlZCB3aXRoIHRoZSBvcHRpb25hbCBpbnB1dCBvYmplY3QgYHRyYW5zbGF0aW9uUGFyYW1zYC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtZm9ybS1lcnJvcnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1lcnJvcnMuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUVycm9yc0NvbXBvbmVudCB7XG4gIF9jb250cm9sOiBGb3JtQ29udHJvbDtcblxuICAvKipcbiAgICogQGRlcHJlY2F0ZWQgc2luY2UgNC4xIC0gdXNlIGBlcnJvcnNEZXRhaWxzJGAgaW5zdGVhZCwgd2hpY2ggY29udGFpbnMgbm90IG9ubHlcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVycm9yIGtleSwgYnV0IGFsc28gdGhlIGVycm9yIGRldGFpbHNcbiAgICovXG4gIGVycm9ycyQ6IE9ic2VydmFibGU8c3RyaW5nW10+O1xuXG4gIC8qKlxuICAgKiBFbWl0cyBhbiBhcnJheSBvZiBlcnJvcnMsIGVhY2ggcmVwcmVzZW50ZWQgYnkgYSB0dXBsZTpcbiAgICogdGhlIGVycm9yIGtleSBhbmQgZXJyb3IgZGV0YWlscy5cbiAgICovXG4gIGVycm9yc0RldGFpbHMkOiBPYnNlcnZhYmxlPEFycmF5PFtzdHJpbmcsIHN0cmluZ10+PjtcblxuICAvKipcbiAgICogUHJlZml4IHByZXBlbmRlZCB0byB0aGUgdHJhbnNsYXRpb24ga2V5LlxuICAgKi9cbiAgQElucHV0KCkgcHJlZml4ID0gJ2Zvcm1FcnJvcnMnO1xuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGlvbiBwYXJhbXMgdG8gZW5yaWNoIHRoZSBlcnJvciBkZXRhaWxzIG9iamVjdC5cbiAgICovXG4gIEBJbnB1dCgpXG4gIHRyYW5zbGF0aW9uUGFyYW1zOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBjb250cm9sKGNvbnRyb2w6IEZvcm1Db250cm9sKSB7XG4gICAgdGhpcy5fY29udHJvbCA9IGNvbnRyb2w7XG5cbiAgICB0aGlzLmVycm9yc0RldGFpbHMkID0gY29udHJvbD8uc3RhdHVzQ2hhbmdlcy5waXBlKFxuICAgICAgc3RhcnRXaXRoKHt9KSxcbiAgICAgIG1hcCgoKSA9PiBjb250cm9sLmVycm9ycyB8fCB7fSksXG4gICAgICBtYXAoKGVycm9ycykgPT5cbiAgICAgICAgT2JqZWN0LmVudHJpZXMoZXJyb3JzKS5maWx0ZXIoKFtfa2V5LCBkZXRhaWxzXSkgPT4gZGV0YWlscylcbiAgICAgIClcbiAgICApO1xuXG4gICAgdGhpcy5lcnJvcnMkID0gdGhpcy5lcnJvcnNEZXRhaWxzJC5waXBlKFxuICAgICAgbWFwKChlcnJvcnMpID0+IGVycm9ycy5tYXAoKFtrZXksIF9kZXRhaWxzXSkgPT4ga2V5KSlcbiAgICApO1xuICB9XG5cbiAgZ2V0IGNvbnRyb2woKTogRm9ybUNvbnRyb2wge1xuICAgIHJldHVybiB0aGlzLl9jb250cm9sO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJhbnNsYXRpb24gcGFyYW1zIGNvbXBvc2VkIG9mXG4gICAqIHRoZSBhcmd1bWVudCBgZXJyb3JEZXRhaWxzYCAoaWYgb25seSBpcyBhbiBvYmplY3QpIG1lcmdlZCB3aXRoXG4gICAqIHRoZSBjb21wb25lbnQgaW5wdXQgb2JqZWN0IGB0cmFuc2xhdGlvblBhcmFtc2AuXG4gICAqXG4gICAqIEluIGNhc2Ugb2YgYSBjb25mbGljdGluZyBvYmplY3Qga2V5LCB0aGUgdmFsdWUgZnJvbVxuICAgKiBgdHJhbnNsYXRpb25QYXJhbXNgIHRha2VzIHByZWNlZGVuY2UuXG4gICAqL1xuICBnZXRUcmFuc2xhdGlvblBhcmFtcyhlcnJvckRldGFpbHM/OiBhbnkpOiBvYmplY3Qge1xuICAgIGVycm9yRGV0YWlscyA9IGlzT2JqZWN0KGVycm9yRGV0YWlscykgPyBlcnJvckRldGFpbHMgOiB7fTtcbiAgICByZXR1cm4geyAuLi5lcnJvckRldGFpbHMsIC4uLnRoaXMudHJhbnNsYXRpb25QYXJhbXMgfTtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuY29udHJvbC1pbnZhbGlkJykgZ2V0IGludmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbD8uaW52YWxpZDtcbiAgfVxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNvbnRyb2wtZGlydHknKSBnZXQgZGlydHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udHJvbD8uZGlydHk7XG4gIH1cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jb250cm9sLXRvdWNoZWQnKSBnZXQgdG91Y2hlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5jb250cm9sPy50b3VjaGVkO1xuICB9XG59XG4iLCI8cCAqbmdGb3I9XCJsZXQgZXJyb3Igb2YgZXJyb3JzRGV0YWlscyQgfCBhc3luY1wiPlxuICB7eyBwcmVmaXggKyAnLicgKyBlcnJvclswXSB8IGN4VHJhbnNsYXRlOiBnZXRUcmFuc2xhdGlvblBhcmFtcyhlcnJvclsxXSkgfX1cbjwvcD5cbiJdfQ==