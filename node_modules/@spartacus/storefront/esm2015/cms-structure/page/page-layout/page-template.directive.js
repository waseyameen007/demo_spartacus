import { Directive, Input, Optional, } from '@angular/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./page-layout.service";
/**
 * Directive that Adds a style class to the host element based on the cms page
 * template. The CMS page template is driven by the CMS structure, which is configurable
 * in the backend.
 *
 * The style class is added to the host element of the directive. The host element is resolved
 * from the `elementRef`, or, in case the directive is used in an `ng-template`, by the
 * `TemplateRef`.
 *
 * An example of the usage is given below:
 *
 * ```html
 * <cx-storefront class="LandingPageTemplate">
 *   <ng-template cxPageTemplateStyle>...</ng-template>
 * <cx-storefront>
 * ```
 *
 * The style class can also be provided by an input:
 *
 * ```html
 * <ng-template [cxPageTemplateStyle]="pageTemplateName">
 * ```
 *
 */
export class PageTemplateDirective {
    constructor(pageLayoutService, elementRef, templateRef, cd) {
        this.pageLayoutService = pageLayoutService;
        this.elementRef = elementRef;
        this.templateRef = templateRef;
        this.cd = cd;
        // Maintains the page template subscription
        this.subscription = new Subscription();
    }
    /**
     * Adds a style class to the host element based on the cms page template, unless
     * the class is given as an input.
     *
     * The host element is either the actual host, or the parent element in case this
     * is used inside an `ng-template`.
     */
    set setTemplate(template) {
        if (template && template !== '') {
            this.useTemplateFromInput = true;
            this.addStyleClass(template);
        }
        else if (this.useTemplateFromInput) {
            // we only clear the template if it has been provided by the input before
            this.clear();
        }
    }
    ngOnInit() {
        if (!this.useTemplateFromInput) {
            this.subscription.add(this.pageLayoutService.templateName$.subscribe((template) => this.addStyleClass(template)));
        }
    }
    /**
     * Adds the page template as a style class to the given element. If any
     * page template was added before, we clean it up.
     *
     * We'll not use hostBinding for the style class, as it will potential drop
     * an existing class name on the host. This is why we need to work with
     * the lower level change detection api.
     */
    addStyleClass(template, el) {
        this.clear(el);
        if (template) {
            this.currentTemplate = template;
            (el !== null && el !== void 0 ? el : this.host).classList.add(this.currentTemplate);
            this.cd.markForCheck();
        }
    }
    /**
     * Cleans up the class host binding, if a template class was assigned before.
     */
    clear(el) {
        var _a;
        if (this.currentTemplate) {
            (_a = (el !== null && el !== void 0 ? el : this.host).classList) === null || _a === void 0 ? void 0 : _a.remove(this.currentTemplate);
            this.cd.markForCheck();
        }
    }
    /**
     * Returns the host element (`HTMLElement`).
     *
     * If the directive is used on an `ng-template`, we take the parent element,
     * to ensure that we're not ending up with a comment.
     */
    get host() {
        return !!this.templateRef
            ? this.templateRef.elementRef.nativeElement.parentElement
            : this.elementRef.nativeElement;
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
PageTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PageTemplateDirective, deps: [{ token: i1.PageLayoutService }, { token: i0.ElementRef }, { token: i0.TemplateRef, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
PageTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.0.5", type: PageTemplateDirective, selector: "[cxPageTemplateStyle]", inputs: { setTemplate: ["cxPageTemplateStyle", "setTemplate"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PageTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[cxPageTemplateStyle]',
                }]
        }], ctorParameters: function () { return [{ type: i1.PageLayoutService }, { type: i0.ElementRef }, { type: i0.TemplateRef, decorators: [{
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { setTemplate: [{
                type: Input,
                args: ['cxPageTemplateStyle']
            }] } });
//# sourceMappingURL=data:application/json;base64,