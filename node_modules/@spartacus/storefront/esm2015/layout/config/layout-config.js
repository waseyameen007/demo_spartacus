import { Injectable } from '@angular/core';
import { Config } from '@spartacus/core';
import * as i0 from "@angular/core";
/**
 * The `BREAKPOINT` typing defaults to five default screen names:
 * xs, sm, md, lg, xl.
 *
 * The type can be extended to allow for custom screens, such as XLL or `tablet`.
 *
 * While the screen names are fully configurable, other features might have
 * pre-configured layout settings per screen. Page layouts or table configurations,
 * for example, are driven by screen size. In case you change the screen size or
 * introduce new screen names, you might loose out on these configurations.
 */
export var BREAKPOINT;
(function (BREAKPOINT) {
    BREAKPOINT["xs"] = "xs";
    BREAKPOINT["sm"] = "sm";
    BREAKPOINT["md"] = "md";
    BREAKPOINT["lg"] = "lg";
    BREAKPOINT["xl"] = "xl";
})(BREAKPOINT || (BREAKPOINT = {}));
/**
 * The LayoutConfig supports the configuration of page slots by page templates
 * or page sections, such as headers and footers. The configuration also supports
 * adaptive design per breakpoint (not per device type), so that the DOM is (re)rendered
 * por a given breakpoint.
 */
export class LayoutConfig {
}
LayoutConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: LayoutConfig, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LayoutConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: LayoutConfig, providedIn: 'root', useExisting: Config });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: LayoutConfig, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useExisting: Config,
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF5b3V0LWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvbGF5b3V0L2NvbmZpZy9sYXlvdXQtY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBd0IsTUFBTSxpQkFBaUIsQ0FBQzs7QUFHL0Q7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sQ0FBTixJQUFZLFVBTVg7QUFORCxXQUFZLFVBQVU7SUFDcEIsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7SUFDVCx1QkFBUyxDQUFBO0lBQ1QsdUJBQVMsQ0FBQTtJQUNULHVCQUFTLENBQUE7QUFDWCxDQUFDLEVBTlcsVUFBVSxLQUFWLFVBQVUsUUFNckI7QUF3REQ7Ozs7O0dBS0c7QUFLSCxNQUFNLE9BQWdCLFlBQVk7O3lHQUFaLFlBQVk7NkdBQVosWUFBWSxjQUhwQixNQUFNLGVBQ0wsTUFBTTsyRkFFQyxZQUFZO2tCQUpqQyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO29CQUNsQixXQUFXLEVBQUUsTUFBTTtpQkFDcEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb25maWcsIERlZmVyTG9hZGluZ1N0cmF0ZWd5IH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IExhdW5jaENvbmZpZyB9IGZyb20gJy4uL2xhdW5jaC1kaWFsb2cvaW5kZXgnO1xuXG4vKipcbiAqIFRoZSBgQlJFQUtQT0lOVGAgdHlwaW5nIGRlZmF1bHRzIHRvIGZpdmUgZGVmYXVsdCBzY3JlZW4gbmFtZXM6XG4gKiB4cywgc20sIG1kLCBsZywgeGwuXG4gKlxuICogVGhlIHR5cGUgY2FuIGJlIGV4dGVuZGVkIHRvIGFsbG93IGZvciBjdXN0b20gc2NyZWVucywgc3VjaCBhcyBYTEwgb3IgYHRhYmxldGAuXG4gKlxuICogV2hpbGUgdGhlIHNjcmVlbiBuYW1lcyBhcmUgZnVsbHkgY29uZmlndXJhYmxlLCBvdGhlciBmZWF0dXJlcyBtaWdodCBoYXZlXG4gKiBwcmUtY29uZmlndXJlZCBsYXlvdXQgc2V0dGluZ3MgcGVyIHNjcmVlbi4gUGFnZSBsYXlvdXRzIG9yIHRhYmxlIGNvbmZpZ3VyYXRpb25zLFxuICogZm9yIGV4YW1wbGUsIGFyZSBkcml2ZW4gYnkgc2NyZWVuIHNpemUuIEluIGNhc2UgeW91IGNoYW5nZSB0aGUgc2NyZWVuIHNpemUgb3JcbiAqIGludHJvZHVjZSBuZXcgc2NyZWVuIG5hbWVzLCB5b3UgbWlnaHQgbG9vc2Ugb3V0IG9uIHRoZXNlIGNvbmZpZ3VyYXRpb25zLlxuICovXG5leHBvcnQgZW51bSBCUkVBS1BPSU5UIHtcbiAgeHMgPSAneHMnLFxuICBzbSA9ICdzbScsXG4gIG1kID0gJ21kJyxcbiAgbGcgPSAnbGcnLFxuICB4bCA9ICd4bCcsXG59XG5cbmV4cG9ydCB0eXBlIExheW91dFNlY3Rpb25zID1cbiAgfCAnaGVhZGVyJ1xuICB8ICdmb290ZXInXG4gIHwgJ0xhbmRpbmdQYWdlMlRlbXBsYXRlJ1xuICB8IHN0cmluZztcblxuZXhwb3J0IHR5cGUgU2xvdENvbmZpZyA9IHtcbiAgLyoqIFRoZSBjbXMgcGFnZSBzbG90cyBhcmUgbWFwcGVkIGJ5IHRoZSBgc2xvdC5wb3NpdGlvbmAuICovXG4gIHNsb3RzPzogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFRoZSBwYWdlIGZvbGQgaWRlbnRpZmllcyB0aGUgbGFzdCBleHBlY3RlZCBwYWdlIHNsb3QgYWJvdmUtdGhlLWZvbGQuXG4gICAqIEl0J3MgcGVyZmVjdGx5IGZpbmUgdG8gc3BlY2lmeSB0aGlzIGJ5IGluZGljYXRpb24sIGJ1dCBrZWVwIGluIG1pbmQgdGhhdFxuICAgKiBhIG1vcmUgcHJlY2lzZSBpbmRpY2F0aW9uIHdpbGwgZ2FpbiBhIG1vcmUgcG9zaXRpdmUgaW1wYWN0IG9uIHBlcmZvcm1hbmNlLlxuICAgKi9cbiAgcGFnZUZvbGQ/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBTbG90R3JvdXAgPSB7XG4gIC8qKiBUaGUgcGFnZSBzbG90IGNvbmZpZ3VyYXRpb24gZm9yIGxhcmdlIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQubGddPzogU2xvdENvbmZpZztcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3IgbWVkaXVtIHNjcmVlbnMgKi9cbiAgW0JSRUFLUE9JTlQubWRdPzogU2xvdENvbmZpZztcbiAgLyoqIFRoZSBwYWdlIHNsb3QgY29uZmlndXJhdGlvbiBmb3Igc21hbGwgc2NyZWVucyAqL1xuICBbQlJFQUtQT0lOVC5zbV0/OiBTbG90Q29uZmlnO1xuICAvKiogVGhlIHBhZ2Ugc2xvdCBjb25maWd1cmF0aW9uIGZvciBleHRyYSBzbWFsbCBzY3JlZW5zICovXG4gIFtCUkVBS1BPSU5ULnhzXT86IFNsb3RDb25maWc7XG59O1xuXG5leHBvcnQgdHlwZSBMYXlvdXRTbG90Q29uZmlnID0ge1xuICBbc2VjdGlvbiBpbiBMYXlvdXRTZWN0aW9uc106IFNsb3RDb25maWcgfCBTbG90R3JvdXAgfCBMYXlvdXRTbG90Q29uZmlnO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBCcmVha1BvaW50IHtcbiAgLyoqXG4gICAqIFRoZSBtaW5pbXVtIHNjcmVlbiB3aWR0aC5cbiAgICovXG4gIG1pbj86IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIG1pbmltdW0gc2NyZWVuIHdpZHRoLlxuICAgKi9cbiAgbWF4PzogbnVtYmVyO1xufVxuXG4vKipcbiAqIFRoZSBgTGF5b3V0QnJlYWtQb2ludHNgIGNhbiBiZSB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgc2l6ZSBvZiBhIHNwZWNpZmljIHNjcmVlbi4gVGhlIHNjcmVlblxuICogYXJlIGRlZmluZWQgYnkgYnJlYWtwb2ludHMsIHdpdGggYSBtaW4gYW5kL29yIG1heCB2YWx1ZS4gVGhlIGJyZWFrcG9pbnQgc2l6ZSBpcyBpbiBwaXhlbHMsXG4gKiBoZW5jZSBhIG51bWVyaWMgdmFsdWUgaXMgZXhwZWN0ZWQuXG4gKi9cbmV4cG9ydCB0eXBlIExheW91dEJyZWFrUG9pbnRzID0ge1xuICBbdCBpbiBCUkVBS1BPSU5UXT86IG51bWJlciB8IEJyZWFrUG9pbnQ7XG59O1xuXG4vKipcbiAqIFRoZSBMYXlvdXRDb25maWcgc3VwcG9ydHMgdGhlIGNvbmZpZ3VyYXRpb24gb2YgcGFnZSBzbG90cyBieSBwYWdlIHRlbXBsYXRlc1xuICogb3IgcGFnZSBzZWN0aW9ucywgc3VjaCBhcyBoZWFkZXJzIGFuZCBmb290ZXJzLiBUaGUgY29uZmlndXJhdGlvbiBhbHNvIHN1cHBvcnRzXG4gKiBhZGFwdGl2ZSBkZXNpZ24gcGVyIGJyZWFrcG9pbnQgKG5vdCBwZXIgZGV2aWNlIHR5cGUpLCBzbyB0aGF0IHRoZSBET00gaXMgKHJlKXJlbmRlcmVkXG4gKiBwb3IgYSBnaXZlbiBicmVha3BvaW50LlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290JyxcbiAgdXNlRXhpc3Rpbmc6IENvbmZpZyxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5b3V0Q29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBicmVha3BvaW50IGNvbmZpZ3VyYXRpb24gaXMgdXNlZCB0byBkZWZpbmVkIHZhcmlvdXMgc2NyZWVucy4gQSBzcGVjaWZpYyBzY3JlZW4gbmFtZSBjYW5cbiAgICogYmUgdXNlZCB0byBmdXJ0aGVyIGNvbmZpZ3VyZSBjZXJ0YWluIGZlYXR1cmVzLCBzdWNoIGFzIHRoZSBvdmVyYWxsIGxheW91dCBvciBzcGVjaWZpY1xuICAgKiBjb21wb25lbnQgY29uZmlndXJhdGlvbnMuXG4gICAqL1xuICBicmVha3BvaW50cz86IExheW91dEJyZWFrUG9pbnRzO1xuXG4gIGxheW91dFNsb3RzPzogTGF5b3V0U2xvdENvbmZpZztcblxuICAvKipcbiAgICogRGVmZXJyZWQgbG9hZGluZyBpcyBhIHRlY2huaXF1ZSB0byBob2xkIG9mIHdpdGggdGhlIGxvYWRpbmcgLyBjcmVhdGlvblxuICAgKiBvZiBET00gZWxlbWVudHMgd2hpY2ggYXJlIG5vdCBub3QgaW4gdGhlIGluaXRpYWwgdmlldyBwb3J0LlxuICAgKiBUaGlzIHRlY2huaXF1ZSB3aWwgaW5jcmVhc2UgcGVyZm9ybWFuY2UuXG4gICAqL1xuICBkZWZlcnJlZExvYWRpbmc/OiB7XG4gICAgLyoqXG4gICAgICogVGhlIGdsb2JhbCBzdHJhdGVneSB3aWxsIGJlIHVzZWQgYXMgYSBmYWxsYmFjayBzdHJhdGVneSBmb3IgYWxsIERPTSBjcmVhdGlvbixcbiAgICAgKiBidXQgY2FuIGJlIG92ZXJyaWRkZW4gYnkgbG9jYWwgY29uZmlndXJhdGlvbiwgaS5lLiBmb3IgY21zIGNvbXBvbmVudHMuXG4gICAgICovXG4gICAgc3RyYXRlZ3k/OiBEZWZlckxvYWRpbmdTdHJhdGVneTtcbiAgICAvKipcbiAgICAgKiBUaGUgaW50ZXJzZWN0aW9uIG1hcmdpbiBjb250YWlucyB0aGUgb2Zmc2V0IHVzZWQgYnkgdGhlIEludGVyc2VjdGlvbiBPYnNlcnZlclxuICAgICAqIHRvIG9ic2VydmUgZWxlbWVudHMgb3V0c2lkZSB0aGUgdmlldyBwb3J0LlxuICAgICAqXG4gICAgICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9JbnRlcnNlY3Rpb25PYnNlcnZlci9yb290TWFyZ2luXG4gICAgICovXG4gICAgaW50ZXJzZWN0aW9uTWFyZ2luPzogc3RyaW5nO1xuICB9O1xuXG4gIGxhdW5jaD86IExhdW5jaENvbmZpZztcbn1cblxuZGVjbGFyZSBtb2R1bGUgJ0BzcGFydGFjdXMvY29yZScge1xuICBpbnRlcmZhY2UgQ29uZmlnIGV4dGVuZHMgTGF5b3V0Q29uZmlnIHt9XG59XG4iXX0=