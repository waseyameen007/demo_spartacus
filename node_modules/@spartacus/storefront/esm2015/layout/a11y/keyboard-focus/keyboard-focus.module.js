import { CommonModule } from '@angular/common';
import { APP_INITIALIZER, NgModule } from '@angular/core';
import { RouterModule } from '@angular/router';
import { ConfigModule, provideDefaultConfig } from '@spartacus/core';
import { defaultKeyboardFocusConfig } from './config/default-keyboard-focus.config';
import { FocusDirective } from './focus.directive';
import { OnNavigateFocusService } from './on-navigate/on-navigate-focus.service';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
const directives = [
    // PersistFocusDirective,
    // VisibleFocusDirective,
    // BlockFocusDirective,
    // AutoFocusDirective,
    // EscapeFocusDirective,
    // LockFocusDirective,
    // TrapFocusDirective,
    // TabFocusDirective,
    FocusDirective,
];
/**
 * @deprecated since 4.2, refer to spartacus issues (#13762)
 * Remove the router module as well as it was part of the old initiative for scroll positiioning
 */
export class KeyboardFocusModule {
}
KeyboardFocusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: KeyboardFocusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
KeyboardFocusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: KeyboardFocusModule, declarations: [
        // PersistFocusDirective,
        // VisibleFocusDirective,
        // BlockFocusDirective,
        // AutoFocusDirective,
        // EscapeFocusDirective,
        // LockFocusDirective,
        // TrapFocusDirective,
        // TabFocusDirective,
        FocusDirective], imports: [CommonModule, i1.ConfigModule, RouterModule], exports: [
        // PersistFocusDirective,
        // VisibleFocusDirective,
        // BlockFocusDirective,
        // AutoFocusDirective,
        // EscapeFocusDirective,
        // LockFocusDirective,
        // TrapFocusDirective,
        // TabFocusDirective,
        FocusDirective] });
KeyboardFocusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: KeyboardFocusModule, providers: [
        provideDefaultConfig(defaultKeyboardFocusConfig),
        {
            provide: APP_INITIALIZER,
            useFactory: keyboardFocusFactory,
            deps: [OnNavigateFocusService],
            multi: true,
        },
    ], imports: [[
            CommonModule,
            ConfigModule.withConfig(defaultKeyboardFocusConfig),
            RouterModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: KeyboardFocusModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ConfigModule.withConfig(defaultKeyboardFocusConfig),
                        RouterModule,
                    ],
                    declarations: [...directives],
                    providers: [
                        provideDefaultConfig(defaultKeyboardFocusConfig),
                        {
                            provide: APP_INITIALIZER,
                            useFactory: keyboardFocusFactory,
                            deps: [OnNavigateFocusService],
                            multi: true,
                        },
                    ],
                    exports: [...directives],
                }]
        }] });
/**
 *  @deprecated since 4.2, refer to spartacus issues (#13762)
 *  Start keyboard focus services on app initialization.
 */
export function keyboardFocusFactory(onNavigateFocusService) {
    const isReady = () => onNavigateFocusService.initializeWithConfig();
    return isReady;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2V5Ym9hcmQtZm9jdXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9sYXlvdXQvYTExeS9rZXlib2FyZC1mb2N1cy9rZXlib2FyZC1mb2N1cy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsWUFBWSxFQUFFLG9CQUFvQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDckUsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDcEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlDQUF5QyxDQUFDOzs7QUFFakYsTUFBTSxVQUFVLEdBQUc7SUFDakIseUJBQXlCO0lBQ3pCLHlCQUF5QjtJQUN6Qix1QkFBdUI7SUFDdkIsc0JBQXNCO0lBQ3RCLHdCQUF3QjtJQUN4QixzQkFBc0I7SUFDdEIsc0JBQXNCO0lBQ3RCLHFCQUFxQjtJQUNyQixjQUFjO0NBQ2YsQ0FBQztBQUVGOzs7R0FHRztBQW1CSCxNQUFNLE9BQU8sbUJBQW1COztnSEFBbkIsbUJBQW1CO2lIQUFuQixtQkFBbUI7UUFqQzlCLHlCQUF5QjtRQUN6Qix5QkFBeUI7UUFDekIsdUJBQXVCO1FBQ3ZCLHNCQUFzQjtRQUN0Qix3QkFBd0I7UUFDeEIsc0JBQXNCO1FBQ3RCLHNCQUFzQjtRQUN0QixxQkFBcUI7UUFDckIsY0FBYyxhQVNaLFlBQVksbUJBRVosWUFBWTtRQW5CZCx5QkFBeUI7UUFDekIseUJBQXlCO1FBQ3pCLHVCQUF1QjtRQUN2QixzQkFBc0I7UUFDdEIsd0JBQXdCO1FBQ3hCLHNCQUFzQjtRQUN0QixzQkFBc0I7UUFDdEIscUJBQXFCO1FBQ3JCLGNBQWM7aUhBeUJILG1CQUFtQixhQVhuQjtRQUNULG9CQUFvQixDQUFDLDBCQUEwQixDQUFDO1FBQ2hEO1lBQ0UsT0FBTyxFQUFFLGVBQWU7WUFDeEIsVUFBVSxFQUFFLG9CQUFvQjtZQUNoQyxJQUFJLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztZQUM5QixLQUFLLEVBQUUsSUFBSTtTQUNaO0tBQ0YsWUFkUTtZQUNQLFlBQVk7WUFDWixZQUFZLENBQUMsVUFBVSxDQUFDLDBCQUEwQixDQUFDO1lBQ25ELFlBQVk7U0FDYjsyRkFhVSxtQkFBbUI7a0JBbEIvQixRQUFRO21CQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3dCQUNaLFlBQVksQ0FBQyxVQUFVLENBQUMsMEJBQTBCLENBQUM7d0JBQ25ELFlBQVk7cUJBQ2I7b0JBQ0QsWUFBWSxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUM7b0JBQzdCLFNBQVMsRUFBRTt3QkFDVCxvQkFBb0IsQ0FBQywwQkFBMEIsQ0FBQzt3QkFDaEQ7NEJBQ0UsT0FBTyxFQUFFLGVBQWU7NEJBQ3hCLFVBQVUsRUFBRSxvQkFBb0I7NEJBQ2hDLElBQUksRUFBRSxDQUFDLHNCQUFzQixDQUFDOzRCQUM5QixLQUFLLEVBQUUsSUFBSTt5QkFDWjtxQkFDRjtvQkFDRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQztpQkFDekI7O0FBR0Q7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLG9CQUFvQixDQUNsQyxzQkFBOEM7SUFFOUMsTUFBTSxPQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsc0JBQXNCLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNwRSxPQUFPLE9BQU8sQ0FBQztBQUNqQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFQUF9JTklUSUFMSVpFUiwgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBDb25maWdNb2R1bGUsIHByb3ZpZGVEZWZhdWx0Q29uZmlnIH0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IGRlZmF1bHRLZXlib2FyZEZvY3VzQ29uZmlnIH0gZnJvbSAnLi9jb25maWcvZGVmYXVsdC1rZXlib2FyZC1mb2N1cy5jb25maWcnO1xuaW1wb3J0IHsgRm9jdXNEaXJlY3RpdmUgfSBmcm9tICcuL2ZvY3VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBPbk5hdmlnYXRlRm9jdXNTZXJ2aWNlIH0gZnJvbSAnLi9vbi1uYXZpZ2F0ZS9vbi1uYXZpZ2F0ZS1mb2N1cy5zZXJ2aWNlJztcblxuY29uc3QgZGlyZWN0aXZlcyA9IFtcbiAgLy8gUGVyc2lzdEZvY3VzRGlyZWN0aXZlLFxuICAvLyBWaXNpYmxlRm9jdXNEaXJlY3RpdmUsXG4gIC8vIEJsb2NrRm9jdXNEaXJlY3RpdmUsXG4gIC8vIEF1dG9Gb2N1c0RpcmVjdGl2ZSxcbiAgLy8gRXNjYXBlRm9jdXNEaXJlY3RpdmUsXG4gIC8vIExvY2tGb2N1c0RpcmVjdGl2ZSxcbiAgLy8gVHJhcEZvY3VzRGlyZWN0aXZlLFxuICAvLyBUYWJGb2N1c0RpcmVjdGl2ZSxcbiAgRm9jdXNEaXJlY3RpdmUsXG5dO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiwgcmVmZXIgdG8gc3BhcnRhY3VzIGlzc3VlcyAoIzEzNzYyKVxuICogUmVtb3ZlIHRoZSByb3V0ZXIgbW9kdWxlIGFzIHdlbGwgYXMgaXQgd2FzIHBhcnQgb2YgdGhlIG9sZCBpbml0aWF0aXZlIGZvciBzY3JvbGwgcG9zaXRpaW9uaW5nXG4gKi9cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgQ29uZmlnTW9kdWxlLndpdGhDb25maWcoZGVmYXVsdEtleWJvYXJkRm9jdXNDb25maWcpLFxuICAgIFJvdXRlck1vZHVsZSxcbiAgXSxcbiAgZGVjbGFyYXRpb25zOiBbLi4uZGlyZWN0aXZlc10sXG4gIHByb3ZpZGVyczogW1xuICAgIHByb3ZpZGVEZWZhdWx0Q29uZmlnKGRlZmF1bHRLZXlib2FyZEZvY3VzQ29uZmlnKSxcbiAgICB7XG4gICAgICBwcm92aWRlOiBBUFBfSU5JVElBTElaRVIsXG4gICAgICB1c2VGYWN0b3J5OiBrZXlib2FyZEZvY3VzRmFjdG9yeSxcbiAgICAgIGRlcHM6IFtPbk5hdmlnYXRlRm9jdXNTZXJ2aWNlXSxcbiAgICAgIG11bHRpOiB0cnVlLFxuICAgIH0sXG4gIF0sXG4gIGV4cG9ydHM6IFsuLi5kaXJlY3RpdmVzXSxcbn0pXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmRGb2N1c01vZHVsZSB7fVxuXG4vKipcbiAqICBAZGVwcmVjYXRlZCBzaW5jZSA0LjIsIHJlZmVyIHRvIHNwYXJ0YWN1cyBpc3N1ZXMgKCMxMzc2MilcbiAqICBTdGFydCBrZXlib2FyZCBmb2N1cyBzZXJ2aWNlcyBvbiBhcHAgaW5pdGlhbGl6YXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBrZXlib2FyZEZvY3VzRmFjdG9yeShcbiAgb25OYXZpZ2F0ZUZvY3VzU2VydmljZTogT25OYXZpZ2F0ZUZvY3VzU2VydmljZVxuKSB7XG4gIGNvbnN0IGlzUmVhZHkgPSAoKSA9PiBvbk5hdmlnYXRlRm9jdXNTZXJ2aWNlLmluaXRpYWxpemVXaXRoQ29uZmlnKCk7XG4gIHJldHVybiBpc1JlYWR5O1xufVxuIl19