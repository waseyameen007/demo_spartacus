import { Injectable } from '@angular/core';
import { CartOrderEntriesContext } from '../order-entries-context/cart-order-entries.context';
import { OrderEntriesSource } from '../order-entries-context/import-export.model';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class ActiveCartOrderEntriesContext extends CartOrderEntriesContext {
    constructor(actionsSubject, activeCartService) {
        super(actionsSubject);
        this.actionsSubject = actionsSubject;
        this.activeCartService = activeCartService;
        this.type = OrderEntriesSource.ACTIVE_CART;
    }
    getEntries() {
        return this.activeCartService.getEntries();
    }
    add(products) {
        this.activeCartService.addEntries(this.mapProductsToOrderEntries(products));
        return this.activeCartService.getActiveCartId();
    }
    mapProductsToOrderEntries(products) {
        return products.map((product) => ({
            product: { code: product.productCode },
            quantity: product.quantity,
        }));
    }
}
ActiveCartOrderEntriesContext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ActiveCartOrderEntriesContext, deps: [{ token: i1.ActionsSubject }, { token: i2.ActiveCartService }], target: i0.ɵɵFactoryTarget.Injectable });
ActiveCartOrderEntriesContext.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ActiveCartOrderEntriesContext, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ActiveCartOrderEntriesContext, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.ActionsSubject }, { type: i2.ActiveCartService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWNhcnQtb3JkZXItZW50cmllcy1jb250ZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9jYXJ0L2NhcnQtcGFnZS9hY3RpdmUtY2FydC1vcmRlci1lbnRyaWVzLWNvbnRleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkzQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxxREFBcUQsQ0FBQztBQUM5RixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7OztBQVFsRixNQUFNLE9BQU8sNkJBQ1gsU0FBUSx1QkFBdUI7SUFLL0IsWUFDWSxjQUE4QixFQUM5QixpQkFBb0M7UUFFOUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBSFosbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFKdkMsU0FBSSxHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztJQU8vQyxDQUFDO0lBRUQsVUFBVTtRQUNSLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFUyxHQUFHLENBQUMsUUFBdUI7UUFDbkMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMseUJBQXlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUM1RSxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUNsRCxDQUFDO0lBRVMseUJBQXlCLENBQUMsUUFBdUI7UUFDekQsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUNqQixDQUFDLE9BQWtELEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDdkQsT0FBTyxFQUFFLEVBQUUsSUFBSSxFQUFFLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDdEMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxRQUFRO1NBQzNCLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7MEhBN0JVLDZCQUE2Qjs4SEFBN0IsNkJBQTZCLGNBRjVCLE1BQU07MkZBRVAsNkJBQTZCO2tCQUh6QyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFjdGlvbnNTdWJqZWN0IH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgQWN0aXZlQ2FydFNlcnZpY2UsIE9yZGVyRW50cnkgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2FydE9yZGVyRW50cmllc0NvbnRleHQgfSBmcm9tICcuLi9vcmRlci1lbnRyaWVzLWNvbnRleHQvY2FydC1vcmRlci1lbnRyaWVzLmNvbnRleHQnO1xuaW1wb3J0IHsgT3JkZXJFbnRyaWVzU291cmNlIH0gZnJvbSAnLi4vb3JkZXItZW50cmllcy1jb250ZXh0L2ltcG9ydC1leHBvcnQubW9kZWwnO1xuaW1wb3J0IHsgUHJvZHVjdERhdGEgfSBmcm9tICcuLi9vcmRlci1lbnRyaWVzLWNvbnRleHQvaW1wb3J0LXRvLWNhcnQubW9kZWwnO1xuaW1wb3J0IHsgQWRkT3JkZXJFbnRyaWVzQ29udGV4dCB9IGZyb20gJy4uL29yZGVyLWVudHJpZXMtY29udGV4dC9hZGQtb3JkZXItZW50cmllcy5jb250ZXh0JztcbmltcG9ydCB7IEdldE9yZGVyRW50cmllc0NvbnRleHQgfSBmcm9tICcuLi9vcmRlci1lbnRyaWVzLWNvbnRleHQvZ2V0LW9yZGVyLWVudHJpZXMuY29udGV4dCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBBY3RpdmVDYXJ0T3JkZXJFbnRyaWVzQ29udGV4dFxuICBleHRlbmRzIENhcnRPcmRlckVudHJpZXNDb250ZXh0XG4gIGltcGxlbWVudHMgQWRkT3JkZXJFbnRyaWVzQ29udGV4dCwgR2V0T3JkZXJFbnRyaWVzQ29udGV4dFxue1xuICByZWFkb25seSB0eXBlID0gT3JkZXJFbnRyaWVzU291cmNlLkFDVElWRV9DQVJUO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBhY3Rpb25zU3ViamVjdDogQWN0aW9uc1N1YmplY3QsXG4gICAgcHJvdGVjdGVkIGFjdGl2ZUNhcnRTZXJ2aWNlOiBBY3RpdmVDYXJ0U2VydmljZVxuICApIHtcbiAgICBzdXBlcihhY3Rpb25zU3ViamVjdCk7XG4gIH1cblxuICBnZXRFbnRyaWVzKCk6IE9ic2VydmFibGU8T3JkZXJFbnRyeVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuYWN0aXZlQ2FydFNlcnZpY2UuZ2V0RW50cmllcygpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGFkZChwcm9kdWN0czogUHJvZHVjdERhdGFbXSk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgdGhpcy5hY3RpdmVDYXJ0U2VydmljZS5hZGRFbnRyaWVzKHRoaXMubWFwUHJvZHVjdHNUb09yZGVyRW50cmllcyhwcm9kdWN0cykpO1xuICAgIHJldHVybiB0aGlzLmFjdGl2ZUNhcnRTZXJ2aWNlLmdldEFjdGl2ZUNhcnRJZCgpO1xuICB9XG5cbiAgcHJvdGVjdGVkIG1hcFByb2R1Y3RzVG9PcmRlckVudHJpZXMocHJvZHVjdHM6IFByb2R1Y3REYXRhW10pOiBPcmRlckVudHJ5W10ge1xuICAgIHJldHVybiBwcm9kdWN0cy5tYXAoXG4gICAgICAocHJvZHVjdDogeyBwcm9kdWN0Q29kZTogc3RyaW5nOyBxdWFudGl0eTogbnVtYmVyIH0pID0+ICh7XG4gICAgICAgIHByb2R1Y3Q6IHsgY29kZTogcHJvZHVjdC5wcm9kdWN0Q29kZSB9LFxuICAgICAgICBxdWFudGl0eTogcHJvZHVjdC5xdWFudGl0eSxcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxufVxuIl19