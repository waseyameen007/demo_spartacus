import { ChangeDetectionStrategy, Component, Input, Optional, } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { isNotNullable, } from '@spartacus/core';
import { filter, map, take } from 'rxjs/operators';
import { AddedToCartDialogComponent } from './added-to-cart-dialog/added-to-cart-dialog.component';
import * as i0 from "@angular/core";
import * as i1 from "../../../shared/components/modal/modal.service";
import * as i2 from "../../product/current-product.service";
import * as i3 from "@spartacus/core";
import * as i4 from "../../../cms-structure/page/model/cms-component-data";
import * as i5 from "../../../shared/components/item-counter/item-counter.component";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
export class AddToCartComponent {
    constructor(modalService, currentProductService, cd, activeCartService, component) {
        var _a;
        this.modalService = modalService;
        this.currentProductService = currentProductService;
        this.cd = cd;
        this.activeCartService = activeCartService;
        this.component = component;
        this.showQuantity = true;
        this.hasStock = false;
        this.inventoryThreshold = false;
        this.showInventory$ = (_a = this.component) === null || _a === void 0 ? void 0 : _a.data$.pipe(map((data) => data.inventoryDisplay));
        this.quantity = 1;
        this.numberOfEntriesBeforeAdd = 0;
        this.addToCartForm = new FormGroup({
            quantity: new FormControl(1, { updateOn: 'blur' }),
        });
    }
    ngOnInit() {
        var _a;
        if (this.product) {
            this.productCode = (_a = this.product.code) !== null && _a !== void 0 ? _a : '';
            this.setStockInfo(this.product);
            this.cd.markForCheck();
        }
        else if (this.productCode) {
            // force hasStock and quantity for the time being, as we do not have more info:
            this.quantity = 1;
            this.hasStock = true;
            this.cd.markForCheck();
        }
        else {
            this.subscription = this.currentProductService
                .getProduct()
                .pipe(filter(isNotNullable))
                .subscribe((product) => {
                var _a;
                this.productCode = (_a = product.code) !== null && _a !== void 0 ? _a : '';
                this.setStockInfo(product);
                this.cd.markForCheck();
            });
        }
    }
    setStockInfo(product) {
        var _a, _b, _c, _d;
        this.quantity = 1;
        this.hasStock = Boolean(((_a = product.stock) === null || _a === void 0 ? void 0 : _a.stockLevelStatus) !== 'outOfStock');
        this.inventoryThreshold = (_c = (_b = product.stock) === null || _b === void 0 ? void 0 : _b.isValueRounded) !== null && _c !== void 0 ? _c : false;
        if (this.hasStock && ((_d = product.stock) === null || _d === void 0 ? void 0 : _d.stockLevel)) {
            this.maxQuantity = product.stock.stockLevel;
        }
    }
    /**
     * In specific scenarios, we need to omit displaying the stock level or append a plus to the value.
     * When backoffice forces a product to be in stock, omit showing the stock level.
     * When product stock level is limited by a threshold value, append '+' at the end.
     * When out of stock, display no numerical value.
     */
    getInventory() {
        if (this.hasStock) {
            const quantityDisplay = this.maxQuantity
                ? this.maxQuantity.toString()
                : '';
            return this.inventoryThreshold ? quantityDisplay + '+' : quantityDisplay;
        }
        else {
            return '';
        }
    }
    updateCount(value) {
        this.quantity = value;
    }
    addToCart() {
        const quantity = this.addToCartForm.get('quantity').value;
        if (!this.productCode || quantity <= 0) {
            return;
        }
        this.activeCartService
            .getEntries()
            .pipe(take(1))
            .subscribe((entries) => {
            this.numberOfEntriesBeforeAdd = entries.length;
            this.openModal();
            this.activeCartService.addEntry(this.productCode, quantity);
        });
    }
    /**
     * Provides required data and opens AddedToCartDialogComponent modal
     */
    openModal() {
        let modalInstance;
        this.modalRef = this.modalService.open(AddedToCartDialogComponent, {
            centered: true,
            size: 'lg',
        });
        modalInstance = this.modalRef.componentInstance;
        // Display last entry for new product code. This always corresponds to
        // our new item, independently of whether merging occured or not
        modalInstance.entry$ = this.activeCartService.getLastEntry(this.productCode);
        modalInstance.cart$ = this.activeCartService.getActive();
        modalInstance.loaded$ = this.activeCartService.isStable();
        modalInstance.quantity = this.quantity;
        modalInstance.numberOfEntriesBeforeAdd = this.numberOfEntriesBeforeAdd;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
AddToCartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AddToCartComponent, deps: [{ token: i1.ModalService }, { token: i2.CurrentProductService }, { token: i0.ChangeDetectorRef }, { token: i3.ActiveCartService }, { token: i4.CmsComponentData, optional: true }], target: i0.ɵɵFactoryTarget.Component });
AddToCartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: AddToCartComponent, selector: "cx-add-to-cart", inputs: { productCode: "productCode", showQuantity: "showQuantity", product: "product" }, ngImport: i0, template: "<form *ngIf=\"productCode\" [formGroup]=\"addToCartForm\" (submit)=\"addToCart()\">\n  <div class=\"quantity\" *ngIf=\"showQuantity\">\n    <label>{{ 'addToCart.quantity' | cxTranslate }}</label>\n    <cx-item-counter\n      *ngIf=\"hasStock\"\n      [max]=\"maxQuantity\"\n      [control]=\"addToCartForm.get('quantity')\"\n    ></cx-item-counter>\n\n    <span class=\"info\">\n      <span *ngIf=\"showInventory$ | async\">{{ getInventory() }}</span>\n      {{\n        hasStock\n          ? ('addToCart.inStock' | cxTranslate)\n          : ('addToCart.outOfStock' | cxTranslate)\n      }}</span\n    >\n  </div>\n\n  <button\n    *ngIf=\"hasStock\"\n    class=\"btn btn-primary btn-block\"\n    type=\"submit\"\n    [disabled]=\"quantity <= 0 || quantity > maxQuantity\"\n  >\n    {{ 'addToCart.addToCart' | cxTranslate }}\n  </button>\n</form>\n", components: [{ type: i5.ItemCounterComponent, selector: "cx-item-counter", inputs: ["control", "min", "max", "step", "allowZero", "readonly"] }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i7.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i7.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }], pipes: { "cxTranslate": i3.TranslatePipe, "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: AddToCartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-add-to-cart',
                    templateUrl: './add-to-cart.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ModalService }, { type: i2.CurrentProductService }, { type: i0.ChangeDetectorRef }, { type: i3.ActiveCartService }, { type: i4.CmsComponentData, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { productCode: [{
                type: Input
            }], showQuantity: [{
                type: Input
            }], product: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,