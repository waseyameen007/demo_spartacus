import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { map } from 'rxjs/operators';
import { ICON_TYPE } from '../../../misc/icon/index';
import * as i0 from "@angular/core";
import * as i1 from "../cart-validation-state.service";
import * as i2 from "../../../misc/icon/icon.component";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/core";
export class CartItemValidationWarningComponent {
    constructor(cartValidationStateService) {
        this.cartValidationStateService = cartValidationStateService;
        this.iconTypes = ICON_TYPE;
        this.isVisible = true;
        this.cartModification$ = this.cartValidationStateService.cartValidationResult$.pipe(map((modificationList) => modificationList.find((modification) => modification.entry.product.code === this.code)));
    }
}
CartItemValidationWarningComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CartItemValidationWarningComponent, deps: [{ token: i1.CartValidationStateService }], target: i0.ɵɵFactoryTarget.Component });
CartItemValidationWarningComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CartItemValidationWarningComponent, selector: "cx-cart-item-validation-warning", inputs: { code: "code" }, ngImport: i0, template: "<ng-container *ngIf=\"cartModification$ | async as cartModification\">\n  <div class=\"alert alert-info\" *ngIf=\"isVisible\">\n    <span class=\"alert-icon\">\n      <cx-icon [type]=\"iconTypes.INFO\"></cx-icon>\n    </span>\n    <span>\n      {{\n        'validation.' + cartModification.statusCode\n          | cxTranslate\n            : {\n                quantity: cartModification.quantityAdded\n              }\n      }}\n    </span>\n\n    <button class=\"close\" type=\"button\" (click)=\"isVisible = !isVisible\">\n      <cx-icon [type]=\"iconTypes.CLOSE\"></cx-icon>\n    </button>\n  </div>\n</ng-container>\n", components: [{ type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i4.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CartItemValidationWarningComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-cart-item-validation-warning',
                    templateUrl: './cart-item-validation-warning.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CartValidationStateService }]; }, propDecorators: { code: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FydC1pdGVtLXZhbGlkYXRpb24td2FybmluZy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yZWZyb250bGliL2Ntcy1jb21wb25lbnRzL2NhcnQvdmFsaWRhdGlvbi9jYXJ0LWl0ZW0td2FybmluZy9jYXJ0LWl0ZW0tdmFsaWRhdGlvbi13YXJuaW5nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvY21zLWNvbXBvbmVudHMvY2FydC92YWxpZGF0aW9uL2NhcnQtaXRlbS13YXJuaW5nL2NhcnQtaXRlbS12YWxpZGF0aW9uLXdhcm5pbmcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7O0FBT3JELE1BQU0sT0FBTyxrQ0FBa0M7SUFnQjdDLFlBQ1ksMEJBQXNEO1FBQXRELCtCQUEwQixHQUExQiwwQkFBMEIsQ0FBNEI7UUFibEUsY0FBUyxHQUFHLFNBQVMsQ0FBQztRQUN0QixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBRWpCLHNCQUFpQixHQUNmLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQ3hELEdBQUcsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FDdkIsZ0JBQWdCLENBQUMsSUFBSSxDQUNuQixDQUFDLFlBQVksRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQ2hFLENBQ0YsQ0FDRixDQUFDO0lBSUQsQ0FBQzs7K0hBbEJPLGtDQUFrQzttSEFBbEMsa0NBQWtDLGlHQ1YvQywrbUJBb0JBOzJGRFZhLGtDQUFrQztrQkFMOUMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsaUNBQWlDO29CQUMzQyxXQUFXLEVBQUUsK0NBQStDO29CQUM1RCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7aUhBR0MsSUFBSTtzQkFESCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IENhcnRWYWxpZGF0aW9uU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi4vY2FydC12YWxpZGF0aW9uLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgSUNPTl9UWVBFIH0gZnJvbSAnLi4vLi4vLi4vbWlzYy9pY29uL2luZGV4JztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtY2FydC1pdGVtLXZhbGlkYXRpb24td2FybmluZycsXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXJ0LWl0ZW0tdmFsaWRhdGlvbi13YXJuaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENhcnRJdGVtVmFsaWRhdGlvbldhcm5pbmdDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBjb2RlOiBzdHJpbmc7XG5cbiAgaWNvblR5cGVzID0gSUNPTl9UWVBFO1xuICBpc1Zpc2libGUgPSB0cnVlO1xuXG4gIGNhcnRNb2RpZmljYXRpb24kID1cbiAgICB0aGlzLmNhcnRWYWxpZGF0aW9uU3RhdGVTZXJ2aWNlLmNhcnRWYWxpZGF0aW9uUmVzdWx0JC5waXBlKFxuICAgICAgbWFwKChtb2RpZmljYXRpb25MaXN0KSA9PlxuICAgICAgICBtb2RpZmljYXRpb25MaXN0LmZpbmQoXG4gICAgICAgICAgKG1vZGlmaWNhdGlvbikgPT4gbW9kaWZpY2F0aW9uLmVudHJ5LnByb2R1Y3QuY29kZSA9PT0gdGhpcy5jb2RlXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBjYXJ0VmFsaWRhdGlvblN0YXRlU2VydmljZTogQ2FydFZhbGlkYXRpb25TdGF0ZVNlcnZpY2VcbiAgKSB7fVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cImNhcnRNb2RpZmljYXRpb24kIHwgYXN5bmMgYXMgY2FydE1vZGlmaWNhdGlvblwiPlxuICA8ZGl2IGNsYXNzPVwiYWxlcnQgYWxlcnQtaW5mb1wiICpuZ0lmPVwiaXNWaXNpYmxlXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJhbGVydC1pY29uXCI+XG4gICAgICA8Y3gtaWNvbiBbdHlwZV09XCJpY29uVHlwZXMuSU5GT1wiPjwvY3gtaWNvbj5cbiAgICA8L3NwYW4+XG4gICAgPHNwYW4+XG4gICAgICB7e1xuICAgICAgICAndmFsaWRhdGlvbi4nICsgY2FydE1vZGlmaWNhdGlvbi5zdGF0dXNDb2RlXG4gICAgICAgICAgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgcXVhbnRpdHk6IGNhcnRNb2RpZmljYXRpb24ucXVhbnRpdHlBZGRlZFxuICAgICAgICAgICAgICB9XG4gICAgICB9fVxuICAgIDwvc3Bhbj5cblxuICAgIDxidXR0b24gY2xhc3M9XCJjbG9zZVwiIHR5cGU9XCJidXR0b25cIiAoY2xpY2spPVwiaXNWaXNpYmxlID0gIWlzVmlzaWJsZVwiPlxuICAgICAgPGN4LWljb24gW3R5cGVdPVwiaWNvblR5cGVzLkNMT1NFXCI+PC9jeC1pY29uPlxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbjwvbmctY29udGFpbmVyPlxuIl19