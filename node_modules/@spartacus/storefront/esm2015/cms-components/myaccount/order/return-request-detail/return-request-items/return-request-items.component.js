import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../return-request.service";
import * as i2 from "../../../../../shared/components/media/media.component";
import * as i3 from "@angular/common";
import * as i4 from "@spartacus/core";
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ReturnRequestItemsComponent {
    constructor(returnRequestService) {
        this.returnRequestService = returnRequestService;
        this.returnRequest$ = this.returnRequestService.getReturnRequest();
    }
}
ReturnRequestItemsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReturnRequestItemsComponent, deps: [{ token: i1.ReturnRequestService }], target: i0.ɵɵFactoryTarget.Component });
ReturnRequestItemsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReturnRequestItemsComponent, selector: "cx-return-request-items", ngImport: i0, template: "<ng-container *ngIf=\"returnRequest$ | async as returnRequest\">\n  <div class=\"d-none d-md-block d-lg-block d-xl-block\">\n    <div class=\"cx-item-list-header row\">\n      <div class=\"cx-item-list-desc col-md-5 col-lg-5 col-xl-6\">\n        {{ 'returnRequest.item' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-price col-md-2 col-lg-2 col-xl-2\">\n        {{ 'returnRequest.itemPrice' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-qty col-md-3 col-lg-3 col-xl-2\">\n        {{ 'returnRequest.returnQty' | cxTranslate }}\n      </div>\n      <div class=\"cx-item-list-total col-md-2 col-lg-2 col-xl-2\">\n        {{ 'returnRequest.total' | cxTranslate }}\n      </div>\n    </div>\n  </div>\n\n  <div\n    class=\"cx-item-list-row\"\n    *ngFor=\"let returnEntry of returnRequest.returnEntries; let i = index\"\n  >\n    <div class=\"cx-item-list-items\">\n      <div class=\"row\">\n        <!-- Item Image -->\n        <div class=\"col-2 cx-image-container\">\n          <cx-media\n            [container]=\"returnEntry.orderEntry?.product.images?.PRIMARY\"\n            format=\"thumbnail\"\n          ></cx-media>\n        </div>\n        <!-- Item Information -->\n        <div class=\"cx-info col-10\">\n          <div class=\"cx-info-container row\">\n            <!-- Item Description -->\n            <div class=\"col-md-3 col-lg-4 col-xl-5\">\n              <div *ngIf=\"returnEntry.orderEntry?.product.name\" class=\"cx-name\">\n                {{ returnEntry.orderEntry?.product.name }}\n              </div>\n              <div *ngIf=\"returnEntry.orderEntry?.product.code\" class=\"cx-code\">\n                {{ 'cartItems.id' | cxTranslate }}\n                {{ returnEntry.orderEntry?.product.code }}\n              </div>\n              <!-- Variants -->\n              <div\n                *ngFor=\"\n                  let variant of (returnEntry.orderEntry?.product\n                    .baseOptions)[0]?.selected?.variantOptionQualifiers\n                \"\n                class=\"cx-property\"\n              >\n                <div class=\"cx-label\" *ngIf=\"variant.name\">\n                  {{ variant.name }}:\n                </div>\n                <div class=\"cx-value\" *ngIf=\"variant.value\">\n                  {{ variant.value }}\n                </div>\n              </div>\n            </div>\n            <!-- Item Price -->\n            <div\n              *ngIf=\"returnEntry.orderEntry?.basePrice\"\n              class=\"cx-price col-md-3 col-lg-2 col-xl-2\"\n            >\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.itemPrice' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.orderEntry?.basePrice?.formattedValue }}\n              </div>\n            </div>\n            <!-- return Quantity -->\n            <div class=\"cx-quantity col-md-3 col-lg-3 col-xl-3\">\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.returnQty' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.expectedQuantity }}\n              </div>\n            </div>\n            <!-- Total Price -->\n            <div class=\"cx-total col-md-3 col-lg-3 col-xl-2\">\n              <div class=\"cx-label d-block d-md-none d-lg-none d-xl-none\">\n                {{ 'returnRequest.total' | cxTranslate }}\n              </div>\n              <div class=\"cx-value\">\n                {{ returnEntry.refundAmount?.formattedValue }}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</ng-container>\n", components: [{ type: i2.MediaComponent, selector: "cx-media", inputs: ["container", "format", "alt", "role", "loading"], outputs: ["loaded"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i4.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReturnRequestItemsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-return-request-items',
                    templateUrl: './return-request-items.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.ReturnRequestService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmV0dXJuLXJlcXVlc3QtaXRlbXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9teWFjY291bnQvb3JkZXIvcmV0dXJuLXJlcXVlc3QtZGV0YWlsL3JldHVybi1yZXF1ZXN0LWl0ZW1zL3JldHVybi1yZXF1ZXN0LWl0ZW1zLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvY21zLWNvbXBvbmVudHMvbXlhY2NvdW50L29yZGVyL3JldHVybi1yZXF1ZXN0LWRldGFpbC9yZXR1cm4tcmVxdWVzdC1pdGVtcy9yZXR1cm4tcmVxdWVzdC1pdGVtcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7QUFLbkU7O0dBRUc7QUFNSCxNQUFNLE9BQU8sMkJBQTJCO0lBQ3RDLFlBQXNCLG9CQUEwQztRQUExQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBRWhFLG1CQUFjLEdBQ1osSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFIb0IsQ0FBQzs7d0hBRHpELDJCQUEyQjs0R0FBM0IsMkJBQTJCLCtEQ2J4Qyxpc0hBK0ZBOzJGRGxGYSwyQkFBMkI7a0JBTHZDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsV0FBVyxFQUFFLHVDQUF1QztvQkFDcEQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmV0dXJuUmVxdWVzdCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSZXR1cm5SZXF1ZXN0U2VydmljZSB9IGZyb20gJy4uL3JldHVybi1yZXF1ZXN0LnNlcnZpY2UnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1yZXR1cm4tcmVxdWVzdC1pdGVtcycsXG4gIHRlbXBsYXRlVXJsOiAnLi9yZXR1cm4tcmVxdWVzdC1pdGVtcy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBSZXR1cm5SZXF1ZXN0SXRlbXNDb21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmV0dXJuUmVxdWVzdFNlcnZpY2U6IFJldHVyblJlcXVlc3RTZXJ2aWNlKSB7fVxuXG4gIHJldHVyblJlcXVlc3QkOiBPYnNlcnZhYmxlPFJldHVyblJlcXVlc3Q+ID1cbiAgICB0aGlzLnJldHVyblJlcXVlc3RTZXJ2aWNlLmdldFJldHVyblJlcXVlc3QoKTtcbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJyZXR1cm5SZXF1ZXN0JCB8IGFzeW5jIGFzIHJldHVyblJlcXVlc3RcIj5cbiAgPGRpdiBjbGFzcz1cImQtbm9uZSBkLW1kLWJsb2NrIGQtbGctYmxvY2sgZC14bC1ibG9ja1wiPlxuICAgIDxkaXYgY2xhc3M9XCJjeC1pdGVtLWxpc3QtaGVhZGVyIHJvd1wiPlxuICAgICAgPGRpdiBjbGFzcz1cImN4LWl0ZW0tbGlzdC1kZXNjIGNvbC1tZC01IGNvbC1sZy01IGNvbC14bC02XCI+XG4gICAgICAgIHt7ICdyZXR1cm5SZXF1ZXN0Lml0ZW0nIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImN4LWl0ZW0tbGlzdC1wcmljZSBjb2wtbWQtMiBjb2wtbGctMiBjb2wteGwtMlwiPlxuICAgICAgICB7eyAncmV0dXJuUmVxdWVzdC5pdGVtUHJpY2UnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImN4LWl0ZW0tbGlzdC1xdHkgY29sLW1kLTMgY29sLWxnLTMgY29sLXhsLTJcIj5cbiAgICAgICAge3sgJ3JldHVyblJlcXVlc3QucmV0dXJuUXR5JyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjeC1pdGVtLWxpc3QtdG90YWwgY29sLW1kLTIgY29sLWxnLTIgY29sLXhsLTJcIj5cbiAgICAgICAge3sgJ3JldHVyblJlcXVlc3QudG90YWwnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cblxuICA8ZGl2XG4gICAgY2xhc3M9XCJjeC1pdGVtLWxpc3Qtcm93XCJcbiAgICAqbmdGb3I9XCJsZXQgcmV0dXJuRW50cnkgb2YgcmV0dXJuUmVxdWVzdC5yZXR1cm5FbnRyaWVzOyBsZXQgaSA9IGluZGV4XCJcbiAgPlxuICAgIDxkaXYgY2xhc3M9XCJjeC1pdGVtLWxpc3QtaXRlbXNcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyb3dcIj5cbiAgICAgICAgPCEtLSBJdGVtIEltYWdlIC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY29sLTIgY3gtaW1hZ2UtY29udGFpbmVyXCI+XG4gICAgICAgICAgPGN4LW1lZGlhXG4gICAgICAgICAgICBbY29udGFpbmVyXT1cInJldHVybkVudHJ5Lm9yZGVyRW50cnk/LnByb2R1Y3QuaW1hZ2VzPy5QUklNQVJZXCJcbiAgICAgICAgICAgIGZvcm1hdD1cInRodW1ibmFpbFwiXG4gICAgICAgICAgPjwvY3gtbWVkaWE+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8IS0tIEl0ZW0gSW5mb3JtYXRpb24gLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjeC1pbmZvIGNvbC0xMFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1pbmZvLWNvbnRhaW5lciByb3dcIj5cbiAgICAgICAgICAgIDwhLS0gSXRlbSBEZXNjcmlwdGlvbiAtLT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtbWQtMyBjb2wtbGctNCBjb2wteGwtNVwiPlxuICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwicmV0dXJuRW50cnkub3JkZXJFbnRyeT8ucHJvZHVjdC5uYW1lXCIgY2xhc3M9XCJjeC1uYW1lXCI+XG4gICAgICAgICAgICAgICAge3sgcmV0dXJuRW50cnkub3JkZXJFbnRyeT8ucHJvZHVjdC5uYW1lIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwicmV0dXJuRW50cnkub3JkZXJFbnRyeT8ucHJvZHVjdC5jb2RlXCIgY2xhc3M9XCJjeC1jb2RlXCI+XG4gICAgICAgICAgICAgICAge3sgJ2NhcnRJdGVtcy5pZCcgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICAgIHt7IHJldHVybkVudHJ5Lm9yZGVyRW50cnk/LnByb2R1Y3QuY29kZSB9fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPCEtLSBWYXJpYW50cyAtLT5cbiAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICpuZ0Zvcj1cIlxuICAgICAgICAgICAgICAgICAgbGV0IHZhcmlhbnQgb2YgKHJldHVybkVudHJ5Lm9yZGVyRW50cnk/LnByb2R1Y3RcbiAgICAgICAgICAgICAgICAgICAgLmJhc2VPcHRpb25zKVswXT8uc2VsZWN0ZWQ/LnZhcmlhbnRPcHRpb25RdWFsaWZpZXJzXG4gICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cImN4LXByb3BlcnR5XCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1sYWJlbFwiICpuZ0lmPVwidmFyaWFudC5uYW1lXCI+XG4gICAgICAgICAgICAgICAgICB7eyB2YXJpYW50Lm5hbWUgfX06XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImN4LXZhbHVlXCIgKm5nSWY9XCJ2YXJpYW50LnZhbHVlXCI+XG4gICAgICAgICAgICAgICAgICB7eyB2YXJpYW50LnZhbHVlIH19XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8IS0tIEl0ZW0gUHJpY2UgLS0+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICpuZ0lmPVwicmV0dXJuRW50cnkub3JkZXJFbnRyeT8uYmFzZVByaWNlXCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJjeC1wcmljZSBjb2wtbWQtMyBjb2wtbGctMiBjb2wteGwtMlwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1sYWJlbCBkLWJsb2NrIGQtbWQtbm9uZSBkLWxnLW5vbmUgZC14bC1ub25lXCI+XG4gICAgICAgICAgICAgICAge3sgJ3JldHVyblJlcXVlc3QuaXRlbVByaWNlJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtdmFsdWVcIj5cbiAgICAgICAgICAgICAgICB7eyByZXR1cm5FbnRyeS5vcmRlckVudHJ5Py5iYXNlUHJpY2U/LmZvcm1hdHRlZFZhbHVlIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8IS0tIHJldHVybiBRdWFudGl0eSAtLT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC1xdWFudGl0eSBjb2wtbWQtMyBjb2wtbGctMyBjb2wteGwtM1wiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtbGFiZWwgZC1ibG9jayBkLW1kLW5vbmUgZC1sZy1ub25lIGQteGwtbm9uZVwiPlxuICAgICAgICAgICAgICAgIHt7ICdyZXR1cm5SZXF1ZXN0LnJldHVyblF0eScgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImN4LXZhbHVlXCI+XG4gICAgICAgICAgICAgICAge3sgcmV0dXJuRW50cnkuZXhwZWN0ZWRRdWFudGl0eSB9fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPCEtLSBUb3RhbCBQcmljZSAtLT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjeC10b3RhbCBjb2wtbWQtMyBjb2wtbGctMyBjb2wteGwtMlwiPlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtbGFiZWwgZC1ibG9jayBkLW1kLW5vbmUgZC1sZy1ub25lIGQteGwtbm9uZVwiPlxuICAgICAgICAgICAgICAgIHt7ICdyZXR1cm5SZXF1ZXN0LnRvdGFsJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3gtdmFsdWVcIj5cbiAgICAgICAgICAgICAgICB7eyByZXR1cm5FbnRyeS5yZWZ1bmRBbW91bnQ/LmZvcm1hdHRlZFZhbHVlIH19XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=