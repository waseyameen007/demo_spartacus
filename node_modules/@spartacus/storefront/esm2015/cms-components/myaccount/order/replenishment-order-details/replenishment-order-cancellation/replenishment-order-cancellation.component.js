import { Component, ViewChild, } from '@angular/core';
import { Subscription } from 'rxjs';
import { take } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../../../../layout/launch-dialog/services/launch-dialog.service";
import * as i3 from "@angular/router";
import * as i4 from "@angular/common";
/**
 * @deprecated since 4.2 - use order lib instead
 */
export class ReplenishmentOrderCancellationComponent {
    constructor(userReplenishmentOrderService, vcr, launchDialogService) {
        this.userReplenishmentOrderService = userReplenishmentOrderService;
        this.vcr = vcr;
        this.launchDialogService = launchDialogService;
        this.subscription = new Subscription();
        this.replenishmentOrder$ = this.userReplenishmentOrderService.getReplenishmentOrderDetails();
    }
    openDialog() {
        const dialog = this.launchDialogService.openDialog("REPLENISHMENT_ORDER" /* REPLENISHMENT_ORDER */, this.element, this.vcr);
        if (dialog) {
            this.subscription.add(dialog.pipe(take(1)).subscribe());
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.userReplenishmentOrderService.clearReplenishmentOrderDetails();
    }
}
ReplenishmentOrderCancellationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderCancellationComponent, deps: [{ token: i1.UserReplenishmentOrderService }, { token: i0.ViewContainerRef }, { token: i2.LaunchDialogService }], target: i0.ɵɵFactoryTarget.Component });
ReplenishmentOrderCancellationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReplenishmentOrderCancellationComponent, selector: "cx-replenishment-order-cancellation", viewQueries: [{ propertyName: "element", first: true, predicate: ["element"], descendants: true }], ngImport: i0, template: "<div class=\"cx-cancel-replenishment-btns row\">\n  <div class=\"col-xs-12 col-md-5 col-lg-4\">\n    <a\n      class=\"btn btn-block btn-action\"\n      [routerLink]=\"\n        {\n          cxRoute: 'replenishmentOrders'\n        } | cxUrl\n      \"\n    >\n      {{ 'common.back' | cxTranslate }}\n    </a>\n  </div>\n  <div\n    *ngIf=\"(replenishmentOrder$ | async).active\"\n    class=\"col-xs-12 col-md-5 col-lg-4\"\n  >\n    <button #element class=\"btn btn-block btn-action\" (click)=\"openDialog()\">\n      {{ 'orderDetails.cancelReplenishment.title' | cxTranslate }}\n    </button>\n  </div>\n</div>\n", directives: [{ type: i3.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxUrl": i1.UrlPipe, "cxTranslate": i1.TranslatePipe, "async": i4.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ReplenishmentOrderCancellationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-replenishment-order-cancellation',
                    templateUrl: './replenishment-order-cancellation.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.UserReplenishmentOrderService }, { type: i0.ViewContainerRef }, { type: i2.LaunchDialogService }]; }, propDecorators: { element: [{
                type: ViewChild,
                args: ['element']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwbGVuaXNobWVudC1vcmRlci1jYW5jZWxsYXRpb24uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9teWFjY291bnQvb3JkZXIvcmVwbGVuaXNobWVudC1vcmRlci1kZXRhaWxzL3JlcGxlbmlzaG1lbnQtb3JkZXItY2FuY2VsbGF0aW9uL3JlcGxlbmlzaG1lbnQtb3JkZXItY2FuY2VsbGF0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3N0b3JlZnJvbnRsaWIvY21zLWNvbXBvbmVudHMvbXlhY2NvdW50L29yZGVyL3JlcGxlbmlzaG1lbnQtb3JkZXItZGV0YWlscy9yZXBsZW5pc2htZW50LW9yZGVyLWNhbmNlbGxhdGlvbi9yZXBsZW5pc2htZW50LW9yZGVyLWNhbmNlbGxhdGlvbi5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUdULFNBQVMsR0FFVixNQUFNLGVBQWUsQ0FBQztBQUt2QixPQUFPLEVBQWMsWUFBWSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ2hELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7O0FBSXRDOztHQUVHO0FBS0gsTUFBTSxPQUFPLHVDQUF1QztJQVFsRCxZQUNZLDZCQUE0RCxFQUM1RCxHQUFxQixFQUNyQixtQkFBd0M7UUFGeEMsa0NBQTZCLEdBQTdCLDZCQUE2QixDQUErQjtRQUM1RCxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXFCO1FBUjVDLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUUxQyx3QkFBbUIsR0FDakIsSUFBSSxDQUFDLDZCQUE2QixDQUFDLDRCQUE0QixFQUFFLENBQUM7SUFNakUsQ0FBQztJQUVKLFVBQVU7UUFDUixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxrREFFaEQsSUFBSSxDQUFDLE9BQU8sRUFDWixJQUFJLENBQUMsR0FBRyxDQUNULENBQUM7UUFFRixJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztTQUN6RDtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsNkJBQTZCLENBQUMsOEJBQThCLEVBQUUsQ0FBQztJQUN0RSxDQUFDOztvSUE3QlUsdUNBQXVDO3dIQUF2Qyx1Q0FBdUMsK0tDdkJwRCxzbUJBc0JBOzJGRENhLHVDQUF1QztrQkFKbkQsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUscUNBQXFDO29CQUMvQyxXQUFXLEVBQUUsbURBQW1EO2lCQUNqRTtxTEFFdUIsT0FBTztzQkFBNUIsU0FBUzt1QkFBQyxTQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPbkRlc3Ryb3ksXG4gIFZpZXdDaGlsZCxcbiAgVmlld0NvbnRhaW5lclJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBSZXBsZW5pc2htZW50T3JkZXIsXG4gIFVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTEFVTkNIX0NBTExFUiB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2xheW91dC9sYXVuY2gtZGlhbG9nL2NvbmZpZy9sYXVuY2gtY29uZmlnJztcbmltcG9ydCB7IExhdW5jaERpYWxvZ1NlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9sYXlvdXQvbGF1bmNoLWRpYWxvZy9zZXJ2aWNlcy9sYXVuY2gtZGlhbG9nLnNlcnZpY2UnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIHNpbmNlIDQuMiAtIHVzZSBvcmRlciBsaWIgaW5zdGVhZFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1yZXBsZW5pc2htZW50LW9yZGVyLWNhbmNlbGxhdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9yZXBsZW5pc2htZW50LW9yZGVyLWNhbmNlbGxhdGlvbi5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFJlcGxlbmlzaG1lbnRPcmRlckNhbmNlbGxhdGlvbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIEBWaWV3Q2hpbGQoJ2VsZW1lbnQnKSBlbGVtZW50OiBFbGVtZW50UmVmO1xuXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuXG4gIHJlcGxlbmlzaG1lbnRPcmRlciQ6IE9ic2VydmFibGU8UmVwbGVuaXNobWVudE9yZGVyPiA9XG4gICAgdGhpcy51c2VyUmVwbGVuaXNobWVudE9yZGVyU2VydmljZS5nZXRSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzKCk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIHVzZXJSZXBsZW5pc2htZW50T3JkZXJTZXJ2aWNlOiBVc2VyUmVwbGVuaXNobWVudE9yZGVyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByb3RlY3RlZCBsYXVuY2hEaWFsb2dTZXJ2aWNlOiBMYXVuY2hEaWFsb2dTZXJ2aWNlXG4gICkge31cblxuICBvcGVuRGlhbG9nKCkge1xuICAgIGNvbnN0IGRpYWxvZyA9IHRoaXMubGF1bmNoRGlhbG9nU2VydmljZS5vcGVuRGlhbG9nKFxuICAgICAgTEFVTkNIX0NBTExFUi5SRVBMRU5JU0hNRU5UX09SREVSLFxuICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgdGhpcy52Y3JcbiAgICApO1xuXG4gICAgaWYgKGRpYWxvZykge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKGRpYWxvZy5waXBlKHRha2UoMSkpLnN1YnNjcmliZSgpKTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIHRoaXMudXNlclJlcGxlbmlzaG1lbnRPcmRlclNlcnZpY2UuY2xlYXJSZXBsZW5pc2htZW50T3JkZXJEZXRhaWxzKCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJjeC1jYW5jZWwtcmVwbGVuaXNobWVudC1idG5zIHJvd1wiPlxuICA8ZGl2IGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC01IGNvbC1sZy00XCI+XG4gICAgPGFcbiAgICAgIGNsYXNzPVwiYnRuIGJ0bi1ibG9jayBidG4tYWN0aW9uXCJcbiAgICAgIFtyb3V0ZXJMaW5rXT1cIlxuICAgICAgICB7XG4gICAgICAgICAgY3hSb3V0ZTogJ3JlcGxlbmlzaG1lbnRPcmRlcnMnXG4gICAgICAgIH0gfCBjeFVybFxuICAgICAgXCJcbiAgICA+XG4gICAgICB7eyAnY29tbW9uLmJhY2snIHwgY3hUcmFuc2xhdGUgfX1cbiAgICA8L2E+XG4gIDwvZGl2PlxuICA8ZGl2XG4gICAgKm5nSWY9XCIocmVwbGVuaXNobWVudE9yZGVyJCB8IGFzeW5jKS5hY3RpdmVcIlxuICAgIGNsYXNzPVwiY29sLXhzLTEyIGNvbC1tZC01IGNvbC1sZy00XCJcbiAgPlxuICAgIDxidXR0b24gI2VsZW1lbnQgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1hY3Rpb25cIiAoY2xpY2spPVwib3BlbkRpYWxvZygpXCI+XG4gICAgICB7eyAnb3JkZXJEZXRhaWxzLmNhbmNlbFJlcGxlbmlzaG1lbnQudGl0bGUnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICA8L2J1dHRvbj5cbiAgPC9kaXY+XG48L2Rpdj5cbiJdfQ==