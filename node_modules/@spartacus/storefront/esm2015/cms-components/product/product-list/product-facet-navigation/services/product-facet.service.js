import { Injectable } from '@angular/core';
import { PageType, } from '@spartacus/core';
import { filter, map, pluck, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "../../container/product-list-component.service";
/**
 * Provides access to all the facets and active facets for the Product Listing Page.
 */
export class ProductFacetService {
    constructor(routing, productListComponentService) {
        this.routing = routing;
        this.productListComponentService = productListComponentService;
        this.routeState$ = this.routing
            .getRouterState()
            .pipe(pluck('state'));
        /**
         * Returns the search results for the current page.
         */
        this.searchResult$ = this.routeState$.pipe(switchMap((state) => this.productListComponentService.model$.pipe(filter((page) => this.filterForPage(state, page)), map((page) => {
            var _a;
            return (Object.assign(Object.assign({}, page), { breadcrumbs: this.filterBreadcrumbs((_a = page === null || page === void 0 ? void 0 : page.breadcrumbs) !== null && _a !== void 0 ? _a : [], state.params) }));
        }))));
        /**
         * Observes the facets and active facets for the given page. The facet data
         * is provided in a `FacetList`.
         */
        this.facetList$ = this.searchResult$.pipe(map((result) => ({
            facets: result.facets,
            activeFacets: result.breadcrumbs,
        })));
    }
    /**
     * Filters the current result by verifying if the result is related to the page.
     * This is done to avoid a combination of the next page and the current search results.
     */
    filterForPage(state, page) {
        var _a, _b;
        if (!((_b = (_a = page.currentQuery) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.value)) {
            return false;
        }
        if (state.context.type === PageType.CATEGORY_PAGE) {
            return (page.currentQuery.query.value.indexOf(`allCategories:${state.context.id}`) > -1);
        }
        if (state.context.type === PageType.CONTENT_PAGE &&
            state.context.id === 'search') {
            return page.currentQuery.query.value.startsWith(`${state.params.query}:`);
        }
        return false;
    }
    /**
     * Filter breadcrumbs which are not actively selected but coming from
     * the route navigation.
     *
     * The breadcrumbs might include the active category page code, which is not actively
     * selected by the user.
     */
    filterBreadcrumbs(breadcrumbs, params) {
        return breadcrumbs
            ? breadcrumbs.filter((breadcrumb) => !(breadcrumb.facetCode === 'allCategories' &&
                (breadcrumb.facetValueCode === params.categoryCode ||
                    breadcrumb.facetValueCode === params.brandCode)))
            : [];
    }
}
ProductFacetService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductFacetService, deps: [{ token: i1.RoutingService }, { token: i2.ProductListComponentService }], target: i0.ɵɵFactoryTarget.Injectable });
ProductFacetService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductFacetService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ProductFacetService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.RoutingService }, { type: i2.ProductListComponentService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZHVjdC1mYWNldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vc2VydmljZXMvcHJvZHVjdC1mYWNldC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUdMLFFBQVEsR0FHVCxNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUkvRDs7R0FFRztBQUlILE1BQU0sT0FBTyxtQkFBbUI7SUFDOUIsWUFDWSxPQUF1QixFQUN2QiwyQkFBd0Q7UUFEeEQsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFDdkIsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtRQUdqRCxnQkFBVyxHQUFHLElBQUksQ0FBQyxPQUFPO2FBQzFDLGNBQWMsRUFBRTthQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFFeEI7O1dBRUc7UUFDZ0Isa0JBQWEsR0FDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQ25CLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQ2xCLElBQUksQ0FBQywyQkFBMkIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUMxQyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDLEVBQ2pELEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFOztZQUFDLE9BQUEsaUNBQ1QsSUFBSSxLQUNQLFdBQVcsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQ2pDLE1BQUEsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFdBQVcsbUNBQUksRUFBRSxFQUN2QixLQUFLLENBQUMsTUFBTSxDQUNiLElBQ0QsQ0FBQTtTQUFBLENBQUMsQ0FDSixDQUNGLENBQ0YsQ0FBQztRQUVKOzs7V0FHRztRQUNNLGVBQVUsR0FBMEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ2xFLEdBQUcsQ0FDRCxDQUFDLE1BQXlCLEVBQUUsRUFBRSxDQUM1QixDQUFDO1lBQ0MsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1lBQ3JCLFlBQVksRUFBRSxNQUFNLENBQUMsV0FBVztTQUNuQixDQUFBLENBQ2xCLENBQ0YsQ0FBQztJQXJDQyxDQUFDO0lBdUNKOzs7T0FHRztJQUNPLGFBQWEsQ0FDckIsS0FBbUMsRUFDbkMsSUFBdUI7O1FBRXZCLElBQUksQ0FBQyxDQUFBLE1BQUEsTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxLQUFLLDBDQUFFLEtBQUssQ0FBQSxFQUFFO1lBQ3BDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxhQUFhLEVBQUU7WUFDakQsT0FBTyxDQUNMLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ25DLGlCQUFpQixLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxDQUNwQyxHQUFHLENBQUMsQ0FBQyxDQUNQLENBQUM7U0FDSDtRQUVELElBQ0UsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDLFlBQVk7WUFDNUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssUUFBUSxFQUM3QjtZQUNBLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztTQUMzRTtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNPLGlCQUFpQixDQUN6QixXQUF5QixFQUN6QixNQUFjO1FBRWQsT0FBTyxXQUFXO1lBQ2hCLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUNoQixDQUFDLFVBQVUsRUFBRSxFQUFFLENBQ2IsQ0FBQyxDQUNDLFVBQVUsQ0FBQyxTQUFTLEtBQUssZUFBZTtnQkFDeEMsQ0FBQyxVQUFVLENBQUMsY0FBYyxLQUFLLE1BQU0sQ0FBQyxZQUFZO29CQUNoRCxVQUFVLENBQUMsY0FBYyxLQUFLLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FDbEQsQ0FDSjtZQUNILENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDVCxDQUFDOztnSEE1RlUsbUJBQW1CO29IQUFuQixtQkFBbUIsY0FGbEIsTUFBTTsyRkFFUCxtQkFBbUI7a0JBSC9CLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7XG4gIEFjdGl2YXRlZFJvdXRlclN0YXRlU25hcHNob3QsXG4gIEJyZWFkY3J1bWIsXG4gIFBhZ2VUeXBlLFxuICBQcm9kdWN0U2VhcmNoUGFnZSxcbiAgUm91dGluZ1NlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgcGx1Y2ssIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFByb2R1Y3RMaXN0Q29tcG9uZW50U2VydmljZSB9IGZyb20gJy4uLy4uL2NvbnRhaW5lci9wcm9kdWN0LWxpc3QtY29tcG9uZW50LnNlcnZpY2UnO1xuaW1wb3J0IHsgRmFjZXRMaXN0IH0gZnJvbSAnLi4vZmFjZXQubW9kZWwnO1xuXG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byBhbGwgdGhlIGZhY2V0cyBhbmQgYWN0aXZlIGZhY2V0cyBmb3IgdGhlIFByb2R1Y3QgTGlzdGluZyBQYWdlLlxuICovXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUHJvZHVjdEZhY2V0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCByb3V0aW5nOiBSb3V0aW5nU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcHJvZHVjdExpc3RDb21wb25lbnRTZXJ2aWNlOiBQcm9kdWN0TGlzdENvbXBvbmVudFNlcnZpY2VcbiAgKSB7fVxuXG4gIHByb3RlY3RlZCByZWFkb25seSByb3V0ZVN0YXRlJCA9IHRoaXMucm91dGluZ1xuICAgIC5nZXRSb3V0ZXJTdGF0ZSgpXG4gICAgLnBpcGUocGx1Y2soJ3N0YXRlJykpO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzZWFyY2ggcmVzdWx0cyBmb3IgdGhlIGN1cnJlbnQgcGFnZS5cbiAgICovXG4gIHByb3RlY3RlZCByZWFkb25seSBzZWFyY2hSZXN1bHQkOiBPYnNlcnZhYmxlPFByb2R1Y3RTZWFyY2hQYWdlPiA9XG4gICAgdGhpcy5yb3V0ZVN0YXRlJC5waXBlKFxuICAgICAgc3dpdGNoTWFwKChzdGF0ZSkgPT5cbiAgICAgICAgdGhpcy5wcm9kdWN0TGlzdENvbXBvbmVudFNlcnZpY2UubW9kZWwkLnBpcGUoXG4gICAgICAgICAgZmlsdGVyKChwYWdlKSA9PiB0aGlzLmZpbHRlckZvclBhZ2Uoc3RhdGUsIHBhZ2UpKSxcbiAgICAgICAgICBtYXAoKHBhZ2UpID0+ICh7XG4gICAgICAgICAgICAuLi5wYWdlLFxuICAgICAgICAgICAgYnJlYWRjcnVtYnM6IHRoaXMuZmlsdGVyQnJlYWRjcnVtYnMoXG4gICAgICAgICAgICAgIHBhZ2U/LmJyZWFkY3J1bWJzID8/IFtdLFxuICAgICAgICAgICAgICBzdGF0ZS5wYXJhbXNcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfSkpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApO1xuXG4gIC8qKlxuICAgKiBPYnNlcnZlcyB0aGUgZmFjZXRzIGFuZCBhY3RpdmUgZmFjZXRzIGZvciB0aGUgZ2l2ZW4gcGFnZS4gVGhlIGZhY2V0IGRhdGFcbiAgICogaXMgcHJvdmlkZWQgaW4gYSBgRmFjZXRMaXN0YC5cbiAgICovXG4gIHJlYWRvbmx5IGZhY2V0TGlzdCQ6IE9ic2VydmFibGU8RmFjZXRMaXN0PiA9IHRoaXMuc2VhcmNoUmVzdWx0JC5waXBlKFxuICAgIG1hcChcbiAgICAgIChyZXN1bHQ6IFByb2R1Y3RTZWFyY2hQYWdlKSA9PlxuICAgICAgICAoe1xuICAgICAgICAgIGZhY2V0czogcmVzdWx0LmZhY2V0cyxcbiAgICAgICAgICBhY3RpdmVGYWNldHM6IHJlc3VsdC5icmVhZGNydW1icyxcbiAgICAgICAgfSBhcyBGYWNldExpc3QpXG4gICAgKVxuICApO1xuXG4gIC8qKlxuICAgKiBGaWx0ZXJzIHRoZSBjdXJyZW50IHJlc3VsdCBieSB2ZXJpZnlpbmcgaWYgdGhlIHJlc3VsdCBpcyByZWxhdGVkIHRvIHRoZSBwYWdlLlxuICAgKiBUaGlzIGlzIGRvbmUgdG8gYXZvaWQgYSBjb21iaW5hdGlvbiBvZiB0aGUgbmV4dCBwYWdlIGFuZCB0aGUgY3VycmVudCBzZWFyY2ggcmVzdWx0cy5cbiAgICovXG4gIHByb3RlY3RlZCBmaWx0ZXJGb3JQYWdlKFxuICAgIHN0YXRlOiBBY3RpdmF0ZWRSb3V0ZXJTdGF0ZVNuYXBzaG90LFxuICAgIHBhZ2U6IFByb2R1Y3RTZWFyY2hQYWdlXG4gICk6IGJvb2xlYW4ge1xuICAgIGlmICghcGFnZS5jdXJyZW50UXVlcnk/LnF1ZXJ5Py52YWx1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuY29udGV4dC50eXBlID09PSBQYWdlVHlwZS5DQVRFR09SWV9QQUdFKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBwYWdlLmN1cnJlbnRRdWVyeS5xdWVyeS52YWx1ZS5pbmRleE9mKFxuICAgICAgICAgIGBhbGxDYXRlZ29yaWVzOiR7c3RhdGUuY29udGV4dC5pZH1gXG4gICAgICAgICkgPiAtMVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBzdGF0ZS5jb250ZXh0LnR5cGUgPT09IFBhZ2VUeXBlLkNPTlRFTlRfUEFHRSAmJlxuICAgICAgc3RhdGUuY29udGV4dC5pZCA9PT0gJ3NlYXJjaCdcbiAgICApIHtcbiAgICAgIHJldHVybiBwYWdlLmN1cnJlbnRRdWVyeS5xdWVyeS52YWx1ZS5zdGFydHNXaXRoKGAke3N0YXRlLnBhcmFtcy5xdWVyeX06YCk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWx0ZXIgYnJlYWRjcnVtYnMgd2hpY2ggYXJlIG5vdCBhY3RpdmVseSBzZWxlY3RlZCBidXQgY29taW5nIGZyb21cbiAgICogdGhlIHJvdXRlIG5hdmlnYXRpb24uXG4gICAqXG4gICAqIFRoZSBicmVhZGNydW1icyBtaWdodCBpbmNsdWRlIHRoZSBhY3RpdmUgY2F0ZWdvcnkgcGFnZSBjb2RlLCB3aGljaCBpcyBub3QgYWN0aXZlbHlcbiAgICogc2VsZWN0ZWQgYnkgdGhlIHVzZXIuXG4gICAqL1xuICBwcm90ZWN0ZWQgZmlsdGVyQnJlYWRjcnVtYnMoXG4gICAgYnJlYWRjcnVtYnM6IEJyZWFkY3J1bWJbXSxcbiAgICBwYXJhbXM6IFBhcmFtc1xuICApOiBCcmVhZGNydW1iW10ge1xuICAgIHJldHVybiBicmVhZGNydW1ic1xuICAgICAgPyBicmVhZGNydW1icy5maWx0ZXIoXG4gICAgICAgICAgKGJyZWFkY3J1bWIpID0+XG4gICAgICAgICAgICAhKFxuICAgICAgICAgICAgICBicmVhZGNydW1iLmZhY2V0Q29kZSA9PT0gJ2FsbENhdGVnb3JpZXMnICYmXG4gICAgICAgICAgICAgIChicmVhZGNydW1iLmZhY2V0VmFsdWVDb2RlID09PSBwYXJhbXMuY2F0ZWdvcnlDb2RlIHx8XG4gICAgICAgICAgICAgICAgYnJlYWRjcnVtYi5mYWNldFZhbHVlQ29kZSA9PT0gcGFyYW1zLmJyYW5kQ29kZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICAgICAgOiBbXTtcbiAgfVxufVxuIl19