import { ChangeDetectionStrategy, Component, HostBinding, Input, ViewChild, ViewChildren, } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import { FocusDirective } from '../../../../../layout/a11y/keyboard-focus/focus.directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/facet.service";
import * as i2 from "../../../../misc/icon/icon.component";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
import * as i5 from "../../../../../layout/a11y/keyboard-focus/focus.directive";
import * as i6 from "@spartacus/core";
export class FacetComponent {
    constructor(facetService, elementRef, cd) {
        this.facetService = facetService;
        this.elementRef = elementRef;
        this.cd = cd;
        /** configurable icon that is used to collapse the facet group  */
        this.expandIcon = ICON_TYPE.EXPAND;
        this.collapseIcon = ICON_TYPE.COLLAPSE;
    }
    set facet(value) {
        this._facet = value;
        this.isMultiSelect = !!value.multiSelect;
        this.state$ = this.facetService.getState(value);
    }
    get facet() {
        return this._facet;
    }
    /**
     * Handles clicking the heading of the facet group, which means toggling
     * the visibility of the group (collapse / expand) and optionally focusing
     * the group.
     */
    toggleGroup(event) {
        var _a;
        const host = this.elementRef.nativeElement;
        const isLocked = (_a = this.keyboardFocus) === null || _a === void 0 ? void 0 : _a.isLocked;
        this.facetService.toggle(this.facet, this.isExpanded);
        if (!isLocked || this.isExpanded) {
            host.focus();
            // we stop propagating the event as otherwise the focus on the host will trigger
            // an unlock event from the LockFocus directive.
            event.stopPropagation();
        }
    }
    get isExpanded() {
        return this.values.first.nativeElement.offsetParent !== null;
    }
    openLink(event) {
        event.target.click();
        event.preventDefault();
    }
    /**
     * Increases the number of visible values for the facet. This is delegated
     * to `facetService.increaseVisibleValues`.
     */
    increaseVisibleValues() {
        this.facetService.increaseVisibleValues(this.facet);
    }
    /**
     * Decreases the number of visible values for the facet. This is delegated
     * to `facetService.decreaseVisibleValues`.
     */
    decreaseVisibleValues() {
        this.facetService.decreaseVisibleValues(this.facet);
    }
    getLinkParams(value) {
        var _a;
        return this.facetService.getLinkParams((_a = value.query) === null || _a === void 0 ? void 0 : _a.query.value);
    }
}
FacetComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FacetComponent, deps: [{ token: i1.FacetService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FacetComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: FacetComponent, selector: "cx-facet", inputs: { expandIcon: "expandIcon", collapseIcon: "collapseIcon", facet: "facet" }, host: { properties: { "class.multi-select": "this.isMultiSelect" } }, viewQueries: [{ propertyName: "keyboardFocus", first: true, predicate: FocusDirective, descendants: true }, { propertyName: "values", predicate: ["facetValue"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"state$ | async as state\">\n  <button class=\"heading\" (click)=\"toggleGroup($event)\">\n    {{ facet.name }}\n    <cx-icon class=\"collapse-icon\" [type]=\"collapseIcon\"></cx-icon>\n    <cx-icon class=\"expand-icon\" [type]=\"expandIcon\"></cx-icon>\n  </button>\n\n  <a\n    *ngFor=\"let value of facet.values | slice: 0:state.topVisible\"\n    #facetValue\n    routerLink=\"./\"\n    [queryParams]=\"getLinkParams(value)\"\n    class=\"value\"\n    [class.selected]=\"value.selected\"\n    [cxFocus]=\"value.name\"\n    (keydown.space)=\"openLink($event)\"\n  >\n    <span>\n      <span class=\"label\">{{ value.name }}</span>\n      <span class=\"count\">{{ value.count }}</span>\n    </span>\n  </a>\n\n  <div class=\"more\">\n    <a\n      *ngFor=\"\n        let value of facet.values | slice: state.topVisible:state.maxVisible\n      \"\n      #facetValue\n      routerLink=\"./\"\n      [queryParams]=\"getLinkParams(value)\"\n      class=\"value\"\n      [class.selected]=\"value.selected\"\n      [cxFocus]=\"value.name\"\n      (keydown.space)=\"openLink($event)\"\n    >\n      <span\n        >{{ value.name }}<span class=\"count\">{{ value.count }}</span></span\n      >\n    </a>\n\n    <button\n      *ngIf=\"state.maxVisible > state.topVisible\"\n      (click)=\"decreaseVisibleValues()\"\n      class=\"cx-action-link\"\n      cxFocus=\"moreorless\"\n    >\n      {{ 'productList.showLess' | cxTranslate }}\n    </button>\n\n    <button\n      *ngIf=\"state.maxVisible > 0 && state.maxVisible < facet.values.length\"\n      (click)=\"increaseVisibleValues()\"\n      class=\"cx-action-link\"\n      cxFocus=\"moreorless\"\n    >\n      {{ 'productList.showMore' | cxTranslate }}\n    </button>\n  </div>\n</ng-container>\n", components: [{ type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }], pipes: { "async": i3.AsyncPipe, "slice": i3.SlicePipe, "cxTranslate": i6.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: FacetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-facet',
                    templateUrl: './facet.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.FacetService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { expandIcon: [{
                type: Input
            }], collapseIcon: [{
                type: Input
            }], isMultiSelect: [{
                type: HostBinding,
                args: ['class.multi-select']
            }], values: [{
                type: ViewChildren,
                args: ['facetValue']
            }], keyboardFocus: [{
                type: ViewChild,
                args: [FocusDirective]
            }], facet: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vZmFjZXQvZmFjZXQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vZmFjZXQvZmFjZXQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLHVCQUF1QixFQUV2QixTQUFTLEVBRVQsV0FBVyxFQUNYLEtBQUssRUFFTCxTQUFTLEVBQ1QsWUFBWSxHQUNiLE1BQU0sZUFBZSxDQUFDO0FBR3ZCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUMvRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMkRBQTJELENBQUM7Ozs7Ozs7O0FBUzNGLE1BQU0sT0FBTyxjQUFjO0lBMEJ6QixZQUNZLFlBQTBCLEVBQzFCLFVBQW1DLEVBQ25DLEVBQXFCO1FBRnJCLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBQ25DLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBeEJqQyxrRUFBa0U7UUFDekQsZUFBVSxHQUFjLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDekMsaUJBQVksR0FBYyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBdUJuRCxDQUFDO0lBZkosSUFDSSxLQUFLLENBQUMsS0FBWTtRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBUUQ7Ozs7T0FJRztJQUNILFdBQVcsQ0FBQyxLQUFjOztRQUN4QixNQUFNLElBQUksR0FBZ0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDeEQsTUFBTSxRQUFRLEdBQUcsTUFBQSxJQUFJLENBQUMsYUFBYSwwQ0FBRSxRQUFRLENBQUM7UUFFOUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFdEQsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2hDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNiLGdGQUFnRjtZQUNoRixnREFBZ0Q7WUFDaEQsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVELElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksS0FBSyxJQUFJLENBQUM7SUFDL0QsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFvQjtRQUMxQixLQUFLLENBQUMsTUFBc0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0QyxLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVEOzs7T0FHRztJQUNILHFCQUFxQjtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gscUJBQXFCO1FBQ25CLElBQUksQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFRCxhQUFhLENBQUMsS0FBaUI7O1FBQzdCLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsTUFBQSxLQUFLLENBQUMsS0FBSywwQ0FBRSxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbkUsQ0FBQzs7MkdBOUVVLGNBQWM7K0ZBQWQsY0FBYyx5UEFhZCxjQUFjLDBIQ3BDM0IscXVEQTREQTsyRkRyQ2EsY0FBYztrQkFMMUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsVUFBVTtvQkFDcEIsV0FBVyxFQUFFLHdCQUF3QjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzRKQU9VLFVBQVU7c0JBQWxCLEtBQUs7Z0JBQ0csWUFBWTtzQkFBcEIsS0FBSztnQkFFNkIsYUFBYTtzQkFBL0MsV0FBVzt1QkFBQyxvQkFBb0I7Z0JBRUwsTUFBTTtzQkFBakMsWUFBWTt1QkFBQyxZQUFZO2dCQUVDLGFBQWE7c0JBQXZDLFNBQVM7dUJBQUMsY0FBYztnQkFHckIsS0FBSztzQkFEUixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgUXVlcnlMaXN0LFxuICBWaWV3Q2hpbGQsXG4gIFZpZXdDaGlsZHJlbixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGYWNldCwgRmFjZXRWYWx1ZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XG5pbXBvcnQgeyBGb2N1c0RpcmVjdGl2ZSB9IGZyb20gJy4uLy4uLy4uLy4uLy4uL2xheW91dC9hMTF5L2tleWJvYXJkLWZvY3VzL2ZvY3VzLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBGYWNldENvbGxhcHNlU3RhdGUgfSBmcm9tICcuLi9mYWNldC5tb2RlbCc7XG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtZmFjZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vZmFjZXQuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgRmFjZXRDb21wb25lbnQge1xuICBwcm90ZWN0ZWQgX2ZhY2V0OiBGYWNldDtcblxuICBzdGF0ZSQ6IE9ic2VydmFibGU8RmFjZXRDb2xsYXBzZVN0YXRlPjtcblxuICAvKiogY29uZmlndXJhYmxlIGljb24gdGhhdCBpcyB1c2VkIHRvIGNvbGxhcHNlIHRoZSBmYWNldCBncm91cCAgKi9cbiAgQElucHV0KCkgZXhwYW5kSWNvbjogSUNPTl9UWVBFID0gSUNPTl9UWVBFLkVYUEFORDtcbiAgQElucHV0KCkgY29sbGFwc2VJY29uOiBJQ09OX1RZUEUgPSBJQ09OX1RZUEUuQ09MTEFQU0U7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5tdWx0aS1zZWxlY3QnKSBpc011bHRpU2VsZWN0OiBib29sZWFuO1xuXG4gIEBWaWV3Q2hpbGRyZW4oJ2ZhY2V0VmFsdWUnKSB2YWx1ZXM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPEhUTUxFbGVtZW50Pj47XG5cbiAgQFZpZXdDaGlsZChGb2N1c0RpcmVjdGl2ZSkga2V5Ym9hcmRGb2N1czogRm9jdXNEaXJlY3RpdmU7XG5cbiAgQElucHV0KClcbiAgc2V0IGZhY2V0KHZhbHVlOiBGYWNldCkge1xuICAgIHRoaXMuX2ZhY2V0ID0gdmFsdWU7XG4gICAgdGhpcy5pc011bHRpU2VsZWN0ID0gISF2YWx1ZS5tdWx0aVNlbGVjdDtcbiAgICB0aGlzLnN0YXRlJCA9IHRoaXMuZmFjZXRTZXJ2aWNlLmdldFN0YXRlKHZhbHVlKTtcbiAgfVxuXG4gIGdldCBmYWNldCgpOiBGYWNldCB7XG4gICAgcmV0dXJuIHRoaXMuX2ZhY2V0O1xuICB9XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGZhY2V0U2VydmljZTogRmFjZXRTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICBwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmXG4gICkge31cblxuICAvKipcbiAgICogSGFuZGxlcyBjbGlja2luZyB0aGUgaGVhZGluZyBvZiB0aGUgZmFjZXQgZ3JvdXAsIHdoaWNoIG1lYW5zIHRvZ2dsaW5nXG4gICAqIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBncm91cCAoY29sbGFwc2UgLyBleHBhbmQpIGFuZCBvcHRpb25hbGx5IGZvY3VzaW5nXG4gICAqIHRoZSBncm91cC5cbiAgICovXG4gIHRvZ2dsZUdyb3VwKGV2ZW50OiBVSUV2ZW50KSB7XG4gICAgY29uc3QgaG9zdDogSFRNTEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudDtcbiAgICBjb25zdCBpc0xvY2tlZCA9IHRoaXMua2V5Ym9hcmRGb2N1cz8uaXNMb2NrZWQ7XG5cbiAgICB0aGlzLmZhY2V0U2VydmljZS50b2dnbGUodGhpcy5mYWNldCwgdGhpcy5pc0V4cGFuZGVkKTtcblxuICAgIGlmICghaXNMb2NrZWQgfHwgdGhpcy5pc0V4cGFuZGVkKSB7XG4gICAgICBob3N0LmZvY3VzKCk7XG4gICAgICAvLyB3ZSBzdG9wIHByb3BhZ2F0aW5nIHRoZSBldmVudCBhcyBvdGhlcndpc2UgdGhlIGZvY3VzIG9uIHRoZSBob3N0IHdpbGwgdHJpZ2dlclxuICAgICAgLy8gYW4gdW5sb2NrIGV2ZW50IGZyb20gdGhlIExvY2tGb2N1cyBkaXJlY3RpdmUuXG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG4gIH1cblxuICBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZXMuZmlyc3QubmF0aXZlRWxlbWVudC5vZmZzZXRQYXJlbnQgIT09IG51bGw7XG4gIH1cblxuICBvcGVuTGluayhldmVudDogS2V5Ym9hcmRFdmVudCkge1xuICAgIChldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLmNsaWNrKCk7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiB2aXNpYmxlIHZhbHVlcyBmb3IgdGhlIGZhY2V0LiBUaGlzIGlzIGRlbGVnYXRlZFxuICAgKiB0byBgZmFjZXRTZXJ2aWNlLmluY3JlYXNlVmlzaWJsZVZhbHVlc2AuXG4gICAqL1xuICBpbmNyZWFzZVZpc2libGVWYWx1ZXMoKTogdm9pZCB7XG4gICAgdGhpcy5mYWNldFNlcnZpY2UuaW5jcmVhc2VWaXNpYmxlVmFsdWVzKHRoaXMuZmFjZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIERlY3JlYXNlcyB0aGUgbnVtYmVyIG9mIHZpc2libGUgdmFsdWVzIGZvciB0aGUgZmFjZXQuIFRoaXMgaXMgZGVsZWdhdGVkXG4gICAqIHRvIGBmYWNldFNlcnZpY2UuZGVjcmVhc2VWaXNpYmxlVmFsdWVzYC5cbiAgICovXG4gIGRlY3JlYXNlVmlzaWJsZVZhbHVlcygpOiB2b2lkIHtcbiAgICB0aGlzLmZhY2V0U2VydmljZS5kZWNyZWFzZVZpc2libGVWYWx1ZXModGhpcy5mYWNldCk7XG4gIH1cblxuICBnZXRMaW5rUGFyYW1zKHZhbHVlOiBGYWNldFZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuZmFjZXRTZXJ2aWNlLmdldExpbmtQYXJhbXModmFsdWUucXVlcnk/LnF1ZXJ5LnZhbHVlKTtcbiAgfVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cInN0YXRlJCB8IGFzeW5jIGFzIHN0YXRlXCI+XG4gIDxidXR0b24gY2xhc3M9XCJoZWFkaW5nXCIgKGNsaWNrKT1cInRvZ2dsZUdyb3VwKCRldmVudClcIj5cbiAgICB7eyBmYWNldC5uYW1lIH19XG4gICAgPGN4LWljb24gY2xhc3M9XCJjb2xsYXBzZS1pY29uXCIgW3R5cGVdPVwiY29sbGFwc2VJY29uXCI+PC9jeC1pY29uPlxuICAgIDxjeC1pY29uIGNsYXNzPVwiZXhwYW5kLWljb25cIiBbdHlwZV09XCJleHBhbmRJY29uXCI+PC9jeC1pY29uPlxuICA8L2J1dHRvbj5cblxuICA8YVxuICAgICpuZ0Zvcj1cImxldCB2YWx1ZSBvZiBmYWNldC52YWx1ZXMgfCBzbGljZTogMDpzdGF0ZS50b3BWaXNpYmxlXCJcbiAgICAjZmFjZXRWYWx1ZVxuICAgIHJvdXRlckxpbms9XCIuL1wiXG4gICAgW3F1ZXJ5UGFyYW1zXT1cImdldExpbmtQYXJhbXModmFsdWUpXCJcbiAgICBjbGFzcz1cInZhbHVlXCJcbiAgICBbY2xhc3Muc2VsZWN0ZWRdPVwidmFsdWUuc2VsZWN0ZWRcIlxuICAgIFtjeEZvY3VzXT1cInZhbHVlLm5hbWVcIlxuICAgIChrZXlkb3duLnNwYWNlKT1cIm9wZW5MaW5rKCRldmVudClcIlxuICA+XG4gICAgPHNwYW4+XG4gICAgICA8c3BhbiBjbGFzcz1cImxhYmVsXCI+e3sgdmFsdWUubmFtZSB9fTwvc3Bhbj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiY291bnRcIj57eyB2YWx1ZS5jb3VudCB9fTwvc3Bhbj5cbiAgICA8L3NwYW4+XG4gIDwvYT5cblxuICA8ZGl2IGNsYXNzPVwibW9yZVwiPlxuICAgIDxhXG4gICAgICAqbmdGb3I9XCJcbiAgICAgICAgbGV0IHZhbHVlIG9mIGZhY2V0LnZhbHVlcyB8IHNsaWNlOiBzdGF0ZS50b3BWaXNpYmxlOnN0YXRlLm1heFZpc2libGVcbiAgICAgIFwiXG4gICAgICAjZmFjZXRWYWx1ZVxuICAgICAgcm91dGVyTGluaz1cIi4vXCJcbiAgICAgIFtxdWVyeVBhcmFtc109XCJnZXRMaW5rUGFyYW1zKHZhbHVlKVwiXG4gICAgICBjbGFzcz1cInZhbHVlXCJcbiAgICAgIFtjbGFzcy5zZWxlY3RlZF09XCJ2YWx1ZS5zZWxlY3RlZFwiXG4gICAgICBbY3hGb2N1c109XCJ2YWx1ZS5uYW1lXCJcbiAgICAgIChrZXlkb3duLnNwYWNlKT1cIm9wZW5MaW5rKCRldmVudClcIlxuICAgID5cbiAgICAgIDxzcGFuXG4gICAgICAgID57eyB2YWx1ZS5uYW1lIH19PHNwYW4gY2xhc3M9XCJjb3VudFwiPnt7IHZhbHVlLmNvdW50IH19PC9zcGFuPjwvc3BhblxuICAgICAgPlxuICAgIDwvYT5cblxuICAgIDxidXR0b25cbiAgICAgICpuZ0lmPVwic3RhdGUubWF4VmlzaWJsZSA+IHN0YXRlLnRvcFZpc2libGVcIlxuICAgICAgKGNsaWNrKT1cImRlY3JlYXNlVmlzaWJsZVZhbHVlcygpXCJcbiAgICAgIGNsYXNzPVwiY3gtYWN0aW9uLWxpbmtcIlxuICAgICAgY3hGb2N1cz1cIm1vcmVvcmxlc3NcIlxuICAgID5cbiAgICAgIHt7ICdwcm9kdWN0TGlzdC5zaG93TGVzcycgfCBjeFRyYW5zbGF0ZSB9fVxuICAgIDwvYnV0dG9uPlxuXG4gICAgPGJ1dHRvblxuICAgICAgKm5nSWY9XCJzdGF0ZS5tYXhWaXNpYmxlID4gMCAmJiBzdGF0ZS5tYXhWaXNpYmxlIDwgZmFjZXQudmFsdWVzLmxlbmd0aFwiXG4gICAgICAoY2xpY2spPVwiaW5jcmVhc2VWaXNpYmxlVmFsdWVzKClcIlxuICAgICAgY2xhc3M9XCJjeC1hY3Rpb24tbGlua1wiXG4gICAgICBjeEZvY3VzPVwibW9yZW9ybGVzc1wiXG4gICAgPlxuICAgICAge3sgJ3Byb2R1Y3RMaXN0LnNob3dNb3JlJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgPC9idXR0b24+XG4gIDwvZGl2PlxuPC9uZy1jb250YWluZXI+XG4iXX0=