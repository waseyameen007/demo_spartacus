import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import { ICON_TYPE } from '../../../../../cms-components/misc/icon/icon.model';
import * as i0 from "@angular/core";
import * as i1 from "../services/facet.service";
import * as i2 from "../../../../misc/icon/icon.component";
import * as i3 from "@angular/common";
import * as i4 from "@angular/router";
import * as i5 from "../../../../../layout/a11y/keyboard-focus/focus.directive";
import * as i6 from "@spartacus/core";
/**
 * Active facets render the applied facet values as a list of focusable buttons
 * which can be used to remove the applied facet value.
 */
export class ActiveFacetsComponent {
    constructor(facetService) {
        this.facetService = facetService;
        /** Active facets which are applied to the product results. */
        this.facetList$ = this.facetService.facetList$;
        /** Configurable icon which is used for the active facet close button */
        this.closeIcon = ICON_TYPE.CLOSE;
    }
    getLinkParams(facet) {
        var _a, _b;
        return this.facetService.getLinkParams((_b = (_a = facet.removeQuery) === null || _a === void 0 ? void 0 : _a.query) === null || _b === void 0 ? void 0 : _b.value);
    }
    /**
     * The focus key is used to persist the focus on the facet when the DOM is being
     * recreated. We only apply the focus key for the given _active_ facet when there
     * the original facets is not available. This happens for non multi-valued facets.
     *
     * With this approach, the we keep the focus, either at the facet list or on the
     * active facets.
     */
    getFocusKey(facetList, facet) {
        var _a;
        return ((_a = facetList.facets) === null || _a === void 0 ? void 0 : _a.find((f) => { var _a; return (_a = f.values) === null || _a === void 0 ? void 0 : _a.find((val) => val.name === facet.facetValueName); }))
            ? ''
            : facet.facetValueName;
    }
}
ActiveFacetsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ActiveFacetsComponent, deps: [{ token: i1.FacetService }], target: i0.ɵɵFactoryTarget.Component });
ActiveFacetsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ActiveFacetsComponent, selector: "cx-active-facets", inputs: { closeIcon: "closeIcon" }, ngImport: i0, template: "<ng-container *ngIf=\"facetList$ | async as facetList\">\n  <h4 *ngIf=\"facetList?.activeFacets?.length > 0\">\n    {{ 'productList.appliedFilter' | cxTranslate }}\n  </h4>\n\n  <a\n    *ngFor=\"let facet of facetList?.activeFacets\"\n    routerLink=\"./\"\n    [queryParams]=\"getLinkParams(facet)\"\n    [cxFocus]=\"getFocusKey(facetList, facet)\"\n  >\n    <span>{{ facet.facetValueName }}</span>\n    <cx-icon aria-hidden=\"true\" [type]=\"closeIcon\"></cx-icon>\n  </a>\n</ng-container>\n", components: [{ type: i2.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i5.FocusDirective, selector: "[cxFocus]", inputs: ["cxFocus"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i6.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ActiveFacetsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-active-facets',
                    templateUrl: './active-facets.component.html',
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }], ctorParameters: function () { return [{ type: i1.FacetService }]; }, propDecorators: { closeIcon: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLWZhY2V0cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9zdG9yZWZyb250bGliL2Ntcy1jb21wb25lbnRzL3Byb2R1Y3QvcHJvZHVjdC1saXN0L3Byb2R1Y3QtZmFjZXQtbmF2aWdhdGlvbi9hY3RpdmUtZmFjZXRzL2FjdGl2ZS1mYWNldHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvc3RvcmVmcm9udGxpYi9jbXMtY29tcG9uZW50cy9wcm9kdWN0L3Byb2R1Y3QtbGlzdC9wcm9kdWN0LWZhY2V0LW5hdmlnYXRpb24vYWN0aXZlLWZhY2V0cy9hY3RpdmUtZmFjZXRzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxvREFBb0QsQ0FBQzs7Ozs7Ozs7QUFJL0U7OztHQUdHO0FBTUgsTUFBTSxPQUFPLHFCQUFxQjtJQU9oQyxZQUFzQixZQUEwQjtRQUExQixpQkFBWSxHQUFaLFlBQVksQ0FBYztRQU5oRCw4REFBOEQ7UUFDOUQsZUFBVSxHQUEwQixJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQztRQUVqRSx3RUFBd0U7UUFDL0QsY0FBUyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFFYyxDQUFDO0lBRXBELGFBQWEsQ0FBQyxLQUFpQjs7UUFDN0IsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxNQUFBLE1BQUEsS0FBSyxDQUFDLFdBQVcsMENBQUUsS0FBSywwQ0FBRSxLQUFLLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILFdBQVcsQ0FBQyxTQUFvQixFQUFFLEtBQWlCOztRQUNqRCxPQUFPLENBQUEsTUFBQSxTQUFTLENBQUMsTUFBTSwwQ0FBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxXQUNsQyxPQUFBLE1BQUEsQ0FBQyxDQUFDLE1BQU0sMENBQUUsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQSxFQUFBLENBQzNEO1lBQ0MsQ0FBQyxDQUFDLEVBQUU7WUFDSixDQUFDLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQztJQUMzQixDQUFDOztrSEEzQlUscUJBQXFCO3NHQUFyQixxQkFBcUIsNEZDaEJsQywrZUFlQTsyRkRDYSxxQkFBcUI7a0JBTGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsV0FBVyxFQUFFLGdDQUFnQztvQkFDN0MsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE9BQU87aUJBQ2pEO21HQU1VLFNBQVM7c0JBQWpCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYiB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBJQ09OX1RZUEUgfSBmcm9tICcuLi8uLi8uLi8uLi8uLi9jbXMtY29tcG9uZW50cy9taXNjL2ljb24vaWNvbi5tb2RlbCc7XG5pbXBvcnQgeyBGYWNldExpc3QgfSBmcm9tICcuLi9mYWNldC5tb2RlbCc7XG5pbXBvcnQgeyBGYWNldFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9mYWNldC5zZXJ2aWNlJztcblxuLyoqXG4gKiBBY3RpdmUgZmFjZXRzIHJlbmRlciB0aGUgYXBwbGllZCBmYWNldCB2YWx1ZXMgYXMgYSBsaXN0IG9mIGZvY3VzYWJsZSBidXR0b25zXG4gKiB3aGljaCBjYW4gYmUgdXNlZCB0byByZW1vdmUgdGhlIGFwcGxpZWQgZmFjZXQgdmFsdWUuXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LWFjdGl2ZS1mYWNldHMnLFxuICB0ZW1wbGF0ZVVybDogJy4vYWN0aXZlLWZhY2V0cy5jb21wb25lbnQuaHRtbCcsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuRGVmYXVsdCxcbn0pXG5leHBvcnQgY2xhc3MgQWN0aXZlRmFjZXRzQ29tcG9uZW50IHtcbiAgLyoqIEFjdGl2ZSBmYWNldHMgd2hpY2ggYXJlIGFwcGxpZWQgdG8gdGhlIHByb2R1Y3QgcmVzdWx0cy4gKi9cbiAgZmFjZXRMaXN0JDogT2JzZXJ2YWJsZTxGYWNldExpc3Q+ID0gdGhpcy5mYWNldFNlcnZpY2UuZmFjZXRMaXN0JDtcblxuICAvKiogQ29uZmlndXJhYmxlIGljb24gd2hpY2ggaXMgdXNlZCBmb3IgdGhlIGFjdGl2ZSBmYWNldCBjbG9zZSBidXR0b24gKi9cbiAgQElucHV0KCkgY2xvc2VJY29uID0gSUNPTl9UWVBFLkNMT1NFO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmYWNldFNlcnZpY2U6IEZhY2V0U2VydmljZSkge31cblxuICBnZXRMaW5rUGFyYW1zKGZhY2V0OiBCcmVhZGNydW1iKSB7XG4gICAgcmV0dXJuIHRoaXMuZmFjZXRTZXJ2aWNlLmdldExpbmtQYXJhbXMoZmFjZXQucmVtb3ZlUXVlcnk/LnF1ZXJ5Py52YWx1ZSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGZvY3VzIGtleSBpcyB1c2VkIHRvIHBlcnNpc3QgdGhlIGZvY3VzIG9uIHRoZSBmYWNldCB3aGVuIHRoZSBET00gaXMgYmVpbmdcbiAgICogcmVjcmVhdGVkLiBXZSBvbmx5IGFwcGx5IHRoZSBmb2N1cyBrZXkgZm9yIHRoZSBnaXZlbiBfYWN0aXZlXyBmYWNldCB3aGVuIHRoZXJlXG4gICAqIHRoZSBvcmlnaW5hbCBmYWNldHMgaXMgbm90IGF2YWlsYWJsZS4gVGhpcyBoYXBwZW5zIGZvciBub24gbXVsdGktdmFsdWVkIGZhY2V0cy5cbiAgICpcbiAgICogV2l0aCB0aGlzIGFwcHJvYWNoLCB0aGUgd2Uga2VlcCB0aGUgZm9jdXMsIGVpdGhlciBhdCB0aGUgZmFjZXQgbGlzdCBvciBvbiB0aGVcbiAgICogYWN0aXZlIGZhY2V0cy5cbiAgICovXG4gIGdldEZvY3VzS2V5KGZhY2V0TGlzdDogRmFjZXRMaXN0LCBmYWNldDogQnJlYWRjcnVtYikge1xuICAgIHJldHVybiBmYWNldExpc3QuZmFjZXRzPy5maW5kKChmKSA9PlxuICAgICAgZi52YWx1ZXM/LmZpbmQoKHZhbCkgPT4gdmFsLm5hbWUgPT09IGZhY2V0LmZhY2V0VmFsdWVOYW1lKVxuICAgIClcbiAgICAgID8gJydcbiAgICAgIDogZmFjZXQuZmFjZXRWYWx1ZU5hbWU7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJmYWNldExpc3QkIHwgYXN5bmMgYXMgZmFjZXRMaXN0XCI+XG4gIDxoNCAqbmdJZj1cImZhY2V0TGlzdD8uYWN0aXZlRmFjZXRzPy5sZW5ndGggPiAwXCI+XG4gICAge3sgJ3Byb2R1Y3RMaXN0LmFwcGxpZWRGaWx0ZXInIHwgY3hUcmFuc2xhdGUgfX1cbiAgPC9oND5cblxuICA8YVxuICAgICpuZ0Zvcj1cImxldCBmYWNldCBvZiBmYWNldExpc3Q/LmFjdGl2ZUZhY2V0c1wiXG4gICAgcm91dGVyTGluaz1cIi4vXCJcbiAgICBbcXVlcnlQYXJhbXNdPVwiZ2V0TGlua1BhcmFtcyhmYWNldClcIlxuICAgIFtjeEZvY3VzXT1cImdldEZvY3VzS2V5KGZhY2V0TGlzdCwgZmFjZXQpXCJcbiAgPlxuICAgIDxzcGFuPnt7IGZhY2V0LmZhY2V0VmFsdWVOYW1lIH19PC9zcGFuPlxuICAgIDxjeC1pY29uIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIFt0eXBlXT1cImNsb3NlSWNvblwiPjwvY3gtaWNvbj5cbiAgPC9hPlxuPC9uZy1jb250YWluZXI+XG4iXX0=