import { ChangeDetectionStrategy, Component, ViewChildren, } from '@angular/core';
import { combineLatest } from 'rxjs';
import { distinctUntilChanged, map, switchMap, take } from 'rxjs/operators';
import { ComponentWrapperDirective } from '../../../cms-structure/page/component/component-wrapper.directive';
import { BREAKPOINT } from '../../../layout/config/layout-config';
import * as i0 from "@angular/core";
import * as i1 from "../../../cms-structure/page/model/index";
import * as i2 from "@spartacus/core";
import * as i3 from "../../../layout/breakpoint/breakpoint.service";
import * as i4 from "@angular/common";
import * as i5 from "../../../cms-structure/outlet/outlet.directive";
import * as i6 from "../../../cms-structure/page/component/component-wrapper.directive";
export class TabParagraphContainerComponent {
    constructor(componentData, cmsService, winRef, breakpointService) {
        this.componentData = componentData;
        this.cmsService = cmsService;
        this.winRef = winRef;
        this.breakpointService = breakpointService;
        this.activeTabNum = 0;
        this.tabTitleParams = [];
        this.components$ = this.componentData.data$.pipe(distinctUntilChanged((x, y) => (x === null || x === void 0 ? void 0 : x.components) === (y === null || y === void 0 ? void 0 : y.components)), switchMap((data) => {
            var _a;
            return combineLatest(((_a = data === null || data === void 0 ? void 0 : data.components) !== null && _a !== void 0 ? _a : '').split(' ').map((component) => this.cmsService.getComponentData(component).pipe(distinctUntilChanged(), map((tab) => {
                if (!tab) {
                    return undefined;
                }
                if (!tab.flexType) {
                    tab = Object.assign(Object.assign({}, tab), { flexType: tab.typeCode });
                }
                return Object.assign(Object.assign({}, tab), { title: `${data.uid}.tabs.${tab.uid}` });
            }))));
        }));
    }
    select(tabNum, event) {
        var _a;
        (_a = this.breakpointService) === null || _a === void 0 ? void 0 : _a.isDown(BREAKPOINT.sm).pipe(take(1)).subscribe((res) => {
            var _a, _b;
            if (res) {
                this.activeTabNum = this.activeTabNum === tabNum ? -1 : tabNum;
                if (event && (event === null || event === void 0 ? void 0 : event.target)) {
                    const target = event.target;
                    const parentNode = target.parentNode;
                    (_b = (_a = this.winRef) === null || _a === void 0 ? void 0 : _a.nativeWindow) === null || _b === void 0 ? void 0 : _b.scrollTo(0, parentNode.offsetTop);
                }
            }
            else {
                this.activeTabNum = tabNum;
            }
        });
    }
    ngOnInit() {
        var _a, _b, _c, _d, _e;
        this.activeTabNum =
            (_e = (_d = (_c = (_b = (_a = this.winRef) === null || _a === void 0 ? void 0 : _a.nativeWindow) === null || _b === void 0 ? void 0 : _b.history) === null || _c === void 0 ? void 0 : _c.state) === null || _d === void 0 ? void 0 : _d.activeTab) !== null && _e !== void 0 ? _e : this.activeTabNum;
    }
    ngAfterViewInit() {
        // If the sub cms components data exist, the components created before ngAfterViewInit are called.
        // In this case, the title parameters are directly pulled from them.
        if (this.children.length > 0) {
            this.getTitleParams(this.children);
        }
    }
    tabCompLoaded(componentRef) {
        this.tabTitleParams.push(componentRef.instance.tabTitleParam$);
    }
    getTitleParams(children) {
        children.forEach((comp) => {
            var _a;
            if ((_a = comp.cmpRef) === null || _a === void 0 ? void 0 : _a.instance.tabTitleParam$) {
                this.tabTitleParams.push(comp.cmpRef.instance.tabTitleParam$);
            }
            else {
                this.tabTitleParams.push(null);
            }
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
TabParagraphContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: TabParagraphContainerComponent, deps: [{ token: i1.CmsComponentData }, { token: i2.CmsService }, { token: i2.WindowRef }, { token: i3.BreakpointService }], target: i0.ɵɵFactoryTarget.Component });
TabParagraphContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: TabParagraphContainerComponent, selector: "cx-tab-paragraph-container", viewQueries: [{ propertyName: "children", predicate: ComponentWrapperDirective, descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"components$ | async as components\">\n  <ng-container *ngFor=\"let component of components; let i = index\">\n    <ng-container *ngIf=\"component\">\n      <button [class.active]=\"i === activeTabNum\" (click)=\"select(i, $event)\">\n        {{\n          component.title | cxTranslate: { param: tabTitleParams[i] | async }\n        }}\n      </button>\n    </ng-container>\n  </ng-container>\n\n  <ng-container *ngFor=\"let component of components; let i = index\">\n    <ng-container *ngIf=\"component\">\n      <div [class.active]=\"i === activeTabNum\">\n        <ng-template [cxOutlet]=\"component.flexType\" [cxOutletContext]=\"{}\">\n          <ng-container\n            [cxComponentWrapper]=\"component\"\n            (cxComponentRef)=\"tabCompLoaded($event)\"\n          ></ng-container>\n        </ng-template>\n      </div>\n    </ng-container>\n  </ng-container>\n</ng-container>\n", directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.OutletDirective, selector: "[cxOutlet]", inputs: ["cxOutlet", "cxOutletContext", "cxOutletDefer"], outputs: ["loaded"] }, { type: i6.ComponentWrapperDirective, selector: "[cxComponentWrapper]", inputs: ["cxComponentWrapper"], outputs: ["cxComponentRef"] }], pipes: { "async": i4.AsyncPipe, "cxTranslate": i2.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: TabParagraphContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-tab-paragraph-container',
                    templateUrl: './tab-paragraph-container.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CmsComponentData }, { type: i2.CmsService }, { type: i2.WindowRef }, { type: i3.BreakpointService }]; }, propDecorators: { children: [{
                type: ViewChildren,
                args: [ComponentWrapperDirective]
            }] } });
//# sourceMappingURL=data:application/json;base64,