import { OnDestroy } from '@angular/core';
import { CheckoutDeliveryFacade, ClearCheckoutFacade } from '@spartacus/checkout/root';
import { EventService } from '@spartacus/core';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
export declare class CheckoutEventListener implements OnDestroy {
    protected checkoutDeliveryFacade: CheckoutDeliveryFacade;
    protected clearCheckoutFacade: ClearCheckoutFacade;
    protected eventService: EventService;
    protected subscription: Subscription;
    constructor(checkoutDeliveryFacade: CheckoutDeliveryFacade, clearCheckoutFacade: ClearCheckoutFacade, eventService: EventService);
    /**
     * Clears the checkout delivery info when an address in the address book is
     * changed ( updated, set as default or deleted )
     *
     * Listens for UpdateUserAddressEvent or DeleteUserAddressEvent
     */
    protected onUserAddressChange(): void;
    /**
     * What te active cart is saved for later or when a saved card is restored,
     * the whole checkout state is reset.
     *
     * Listens for SaveCartSuccessEvent or RestoreSavedCartSuccessEvent
     */
    protected onSavedCartChange(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CheckoutEventListener, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CheckoutEventListener>;
}
