import { Store } from '@ngrx/store';
import { PaymentTypeFacade } from '@spartacus/checkout/root';
import { ActiveCartService, PaymentType, StateWithProcess, UserIdService } from '@spartacus/core';
import { Observable } from 'rxjs';
import { StateWithCheckout } from '../store/checkout-state';
import * as i0 from "@angular/core";
export declare class PaymentTypeService implements PaymentTypeFacade {
    protected checkoutStore: Store<StateWithCheckout>;
    protected processStateStore: Store<StateWithProcess<void>>;
    protected activeCartService: ActiveCartService;
    protected userIdService: UserIdService;
    constructor(checkoutStore: Store<StateWithCheckout>, processStateStore: Store<StateWithProcess<void>>, activeCartService: ActiveCartService, userIdService: UserIdService);
    /**
     * Get payment types
     */
    getPaymentTypes(): Observable<PaymentType[]>;
    /**
     * Load the supported payment types
     */
    loadPaymentTypes(): void;
    /**
     * Set payment type to cart
     * @param typeCode
     * @param poNumber : purchase order number
     */
    setPaymentType(typeCode: string, poNumber?: string): void;
    /**
     * Get the selected payment type
     */
    getSelectedPaymentType(): Observable<string | undefined>;
    /**
     * Get whether the selected payment type is "ACCOUNT" payment
     */
    isAccountPayment(): Observable<boolean>;
    /**
     * Get PO Number
     */
    getPoNumber(): Observable<string | undefined>;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentTypeService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<PaymentTypeService>;
}
