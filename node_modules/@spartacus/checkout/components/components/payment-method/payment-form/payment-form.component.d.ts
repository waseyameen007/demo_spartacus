import { EventEmitter, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { CheckoutDeliveryFacade, CheckoutPaymentFacade } from '@spartacus/checkout/root';
import { Address, AddressValidation, CardType, Country, GlobalMessageService, Region, StateUtils, UserAddressService, UserPaymentService } from '@spartacus/core';
import { Card, ICON_TYPE, ModalRef, ModalService } from '@spartacus/storefront';
import { BehaviorSubject, Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class PaymentFormComponent implements OnInit {
    protected checkoutPaymentService: CheckoutPaymentFacade;
    protected checkoutDeliveryService: CheckoutDeliveryFacade;
    protected userPaymentService: UserPaymentService;
    protected globalMessageService: GlobalMessageService;
    protected fb: FormBuilder;
    protected modalService: ModalService;
    protected userAddressService: UserAddressService;
    iconTypes: typeof ICON_TYPE;
    suggestedAddressModalRef: ModalRef | null;
    months: string[];
    years: number[];
    cardTypes$: Observable<CardType[]>;
    shippingAddress$: Observable<Address>;
    countries$: Observable<Country[]>;
    loading$: Observable<StateUtils.LoaderState<void>>;
    sameAsShippingAddress: boolean;
    regions$: Observable<Region[]>;
    selectedCountry$: BehaviorSubject<string>;
    showSameAsShippingAddressCheckbox$: Observable<boolean>;
    setAsDefaultField: boolean;
    paymentMethodsCount: number;
    goBack: EventEmitter<any>;
    closeForm: EventEmitter<any>;
    setPaymentDetails: EventEmitter<any>;
    paymentForm: FormGroup;
    billingAddressForm: FormGroup;
    constructor(checkoutPaymentService: CheckoutPaymentFacade, checkoutDeliveryService: CheckoutDeliveryFacade, userPaymentService: UserPaymentService, globalMessageService: GlobalMessageService, fb: FormBuilder, modalService: ModalService, userAddressService: UserAddressService);
    ngOnInit(): void;
    expMonthAndYear(): void;
    toggleDefaultPaymentMethod(): void;
    toggleSameAsShippingAddress(): void;
    getAddressCardContent(address: Address): Card;
    openSuggestedAddress(results: AddressValidation): void;
    close(): void;
    back(): void;
    verifyAddress(): void;
    protected handleAddressVerificationResults(results: AddressValidation): void;
    countrySelected(country: Country): void;
    next(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PaymentFormComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PaymentFormComponent, "cx-payment-form", never, { "setAsDefaultField": "setAsDefaultField"; "paymentMethodsCount": "paymentMethodsCount"; }, { "goBack": "goBack"; "closeForm": "closeForm"; "setPaymentDetails": "setPaymentDetails"; }, never, never>;
}
