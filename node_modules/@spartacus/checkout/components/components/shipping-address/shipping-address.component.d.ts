import { OnDestroy, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CheckoutCostCenterFacade, CheckoutDeliveryFacade, PaymentTypeFacade } from '@spartacus/checkout/root';
import { ActiveCartService, Address, TranslationService, UserAddressService, UserCostCenterService } from '@spartacus/core';
import { Card } from '@spartacus/storefront';
import { Observable, Subscription } from 'rxjs';
import { CheckoutStepService } from '../../services/checkout-step.service';
import * as i0 from "@angular/core";
export interface CardWithAddress {
    card: Card;
    address: Address;
}
export declare class ShippingAddressComponent implements OnInit, OnDestroy {
    protected userAddressService: UserAddressService;
    protected checkoutDeliveryService: CheckoutDeliveryFacade;
    protected activatedRoute: ActivatedRoute;
    protected translation: TranslationService;
    protected activeCartService: ActiveCartService;
    protected checkoutStepService: CheckoutStepService;
    protected paymentTypeService?: PaymentTypeFacade | undefined;
    protected userCostCenterService?: UserCostCenterService | undefined;
    protected checkoutCostCenterService?: CheckoutCostCenterFacade | undefined;
    addressFormOpened: boolean;
    forceLoader: boolean;
    selectedAddress: Address;
    doneAutoSelect: boolean;
    isAccountPayment: boolean;
    protected subscriptions: Subscription;
    constructor(userAddressService: UserAddressService, checkoutDeliveryService: CheckoutDeliveryFacade, activatedRoute: ActivatedRoute, translation: TranslationService, activeCartService: ActiveCartService, checkoutStepService: CheckoutStepService, paymentTypeService?: PaymentTypeFacade | undefined, userCostCenterService?: UserCostCenterService | undefined, checkoutCostCenterService?: CheckoutCostCenterFacade | undefined);
    get isGuestCheckout(): boolean;
    get backBtnText(): string;
    get isLoading$(): Observable<boolean>;
    get selectedAddress$(): Observable<Address>;
    get cards$(): Observable<CardWithAddress[]>;
    getSupportedAddresses(): Observable<Address[]>;
    selectDefaultAddress(addresses: Address[], selected: Address | undefined): void;
    ngOnInit(): void;
    getCardContent(address: Address, selected: any, textDefaultShippingAddress: string, textShipToThisAddress: string, textSelected: string): Card;
    selectAddress(address: Address): void;
    addAddress(address: Address): void;
    showNewAddressForm(): void;
    hideNewAddressForm(goPrevious?: boolean): void;
    next(): void;
    back(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<ShippingAddressComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ShippingAddressComponent, "cx-shipping-address", never, {}, {}, never, never>;
}
