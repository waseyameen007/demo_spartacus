import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { combineLatest, Subscription } from 'rxjs';
import { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/checkout/root";
import * as i3 from "@angular/router";
import * as i4 from "../../services/checkout-step.service";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@angular/common";
export class ShippingAddressComponent {
    constructor(userAddressService, checkoutDeliveryService, activatedRoute, translation, activeCartService, checkoutStepService, paymentTypeService, userCostCenterService, checkoutCostCenterService) {
        this.userAddressService = userAddressService;
        this.checkoutDeliveryService = checkoutDeliveryService;
        this.activatedRoute = activatedRoute;
        this.translation = translation;
        this.activeCartService = activeCartService;
        this.checkoutStepService = checkoutStepService;
        this.paymentTypeService = paymentTypeService;
        this.userCostCenterService = userCostCenterService;
        this.checkoutCostCenterService = checkoutCostCenterService;
        this.addressFormOpened = false;
        this.forceLoader = false; // this helps with smoother steps transition
        this.doneAutoSelect = false;
        this.isAccountPayment = false;
        this.subscriptions = new Subscription();
    }
    get isGuestCheckout() {
        return this.activeCartService.isGuestCart();
    }
    get backBtnText() {
        return this.checkoutStepService.getBackBntText(this.activatedRoute);
    }
    get isLoading$() {
        return this.userAddressService.getAddressesLoading();
    }
    get selectedAddress$() {
        return this.checkoutDeliveryService.getDeliveryAddress().pipe(tap((address) => {
            if (address &&
                (this.selectedAddress === undefined ||
                    this.selectedAddress.id !== address.id)) {
                this.selectedAddress = address;
                if (this.forceLoader) {
                    this.next();
                }
            }
        }));
    }
    get cards$() {
        return combineLatest([
            this.getSupportedAddresses(),
            this.selectedAddress$,
            this.translation.translate('checkoutAddress.defaultShippingAddress'),
            this.translation.translate('checkoutAddress.shipToThisAddress'),
            this.translation.translate('addressCard.selected'),
        ]).pipe(tap(([addresses, selected]) => this.selectDefaultAddress(addresses, selected)), map(([addresses, selected, textDefault, textShipTo, textSelected]) => addresses.map((address) => ({
            address,
            card: this.getCardContent(address, selected, textDefault, textShipTo, textSelected),
        }))));
    }
    getSupportedAddresses() {
        if (this.isAccountPayment &&
            this.checkoutCostCenterService &&
            this.userCostCenterService) {
            return this.checkoutCostCenterService.getCostCenter().pipe(distinctUntilChanged(), switchMap((selected) => {
                var _a, _b;
                this.doneAutoSelect = false;
                return ((_b = (_a = this.userCostCenterService) === null || _a === void 0 ? void 0 : _a.getCostCenterAddresses(selected)) !== null && _b !== void 0 ? _b : []);
            }));
        }
        return this.userAddressService.getAddresses();
    }
    selectDefaultAddress(addresses, selected) {
        if (!this.doneAutoSelect &&
            addresses &&
            addresses.length &&
            (!selected || Object.keys(selected).length === 0)) {
            if (this.isAccountPayment) {
                if (addresses.length === 1) {
                    this.selectAddress(addresses[0]);
                }
            }
            else {
                selected = addresses.find((address) => address.defaultAddress);
                if (selected) {
                    this.selectAddress(selected);
                }
            }
            this.doneAutoSelect = true;
        }
    }
    ngOnInit() {
        if (this.paymentTypeService &&
            this.userCostCenterService &&
            this.checkoutCostCenterService) {
            this.subscriptions.add(this.paymentTypeService
                .isAccountPayment()
                .pipe(distinctUntilChanged())
                .subscribe((isAccount) => (this.isAccountPayment = isAccount)));
        }
        if (!this.isGuestCheckout && !this.isAccountPayment) {
            this.userAddressService.loadAddresses();
        }
    }
    getCardContent(address, selected, textDefaultShippingAddress, textShipToThisAddress, textSelected) {
        var _a;
        let region = '';
        if (address.region && address.region.isocode) {
            region = address.region.isocode + ', ';
        }
        return {
            title: address.defaultAddress ? textDefaultShippingAddress : '',
            textBold: address.firstName + ' ' + address.lastName,
            text: [
                address.line1,
                address.line2,
                address.town + ', ' + region + ((_a = address.country) === null || _a === void 0 ? void 0 : _a.isocode),
                address.postalCode,
                address.phone,
            ],
            actions: [{ name: textShipToThisAddress, event: 'send' }],
            header: selected && selected.id === address.id ? textSelected : '',
        };
    }
    selectAddress(address) {
        this.checkoutDeliveryService.setDeliveryAddress(address);
    }
    addAddress(address) {
        this.forceLoader = true;
        if (Boolean(address)) {
            this.checkoutDeliveryService.createAndSetAddress(address);
        }
        else {
            this.forceLoader = false;
            this.next();
        }
    }
    showNewAddressForm() {
        this.addressFormOpened = true;
    }
    hideNewAddressForm(goPrevious = false) {
        this.addressFormOpened = false;
        if (goPrevious) {
            this.back();
        }
    }
    next() {
        this.checkoutStepService.next(this.activatedRoute);
    }
    back() {
        this.checkoutStepService.back(this.activatedRoute);
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
}
ShippingAddressComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ShippingAddressComponent, deps: [{ token: i1.UserAddressService }, { token: i2.CheckoutDeliveryFacade }, { token: i3.ActivatedRoute }, { token: i1.TranslationService }, { token: i1.ActiveCartService }, { token: i4.CheckoutStepService }, { token: i2.PaymentTypeFacade }, { token: i1.UserCostCenterService }, { token: i2.CheckoutCostCenterFacade }], target: i0.ɵɵFactoryTarget.Component });
ShippingAddressComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ShippingAddressComponent, selector: "cx-shipping-address", ngImport: i0, template: "<ng-container *ngIf=\"cards$ | async as cards\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutAddress.shippingAddress' | cxTranslate }}\n  </h2>\n  <ng-container *ngIf=\"!forceLoader && !(isLoading$ | async); else loading\">\n    <ng-container\n      *ngIf=\"\n        isAccountPayment || (cards?.length && !addressFormOpened);\n        else newAddressForm\n      \"\n    >\n      <p class=\"cx-checkout-text\">\n        {{ 'checkoutAddress.selectYourShippingAddress' | cxTranslate }}\n      </p>\n      <div class=\"cx-checkout-btns row\" *ngIf=\"!isAccountPayment\">\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"showNewAddressForm()\"\n          >\n            {{ 'checkoutAddress.addNewAddress' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-body row\">\n        <div\n          class=\"cx-shipping-address-card col-md-12 col-lg-6\"\n          *ngFor=\"let card of cards; let i = index\"\n        >\n          <div\n            class=\"cx-shipping-address-card-inner\"\n            (click)=\"selectAddress(card.address)\"\n          >\n            <cx-card\n              [border]=\"true\"\n              [fitToContainer]=\"true\"\n              [content]=\"card.card\"\n              (sendCard)=\"selectAddress(card.address)\"\n            ></cx-card>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-btns row\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button class=\"cx-btn btn btn-block btn-action\" (click)=\"back()\">\n            {{ backBtnText | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"cx-btn btn btn-block btn-primary\"\n            [disabled]=\"!selectedAddress?.id\"\n            (click)=\"next()\"\n          >\n            {{ 'common.continue' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #newAddressForm>\n      <cx-address-form\n        *ngIf=\"cards.length; else initialAddressForm\"\n        [showTitleCode]=\"true\"\n        (backToAddress)=\"hideNewAddressForm(false)\"\n        (submitAddress)=\"addAddress($event)\"\n      ></cx-address-form>\n      <ng-template #initialAddressForm>\n        <cx-address-form\n          [showTitleCode]=\"true\"\n          [setAsDefaultField]=\"!isGuestCheckout\"\n          [addressData]=\"selectedAddress\"\n          cancelBtnLabel=\"{{ backBtnText | cxTranslate }}\"\n          (backToAddress)=\"hideNewAddressForm(true)\"\n          (submitAddress)=\"addAddress($event)\"\n        ></cx-address-form>\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #loading>\n    <div class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </ng-template>\n</ng-container>\n", components: [{ type: i5.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { type: i5.AddressFormComponent, selector: "cx-address-form", inputs: ["addressData", "actionBtnLabel", "cancelBtnLabel", "setAsDefaultField", "showTitleCode", "showCancelBtn"], outputs: ["submitAddress", "backToAddress"] }, { type: i5.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i6.AsyncPipe, "cxTranslate": i1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ShippingAddressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-shipping-address',
                    templateUrl: './shipping-address.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.UserAddressService }, { type: i2.CheckoutDeliveryFacade }, { type: i3.ActivatedRoute }, { type: i1.TranslationService }, { type: i1.ActiveCartService }, { type: i4.CheckoutStepService }, { type: i2.PaymentTypeFacade }, { type: i1.UserCostCenterService }, { type: i2.CheckoutCostCenterFacade }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hpcHBpbmctYWRkcmVzcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29tcG9uZW50cy9jb21wb25lbnRzL3NoaXBwaW5nLWFkZHJlc3Mvc2hpcHBpbmctYWRkcmVzcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29tcG9uZW50cy9jb21wb25lbnRzL3NoaXBwaW5nLWFkZHJlc3Mvc2hpcHBpbmctYWRkcmVzcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsR0FHVixNQUFNLGVBQWUsQ0FBQztBQWV2QixPQUFPLEVBQUUsYUFBYSxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7Ozs7QUFhM0UsTUFBTSxPQUFPLHdCQUF3QjtJQVNuQyxZQUNZLGtCQUFzQyxFQUN0Qyx1QkFBK0MsRUFDL0MsY0FBOEIsRUFDOUIsV0FBK0IsRUFDL0IsaUJBQW9DLEVBQ3BDLG1CQUF3QyxFQUN4QyxrQkFBc0MsRUFDdEMscUJBQTZDLEVBQzdDLHlCQUFvRDtRQVJwRCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLDRCQUF1QixHQUF2Qix1QkFBdUIsQ0FBd0I7UUFDL0MsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFvQjtRQUMvQixzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBQ3BDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7UUFDeEMsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QywwQkFBcUIsR0FBckIscUJBQXFCLENB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b3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge1xuICBDaGVja291dENvc3RDZW50ZXJGYWNhZGUsXG4gIENoZWNrb3V0RGVsaXZlcnlGYWNhZGUsXG4gIFBheW1lbnRUeXBlRmFjYWRlLFxufSBmcm9tICdAc3BhcnRhY3VzL2NoZWNrb3V0L3Jvb3QnO1xuaW1wb3J0IHtcbiAgQWN0aXZlQ2FydFNlcnZpY2UsXG4gIEFkZHJlc3MsXG4gIFRyYW5zbGF0aW9uU2VydmljZSxcbiAgVXNlckFkZHJlc3NTZXJ2aWNlLFxuICBVc2VyQ29zdENlbnRlclNlcnZpY2UsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBDYXJkIH0gZnJvbSAnQHNwYXJ0YWN1cy9zdG9yZWZyb250JztcbmltcG9ydCB7IGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGUsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBDaGVja291dFN0ZXBTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2hlY2tvdXQtc3RlcC5zZXJ2aWNlJztcblxuZXhwb3J0IGludGVyZmFjZSBDYXJkV2l0aEFkZHJlc3Mge1xuICBjYXJkOiBDYXJkO1xuICBhZGRyZXNzOiBBZGRyZXNzO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1zaGlwcGluZy1hZGRyZXNzJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NoaXBwaW5nLWFkZHJlc3MuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU2hpcHBpbmdBZGRyZXNzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBhZGRyZXNzRm9ybU9wZW5lZCA9IGZhbHNlO1xuICBmb3JjZUxvYWRlciA9IGZhbHNlOyAvLyB0aGlzIGhlbHBzIHdpdGggc21vb3RoZXIgc3RlcHMgdHJhbnNpdGlvblxuICBzZWxlY3RlZEFkZHJlc3M6IEFkZHJlc3M7XG4gIGRvbmVBdXRvU2VsZWN0ID0gZmFsc2U7XG4gIGlzQWNjb3VudFBheW1lbnQgPSBmYWxzZTtcblxuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9ucyA9IG5ldyBTdWJzY3JpcHRpb24oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdXNlckFkZHJlc3NTZXJ2aWNlOiBVc2VyQWRkcmVzc1NlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0RGVsaXZlcnlTZXJ2aWNlOiBDaGVja291dERlbGl2ZXJ5RmFjYWRlLFxuICAgIHByb3RlY3RlZCBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJvdGVjdGVkIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGFjdGl2ZUNhcnRTZXJ2aWNlOiBBY3RpdmVDYXJ0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY2hlY2tvdXRTdGVwU2VydmljZTogQ2hlY2tvdXRTdGVwU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgcGF5bWVudFR5cGVTZXJ2aWNlPzogUGF5bWVudFR5cGVGYWNhZGUsXG4gICAgcHJvdGVjdGVkIHVzZXJDb3N0Q2VudGVyU2VydmljZT86IFVzZXJDb3N0Q2VudGVyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY2hlY2tvdXRDb3N0Q2VudGVyU2VydmljZT86IENoZWNrb3V0Q29zdENlbnRlckZhY2FkZVxuICApIHt9XG5cbiAgZ2V0IGlzR3Vlc3RDaGVja291dCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5hY3RpdmVDYXJ0U2VydmljZS5pc0d1ZXN0Q2FydCgpO1xuICB9XG5cbiAgZ2V0IGJhY2tCdG5UZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY2hlY2tvdXRTdGVwU2VydmljZS5nZXRCYWNrQm50VGV4dCh0aGlzLmFjdGl2YXRlZFJvdXRlKTtcbiAgfVxuXG4gIGdldCBpc0xvYWRpbmckKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnVzZXJBZGRyZXNzU2VydmljZS5nZXRBZGRyZXNzZXNMb2FkaW5nKCk7XG4gIH1cblxuICBnZXQgc2VsZWN0ZWRBZGRyZXNzJCgpOiBPYnNlcnZhYmxlPEFkZHJlc3M+IHtcbiAgICByZXR1cm4gdGhpcy5jaGVja291dERlbGl2ZXJ5U2VydmljZS5nZXREZWxpdmVyeUFkZHJlc3MoKS5waXBlKFxuICAgICAgdGFwKChhZGRyZXNzKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBhZGRyZXNzICYmXG4gICAgICAgICAgKHRoaXMuc2VsZWN0ZWRBZGRyZXNzID09PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzLmlkICE9PSBhZGRyZXNzLmlkKVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkQWRkcmVzcyA9IGFkZHJlc3M7XG4gICAgICAgICAgaWYgKHRoaXMuZm9yY2VMb2FkZXIpIHtcbiAgICAgICAgICAgIHRoaXMubmV4dCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgZ2V0IGNhcmRzJCgpOiBPYnNlcnZhYmxlPENhcmRXaXRoQWRkcmVzc1tdPiB7XG4gICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW1xuICAgICAgdGhpcy5nZXRTdXBwb3J0ZWRBZGRyZXNzZXMoKSxcbiAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzJCxcbiAgICAgIHRoaXMudHJhbnNsYXRpb24udHJhbnNsYXRlKCdjaGVja291dEFkZHJlc3MuZGVmYXVsdFNoaXBwaW5nQWRkcmVzcycpLFxuICAgICAgdGhpcy50cmFuc2xhdGlvbi50cmFuc2xhdGUoJ2NoZWNrb3V0QWRkcmVzcy5zaGlwVG9UaGlzQWRkcmVzcycpLFxuICAgICAgdGhpcy50cmFuc2xhdGlvbi50cmFuc2xhdGUoJ2FkZHJlc3NDYXJkLnNlbGVjdGVkJyksXG4gICAgXSkucGlwZShcbiAgICAgIHRhcCgoW2FkZHJlc3Nlcywgc2VsZWN0ZWRdKSA9PlxuICAgICAgICB0aGlzLnNlbGVjdERlZmF1bHRBZGRyZXNzKGFkZHJlc3Nlcywgc2VsZWN0ZWQpXG4gICAgICApLFxuICAgICAgbWFwKChbYWRkcmVzc2VzLCBzZWxlY3RlZCwgdGV4dERlZmF1bHQsIHRleHRTaGlwVG8sIHRleHRTZWxlY3RlZF0pID0+XG4gICAgICAgICg8YW55PmFkZHJlc3NlcykubWFwKChhZGRyZXNzOiBBZGRyZXNzKSA9PiAoe1xuICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgY2FyZDogdGhpcy5nZXRDYXJkQ29udGVudChcbiAgICAgICAgICAgIGFkZHJlc3MsXG4gICAgICAgICAgICBzZWxlY3RlZCxcbiAgICAgICAgICAgIHRleHREZWZhdWx0LFxuICAgICAgICAgICAgdGV4dFNoaXBUbyxcbiAgICAgICAgICAgIHRleHRTZWxlY3RlZFxuICAgICAgICAgICksXG4gICAgICAgIH0pKVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBnZXRTdXBwb3J0ZWRBZGRyZXNzZXMoKTogT2JzZXJ2YWJsZTxBZGRyZXNzW10+IHtcbiAgICBpZiAoXG4gICAgICB0aGlzLmlzQWNjb3VudFBheW1lbnQgJiZcbiAgICAgIHRoaXMuY2hlY2tvdXRDb3N0Q2VudGVyU2VydmljZSAmJlxuICAgICAgdGhpcy51c2VyQ29zdENlbnRlclNlcnZpY2VcbiAgICApIHtcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrb3V0Q29zdENlbnRlclNlcnZpY2UuZ2V0Q29zdENlbnRlcigpLnBpcGUoXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIHN3aXRjaE1hcCgoc2VsZWN0ZWQpID0+IHtcbiAgICAgICAgICB0aGlzLmRvbmVBdXRvU2VsZWN0ID0gZmFsc2U7XG4gICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMudXNlckNvc3RDZW50ZXJTZXJ2aWNlPy5nZXRDb3N0Q2VudGVyQWRkcmVzc2VzKFxuICAgICAgICAgICAgICBzZWxlY3RlZCBhcyBzdHJpbmdcbiAgICAgICAgICAgICkgPz8gW11cbiAgICAgICAgICApO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudXNlckFkZHJlc3NTZXJ2aWNlLmdldEFkZHJlc3NlcygpO1xuICB9XG5cbiAgc2VsZWN0RGVmYXVsdEFkZHJlc3MoYWRkcmVzc2VzOiBBZGRyZXNzW10sIHNlbGVjdGVkOiBBZGRyZXNzIHwgdW5kZWZpbmVkKSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMuZG9uZUF1dG9TZWxlY3QgJiZcbiAgICAgIGFkZHJlc3NlcyAmJlxuICAgICAgYWRkcmVzc2VzLmxlbmd0aCAmJlxuICAgICAgKCFzZWxlY3RlZCB8fCBPYmplY3Qua2V5cyhzZWxlY3RlZCkubGVuZ3RoID09PSAwKVxuICAgICkge1xuICAgICAgaWYgKHRoaXMuaXNBY2NvdW50UGF5bWVudCkge1xuICAgICAgICBpZiAoYWRkcmVzc2VzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0QWRkcmVzcyhhZGRyZXNzZXNbMF0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxlY3RlZCA9IGFkZHJlc3Nlcy5maW5kKChhZGRyZXNzKSA9PiBhZGRyZXNzLmRlZmF1bHRBZGRyZXNzKTtcbiAgICAgICAgaWYgKHNlbGVjdGVkKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3RBZGRyZXNzKHNlbGVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5kb25lQXV0b1NlbGVjdCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5wYXltZW50VHlwZVNlcnZpY2UgJiZcbiAgICAgIHRoaXMudXNlckNvc3RDZW50ZXJTZXJ2aWNlICYmXG4gICAgICB0aGlzLmNoZWNrb3V0Q29zdENlbnRlclNlcnZpY2VcbiAgICApIHtcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5hZGQoXG4gICAgICAgIHRoaXMucGF5bWVudFR5cGVTZXJ2aWNlXG4gICAgICAgICAgLmlzQWNjb3VudFBheW1lbnQoKVxuICAgICAgICAgIC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCkpXG4gICAgICAgICAgLnN1YnNjcmliZSgoaXNBY2NvdW50KSA9PiAodGhpcy5pc0FjY291bnRQYXltZW50ID0gaXNBY2NvdW50KSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzR3Vlc3RDaGVja291dCAmJiAhdGhpcy5pc0FjY291bnRQYXltZW50KSB7XG4gICAgICB0aGlzLnVzZXJBZGRyZXNzU2VydmljZS5sb2FkQWRkcmVzc2VzKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0Q2FyZENvbnRlbnQoXG4gICAgYWRkcmVzczogQWRkcmVzcyxcbiAgICBzZWxlY3RlZDogYW55LFxuICAgIHRleHREZWZhdWx0U2hpcHBpbmdBZGRyZXNzOiBzdHJpbmcsXG4gICAgdGV4dFNoaXBUb1RoaXNBZGRyZXNzOiBzdHJpbmcsXG4gICAgdGV4dFNlbGVjdGVkOiBzdHJpbmdcbiAgKTogQ2FyZCB7XG4gICAgbGV0IHJlZ2lvbiA9ICcnO1xuICAgIGlmIChhZGRyZXNzLnJlZ2lvbiAmJiBhZGRyZXNzLnJlZ2lvbi5pc29jb2RlKSB7XG4gICAgICByZWdpb24gPSBhZGRyZXNzLnJlZ2lvbi5pc29jb2RlICsgJywgJztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGU6IGFkZHJlc3MuZGVmYXVsdEFkZHJlc3MgPyB0ZXh0RGVmYXVsdFNoaXBwaW5nQWRkcmVzcyA6ICcnLFxuICAgICAgdGV4dEJvbGQ6IGFkZHJlc3MuZmlyc3ROYW1lICsgJyAnICsgYWRkcmVzcy5sYXN0TmFtZSxcbiAgICAgIHRleHQ6IFtcbiAgICAgICAgYWRkcmVzcy5saW5lMSxcbiAgICAgICAgYWRkcmVzcy5saW5lMixcbiAgICAgICAgYWRkcmVzcy50b3duICsgJywgJyArIHJlZ2lvbiArIGFkZHJlc3MuY291bnRyeT8uaXNvY29kZSxcbiAgICAgICAgYWRkcmVzcy5wb3N0YWxDb2RlLFxuICAgICAgICBhZGRyZXNzLnBob25lLFxuICAgICAgXSxcbiAgICAgIGFjdGlvbnM6IFt7IG5hbWU6IHRleHRTaGlwVG9UaGlzQWRkcmVzcywgZXZlbnQ6ICdzZW5kJyB9XSxcbiAgICAgIGhlYWRlcjogc2VsZWN0ZWQgJiYgc2VsZWN0ZWQuaWQgPT09IGFkZHJlc3MuaWQgPyB0ZXh0U2VsZWN0ZWQgOiAnJyxcbiAgICB9IGFzIENhcmQ7XG4gIH1cblxuICBzZWxlY3RBZGRyZXNzKGFkZHJlc3M6IEFkZHJlc3MpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrb3V0RGVsaXZlcnlTZXJ2aWNlLnNldERlbGl2ZXJ5QWRkcmVzcyhhZGRyZXNzKTtcbiAgfVxuXG4gIGFkZEFkZHJlc3MoYWRkcmVzczogQWRkcmVzcyk6IHZvaWQge1xuICAgIHRoaXMuZm9yY2VMb2FkZXIgPSB0cnVlO1xuICAgIGlmIChCb29sZWFuKGFkZHJlc3MpKSB7XG4gICAgICB0aGlzLmNoZWNrb3V0RGVsaXZlcnlTZXJ2aWNlLmNyZWF0ZUFuZFNldEFkZHJlc3MoYWRkcmVzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZm9yY2VMb2FkZXIgPSBmYWxzZTtcbiAgICAgIHRoaXMubmV4dCgpO1xuICAgIH1cbiAgfVxuXG4gIHNob3dOZXdBZGRyZXNzRm9ybSgpOiB2b2lkIHtcbiAgICB0aGlzLmFkZHJlc3NGb3JtT3BlbmVkID0gdHJ1ZTtcbiAgfVxuXG4gIGhpZGVOZXdBZGRyZXNzRm9ybShnb1ByZXZpb3VzOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcbiAgICB0aGlzLmFkZHJlc3NGb3JtT3BlbmVkID0gZmFsc2U7XG4gICAgaWYgKGdvUHJldmlvdXMpIHtcbiAgICAgIHRoaXMuYmFjaygpO1xuICAgIH1cbiAgfVxuXG4gIG5leHQoKTogdm9pZCB7XG4gICAgdGhpcy5jaGVja291dFN0ZXBTZXJ2aWNlLm5leHQodGhpcy5hY3RpdmF0ZWRSb3V0ZSk7XG4gIH1cblxuICBiYWNrKCk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tvdXRTdGVwU2VydmljZS5iYWNrKHRoaXMuYWN0aXZhdGVkUm91dGUpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJjYXJkcyQgfCBhc3luYyBhcyBjYXJkc1wiPlxuICA8aDIgY2xhc3M9XCJjeC1jaGVja291dC10aXRsZSBkLW5vbmUgZC1sZy1ibG9jayBkLXhsLWJsb2NrXCI+XG4gICAge3sgJ2NoZWNrb3V0QWRkcmVzcy5zaGlwcGluZ0FkZHJlc3MnIHwgY3hUcmFuc2xhdGUgfX1cbiAgPC9oMj5cbiAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFmb3JjZUxvYWRlciAmJiAhKGlzTG9hZGluZyQgfCBhc3luYyk7IGVsc2UgbG9hZGluZ1wiPlxuICAgIDxuZy1jb250YWluZXJcbiAgICAgICpuZ0lmPVwiXG4gICAgICAgIGlzQWNjb3VudFBheW1lbnQgfHwgKGNhcmRzPy5sZW5ndGggJiYgIWFkZHJlc3NGb3JtT3BlbmVkKTtcbiAgICAgICAgZWxzZSBuZXdBZGRyZXNzRm9ybVxuICAgICAgXCJcbiAgICA+XG4gICAgICA8cCBjbGFzcz1cImN4LWNoZWNrb3V0LXRleHRcIj5cbiAgICAgICAge3sgJ2NoZWNrb3V0QWRkcmVzcy5zZWxlY3RZb3VyU2hpcHBpbmdBZGRyZXNzJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L3A+XG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtY2hlY2tvdXQtYnRucyByb3dcIiAqbmdJZj1cIiFpc0FjY291bnRQYXltZW50XCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjb2wtc20tMTIgY29sLW1kLTEyIGNvbC1sZy02XCI+XG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgY2xhc3M9XCJidG4gYnRuLWJsb2NrIGJ0bi1hY3Rpb25cIlxuICAgICAgICAgICAgKGNsaWNrKT1cInNob3dOZXdBZGRyZXNzRm9ybSgpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7eyAnY2hlY2tvdXRBZGRyZXNzLmFkZE5ld0FkZHJlc3MnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPGRpdiBjbGFzcz1cImN4LWNoZWNrb3V0LWJvZHkgcm93XCI+XG4gICAgICAgIDxkaXZcbiAgICAgICAgICBjbGFzcz1cImN4LXNoaXBwaW5nLWFkZHJlc3MtY2FyZCBjb2wtbWQtMTIgY29sLWxnLTZcIlxuICAgICAgICAgICpuZ0Zvcj1cImxldCBjYXJkIG9mIGNhcmRzOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgICAgPlxuICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzPVwiY3gtc2hpcHBpbmctYWRkcmVzcy1jYXJkLWlubmVyXCJcbiAgICAgICAgICAgIChjbGljayk9XCJzZWxlY3RBZGRyZXNzKGNhcmQuYWRkcmVzcylcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxjeC1jYXJkXG4gICAgICAgICAgICAgIFtib3JkZXJdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgIFtmaXRUb0NvbnRhaW5lcl09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgW2NvbnRlbnRdPVwiY2FyZC5jYXJkXCJcbiAgICAgICAgICAgICAgKHNlbmRDYXJkKT1cInNlbGVjdEFkZHJlc3MoY2FyZC5hZGRyZXNzKVwiXG4gICAgICAgICAgICA+PC9jeC1jYXJkPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuXG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtY2hlY2tvdXQtYnRucyByb3dcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctNlwiPlxuICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJjeC1idG4gYnRuIGJ0bi1ibG9jayBidG4tYWN0aW9uXCIgKGNsaWNrKT1cImJhY2soKVwiPlxuICAgICAgICAgICAge3sgYmFja0J0blRleHQgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wtbGctNlwiPlxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIGNsYXNzPVwiY3gtYnRuIGJ0biBidG4tYmxvY2sgYnRuLXByaW1hcnlcIlxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cIiFzZWxlY3RlZEFkZHJlc3M/LmlkXCJcbiAgICAgICAgICAgIChjbGljayk9XCJuZXh0KClcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7ICdjb21tb24uY29udGludWUnIHwgY3hUcmFuc2xhdGUgfX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgIDxuZy10ZW1wbGF0ZSAjbmV3QWRkcmVzc0Zvcm0+XG4gICAgICA8Y3gtYWRkcmVzcy1mb3JtXG4gICAgICAgICpuZ0lmPVwiY2FyZHMubGVuZ3RoOyBlbHNlIGluaXRpYWxBZGRyZXNzRm9ybVwiXG4gICAgICAgIFtzaG93VGl0bGVDb2RlXT1cInRydWVcIlxuICAgICAgICAoYmFja1RvQWRkcmVzcyk9XCJoaWRlTmV3QWRkcmVzc0Zvcm0oZmFsc2UpXCJcbiAgICAgICAgKHN1Ym1pdEFkZHJlc3MpPVwiYWRkQWRkcmVzcygkZXZlbnQpXCJcbiAgICAgID48L2N4LWFkZHJlc3MtZm9ybT5cbiAgICAgIDxuZy10ZW1wbGF0ZSAjaW5pdGlhbEFkZHJlc3NGb3JtPlxuICAgICAgICA8Y3gtYWRkcmVzcy1mb3JtXG4gICAgICAgICAgW3Nob3dUaXRsZUNvZGVdPVwidHJ1ZVwiXG4gICAgICAgICAgW3NldEFzRGVmYXVsdEZpZWxkXT1cIiFpc0d1ZXN0Q2hlY2tvdXRcIlxuICAgICAgICAgIFthZGRyZXNzRGF0YV09XCJzZWxlY3RlZEFkZHJlc3NcIlxuICAgICAgICAgIGNhbmNlbEJ0bkxhYmVsPVwie3sgYmFja0J0blRleHQgfCBjeFRyYW5zbGF0ZSB9fVwiXG4gICAgICAgICAgKGJhY2tUb0FkZHJlc3MpPVwiaGlkZU5ld0FkZHJlc3NGb3JtKHRydWUpXCJcbiAgICAgICAgICAoc3VibWl0QWRkcmVzcyk9XCJhZGRBZGRyZXNzKCRldmVudClcIlxuICAgICAgICA+PC9jeC1hZGRyZXNzLWZvcm0+XG4gICAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIDwvbmctY29udGFpbmVyPlxuXG4gIDxuZy10ZW1wbGF0ZSAjbG9hZGluZz5cbiAgICA8ZGl2IGNsYXNzPVwiY3gtc3Bpbm5lclwiPlxuICAgICAgPGN4LXNwaW5uZXI+PC9jeC1zcGlubmVyPlxuICAgIDwvZGl2PlxuICA8L25nLXRlbXBsYXRlPlxuPC9uZy1jb250YWluZXI+XG4iXX0=