import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { DaysOfWeek, ORDER_TYPE, recurrencePeriod, } from '@spartacus/core';
import { ICON_TYPE } from '@spartacus/storefront';
import { Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/checkout/root";
import * as i2 from "../../services/checkout-replenishment-form-service";
import * as i3 from "@spartacus/storefront";
import * as i4 from "@angular/common";
import * as i5 from "@spartacus/core";
export class ScheduleReplenishmentOrderComponent {
    constructor(checkoutService, checkoutReplenishmentFormService) {
        this.checkoutService = checkoutService;
        this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
        this.subscription = new Subscription();
        this.iconTypes = ICON_TYPE;
        this.orderTypes = ORDER_TYPE;
        this.daysOfWeek = Object.values(DaysOfWeek);
        this.recurrencePeriodType = Object.values(recurrencePeriod);
        this.selectedOrderType$ = this.checkoutService.getCurrentOrderType();
        this.isMonthly = false;
        this.isWeekly = false;
        this.currentDaysOfWeek = [];
    }
    ngOnInit() {
        this.subscription.add(this.checkoutReplenishmentFormService
            .getScheduleReplenishmentFormData()
            .subscribe((data) => {
            this.scheduleReplenishmentFormData = data;
        }));
        this.initConfig();
    }
    changeOrderType(orderType) {
        this.checkoutService.setOrderType(orderType);
    }
    changeNumberOfDays(nDays) {
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { numberOfDays: nDays }));
    }
    changeNumberOfWeeks(nWeeks) {
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { numberOfWeeks: nWeeks }));
    }
    changeRecurrencePeriodType(type) {
        this.isWeekly = type === recurrencePeriod.WEEKLY;
        this.isMonthly = type === recurrencePeriod.MONTHLY;
        this.numberOfDays = this.isMonthly
            ? this.createNumberStringArray(31)
            : this.createNumberStringArray(30);
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { recurrencePeriod: type }));
    }
    changeDayOfTheMonth(dayOfMonth) {
        this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { nthDayOfMonth: dayOfMonth }));
    }
    changeReplenishmentStartDate(date) {
        if (Boolean(date)) {
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { replenishmentStartDate: date }));
        }
    }
    changeRepeatDays(day, isChecked) {
        if (isChecked) {
            this.currentDaysOfWeek = [...this.currentDaysOfWeek];
            this.currentDaysOfWeek.push(day);
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { daysOfWeek: this.currentDaysOfWeek }));
        }
        else {
            const foundDay = this.currentDaysOfWeek.find((data) => day === data);
            if (!foundDay)
                return;
            const index = this.currentDaysOfWeek.indexOf(foundDay);
            this.currentDaysOfWeek.splice(index, 1);
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { daysOfWeek: this.currentDaysOfWeek }));
        }
    }
    hasDaysOfWeekChecked(day) {
        return this.currentDaysOfWeek.includes(day);
    }
    initConfig() {
        var _a;
        this.isMonthly =
            this.scheduleReplenishmentFormData.recurrencePeriod ===
                recurrencePeriod.MONTHLY;
        this.isWeekly =
            this.scheduleReplenishmentFormData.recurrencePeriod ===
                recurrencePeriod.WEEKLY;
        this.currentDaysOfWeek = [
            ...((_a = this.scheduleReplenishmentFormData.daysOfWeek) !== null && _a !== void 0 ? _a : []),
        ];
        this.numberOfDays = this.isMonthly
            ? this.createNumberStringArray(31)
            : this.createNumberStringArray(30);
        this.numberOfWeeks = this.createNumberStringArray(12);
        this.currentDate =
            this.scheduleReplenishmentFormData.replenishmentStartDate;
    }
    createNumberStringArray(n) {
        return Array(n)
            .fill(0)
            .map((_, y) => (y + 1).toString());
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
}
ScheduleReplenishmentOrderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ScheduleReplenishmentOrderComponent, deps: [{ token: i1.CheckoutFacade }, { token: i2.CheckoutReplenishmentFormService }], target: i0.ɵɵFactoryTarget.Component });
ScheduleReplenishmentOrderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ScheduleReplenishmentOrderComponent, selector: "cx-schedule-replenishment-order", ngImport: i0, template: "<div class=\"cx-order-type-card\">\n  <div class=\"cx-label-container\">\n    <h5 class=\"cx-order-replenishment-header\">\n      {{ 'checkoutReview.autoReplenishOrder' | cxTranslate }}\n    </h5>\n    <cx-icon [type]=\"iconTypes.CLOCK\"></cx-icon>\n  </div>\n  <div\n    class=\"cx-order-type-container form-check\"\n    *ngFor=\"let type of orderTypes | keyvalue\"\n  >\n    <input\n      id=\"orderType-{{ type.value }}\"\n      class=\"scaled-input form-check-input\"\n      role=\"radio\"\n      type=\"radio\"\n      formControlName=\"orderType\"\n      aria-checked=\"true\"\n      (change)=\"changeOrderType(type.value)\"\n      [value]=\"type.value\"\n      [checked]=\"type.value == (selectedOrderType$ | async)\"\n    />\n    <label\n      class=\"order-type-label form-check-label form-radio-label\"\n      for=\"orderType-{{ type.value }}\"\n    >\n      <div class=\"order-type\">\n        {{ 'checkoutReview.orderType_' + type?.value | cxTranslate }}\n      </div>\n    </label>\n  </div>\n  <ng-container\n    *ngIf=\"\n      scheduleReplenishmentFormData &&\n      (selectedOrderType$ | async) === orderTypes.SCHEDULE_REPLENISHMENT_ORDER\n    \"\n  >\n    <div class=\"cx-replenishment-form-data-container\">\n      <div *ngIf=\"!isMonthly\" class=\"cx-days\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <ng-container *ngIf=\"isWeekly; else isDaily\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfWeeks($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nWeeks of numberOfWeeks\"\n              [value]=\"nWeeks\"\n              [selected]=\"\n                nWeeks === scheduleReplenishmentFormData.numberOfWeeks\n              \"\n            >\n              {{ nWeeks }}\n            </option>\n          </select>\n        </ng-container>\n        <ng-template #isDaily>\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfDays($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.numberOfDays\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </ng-template>\n      </div>\n      <div class=\"cx-month\">\n        <span *ngIf=\"isMonthly\" class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <select\n          class=\"form-control\"\n          (change)=\"changeRecurrencePeriodType($event.target.value)\"\n        >\n          <option\n            *ngFor=\"let type of recurrencePeriodType\"\n            [value]=\"type\"\n            [selected]=\"type === scheduleReplenishmentFormData.recurrencePeriod\"\n          >\n            {{ 'checkoutReview.recurrencePeriodType_' + type | cxTranslate }}\n          </option>\n        </select>\n      </div>\n      <div *ngIf=\"isMonthly\" class=\"cx-dayMonth\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.dayOfMonth' | cxTranslate\n        }}</span>\n        <div class=\"cx-day-of-month\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeDayOfTheMonth($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.nthDayOfMonth\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"cx-replenishment-form-data-container\">\n      <span class=\"form-data-label\">{{\n        'checkoutReview.startOn' | cxTranslate\n      }}</span>\n      <div class=\"cx-replenishment-date\">\n        <input\n          type=\"date\"\n          placeholder=\"yyyy-mm-dd\"\n          [value]=\"currentDate\"\n          (change)=\"changeReplenishmentStartDate($event.target.value)\"\n        />\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"isWeekly\"\n      class=\"cx-replenishment-form-data-container cx-repeat-days-container\"\n    >\n      <span class=\"cx-repeat-days form-data-label\">{{\n        'checkoutReview.repeatOnDays' | cxTranslate\n      }}</span>\n      <div *ngFor=\"let day of daysOfWeek\" class=\"form-check\">\n        <label for=\"day-{{ day }}\" class=\"cx-week-day\">{{\n          day | titlecase\n        }}</label\n        ><input\n          id=\"day-{{ day }}\"\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [checked]=\"hasDaysOfWeekChecked(day)\"\n          (change)=\"changeRepeatDays(day, $event.target.checked)\"\n        />\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i3.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxTranslate": i5.TranslatePipe, "keyvalue": i4.KeyValuePipe, "async": i4.AsyncPipe, "titlecase": i4.TitleCasePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: ScheduleReplenishmentOrderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-schedule-replenishment-order',
                    templateUrl: './schedule-replenishment-order.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CheckoutFacade }, { type: i2.CheckoutReplenishmentFormService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGUtcmVwbGVuaXNobWVudC1vcmRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29tcG9uZW50cy9jb21wb25lbnRzL3NjaGVkdWxlLXJlcGxlbmlzaG1lbnQtb3JkZXIvc2NoZWR1bGUtcmVwbGVuaXNobWVudC1vcmRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29tcG9uZW50cy9jb21wb25lbnRzL3NjaGVkdWxlLXJlcGxlbmlzaG1lbnQtb3JkZXIvc2NoZWR1bGUtcmVwbGVuaXNobWVudC1vcmRlci5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsdUJBQXVCLEVBQ3ZCLFNBQVMsR0FHVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0wsVUFBVSxFQUNWLFVBQVUsRUFDVixnQkFBZ0IsR0FFakIsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFjLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQzs7Ozs7OztBQVFoRCxNQUFNLE9BQU8sbUNBQW1DO0lBbUI5QyxZQUNZLGVBQStCLEVBQy9CLGdDQUFrRTtRQURsRSxvQkFBZSxHQUFmLGVBQWUsQ0FBZ0I7UUFDL0IscUNBQWdDLEdBQWhDLGdDQUFnQyxDQUFrQztRQXBCdEUsaUJBQVksR0FBaUIsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4RCxjQUFTLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLGVBQVUsR0FBRyxVQUFVLENBQUM7UUFDeEIsZUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMseUJBQW9CLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FB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QkFBdUIsQ0FBQyxDQUFTO1FBQ3ZDLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQzthQUNaLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDUCxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsQyxDQUFDOztnSUFoSlUsbUNBQW1DO29IQUFuQyxtQ0FBbUMsdUVDdEJoRCxtd0pBbUpBOzJGRDdIYSxtQ0FBbUM7a0JBTC9DLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlDQUFpQztvQkFDM0MsV0FBVyxFQUFFLCtDQUErQztvQkFDNUQsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ2hlY2tvdXRGYWNhZGUgfSBmcm9tICdAc3BhcnRhY3VzL2NoZWNrb3V0L3Jvb3QnO1xuaW1wb3J0IHtcbiAgRGF5c09mV2VlayxcbiAgT1JERVJfVFlQRSxcbiAgcmVjdXJyZW5jZVBlcmlvZCxcbiAgU2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jb3JlJztcbmltcG9ydCB7IElDT05fVFlQRSB9IGZyb20gJ0BzcGFydGFjdXMvc3RvcmVmcm9udCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY2hlY2tvdXQtcmVwbGVuaXNobWVudC1mb3JtLXNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1zY2hlZHVsZS1yZXBsZW5pc2htZW50LW9yZGVyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NjaGVkdWxlLXJlcGxlbmlzaG1lbnQtb3JkZXIuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU2NoZWR1bGVSZXBsZW5pc2htZW50T3JkZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb24gPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG5cbiAgaWNvblR5cGVzID0gSUNPTl9UWVBFO1xuICBvcmRlclR5cGVzID0gT1JERVJfVFlQRTtcbiAgZGF5c09mV2VlayA9IE9iamVjdC52YWx1ZXMoRGF5c09mV2Vlayk7XG4gIHJlY3VycmVuY2VQZXJpb2RUeXBlID0gT2JqZWN0LnZhbHVlcyhyZWN1cnJlbmNlUGVyaW9kKTtcblxuICBzZWxlY3RlZE9yZGVyVHlwZSQ6IE9ic2VydmFibGU8T1JERVJfVFlQRT4gPVxuICAgIHRoaXMuY2hlY2tvdXRTZXJ2aWNlLmdldEN1cnJlbnRPcmRlclR5cGUoKTtcblxuICBpc01vbnRobHk6IEJvb2xlYW4gPSBmYWxzZTtcbiAgaXNXZWVrbHk6IEJvb2xlYW4gPSBmYWxzZTtcbiAgY3VycmVudERheXNPZldlZWs6IERheXNPZldlZWtbXSA9IFtdO1xuICBudW1iZXJPZkRheXM6IHN0cmluZ1tdO1xuICBudW1iZXJPZldlZWtzOiBzdHJpbmdbXTtcbiAgY3VycmVudERhdGU6IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGE6IFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0U2VydmljZTogQ2hlY2tvdXRGYWNhZGUsXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlOiBDaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb24uYWRkKFxuICAgICAgdGhpcy5jaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZVxuICAgICAgICAuZ2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoKVxuICAgICAgICAuc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gICAgICAgICAgdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSA9IGRhdGE7XG4gICAgICAgIH0pXG4gICAgKTtcblxuICAgIHRoaXMuaW5pdENvbmZpZygpO1xuICB9XG5cbiAgY2hhbmdlT3JkZXJUeXBlKG9yZGVyVHlwZTogT1JERVJfVFlQRSk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tvdXRTZXJ2aWNlLnNldE9yZGVyVHlwZShvcmRlclR5cGUpO1xuICB9XG5cbiAgY2hhbmdlTnVtYmVyT2ZEYXlzKG5EYXlzOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnNldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKHtcbiAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICBudW1iZXJPZkRheXM6IG5EYXlzLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlTnVtYmVyT2ZXZWVrcyhuV2Vla3M6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuY2hlY2tvdXRSZXBsZW5pc2htZW50Rm9ybVNlcnZpY2Uuc2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoe1xuICAgICAgLi4udGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSxcbiAgICAgIG51bWJlck9mV2Vla3M6IG5XZWVrcyxcbiAgICB9KTtcbiAgfVxuXG4gIGNoYW5nZVJlY3VycmVuY2VQZXJpb2RUeXBlKHR5cGU6IHN0cmluZyk6IHZvaWQge1xuICAgIHRoaXMuaXNXZWVrbHkgPSB0eXBlID09PSByZWN1cnJlbmNlUGVyaW9kLldFRUtMWTtcbiAgICB0aGlzLmlzTW9udGhseSA9IHR5cGUgPT09IHJlY3VycmVuY2VQZXJpb2QuTU9OVEhMWTtcblxuICAgIHRoaXMubnVtYmVyT2ZEYXlzID0gdGhpcy5pc01vbnRobHlcbiAgICAgID8gdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgzMSlcbiAgICAgIDogdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgzMCk7XG5cbiAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnNldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKHtcbiAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICByZWN1cnJlbmNlUGVyaW9kOiB0eXBlLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlRGF5T2ZUaGVNb250aChkYXlPZk1vbnRoOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlLnNldFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhKHtcbiAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICBudGhEYXlPZk1vbnRoOiBkYXlPZk1vbnRoLFxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlUmVwbGVuaXNobWVudFN0YXJ0RGF0ZShkYXRlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoQm9vbGVhbihkYXRlKSkge1xuICAgICAgdGhpcy5jaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZS5zZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSh7XG4gICAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICAgIHJlcGxlbmlzaG1lbnRTdGFydERhdGU6IGRhdGUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VSZXBlYXREYXlzKGRheTogRGF5c09mV2VlaywgaXNDaGVja2VkOiBib29sZWFuKTogdm9pZCB7XG4gICAgaWYgKGlzQ2hlY2tlZCkge1xuICAgICAgdGhpcy5jdXJyZW50RGF5c09mV2VlayA9IFsuLi50aGlzLmN1cnJlbnREYXlzT2ZXZWVrXTtcblxuICAgICAgdGhpcy5jdXJyZW50RGF5c09mV2Vlay5wdXNoKGRheSk7XG5cbiAgICAgIHRoaXMuY2hlY2tvdXRSZXBsZW5pc2htZW50Rm9ybVNlcnZpY2Uuc2V0U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEoe1xuICAgICAgICAuLi50aGlzLnNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhLFxuICAgICAgICBkYXlzT2ZXZWVrOiB0aGlzLmN1cnJlbnREYXlzT2ZXZWVrLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGZvdW5kRGF5ID0gdGhpcy5jdXJyZW50RGF5c09mV2Vlay5maW5kKChkYXRhKSA9PiBkYXkgPT09IGRhdGEpO1xuXG4gICAgICBpZiAoIWZvdW5kRGF5KSByZXR1cm47XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5jdXJyZW50RGF5c09mV2Vlay5pbmRleE9mKGZvdW5kRGF5KTtcbiAgICAgIHRoaXMuY3VycmVudERheXNPZldlZWsuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgdGhpcy5jaGVja291dFJlcGxlbmlzaG1lbnRGb3JtU2VydmljZS5zZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSh7XG4gICAgICAgIC4uLnRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEsXG4gICAgICAgIGRheXNPZldlZWs6IHRoaXMuY3VycmVudERheXNPZldlZWssXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBoYXNEYXlzT2ZXZWVrQ2hlY2tlZChkYXk6IERheXNPZldlZWspOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jdXJyZW50RGF5c09mV2Vlay5pbmNsdWRlcyhkYXkpO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0Q29uZmlnKCk6IHZvaWQge1xuICAgIHRoaXMuaXNNb250aGx5ID1cbiAgICAgIHRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEucmVjdXJyZW5jZVBlcmlvZCA9PT1cbiAgICAgIHJlY3VycmVuY2VQZXJpb2QuTU9OVEhMWTtcblxuICAgIHRoaXMuaXNXZWVrbHkgPVxuICAgICAgdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YS5yZWN1cnJlbmNlUGVyaW9kID09PVxuICAgICAgcmVjdXJyZW5jZVBlcmlvZC5XRUVLTFk7XG5cbiAgICB0aGlzLmN1cnJlbnREYXlzT2ZXZWVrID0gW1xuICAgICAgLi4uKHRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEuZGF5c09mV2VlayA/PyBbXSksXG4gICAgXTtcblxuICAgIHRoaXMubnVtYmVyT2ZEYXlzID0gdGhpcy5pc01vbnRobHlcbiAgICAgID8gdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgzMSlcbiAgICAgIDogdGhpcy5jcmVhdGVOdW1iZXJTdHJpbmdBcnJheSgzMCk7XG5cbiAgICB0aGlzLm51bWJlck9mV2Vla3MgPSB0aGlzLmNyZWF0ZU51bWJlclN0cmluZ0FycmF5KDEyKTtcblxuICAgIHRoaXMuY3VycmVudERhdGUgPVxuICAgICAgdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YS5yZXBsZW5pc2htZW50U3RhcnREYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVOdW1iZXJTdHJpbmdBcnJheShuOiBudW1iZXIpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIEFycmF5KG4pXG4gICAgICAuZmlsbCgwKVxuICAgICAgLm1hcCgoXywgeSkgPT4gKHkgKyAxKS50b1N0cmluZygpKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJjeC1vcmRlci10eXBlLWNhcmRcIj5cbiAgPGRpdiBjbGFzcz1cImN4LWxhYmVsLWNvbnRhaW5lclwiPlxuICAgIDxoNSBjbGFzcz1cImN4LW9yZGVyLXJlcGxlbmlzaG1lbnQtaGVhZGVyXCI+XG4gICAgICB7eyAnY2hlY2tvdXRSZXZpZXcuYXV0b1JlcGxlbmlzaE9yZGVyJyB8IGN4VHJhbnNsYXRlIH19XG4gICAgPC9oNT5cbiAgICA8Y3gtaWNvbiBbdHlwZV09XCJpY29uVHlwZXMuQ0xPQ0tcIj48L2N4LWljb24+XG4gIDwvZGl2PlxuICA8ZGl2XG4gICAgY2xhc3M9XCJjeC1vcmRlci10eXBlLWNvbnRhaW5lciBmb3JtLWNoZWNrXCJcbiAgICAqbmdGb3I9XCJsZXQgdHlwZSBvZiBvcmRlclR5cGVzIHwga2V5dmFsdWVcIlxuICA+XG4gICAgPGlucHV0XG4gICAgICBpZD1cIm9yZGVyVHlwZS17eyB0eXBlLnZhbHVlIH19XCJcbiAgICAgIGNsYXNzPVwic2NhbGVkLWlucHV0IGZvcm0tY2hlY2staW5wdXRcIlxuICAgICAgcm9sZT1cInJhZGlvXCJcbiAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICBmb3JtQ29udHJvbE5hbWU9XCJvcmRlclR5cGVcIlxuICAgICAgYXJpYS1jaGVja2VkPVwidHJ1ZVwiXG4gICAgICAoY2hhbmdlKT1cImNoYW5nZU9yZGVyVHlwZSh0eXBlLnZhbHVlKVwiXG4gICAgICBbdmFsdWVdPVwidHlwZS52YWx1ZVwiXG4gICAgICBbY2hlY2tlZF09XCJ0eXBlLnZhbHVlID09IChzZWxlY3RlZE9yZGVyVHlwZSQgfCBhc3luYylcIlxuICAgIC8+XG4gICAgPGxhYmVsXG4gICAgICBjbGFzcz1cIm9yZGVyLXR5cGUtbGFiZWwgZm9ybS1jaGVjay1sYWJlbCBmb3JtLXJhZGlvLWxhYmVsXCJcbiAgICAgIGZvcj1cIm9yZGVyVHlwZS17eyB0eXBlLnZhbHVlIH19XCJcbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzPVwib3JkZXItdHlwZVwiPlxuICAgICAgICB7eyAnY2hlY2tvdXRSZXZpZXcub3JkZXJUeXBlXycgKyB0eXBlPy52YWx1ZSB8IGN4VHJhbnNsYXRlIH19XG4gICAgICA8L2Rpdj5cbiAgICA8L2xhYmVsPlxuICA8L2Rpdj5cbiAgPG5nLWNvbnRhaW5lclxuICAgICpuZ0lmPVwiXG4gICAgICBzY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSAmJlxuICAgICAgKHNlbGVjdGVkT3JkZXJUeXBlJCB8IGFzeW5jKSA9PT0gb3JkZXJUeXBlcy5TQ0hFRFVMRV9SRVBMRU5JU0hNRU5UX09SREVSXG4gICAgXCJcbiAgPlxuICAgIDxkaXYgY2xhc3M9XCJjeC1yZXBsZW5pc2htZW50LWZvcm0tZGF0YS1jb250YWluZXJcIj5cbiAgICAgIDxkaXYgKm5nSWY9XCIhaXNNb250aGx5XCIgY2xhc3M9XCJjeC1kYXlzXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiZm9ybS1kYXRhLWxhYmVsXCI+e3tcbiAgICAgICAgICAnY2hlY2tvdXRSZXZpZXcuZXZlcnknIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgfX08L3NwYW4+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpc1dlZWtseTsgZWxzZSBpc0RhaWx5XCI+XG4gICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgKGNoYW5nZSk9XCJjaGFuZ2VOdW1iZXJPZldlZWtzKCRldmVudC50YXJnZXQudmFsdWUpXCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICAgICpuZ0Zvcj1cImxldCBuV2Vla3Mgb2YgbnVtYmVyT2ZXZWVrc1wiXG4gICAgICAgICAgICAgIFt2YWx1ZV09XCJuV2Vla3NcIlxuICAgICAgICAgICAgICBbc2VsZWN0ZWRdPVwiXG4gICAgICAgICAgICAgICAgbldlZWtzID09PSBzY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YS5udW1iZXJPZldlZWtzXG4gICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt7IG5XZWVrcyB9fVxuICAgICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8bmctdGVtcGxhdGUgI2lzRGFpbHk+XG4gICAgICAgICAgPHNlbGVjdFxuICAgICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgICAgKGNoYW5nZSk9XCJjaGFuZ2VOdW1iZXJPZkRheXMoJGV2ZW50LnRhcmdldC52YWx1ZSlcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxvcHRpb25cbiAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IG5EYXlzIG9mIG51bWJlck9mRGF5c1wiXG4gICAgICAgICAgICAgIFt2YWx1ZV09XCJuRGF5c1wiXG4gICAgICAgICAgICAgIFtzZWxlY3RlZF09XCJuRGF5cyA9PT0gc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEubnVtYmVyT2ZEYXlzXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAge3sgbkRheXMgfX1cbiAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgIDwvc2VsZWN0PlxuICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwiY3gtbW9udGhcIj5cbiAgICAgICAgPHNwYW4gKm5nSWY9XCJpc01vbnRobHlcIiBjbGFzcz1cImZvcm0tZGF0YS1sYWJlbFwiPnt7XG4gICAgICAgICAgJ2NoZWNrb3V0UmV2aWV3LmV2ZXJ5JyB8IGN4VHJhbnNsYXRlXG4gICAgICAgIH19PC9zcGFuPlxuICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgY2xhc3M9XCJmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgIChjaGFuZ2UpPVwiY2hhbmdlUmVjdXJyZW5jZVBlcmlvZFR5cGUoJGV2ZW50LnRhcmdldC52YWx1ZSlcIlxuICAgICAgICA+XG4gICAgICAgICAgPG9wdGlvblxuICAgICAgICAgICAgKm5nRm9yPVwibGV0IHR5cGUgb2YgcmVjdXJyZW5jZVBlcmlvZFR5cGVcIlxuICAgICAgICAgICAgW3ZhbHVlXT1cInR5cGVcIlxuICAgICAgICAgICAgW3NlbGVjdGVkXT1cInR5cGUgPT09IHNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhLnJlY3VycmVuY2VQZXJpb2RcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt7ICdjaGVja291dFJldmlldy5yZWN1cnJlbmNlUGVyaW9kVHlwZV8nICsgdHlwZSB8IGN4VHJhbnNsYXRlIH19XG4gICAgICAgICAgPC9vcHRpb24+XG4gICAgICAgIDwvc2VsZWN0PlxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2ICpuZ0lmPVwiaXNNb250aGx5XCIgY2xhc3M9XCJjeC1kYXlNb250aFwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cImZvcm0tZGF0YS1sYWJlbFwiPnt7XG4gICAgICAgICAgJ2NoZWNrb3V0UmV2aWV3LmRheU9mTW9udGgnIHwgY3hUcmFuc2xhdGVcbiAgICAgICAgfX08L3NwYW4+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjeC1kYXktb2YtbW9udGhcIj5cbiAgICAgICAgICA8c2VsZWN0XG4gICAgICAgICAgICBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAoY2hhbmdlKT1cImNoYW5nZURheU9mVGhlTW9udGgoJGV2ZW50LnRhcmdldC52YWx1ZSlcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxvcHRpb25cbiAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IG5EYXlzIG9mIG51bWJlck9mRGF5c1wiXG4gICAgICAgICAgICAgIFt2YWx1ZV09XCJuRGF5c1wiXG4gICAgICAgICAgICAgIFtzZWxlY3RlZF09XCJuRGF5cyA9PT0gc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEubnRoRGF5T2ZNb250aFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHt7IG5EYXlzIH19XG4gICAgICAgICAgICA8L29wdGlvbj5cbiAgICAgICAgICA8L3NlbGVjdD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJjeC1yZXBsZW5pc2htZW50LWZvcm0tZGF0YS1jb250YWluZXJcIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiZm9ybS1kYXRhLWxhYmVsXCI+e3tcbiAgICAgICAgJ2NoZWNrb3V0UmV2aWV3LnN0YXJ0T24nIHwgY3hUcmFuc2xhdGVcbiAgICAgIH19PC9zcGFuPlxuICAgICAgPGRpdiBjbGFzcz1cImN4LXJlcGxlbmlzaG1lbnQtZGF0ZVwiPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwiZGF0ZVwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCJ5eXl5LW1tLWRkXCJcbiAgICAgICAgICBbdmFsdWVdPVwiY3VycmVudERhdGVcIlxuICAgICAgICAgIChjaGFuZ2UpPVwiY2hhbmdlUmVwbGVuaXNobWVudFN0YXJ0RGF0ZSgkZXZlbnQudGFyZ2V0LnZhbHVlKVwiXG4gICAgICAgIC8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXZcbiAgICAgICpuZ0lmPVwiaXNXZWVrbHlcIlxuICAgICAgY2xhc3M9XCJjeC1yZXBsZW5pc2htZW50LWZvcm0tZGF0YS1jb250YWluZXIgY3gtcmVwZWF0LWRheXMtY29udGFpbmVyXCJcbiAgICA+XG4gICAgICA8c3BhbiBjbGFzcz1cImN4LXJlcGVhdC1kYXlzIGZvcm0tZGF0YS1sYWJlbFwiPnt7XG4gICAgICAgICdjaGVja291dFJldmlldy5yZXBlYXRPbkRheXMnIHwgY3hUcmFuc2xhdGVcbiAgICAgIH19PC9zcGFuPlxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgZGF5IG9mIGRheXNPZldlZWtcIiBjbGFzcz1cImZvcm0tY2hlY2tcIj5cbiAgICAgICAgPGxhYmVsIGZvcj1cImRheS17eyBkYXkgfX1cIiBjbGFzcz1cImN4LXdlZWstZGF5XCI+e3tcbiAgICAgICAgICBkYXkgfCB0aXRsZWNhc2VcbiAgICAgICAgfX08L2xhYmVsXG4gICAgICAgID48aW5wdXRcbiAgICAgICAgICBpZD1cImRheS17eyBkYXkgfX1cIlxuICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgY2xhc3M9XCJmb3JtLWNoZWNrLWlucHV0XCJcbiAgICAgICAgICBbY2hlY2tlZF09XCJoYXNEYXlzT2ZXZWVrQ2hlY2tlZChkYXkpXCJcbiAgICAgICAgICAoY2hhbmdlKT1cImNoYW5nZVJlcGVhdERheXMoZGF5LCAkZXZlbnQudGFyZ2V0LmNoZWNrZWQpXCJcbiAgICAgICAgLz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICA8L25nLWNvbnRhaW5lcj5cbjwvZGl2PlxuIl19