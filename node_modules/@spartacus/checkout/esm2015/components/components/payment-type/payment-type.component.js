import { ChangeDetectionStrategy, Component, ViewChild, } from '@angular/core';
import { CheckoutStepType } from '@spartacus/checkout/root';
import { B2BPaymentTypeEnum, isNotUndefined, } from '@spartacus/core';
import { distinctUntilChanged, filter, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/checkout/root";
import * as i2 from "../../services/checkout-step.service";
import * as i3 from "@angular/router";
import * as i4 from "@spartacus/storefront";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/core";
export class PaymentTypeComponent {
    constructor(paymentTypeService, checkoutStepService, activatedRoute) {
        this.paymentTypeService = paymentTypeService;
        this.checkoutStepService = checkoutStepService;
        this.activatedRoute = activatedRoute;
        this.paymentTypes$ = this.paymentTypeService.getPaymentTypes();
        this.typeSelected$ = this.paymentTypeService
            .getSelectedPaymentType()
            .pipe(filter(isNotUndefined), distinctUntilChanged(), tap((selected) => {
            this.typeSelected = selected;
            this.checkoutStepService.resetSteps();
            this.checkoutStepService.disableEnableStep(CheckoutStepType.PAYMENT_DETAILS, selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT);
        }));
        this.cartPoNumber$ = this.paymentTypeService
            .getPoNumber()
            .pipe(filter(isNotUndefined), tap((po) => {
            return (this.cartPoNumber = po);
        }));
    }
    changeType(code) {
        this.paymentTypeService.setPaymentType(code);
        this.typeSelected = code;
    }
    next() {
        // set po number to cart
        const poNumInput = this._poNumberInput.nativeElement.value;
        if (this.typeSelected && poNumInput !== this.cartPoNumber) {
            this.paymentTypeService.setPaymentType(this.typeSelected, poNumInput);
        }
        this.checkoutStepService.next(this.activatedRoute);
    }
    back() {
        this.checkoutStepService.back(this.activatedRoute);
    }
}
PaymentTypeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PaymentTypeComponent, deps: [{ token: i1.PaymentTypeFacade }, { token: i2.CheckoutStepService }, { token: i3.ActivatedRoute }], target: i0.ɵɵFactoryTarget.Component });
PaymentTypeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PaymentTypeComponent, selector: "cx-payment-type", viewQueries: [{ propertyName: "_poNumberInput", first: true, predicate: ["poNumber"], descendants: true }], ngImport: i0, template: "<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutPO.poNumber' | cxTranslate\n      }}</span>\n      <input\n        #poNumber\n        class=\"form-control\"\n        formControlName=\"poNumber\"\n        type=\"text\"\n        placeholder=\"{{ 'checkoutPO.placeholder' | cxTranslate }}\"\n        value=\"{{ cartPoNumber$ | async }}\"\n      />\n    </label>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <ng-container\n      *ngIf=\"\n        (paymentTypes$ | async)?.length && typeSelected$ | async;\n        else loading\n      \"\n    >\n      <label class=\"cx-payment-type-container\">\n        <span class=\"label-content\">{{\n          'paymentTypes.title' | cxTranslate\n        }}</span>\n        <div class=\"form-check\" *ngFor=\"let type of paymentTypes$ | async\">\n          <input\n            id=\"paymentType-{{ type.code }}\"\n            class=\"form-check-input\"\n            role=\"radio\"\n            type=\"radio\"\n            aria-checked=\"true\"\n            (change)=\"changeType(type.code)\"\n            [value]=\"type.code\"\n            [checked]=\"type.code == typeSelected\"\n            formControlName=\"paymentType\"\n          />\n          <label\n            class=\"cx-payment-type-label form-check-label form-radio-label\"\n            for=\"paymentType-{{ type.code }}\"\n          >\n            <div class=\"cx-payment-type\">\n              {{ 'paymentTypes.paymentType_' + type?.code | cxTranslate }}\n            </div>\n          </label>\n        </div>\n      </label>\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"cx-checkout-btns row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n      {{ 'checkout.backToCart' | cxTranslate }}\n    </button>\n  </div>\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-primary\" (click)=\"next()\">\n      {{ 'common.continue' | cxTranslate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n", components: [{ type: i4.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "cxTranslate": i6.TranslatePipe, "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PaymentTypeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-payment-type',
                    templateUrl: './payment-type.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.PaymentTypeFacade }, { type: i2.CheckoutStepService }, { type: i3.ActivatedRoute }]; }, propDecorators: { _poNumberInput: [{
                type: ViewChild,
                args: ['poNumber', { static: false }]
            }] } });
//# sourceMappingURL=data:application/json;base64,