import { ChangeDetectionStrategy, Component, } from '@angular/core';
import { Validators } from '@angular/forms';
import { ORDER_TYPE, recurrencePeriod, } from '@spartacus/core';
import { BehaviorSubject, combineLatest, Subscription } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/checkout/root";
import * as i2 from "@spartacus/core";
import * as i3 from "@angular/forms";
import * as i4 from "../../services/checkout-replenishment-form-service";
import * as i5 from "@spartacus/storefront";
import * as i6 from "@angular/router";
import * as i7 from "@angular/common";
export class PlaceOrderComponent {
    constructor(checkoutService, routingService, fb, checkoutReplenishmentFormService, launchDialogService, vcr) {
        this.checkoutService = checkoutService;
        this.routingService = routingService;
        this.fb = fb;
        this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
        this.launchDialogService = launchDialogService;
        this.vcr = vcr;
        this.subscription = new Subscription();
        this.daysOfWeekNotChecked$ = new BehaviorSubject(false);
        this.checkoutSubmitForm = this.fb.group({
            termsAndConditions: [false, Validators.requiredTrue],
        });
    }
    get termsAndConditionInvalid() {
        return this.checkoutSubmitForm.invalid;
    }
    submitForm() {
        if (this.checkoutSubmitForm.valid && Boolean(this.currentOrderType)) {
            switch (this.currentOrderType) {
                case ORDER_TYPE.PLACE_ORDER: {
                    this.checkoutService.placeOrder(this.checkoutSubmitForm.valid);
                    break;
                }
                case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                    this.checkoutService.scheduleReplenishmentOrder(this.scheduleReplenishmentFormData, this.checkoutSubmitForm.valid);
                    break;
                }
            }
        }
        else {
            this.checkoutSubmitForm.markAllAsTouched();
        }
    }
    ngOnInit() {
        this.subscription.add(combineLatest([
            this.checkoutService.getPlaceOrderLoading(),
            this.checkoutService.getPlaceOrderSuccess(),
            this.checkoutService.getPlaceOrderError(),
        ]).subscribe(([orderLoading, orderSuccess, orderError]) => {
            if (orderLoading) {
                this.placedOrder = this.launchDialogService.launch("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */, this.vcr);
            }
            if (orderError) {
                if (this.placedOrder) {
                    this.placedOrder
                        .subscribe((component) => {
                        this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */);
                        if (component) {
                            component.destroy();
                        }
                    })
                        .unsubscribe();
                    this.checkoutService.clearPlaceOrderState();
                }
            }
            if (orderSuccess) {
                this.onSuccess(orderSuccess);
            }
        }));
        this.subscription.add(this.checkoutService
            .getCurrentOrderType()
            .subscribe((orderType) => (this.currentOrderType = orderType)));
        this.subscription.add(this.checkoutReplenishmentFormService
            .getScheduleReplenishmentFormData()
            .subscribe((data) => {
            var _a;
            this.scheduleReplenishmentFormData = data;
            this.daysOfWeekNotChecked$.next(((_a = data.daysOfWeek) === null || _a === void 0 ? void 0 : _a.length) === 0 &&
                data.recurrencePeriod === recurrencePeriod.WEEKLY);
        }));
    }
    onSuccess(data) {
        if (data) {
            switch (this.currentOrderType) {
                case ORDER_TYPE.PLACE_ORDER: {
                    this.routingService.go({ cxRoute: 'orderConfirmation' });
                    break;
                }
                case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                    this.routingService.go({ cxRoute: 'replenishmentConfirmation' });
                    break;
                }
            }
            this.checkoutReplenishmentFormService.resetScheduleReplenishmentFormData();
        }
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */);
        this.checkoutService.clearPlaceOrderState();
    }
}
PlaceOrderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PlaceOrderComponent, deps: [{ token: i1.CheckoutFacade }, { token: i2.RoutingService }, { token: i3.FormBuilder }, { token: i4.CheckoutReplenishmentFormService }, { token: i5.LaunchDialogService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
PlaceOrderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PlaceOrderComponent, selector: "cx-place-order", ngImport: i0, template: "<form\n  (ngSubmit)=\"submitForm()\"\n  class=\"cx-place-order-form form-check\"\n  [formGroup]=\"checkoutSubmitForm\"\n>\n  <div class=\"form-group\">\n    <label>\n      <input\n        formControlName=\"termsAndConditions\"\n        class=\"scaled-input form-check-input\"\n        type=\"checkbox\"\n      />\n      <span class=\"form-check-label\">\n        {{ 'checkoutReview.confirmThatRead' | cxTranslate }}\n        <a\n          [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n          class=\"cx-tc-link\"\n          target=\"_blank\"\n        >\n          {{ 'checkoutReview.termsAndConditions' | cxTranslate }}\n        </a>\n      </span>\n    </label>\n  </div>\n\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-block\"\n    [disabled]=\"termsAndConditionInvalid || (daysOfWeekNotChecked$ | async)\"\n  >\n    {{ 'checkoutReview.placeOrder' | cxTranslate }}\n  </button>\n</form>\n", directives: [{ type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i6.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i2.TranslatePipe, "cxUrl": i2.UrlPipe, "async": i7.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PlaceOrderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-place-order',
                    templateUrl: './place-order.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.CheckoutFacade }, { type: i2.RoutingService }, { type: i3.FormBuilder }, { type: i4.CheckoutReplenishmentFormService }, { type: i5.LaunchDialogService }, { type: i0.ViewContainerRef }]; } });
//# sourceMappingURL=data:application/json;base64,