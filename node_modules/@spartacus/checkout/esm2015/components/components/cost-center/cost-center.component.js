import { ChangeDetectionStrategy, Component } from '@angular/core';
import { filter, map, tap, withLatestFrom } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
import * as i2 from "@spartacus/checkout/root";
import * as i3 from "@angular/common";
export class CostCenterComponent {
    constructor(userCostCenterService, checkoutCostCenterService, paymentTypeService) {
        this.userCostCenterService = userCostCenterService;
        this.checkoutCostCenterService = checkoutCostCenterService;
        this.paymentTypeService = paymentTypeService;
    }
    get isAccountPayment$() {
        return this.paymentTypeService.isAccountPayment();
    }
    get costCenters$() {
        return this.userCostCenterService.getActiveCostCenters().pipe(withLatestFrom(this.checkoutCostCenterService.getCostCenter()), filter(([costCenters]) => Boolean(costCenters)), tap(([costCenters, cartCostCenter]) => {
            if (!Boolean(cartCostCenter)) {
                this.setCostCenter(costCenters[0].code);
            }
            else {
                this.costCenterId = cartCostCenter;
            }
        }), map(([costCenters]) => costCenters));
    }
    setCostCenter(selectCostCenter) {
        this.costCenterId = selectCostCenter;
        this.checkoutCostCenterService.setCostCenter(this.costCenterId);
    }
}
CostCenterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterComponent, deps: [{ token: i1.UserCostCenterService }, { token: i2.CheckoutCostCenterFacade }, { token: i2.PaymentTypeFacade }], target: i0.ɵɵFactoryTarget.Component });
CostCenterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterComponent, selector: "cx-cost-center", ngImport: i0, template: "<ng-container *ngIf=\"isAccountPayment$ | async\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-xl-10\">\n      <ng-container *ngIf=\"costCenters$ | async as costCenters\">\n        <div *ngIf=\"costCenters.length !== 0\">\n          <label>\n            <span class=\"label-content required\">{{\n              'checkoutPO.costCenter' | cxTranslate\n            }}</span>\n            <select (change)=\"setCostCenter($event.target.value)\">\n              <option\n                *ngFor=\"let costCenter of costCenters\"\n                value=\"{{ costCenter.code }}\"\n                [selected]=\"costCenterId === costCenter.code\"\n              >\n                {{ costCenter.name }}\n              </option>\n            </select>\n            <span class=\"label-content\">{{\n              'checkoutPO.availableLabel' | cxTranslate\n            }}</span>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n", directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3.AsyncPipe, "cxTranslate": i1.TranslatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CostCenterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-cost-center',
                    templateUrl: 'cost-center.component.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.UserCostCenterService }, { type: i2.CheckoutCostCenterFacade }, { type: i2.PaymentTypeFacade }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdC1jZW50ZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2NoZWNrb3V0L2NvbXBvbmVudHMvY29tcG9uZW50cy9jb3N0LWNlbnRlci9jb3N0LWNlbnRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29tcG9uZW50cy9jb21wb25lbnRzL2Nvc3QtY2VudGVyL2Nvc3QtY2VudGVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPbkUsT0FBTyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7OztBQU9sRSxNQUFNLE9BQU8sbUJBQW1CO0lBRzlCLFlBQ1kscUJBQTRDLEVBQzVDLHlCQUFtRCxFQUNuRCxrQkFBcUM7UUFGckMsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1Qyw4QkFBeUIsR0FBekIseUJBQXlCLENBQTBCO1FBQ25ELHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBbUI7SUFDOUMsQ0FBQztJQUVKLElBQUksaUJBQWlCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDcEQsQ0FBQztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUMzRCxjQUFjLENBQUMsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGFBQWEsRUFBRSxDQUFDLEVBQzlELE1BQU0sQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUMvQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsRUFBRSxFQUFFO1lBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQzVCLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQWMsQ0FBQyxDQUFDO2FBQ25EO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsY0FBYyxDQUFDO2FBQ3BDO1FBQ0gsQ0FBQyxDQUFDLEVBQ0YsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxFQUFFLENBQUMsV0FBVyxDQUFDLENBQ3BDLENBQUM7SUFDSixDQUFDO0lBRUQsYUFBYSxDQUFDLGdCQUF3QjtRQUNwQyxJQUFJLENBQUMsWUFBWSxHQUFHLGdCQUFnQixDQUFDO1FBQ3JDLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2xFLENBQUM7O2dIQS9CVSxtQkFBbUI7b0dBQW5CLG1CQUFtQixzRENkaEMsbTlCQTJCQTsyRkRiYSxtQkFBbUI7a0JBTC9CLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQjtvQkFDMUIsV0FBVyxFQUFFLDRCQUE0QjtvQkFDekMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQ2hlY2tvdXRDb3N0Q2VudGVyRmFjYWRlLFxuICBQYXltZW50VHlwZUZhY2FkZSxcbn0gZnJvbSAnQHNwYXJ0YWN1cy9jaGVja291dC9yb290JztcbmltcG9ydCB7IENvc3RDZW50ZXIsIFVzZXJDb3N0Q2VudGVyU2VydmljZSB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgdGFwLCB3aXRoTGF0ZXN0RnJvbSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY3gtY29zdC1jZW50ZXInLFxuICB0ZW1wbGF0ZVVybDogJ2Nvc3QtY2VudGVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIENvc3RDZW50ZXJDb21wb25lbnQge1xuICBjb3N0Q2VudGVySWQ6IHN0cmluZyB8IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcm90ZWN0ZWQgdXNlckNvc3RDZW50ZXJTZXJ2aWNlOiBVc2VyQ29zdENlbnRlclNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGNoZWNrb3V0Q29zdENlbnRlclNlcnZpY2U6IENoZWNrb3V0Q29zdENlbnRlckZhY2FkZSxcbiAgICBwcm90ZWN0ZWQgcGF5bWVudFR5cGVTZXJ2aWNlOiBQYXltZW50VHlwZUZhY2FkZVxuICApIHt9XG5cbiAgZ2V0IGlzQWNjb3VudFBheW1lbnQkKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIHJldHVybiB0aGlzLnBheW1lbnRUeXBlU2VydmljZS5pc0FjY291bnRQYXltZW50KCk7XG4gIH1cblxuICBnZXQgY29zdENlbnRlcnMkKCk6IE9ic2VydmFibGU8Q29zdENlbnRlcltdPiB7XG4gICAgcmV0dXJuIHRoaXMudXNlckNvc3RDZW50ZXJTZXJ2aWNlLmdldEFjdGl2ZUNvc3RDZW50ZXJzKCkucGlwZShcbiAgICAgIHdpdGhMYXRlc3RGcm9tKHRoaXMuY2hlY2tvdXRDb3N0Q2VudGVyU2VydmljZS5nZXRDb3N0Q2VudGVyKCkpLFxuICAgICAgZmlsdGVyKChbY29zdENlbnRlcnNdKSA9PiBCb29sZWFuKGNvc3RDZW50ZXJzKSksXG4gICAgICB0YXAoKFtjb3N0Q2VudGVycywgY2FydENvc3RDZW50ZXJdKSA9PiB7XG4gICAgICAgIGlmICghQm9vbGVhbihjYXJ0Q29zdENlbnRlcikpIHtcbiAgICAgICAgICB0aGlzLnNldENvc3RDZW50ZXIoY29zdENlbnRlcnNbMF0uY29kZSBhcyBzdHJpbmcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29zdENlbnRlcklkID0gY2FydENvc3RDZW50ZXI7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAgbWFwKChbY29zdENlbnRlcnNdKSA9PiBjb3N0Q2VudGVycylcbiAgICApO1xuICB9XG5cbiAgc2V0Q29zdENlbnRlcihzZWxlY3RDb3N0Q2VudGVyOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmNvc3RDZW50ZXJJZCA9IHNlbGVjdENvc3RDZW50ZXI7XG4gICAgdGhpcy5jaGVja291dENvc3RDZW50ZXJTZXJ2aWNlLnNldENvc3RDZW50ZXIodGhpcy5jb3N0Q2VudGVySWQpO1xuICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiaXNBY2NvdW50UGF5bWVudCQgfCBhc3luY1wiPlxuICA8ZGl2IGNsYXNzPVwicm93XCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbC1tZC0xMiBjb2wteGwtMTBcIj5cbiAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJjb3N0Q2VudGVycyQgfCBhc3luYyBhcyBjb3N0Q2VudGVyc1wiPlxuICAgICAgICA8ZGl2ICpuZ0lmPVwiY29zdENlbnRlcnMubGVuZ3RoICE9PSAwXCI+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsYWJlbC1jb250ZW50IHJlcXVpcmVkXCI+e3tcbiAgICAgICAgICAgICAgJ2NoZWNrb3V0UE8uY29zdENlbnRlcicgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgfX08L3NwYW4+XG4gICAgICAgICAgICA8c2VsZWN0IChjaGFuZ2UpPVwic2V0Q29zdENlbnRlcigkZXZlbnQudGFyZ2V0LnZhbHVlKVwiPlxuICAgICAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGNvc3RDZW50ZXIgb2YgY29zdENlbnRlcnNcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwie3sgY29zdENlbnRlci5jb2RlIH19XCJcbiAgICAgICAgICAgICAgICBbc2VsZWN0ZWRdPVwiY29zdENlbnRlcklkID09PSBjb3N0Q2VudGVyLmNvZGVcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge3sgY29zdENlbnRlci5uYW1lIH19XG4gICAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgICAgPC9zZWxlY3Q+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxhYmVsLWNvbnRlbnRcIj57e1xuICAgICAgICAgICAgICAnY2hlY2tvdXRQTy5hdmFpbGFibGVMYWJlbCcgfCBjeFRyYW5zbGF0ZVxuICAgICAgICAgICAgfX08L3NwYW4+XG4gICAgICAgICAgPC9sYWJlbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==