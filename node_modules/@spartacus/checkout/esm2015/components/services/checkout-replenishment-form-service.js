import { Injectable } from '@angular/core';
import { DaysOfWeek, recurrencePeriod, } from '@spartacus/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class CheckoutReplenishmentFormService {
    constructor() {
        /**
         * Default form data
         */
        this.defaultFormData = {
            daysOfWeek: [DaysOfWeek.MONDAY],
            nthDayOfMonth: '1',
            numberOfDays: '14',
            numberOfWeeks: '1',
            recurrencePeriod: recurrencePeriod.DAILY,
            replenishmentStartDate: new Date().toISOString().split('T')[0],
        };
        this.scheduleReplenishmentFormData$ = new BehaviorSubject(this.defaultFormData);
    }
    getScheduleReplenishmentFormData() {
        return this.scheduleReplenishmentFormData$.asObservable();
    }
    setScheduleReplenishmentFormData(formData) {
        this.scheduleReplenishmentFormData$.next(formData);
    }
    resetScheduleReplenishmentFormData() {
        this.scheduleReplenishmentFormData$.next(this.defaultFormData);
    }
}
CheckoutReplenishmentFormService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutReplenishmentFormService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CheckoutReplenishmentFormService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutReplenishmentFormService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutReplenishmentFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQtcmVwbGVuaXNobWVudC1mb3JtLXNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29tcG9uZW50cy9zZXJ2aWNlcy9jaGVja291dC1yZXBsZW5pc2htZW50LWZvcm0tc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFDTCxVQUFVLEVBQ1YsZ0JBQWdCLEdBRWpCLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFLbkQsTUFBTSxPQUFPLGdDQUFnQztJQWdCM0M7UUFmQTs7V0FFRztRQUNNLG9CQUFlLEdBQThCO1lBQ3BELFVBQVUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDL0IsYUFBYSxFQUFFLEdBQUc7WUFDbEIsWUFBWSxFQUFFLElBQUk7WUFDbEIsYUFBYSxFQUFFLEdBQUc7WUFDbEIsZ0JBQWdCLEVBQUUsZ0JBQWdCLENBQUMsS0FBSztZQUN4QyxzQkFBc0IsRUFBRSxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0QsQ0FBQztRQUVNLG1DQUE4QixHQUNwQyxJQUFJLGVBQWUsQ0FBNEIsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBRXhELENBQUM7SUFFaEIsZ0NBQWdDO1FBQzlCLE9BQU8sSUFBSSxDQUFDLDhCQUE4QixDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVELENBQUM7SUFFRCxnQ0FBZ0MsQ0FBQyxRQUFtQztRQUNsRSxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxrQ0FBa0M7UUFDaEMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7NkhBNUJVLGdDQUFnQztpSUFBaEMsZ0NBQWdDLGNBRi9CLE1BQU07MkZBRVAsZ0NBQWdDO2tCQUg1QyxVQUFVO21CQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gIERheXNPZldlZWssXG4gIHJlY3VycmVuY2VQZXJpb2QsXG4gIFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0sXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIENoZWNrb3V0UmVwbGVuaXNobWVudEZvcm1TZXJ2aWNlIHtcbiAgLyoqXG4gICAqIERlZmF1bHQgZm9ybSBkYXRhXG4gICAqL1xuICByZWFkb25seSBkZWZhdWx0Rm9ybURhdGE6IFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0gPSB7XG4gICAgZGF5c09mV2VlazogW0RheXNPZldlZWsuTU9OREFZXSxcbiAgICBudGhEYXlPZk1vbnRoOiAnMScsXG4gICAgbnVtYmVyT2ZEYXlzOiAnMTQnLFxuICAgIG51bWJlck9mV2Vla3M6ICcxJyxcbiAgICByZWN1cnJlbmNlUGVyaW9kOiByZWN1cnJlbmNlUGVyaW9kLkRBSUxZLFxuICAgIHJlcGxlbmlzaG1lbnRTdGFydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLFxuICB9O1xuXG4gIHByaXZhdGUgc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEkOiBCZWhhdmlvclN1YmplY3Q8U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybT4gPVxuICAgIG5ldyBCZWhhdmlvclN1YmplY3Q8U2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybT4odGhpcy5kZWZhdWx0Rm9ybURhdGEpO1xuXG4gIGNvbnN0cnVjdG9yKCkge31cblxuICBnZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSgpOiBPYnNlcnZhYmxlPFNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm0+IHtcbiAgICByZXR1cm4gdGhpcy5zY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSQuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBzZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YShmb3JtRGF0YTogU2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybSk6IHZvaWQge1xuICAgIHRoaXMuc2NoZWR1bGVSZXBsZW5pc2htZW50Rm9ybURhdGEkLm5leHQoZm9ybURhdGEpO1xuICB9XG5cbiAgcmVzZXRTY2hlZHVsZVJlcGxlbmlzaG1lbnRGb3JtRGF0YSgpOiB2b2lkIHtcbiAgICB0aGlzLnNjaGVkdWxlUmVwbGVuaXNobWVudEZvcm1EYXRhJC5uZXh0KHRoaXMuZGVmYXVsdEZvcm1EYXRhKTtcbiAgfVxufVxuIl19