import { Injectable } from '@angular/core';
import { select } from '@ngrx/store';
import { OCC_USER_ID_ANONYMOUS, ProcessSelectors, } from '@spartacus/core';
import { take } from 'rxjs/operators';
import { CheckoutActions } from '../store/actions/index';
import { PLACED_ORDER_PROCESS_ID, } from '../store/checkout-state';
import { CheckoutSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class CheckoutService {
    constructor(checkoutStore, processStateStore, activeCartService, userIdService) {
        this.checkoutStore = checkoutStore;
        this.processStateStore = processStateStore;
        this.activeCartService = activeCartService;
        this.userIdService = userIdService;
    }
    /**
     * Places an order
     */
    placeOrder(termsChecked) {
        if (this.actionAllowed()) {
            let userId;
            this.userIdService
                .getUserId()
                .subscribe((occUserId) => (userId = occUserId))
                .unsubscribe();
            let cartId;
            this.activeCartService
                .getActiveCartId()
                .subscribe((activeCartId) => (cartId = activeCartId))
                .unsubscribe();
            if (userId && cartId) {
                this.checkoutStore.dispatch(new CheckoutActions.PlaceOrder({
                    userId,
                    cartId,
                    termsChecked,
                }));
            }
        }
    }
    /**
     * Schedule a replenishment order
     */
    scheduleReplenishmentOrder(scheduleReplenishmentForm, termsChecked) {
        let cartId;
        this.activeCartService
            .getActiveCartId()
            .pipe(take(1))
            .subscribe((activeCartId) => (cartId = activeCartId));
        this.userIdService.takeUserId(true).subscribe((userId) => {
            if (Boolean(cartId) && Boolean(userId)) {
                this.checkoutStore.dispatch(new CheckoutActions.ScheduleReplenishmentOrder({
                    cartId,
                    scheduleReplenishmentForm,
                    termsChecked,
                    userId,
                }));
            }
        }, () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    /**
     * Returns the place or schedule replenishment order's loading flag
     */
    getPlaceOrderLoading() {
        return this.processStateStore.pipe(select(ProcessSelectors.getProcessLoadingFactory(PLACED_ORDER_PROCESS_ID)));
    }
    /**
     * Returns the place or schedule replenishment order's success flag
     */
    getPlaceOrderSuccess() {
        return this.processStateStore.pipe(select(ProcessSelectors.getProcessSuccessFactory(PLACED_ORDER_PROCESS_ID)));
    }
    /**
     * Returns the place or schedule replenishment order's error flag
     */
    getPlaceOrderError() {
        return this.processStateStore.pipe(select(ProcessSelectors.getProcessErrorFactory(PLACED_ORDER_PROCESS_ID)));
    }
    /**
     * Resets the place or schedule replenishment order's processing state
     */
    clearPlaceOrderState() {
        this.checkoutStore.dispatch(new CheckoutActions.ClearPlaceOrder());
    }
    /**
     * Clear checkout data
     */
    clearCheckoutData() {
        this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutData());
    }
    /**
     * Clear checkout step
     * @param stepNumber : the step number to be cleared
     */
    clearCheckoutStep(stepNumber) {
        this.checkoutStore.dispatch(new CheckoutActions.ClearCheckoutStep(stepNumber));
    }
    /**
     * Load checkout details data
     * @param cartId : string Cart ID of loaded cart
     */
    loadCheckoutDetails(cartId) {
        let userId;
        this.userIdService
            .getUserId()
            .subscribe((occUserId) => (userId = occUserId))
            .unsubscribe();
        if (userId) {
            this.checkoutStore.dispatch(new CheckoutActions.LoadCheckoutDetails({
                userId,
                cartId,
            }));
        }
    }
    /**
     * Get status of checkout details loaded
     */
    getCheckoutDetailsLoaded() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getCheckoutDetailsLoaded));
    }
    /**
     * Check if checkout details are stable (no longer loading)
     */
    isLoading() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getCheckoutLoading));
    }
    /**
     * Get order details
     */
    getOrderDetails() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getCheckoutOrderDetails));
    }
    /**
     * Set checkout order type
     * @param orderType : an enum of types of order we are placing
     */
    setOrderType(orderType) {
        this.checkoutStore.dispatch(new CheckoutActions.SetOrderType(orderType));
    }
    /**
     * Get current checkout order type
     */
    getCurrentOrderType() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedOrderType));
    }
    actionAllowed() {
        let userId;
        this.userIdService
            .getUserId()
            .subscribe((occUserId) => (userId = occUserId))
            .unsubscribe();
        return ((userId && userId !== OCC_USER_ID_ANONYMOUS) ||
            this.activeCartService.isGuestCart());
    }
}
CheckoutService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutService, deps: [{ token: i1.Store }, { token: i1.Store }, { token: i2.ActiveCartService }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
CheckoutService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i1.Store }, { type: i2.ActiveCartService }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,