import { Injectable } from '@angular/core';
import { select } from '@ngrx/store';
import { B2BPaymentTypeEnum, ProcessSelectors, } from '@spartacus/core';
import { combineLatest } from 'rxjs';
import { map, pluck, shareReplay, take, tap, withLatestFrom, } from 'rxjs/operators';
import { CheckoutActions } from '../store/actions/index';
import { GET_PAYMENT_TYPES_PROCESS_ID, } from '../store/checkout-state';
import { CheckoutSelectors } from '../store/selectors/index';
import * as i0 from "@angular/core";
import * as i1 from "@ngrx/store";
import * as i2 from "@spartacus/core";
export class PaymentTypeService {
    constructor(checkoutStore, processStateStore, activeCartService, userIdService) {
        this.checkoutStore = checkoutStore;
        this.processStateStore = processStateStore;
        this.activeCartService = activeCartService;
        this.userIdService = userIdService;
    }
    /**
     * Get payment types
     */
    getPaymentTypes() {
        return this.checkoutStore.pipe(select(CheckoutSelectors.getAllPaymentTypes), withLatestFrom(this.processStateStore.pipe(select(ProcessSelectors.getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID)))), tap(([_, loadingState]) => {
            if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                this.loadPaymentTypes();
            }
        }), pluck(0), shareReplay({ bufferSize: 1, refCount: true }));
    }
    /**
     * Load the supported payment types
     */
    loadPaymentTypes() {
        this.checkoutStore.dispatch(new CheckoutActions.LoadPaymentTypes());
    }
    /**
     * Set payment type to cart
     * @param typeCode
     * @param poNumber : purchase order number
     */
    setPaymentType(typeCode, poNumber) {
        let cartId;
        this.activeCartService
            .getActiveCartId()
            .pipe(take(1))
            .subscribe((activeCartId) => (cartId = activeCartId));
        this.userIdService.takeUserId(true).subscribe((userId) => {
            if (cartId) {
                this.checkoutStore.dispatch(new CheckoutActions.SetPaymentType({
                    userId: userId,
                    cartId: cartId,
                    typeCode: typeCode,
                    poNumber: poNumber,
                }));
            }
        }, () => {
            // TODO: for future releases, refactor this part to thrown errors
        });
    }
    /**
     * Get the selected payment type
     */
    getSelectedPaymentType() {
        return combineLatest([
            this.activeCartService.getActive(),
            this.checkoutStore.pipe(select(CheckoutSelectors.getSelectedPaymentType)),
        ]).pipe(tap(([cart, selected]) => {
            if (selected === undefined) {
                // in b2b, cart always has paymentType (default value 'CARD')
                if (cart && cart.paymentType) {
                    this.checkoutStore.dispatch(new CheckoutActions.SetPaymentTypeSuccess(cart));
                }
            }
        }), map(([, selected]) => selected));
    }
    /**
     * Get whether the selected payment type is "ACCOUNT" payment
     */
    isAccountPayment() {
        return this.getSelectedPaymentType().pipe(map((selected) => selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT));
    }
    /**
     * Get PO Number
     */
    getPoNumber() {
        return combineLatest([
            this.activeCartService.getActive(),
            this.checkoutStore.pipe(select(CheckoutSelectors.getPoNumer)),
        ]).pipe(tap(([cart, po]) => {
            if (po === undefined && cart && cart.purchaseOrderNumber) {
                this.checkoutStore.dispatch(new CheckoutActions.SetPaymentTypeSuccess(cart));
            }
        }), map(([_, po]) => po));
    }
}
PaymentTypeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PaymentTypeService, deps: [{ token: i1.Store }, { token: i1.Store }, { token: i2.ActiveCartService }, { token: i2.UserIdService }], target: i0.ɵɵFactoryTarget.Injectable });
PaymentTypeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PaymentTypeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: PaymentTypeService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.Store }, { type: i1.Store }, { type: i2.ActiveCartService }, { type: i2.UserIdService }]; } });
//# sourceMappingURL=data:application/json;base64,