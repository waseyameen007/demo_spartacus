import { PROCESS_FEATURE, StateUtils, } from '@spartacus/core';
import { GET_PAYMENT_TYPES_PROCESS_ID } from '../checkout-state';
export const LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';
export const LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';
export const LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';
export const RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';
export const SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';
export const SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';
export const SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';
export class LoadPaymentTypes extends StateUtils.EntityLoadAction {
    constructor() {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.type = LOAD_PAYMENT_TYPES;
    }
}
export class LoadPaymentTypesFail extends StateUtils.EntityFailAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_PAYMENT_TYPES_FAIL;
    }
}
export class LoadPaymentTypesSuccess extends StateUtils.EntitySuccessAction {
    constructor(payload) {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.payload = payload;
        this.type = LOAD_PAYMENT_TYPES_SUCCESS;
    }
}
export class ResetLoadPaymentTypesProcess extends StateUtils.EntityLoaderResetAction {
    constructor() {
        super(PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID);
        this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;
    }
}
export class SetPaymentType {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE;
    }
}
export class SetPaymentTypeFail {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_FAIL;
    }
}
export class SetPaymentTypeSuccess {
    constructor(payload) {
        this.payload = payload;
        this.type = SET_PAYMENT_TYPE_SUCCESS;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5bWVudC10eXBlcy5hY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvY2hlY2tvdXQvY29yZS9zdG9yZS9hY3Rpb25zL3BheW1lbnQtdHlwZXMuYWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFHTCxlQUFlLEVBQ2YsVUFBVSxHQUNYLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFakUsTUFBTSxDQUFDLE1BQU0sa0JBQWtCLEdBQUcsK0JBQStCLENBQUM7QUFDbEUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsb0NBQW9DLENBQUM7QUFDNUUsTUFBTSxDQUFDLE1BQU0sMEJBQTBCLEdBQ3JDLHVDQUF1QyxDQUFDO0FBQzFDLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUM5Qyw0Q0FBNEMsQ0FBQztBQUUvQyxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyw2QkFBNkIsQ0FBQztBQUM5RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxrQ0FBa0MsQ0FBQztBQUN4RSxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRyxxQ0FBcUMsQ0FBQztBQUU5RSxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBVSxDQUFDLGdCQUFnQjtJQUUvRDtRQUNFLEtBQUssQ0FBQyxlQUFlLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztRQUY5QyxTQUFJLEdBQUcsa0JBQWtCLENBQUM7SUFHbkMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFVBQVUsQ0FBQyxnQkFBZ0I7SUFFbkUsWUFBbUIsT0FBWTtRQUM3QixLQUFLLENBQUMsZUFBZSxFQUFFLDRCQUE0QixDQUFDLENBQUM7UUFEcEMsWUFBTyxHQUFQLE9BQU8sQ0FBSztRQUR0QixTQUFJLEdBQUcsdUJBQXVCLENBQUM7SUFHeEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxPQUFPLHVCQUF3QixTQUFRLFVBQVUsQ0FBQyxtQkFBbUI7SUFFekUsWUFBbUIsT0FBc0I7UUFDdkMsS0FBSyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRHBDLFlBQU8sR0FBUCxPQUFPLENBQWU7UUFEaEMsU0FBSSxHQUFHLDBCQUEwQixDQUFDO0lBRzNDLENBQUM7Q0FDRjtBQUVELE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxVQUFVLENBQUMsdUJBQXVCO0lBRWxGO1FBQ0UsS0FBSyxDQUFDLGVBQWUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRjlDLFNBQUksR0FBRyxtQ0FBbUMsQ0FBQztJQUdwRCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLE9BQU8sY0FBYztJQUV6QixZQUNTLE9BS047UUFMTSxZQUFPLEdBQVAsT0FBTyxDQUtiO1FBUE0sU0FBSSxHQUFHLGdCQUFnQixDQUFDO0lBUTlCLENBQUM7Q0FDTDtBQUVELE1BQU0sT0FBTyxrQkFBa0I7SUFFN0IsWUFBbUIsT0FBWTtRQUFaLFlBQU8sR0FBUCxPQUFPLENBQUs7UUFEdEIsU0FBSSxHQUFHLHFCQUFxQixDQUFDO0lBQ0osQ0FBQztDQUNwQztBQUVELE1BQU0sT0FBTyxxQkFBcUI7SUFFaEMsWUFBbUIsT0FBYTtRQUFiLFlBQU8sR0FBUCxPQUFPLENBQU07UUFEdkIsU0FBSSxHQUFHLHdCQUF3QixDQUFDO0lBQ04sQ0FBQztDQUNyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFjdGlvbiB9IGZyb20gJ0BuZ3J4L3N0b3JlJztcbmltcG9ydCB7XG4gIENhcnQsXG4gIFBheW1lbnRUeXBlLFxuICBQUk9DRVNTX0ZFQVRVUkUsXG4gIFN0YXRlVXRpbHMsXG59IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5pbXBvcnQgeyBHRVRfUEFZTUVOVF9UWVBFU19QUk9DRVNTX0lEIH0gZnJvbSAnLi4vY2hlY2tvdXQtc3RhdGUnO1xuXG5leHBvcnQgY29uc3QgTE9BRF9QQVlNRU5UX1RZUEVTID0gJ1tDaGVja291dF0gTG9hZCBQYXltZW50IFR5cGVzJztcbmV4cG9ydCBjb25zdCBMT0FEX1BBWU1FTlRfVFlQRVNfRkFJTCA9ICdbQ2hlY2tvdXRdIExvYWQgUGF5bWVudCBUeXBlcyBGYWlsJztcbmV4cG9ydCBjb25zdCBMT0FEX1BBWU1FTlRfVFlQRVNfU1VDQ0VTUyA9XG4gICdbQ2hlY2tvdXRdIExvYWQgUGF5bWVudCBUeXBlcyBTdWNjZXNzJztcbmV4cG9ydCBjb25zdCBSRVNFVF9MT0FEX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCA9XG4gICdbQ2hlY2tvdXRdIFJlc2V0IExvYWQgUGF5bWVudCBUeXBlIFByb2Nlc3MnO1xuXG5leHBvcnQgY29uc3QgU0VUX1BBWU1FTlRfVFlQRSA9ICdbQ2hlY2tvdXRdIFNldCBQYXltZW50IFR5cGUnO1xuZXhwb3J0IGNvbnN0IFNFVF9QQVlNRU5UX1RZUEVfRkFJTCA9ICdbQ2hlY2tvdXRdIFNldCBQYXltZW50IFR5cGUgRmFpbCc7XG5leHBvcnQgY29uc3QgU0VUX1BBWU1FTlRfVFlQRV9TVUNDRVNTID0gJ1tDaGVja291dF0gU2V0IFBheW1lbnQgVHlwZSBTdWNjZXNzJztcblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXMgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gTE9BRF9QQVlNRU5UX1RZUEVTO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIEdFVF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMb2FkUGF5bWVudFR5cGVzRmFpbCBleHRlbmRzIFN0YXRlVXRpbHMuRW50aXR5RmFpbEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBMT0FEX1BBWU1FTlRfVFlQRVNfRkFJTDtcbiAgY29uc3RydWN0b3IocHVibGljIHBheWxvYWQ6IGFueSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIExvYWRQYXltZW50VHlwZXNTdWNjZXNzIGV4dGVuZHMgU3RhdGVVdGlscy5FbnRpdHlTdWNjZXNzQWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IExPQURfUEFZTUVOVF9UWVBFU19TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogUGF5bWVudFR5cGVbXSkge1xuICAgIHN1cGVyKFBST0NFU1NfRkVBVFVSRSwgR0VUX1BBWU1FTlRfVFlQRVNfUFJPQ0VTU19JRCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJlc2V0TG9hZFBheW1lbnRUeXBlc1Byb2Nlc3MgZXh0ZW5kcyBTdGF0ZVV0aWxzLkVudGl0eUxvYWRlclJlc2V0QWN0aW9uIHtcbiAgcmVhZG9ubHkgdHlwZSA9IFJFU0VUX0xPQURfUEFZTUVOVF9UWVBFU19QUk9DRVNTX0lEO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcihQUk9DRVNTX0ZFQVRVUkUsIEdFVF9QQVlNRU5UX1RZUEVTX1BST0NFU1NfSUQpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRQYXltZW50VHlwZSBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTRVRfUEFZTUVOVF9UWVBFO1xuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgcGF5bG9hZDoge1xuICAgICAgdXNlcklkOiBzdHJpbmc7XG4gICAgICBjYXJ0SWQ6IHN0cmluZztcbiAgICAgIHR5cGVDb2RlOiBzdHJpbmc7XG4gICAgICBwb051bWJlcj86IHN0cmluZztcbiAgICB9XG4gICkge31cbn1cblxuZXhwb3J0IGNsYXNzIFNldFBheW1lbnRUeXBlRmFpbCBpbXBsZW1lbnRzIEFjdGlvbiB7XG4gIHJlYWRvbmx5IHR5cGUgPSBTRVRfUEFZTUVOVF9UWVBFX0ZBSUw7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXlsb2FkOiBhbnkpIHt9XG59XG5cbmV4cG9ydCBjbGFzcyBTZXRQYXltZW50VHlwZVN1Y2Nlc3MgaW1wbGVtZW50cyBBY3Rpb24ge1xuICByZWFkb25seSB0eXBlID0gU0VUX1BBWU1FTlRfVFlQRV9TVUNDRVNTO1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcGF5bG9hZDogQ2FydCkge31cbn1cblxuZXhwb3J0IHR5cGUgUGF5bWVudFR5cGVzQWN0aW9uID1cbiAgfCBMb2FkUGF5bWVudFR5cGVzXG4gIHwgTG9hZFBheW1lbnRUeXBlc0ZhaWxcbiAgfCBMb2FkUGF5bWVudFR5cGVzU3VjY2Vzc1xuICB8IFJlc2V0TG9hZFBheW1lbnRUeXBlc1Byb2Nlc3NcbiAgfCBTZXRQYXltZW50VHlwZVxuICB8IFNldFBheW1lbnRUeXBlRmFpbFxuICB8IFNldFBheW1lbnRUeXBlU3VjY2VzcztcbiJdfQ==