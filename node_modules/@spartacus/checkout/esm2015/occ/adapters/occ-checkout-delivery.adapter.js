import { HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { DELIVERY_MODE_NORMALIZER, } from '@spartacus/checkout/core';
import { ADDRESS_NORMALIZER, ADDRESS_SERIALIZER, } from '@spartacus/core';
import { map, pluck } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@spartacus/core";
export class OccCheckoutDeliveryAdapter {
    constructor(http, occEndpoints, converter) {
        this.http = http;
        this.occEndpoints = occEndpoints;
        this.converter = converter;
    }
    getCreateDeliveryAddressEndpoint(userId, cartId) {
        return this.occEndpoints.buildUrl('createDeliveryAddress', {
            urlParams: {
                userId,
                cartId,
            },
        });
    }
    getSetDeliveryAddressEndpoint(userId, cartId, addressId) {
        return this.occEndpoints.buildUrl('setDeliveryAddress', {
            urlParams: { userId, cartId },
            queryParams: { addressId },
        });
    }
    getDeliveryModeEndpoint(userId, cartId) {
        return this.occEndpoints.buildUrl('deliveryMode', {
            urlParams: {
                userId,
                cartId,
            },
        });
    }
    getSetDeliveryModeEndpoint(userId, cartId, deliveryModeId) {
        return this.occEndpoints.buildUrl('setDeliveryMode', {
            urlParams: {
                userId,
                cartId,
            },
            queryParams: { deliveryModeId },
        });
    }
    getDeliveryModesEndpoint(userId, cartId) {
        return this.occEndpoints.buildUrl('deliveryModes', {
            urlParams: { userId, cartId },
        });
    }
    createAddress(userId, cartId, address) {
        address = this.converter.convert(address, ADDRESS_SERIALIZER);
        return this.http
            .post(this.getCreateDeliveryAddressEndpoint(userId, cartId), address, {
            headers: new HttpHeaders().set('Content-Type', 'application/json'),
        })
            .pipe(this.converter.pipeable(ADDRESS_NORMALIZER));
    }
    setAddress(userId, cartId, addressId) {
        return this.http.put(this.getSetDeliveryAddressEndpoint(userId, cartId, addressId), {});
    }
    setMode(userId, cartId, deliveryModeId) {
        return this.http.put(this.getSetDeliveryModeEndpoint(userId, cartId, deliveryModeId), {});
    }
    getMode(userId, cartId) {
        return this.http
            .get(this.getDeliveryModeEndpoint(userId, cartId))
            .pipe(this.converter.pipeable(DELIVERY_MODE_NORMALIZER));
    }
    getSupportedModes(userId, cartId) {
        return this.http
            .get(this.getDeliveryModesEndpoint(userId, cartId))
            .pipe(pluck('deliveryModes'), map((modes) => modes !== null && modes !== void 0 ? modes : []), this.converter.pipeableMany(DELIVERY_MODE_NORMALIZER));
    }
}
OccCheckoutDeliveryAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccCheckoutDeliveryAdapter, deps: [{ token: i1.HttpClient }, { token: i2.OccEndpointsService }, { token: i2.ConverterService }], target: i0.ɵɵFactoryTarget.Injectable });
OccCheckoutDeliveryAdapter.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccCheckoutDeliveryAdapter });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: OccCheckoutDeliveryAdapter, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.HttpClient }, { type: i2.OccEndpointsService }, { type: i2.ConverterService }]; } });
//# sourceMappingURL=data:application/json;base64,