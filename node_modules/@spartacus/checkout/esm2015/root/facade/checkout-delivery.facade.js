import { Injectable } from '@angular/core';
import { facadeFactory, } from '@spartacus/core';
import { CHECKOUT_CORE_FEATURE } from '../feature-name';
import * as i0 from "@angular/core";
export class CheckoutDeliveryFacade {
}
CheckoutDeliveryFacade.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutDeliveryFacade, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
CheckoutDeliveryFacade.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutDeliveryFacade, providedIn: 'root', useFactory: () => facadeFactory({
        facade: CheckoutDeliveryFacade,
        feature: CHECKOUT_CORE_FEATURE,
        methods: [
            'getSupportedDeliveryModes',
            'getSelectedDeliveryMode',
            'getSelectedDeliveryModeCode',
            'getDeliveryAddress',
            'getSetDeliveryAddressProcess',
            'resetSetDeliveryAddressProcess',
            'getSetDeliveryModeProcess',
            'resetSetDeliveryModeProcess',
            'resetLoadSupportedDeliveryModesProcess',
            'getLoadSupportedDeliveryModeProcess',
            'clearCheckoutDeliveryModes',
            'createAndSetAddress',
            'loadSupportedDeliveryModes',
            'setDeliveryMode',
            'setDeliveryAddress',
            'clearCheckoutDeliveryAddress',
            'clearCheckoutDeliveryMode',
            'clearCheckoutDeliveryDetails',
        ],
        async: true,
    }) });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: CheckoutDeliveryFacade, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                    useFactory: () => facadeFactory({
                        facade: CheckoutDeliveryFacade,
                        feature: CHECKOUT_CORE_FEATURE,
                        methods: [
                            'getSupportedDeliveryModes',
                            'getSelectedDeliveryMode',
                            'getSelectedDeliveryModeCode',
                            'getDeliveryAddress',
                            'getSetDeliveryAddressProcess',
                            'resetSetDeliveryAddressProcess',
                            'getSetDeliveryModeProcess',
                            'resetSetDeliveryModeProcess',
                            'resetLoadSupportedDeliveryModesProcess',
                            'getLoadSupportedDeliveryModeProcess',
                            'clearCheckoutDeliveryModes',
                            'createAndSetAddress',
                            'loadSupportedDeliveryModes',
                            'setDeliveryMode',
                            'setDeliveryAddress',
                            'clearCheckoutDeliveryAddress',
                            'clearCheckoutDeliveryMode',
                            'clearCheckoutDeliveryDetails',
                        ],
                        async: true,
                    }),
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tvdXQtZGVsaXZlcnkuZmFjYWRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL2NoZWNrb3V0L3Jvb3QvZmFjYWRlL2NoZWNrb3V0LWRlbGl2ZXJ5LmZhY2FkZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFHTCxhQUFhLEdBRWQsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUErQnhELE1BQU0sT0FBZ0Isc0JBQXNCOzttSEFBdEIsc0JBQXNCO3VIQUF0QixzQkFBc0IsY0E1QjlCLE1BQU0sY0FDTixHQUFHLEVBQUUsQ0FDZixhQUFhLENBQUM7UUFDWixNQUFNLEVBQUUsc0JBQXNCO1FBQzlCLE9BQU8sRUFBRSxxQkFBcUI7UUFDOUIsT0FBTyxFQUFFO1lBQ1AsMkJBQTJCO1lBQzNCLHlCQUF5QjtZQUN6Qiw2QkFBNkI7WUFDN0Isb0JBQW9CO1lBQ3BCLDhCQUE4QjtZQUM5QixnQ0FBZ0M7WUFDaEMsMkJBQTJCO1lBQzNCLDZCQUE2QjtZQUM3Qix3Q0FBd0M7WUFDeEMscUNBQXFDO1lBQ3JDLDRCQUE0QjtZQUM1QixxQkFBcUI7WUFDckIsNEJBQTRCO1lBQzVCLGlCQUFpQjtZQUNqQixvQkFBb0I7WUFDcEIsOEJBQThCO1lBQzlCLDJCQUEyQjtZQUMzQiw4QkFBOEI7U0FDL0I7UUFDRCxLQUFLLEVBQUUsSUFBSTtLQUNaLENBQUM7MkZBRWdCLHNCQUFzQjtrQkE3QjNDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07b0JBQ2xCLFVBQVUsRUFBRSxHQUFHLEVBQUUsQ0FDZixhQUFhLENBQUM7d0JBQ1osTUFBTSx3QkFBd0I7d0JBQzlCLE9BQU8sRUFBRSxxQkFBcUI7d0JBQzlCLE9BQU8sRUFBRTs0QkFDUCwyQkFBMkI7NEJBQzNCLHlCQUF5Qjs0QkFDekIsNkJBQTZCOzRCQUM3QixvQkFBb0I7NEJBQ3BCLDhCQUE4Qjs0QkFDOUIsZ0NBQWdDOzRCQUNoQywyQkFBMkI7NEJBQzNCLDZCQUE2Qjs0QkFDN0Isd0NBQXdDOzRCQUN4QyxxQ0FBcUM7NEJBQ3JDLDRCQUE0Qjs0QkFDNUIscUJBQXFCOzRCQUNyQiw0QkFBNEI7NEJBQzVCLGlCQUFpQjs0QkFDakIsb0JBQW9COzRCQUNwQiw4QkFBOEI7NEJBQzlCLDJCQUEyQjs0QkFDM0IsOEJBQThCO3lCQUMvQjt3QkFDRCxLQUFLLEVBQUUsSUFBSTtxQkFDWixDQUFDO2lCQUNMIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgQWRkcmVzcyxcbiAgRGVsaXZlcnlNb2RlLFxuICBmYWNhZGVGYWN0b3J5LFxuICBTdGF0ZVV0aWxzLFxufSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ0hFQ0tPVVRfQ09SRV9GRUFUVVJFIH0gZnJvbSAnLi4vZmVhdHVyZS1uYW1lJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG4gIHVzZUZhY3Rvcnk6ICgpID0+XG4gICAgZmFjYWRlRmFjdG9yeSh7XG4gICAgICBmYWNhZGU6IENoZWNrb3V0RGVsaXZlcnlGYWNhZGUsXG4gICAgICBmZWF0dXJlOiBDSEVDS09VVF9DT1JFX0ZFQVRVUkUsXG4gICAgICBtZXRob2RzOiBbXG4gICAgICAgICdnZXRTdXBwb3J0ZWREZWxpdmVyeU1vZGVzJyxcbiAgICAgICAgJ2dldFNlbGVjdGVkRGVsaXZlcnlNb2RlJyxcbiAgICAgICAgJ2dldFNlbGVjdGVkRGVsaXZlcnlNb2RlQ29kZScsXG4gICAgICAgICdnZXREZWxpdmVyeUFkZHJlc3MnLFxuICAgICAgICAnZ2V0U2V0RGVsaXZlcnlBZGRyZXNzUHJvY2VzcycsXG4gICAgICAgICdyZXNldFNldERlbGl2ZXJ5QWRkcmVzc1Byb2Nlc3MnLFxuICAgICAgICAnZ2V0U2V0RGVsaXZlcnlNb2RlUHJvY2VzcycsXG4gICAgICAgICdyZXNldFNldERlbGl2ZXJ5TW9kZVByb2Nlc3MnLFxuICAgICAgICAncmVzZXRMb2FkU3VwcG9ydGVkRGVsaXZlcnlNb2Rlc1Byb2Nlc3MnLFxuICAgICAgICAnZ2V0TG9hZFN1cHBvcnRlZERlbGl2ZXJ5TW9kZVByb2Nlc3MnLFxuICAgICAgICAnY2xlYXJDaGVja291dERlbGl2ZXJ5TW9kZXMnLFxuICAgICAgICAnY3JlYXRlQW5kU2V0QWRkcmVzcycsXG4gICAgICAgICdsb2FkU3VwcG9ydGVkRGVsaXZlcnlNb2RlcycsXG4gICAgICAgICdzZXREZWxpdmVyeU1vZGUnLFxuICAgICAgICAnc2V0RGVsaXZlcnlBZGRyZXNzJyxcbiAgICAgICAgJ2NsZWFyQ2hlY2tvdXREZWxpdmVyeUFkZHJlc3MnLFxuICAgICAgICAnY2xlYXJDaGVja291dERlbGl2ZXJ5TW9kZScsXG4gICAgICAgICdjbGVhckNoZWNrb3V0RGVsaXZlcnlEZXRhaWxzJyxcbiAgICAgIF0sXG4gICAgICBhc3luYzogdHJ1ZSxcbiAgICB9KSxcbn0pXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hlY2tvdXREZWxpdmVyeUZhY2FkZSB7XG4gIC8qKlxuICAgKiBHZXQgc3VwcG9ydGVkIGRlbGl2ZXJ5IG1vZGVzXG4gICAqL1xuICBhYnN0cmFjdCBnZXRTdXBwb3J0ZWREZWxpdmVyeU1vZGVzKCk6IE9ic2VydmFibGU8RGVsaXZlcnlNb2RlW10+O1xuXG4gIC8qKlxuICAgKiBHZXQgc2VsZWN0ZWQgZGVsaXZlcnkgbW9kZVxuICAgKi9cbiAgYWJzdHJhY3QgZ2V0U2VsZWN0ZWREZWxpdmVyeU1vZGUoKTogT2JzZXJ2YWJsZTxcbiAgICBEZWxpdmVyeU1vZGUgfCB1bmRlZmluZWQgfCBudWxsXG4gID47XG5cbiAgLyoqXG4gICAqIEdldCBzZWxlY3RlZCBkZWxpdmVyeSBtb2RlIGNvZGVcbiAgICovXG4gIGFic3RyYWN0IGdldFNlbGVjdGVkRGVsaXZlcnlNb2RlQ29kZSgpOiBPYnNlcnZhYmxlPHN0cmluZz47XG5cbiAgLyoqXG4gICAqIEdldCBkZWxpdmVyeSBhZGRyZXNzXG4gICAqL1xuICBhYnN0cmFjdCBnZXREZWxpdmVyeUFkZHJlc3MoKTogT2JzZXJ2YWJsZTxBZGRyZXNzPjtcblxuICAvKipcbiAgICogR2V0IHN0YXR1cyBhYm91dCBzdWNjZXNzZnVsbHkgc2V0IERlbGl2ZXJ5IEFkZHJlc3NcbiAgICovXG4gIGFic3RyYWN0IGdldFNldERlbGl2ZXJ5QWRkcmVzc1Byb2Nlc3MoKTogT2JzZXJ2YWJsZTxcbiAgICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPHZvaWQ+XG4gID47XG5cbiAgLyoqXG4gICAqIENsZWFyIGluZm8gYWJvdXQgcHJvY2VzcyBvZiBzZXR0aW5nIERlbGl2ZXJ5IEFkZHJlc3NcbiAgICovXG4gIGFic3RyYWN0IHJlc2V0U2V0RGVsaXZlcnlBZGRyZXNzUHJvY2VzcygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBHZXQgc3RhdHVzIGFib3V0IG9mIHNldCBEZWxpdmVyeSBNb2RlIHByb2Nlc3NcbiAgICovXG4gIGFic3RyYWN0IGdldFNldERlbGl2ZXJ5TW9kZVByb2Nlc3MoKTogT2JzZXJ2YWJsZTxcbiAgICBTdGF0ZVV0aWxzLkxvYWRlclN0YXRlPHZvaWQ+XG4gID47XG5cbiAgLyoqXG4gICAqIENsZWFyIGluZm8gYWJvdXQgcHJvY2VzcyBvZiBzZXR0aW5nIERlbGl2ZXJ5IE1vZGVcbiAgICovXG4gIGFic3RyYWN0IHJlc2V0U2V0RGVsaXZlcnlNb2RlUHJvY2VzcygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhciBpbmZvIGFib3V0IHByb2Nlc3Mgb2Ygc2V0dGluZyBTdXBwb3J0ZWQgRGVsaXZlcnkgTW9kZXNcbiAgICovXG4gIGFic3RyYWN0IHJlc2V0TG9hZFN1cHBvcnRlZERlbGl2ZXJ5TW9kZXNQcm9jZXNzKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEdldCBzdGF0dXMgYWJvdXQgb2Ygc2V0IHN1cHBvcnRlZCBEZWxpdmVyeSBNb2RlcyBwcm9jZXNzXG4gICAqL1xuICBhYnN0cmFjdCBnZXRMb2FkU3VwcG9ydGVkRGVsaXZlcnlNb2RlUHJvY2VzcygpOiBPYnNlcnZhYmxlPFxuICAgIFN0YXRlVXRpbHMuTG9hZGVyU3RhdGU8dm9pZD5cbiAgPjtcblxuICAvKipcbiAgICogQ2xlYXIgc3VwcG9ydGVkIGRlbGl2ZXJ5IG1vZGVzIGxvYWRlZCBpbiBsYXN0IGNoZWNrb3V0IHByb2Nlc3NcbiAgICovXG4gIGFic3RyYWN0IGNsZWFyQ2hlY2tvdXREZWxpdmVyeU1vZGVzKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbmQgc2V0IGEgZGVsaXZlcnkgYWRkcmVzcyB1c2luZyB0aGUgYWRkcmVzcyBwYXJhbVxuICAgKiBAcGFyYW0gYWRkcmVzcyA6IHRoZSBBZGRyZXNzIHRvIGJlIGNyZWF0ZWQgYW5kIHNldFxuICAgKi9cbiAgYWJzdHJhY3QgY3JlYXRlQW5kU2V0QWRkcmVzcyhhZGRyZXNzOiBBZGRyZXNzKTogdm9pZDtcblxuICAvKipcbiAgICogTG9hZCBzdXBwb3J0ZWQgZGVsaXZlcnkgbW9kZXNcbiAgICovXG4gIGFic3RyYWN0IGxvYWRTdXBwb3J0ZWREZWxpdmVyeU1vZGVzKCk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldCBkZWxpdmVyeSBtb2RlXG4gICAqIEBwYXJhbSBtb2RlIDogVGhlIGRlbGl2ZXJ5IG1vZGUgdG8gYmUgc2V0XG4gICAqL1xuICBhYnN0cmFjdCBzZXREZWxpdmVyeU1vZGUobW9kZTogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogU2V0IGRlbGl2ZXJ5IGFkZHJlc3NcbiAgICogQHBhcmFtIGFkZHJlc3MgOiBUaGUgYWRkcmVzcyB0byBiZSBzZXRcbiAgICovXG4gIGFic3RyYWN0IHNldERlbGl2ZXJ5QWRkcmVzcyhhZGRyZXNzOiBBZGRyZXNzKTogdm9pZDtcblxuICAvKipcbiAgICogQ2xlYXIgYWRkcmVzcyBhbHJlYWR5IHNldHVwIGluIGxhc3QgY2hlY2tvdXQgcHJvY2Vzc1xuICAgKi9cbiAgYWJzdHJhY3QgY2xlYXJDaGVja291dERlbGl2ZXJ5QWRkcmVzcygpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhciBzZWxlY3RlZCBkZWxpdmVyeSBtb2RlIHNldHVwIGluIGxhc3QgY2hlY2tvdXQgcHJvY2Vzc1xuICAgKi9cbiAgYWJzdHJhY3QgY2xlYXJDaGVja291dERlbGl2ZXJ5TW9kZSgpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBDbGVhciBhZGRyZXNzIGFuZCBkZWxpdmVyeSBtb2RlIGFscmVhZHkgc2V0dXAgaW4gbGFzdCBjaGVja291dCBwcm9jZXNzXG4gICAqL1xuICBhYnN0cmFjdCBjbGVhckNoZWNrb3V0RGVsaXZlcnlEZXRhaWxzKCk6IHZvaWQ7XG59XG4iXX0=