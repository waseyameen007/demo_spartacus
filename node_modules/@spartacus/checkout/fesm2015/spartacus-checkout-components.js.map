{"version":3,"file":"spartacus-checkout-components.js","sources":["../../../feature-libs/checkout/components/guards/not-checkout-auth.guard.ts","../../../feature-libs/checkout/components/components/checkout-login/checkout-login.component.ts","../../../feature-libs/checkout/components/components/checkout-login/checkout-login.component.html","../../../feature-libs/checkout/components/components/checkout-login/checkout-login.module.ts","../../../feature-libs/checkout/components/guards/cart-not-empty.guard.ts","../../../feature-libs/checkout/components/services/checkout-config.service.ts","../../../feature-libs/checkout/components/guards/checkout-auth.guard.ts","../../../feature-libs/checkout/components/services/checkout-details.service.ts","../../../feature-libs/checkout/components/services/express-checkout.service.ts","../../../feature-libs/checkout/components/services/checkout-step.service.ts","../../../feature-libs/checkout/components/guards/checkout.guard.ts","../../../feature-libs/checkout/components/components/checkout-orchestrator/checkout-orchestrator.component.ts","../../../feature-libs/checkout/components/components/checkout-orchestrator/checkout-orchestrator.module.ts","../../../feature-libs/checkout/components/components/checkout-order-summary/checkout-order-summary.component.ts","../../../feature-libs/checkout/components/components/checkout-order-summary/checkout-order-summary.component.html","../../../feature-libs/checkout/components/components/checkout-order-summary/checkout-order-summary.module.ts","../../../feature-libs/checkout/components/guards/checkout-steps-set.guard.ts","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.ts","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.component.html","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module.ts","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.ts","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.component.html","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module.ts","../../../feature-libs/checkout/components/components/checkout-progress/multiline-titles.pipe.ts","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress.component.ts","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress.component.html","../../../feature-libs/checkout/components/components/checkout-progress/checkout-progress.module.ts","../../../feature-libs/checkout/components/components/cost-center/cost-center.component.ts","../../../feature-libs/checkout/components/components/cost-center/cost-center.component.html","../../../feature-libs/checkout/components/components/cost-center/cost-center.module.ts","../../../feature-libs/checkout/components/components/delivery-mode/delivery-mode.component.ts","../../../feature-libs/checkout/components/components/delivery-mode/delivery-mode.component.html","../../../feature-libs/checkout/components/components/delivery-mode/delivery-mode.module.ts","../../../feature-libs/checkout/components/components/payment-method/payment-form/payment-form.component.ts","../../../feature-libs/checkout/components/components/payment-method/payment-form/payment-form.component.html","../../../feature-libs/checkout/components/components/payment-method/payment-form/payment-form.module.ts","../../../feature-libs/checkout/components/components/payment-method/payment-method.component.ts","../../../feature-libs/checkout/components/components/payment-method/payment-method.component.html","../../../feature-libs/checkout/components/components/payment-method/payment-method.module.ts","../../../feature-libs/checkout/components/components/payment-type/payment-type.component.ts","../../../feature-libs/checkout/components/components/payment-type/payment-type.component.html","../../../feature-libs/checkout/components/components/payment-type/payment-type.module.ts","../../../feature-libs/checkout/components/components/place-order/default-place-order-spinner-layout.config.ts","../../../feature-libs/checkout/components/services/checkout-replenishment-form-service.ts","../../../feature-libs/checkout/components/components/place-order/place-order.component.ts","../../../feature-libs/checkout/components/components/place-order/place-order.component.html","../../../feature-libs/checkout/components/components/place-order/place-order.module.ts","../../../feature-libs/checkout/components/components/review-submit/review-submit.component.ts","../../../feature-libs/checkout/components/components/review-submit/review-submit.component.html","../../../feature-libs/checkout/components/components/review-submit/review-submit.module.ts","../../../feature-libs/checkout/components/components/schedule-replenishment-order/schedule-replenishment-order.component.ts","../../../feature-libs/checkout/components/components/schedule-replenishment-order/schedule-replenishment-order.component.html","../../../feature-libs/checkout/components/components/schedule-replenishment-order/schedule-replenishment-order.module.ts","../../../feature-libs/checkout/components/components/shipping-address/shipping-address.component.ts","../../../feature-libs/checkout/components/components/shipping-address/shipping-address.component.html","../../../feature-libs/checkout/components/components/shipping-address/shipping-address.module.ts","../../../feature-libs/checkout/components/order-confirmation/components/guest-register-form/guest-register-form.component.ts","../../../feature-libs/checkout/components/order-confirmation/components/guest-register-form/guest-register-form.component.html","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.ts","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-items/order-confirmation-items.component.html","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.ts","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-overview/order-confirmation-overview.component.html","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.ts","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component.html","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.ts","../../../feature-libs/checkout/components/order-confirmation/components/order-confirmation-totals/order-confirmation-totals.component.html","../../../feature-libs/checkout/components/order-confirmation/guards/order-confirmation.guard.ts","../../../feature-libs/checkout/components/order-confirmation/order-confirmation.module.ts","../../../feature-libs/checkout/components/order-confirmation/replenishment-order-confirmation.module.ts","../../../feature-libs/checkout/components/checkout-components.module.ts","../../../feature-libs/checkout/components/spartacus-checkout-components.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthService,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotCheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected activeCartService: ActiveCartService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.authService.isUserLoggedIn().pipe(\n      map((isLoggedIn) => {\n        if (isLoggedIn) {\n          return this.router.parseUrl(this.semanticPathService.get('home'));\n        } else if (this.activeCartService.isGuestCart()) {\n          return this.router.parseUrl(this.semanticPathService.get('cart'));\n        }\n        return !isLoggedIn;\n      })\n    );\n  }\n}\n","import { Component, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActiveCartService, AuthRedirectService } from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-checkout-login',\n  templateUrl: './checkout-login.component.html',\n})\nexport class CheckoutLoginComponent implements OnDestroy {\n  checkoutLoginForm: FormGroup = this.formBuilder.group(\n    {\n      email: ['', [Validators.required, CustomFormValidators.emailValidator]],\n      emailConfirmation: ['', [Validators.required]],\n    },\n    {\n      validators: CustomFormValidators.emailsMustMatch(\n        'email',\n        'emailConfirmation'\n      ),\n    }\n  );\n  sub: Subscription;\n\n  constructor(\n    protected formBuilder: FormBuilder,\n    protected authRedirectService: AuthRedirectService,\n    protected activeCartService: ActiveCartService\n  ) {}\n\n  onSubmit() {\n    if (this.checkoutLoginForm.valid) {\n      const email = this.checkoutLoginForm.get('email')?.value;\n      this.activeCartService.addEmail(email);\n\n      if (!this.sub) {\n        this.sub = this.activeCartService.getAssignedUser().subscribe(() => {\n          if (this.activeCartService.isGuestCart()) {\n            this.authRedirectService.redirect();\n          }\n        });\n      }\n    } else {\n      this.checkoutLoginForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.sub) {\n      this.sub.unsubscribe();\n    }\n  }\n}\n","<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"checkoutLoginForm\">\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutLogin.emailAddress.label' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"email\"\n        name=\"email\"\n        class=\"form-control\"\n        formControlName=\"email\"\n        placeholder=\"{{\n          'checkoutLogin.emailAddress.placeholder' | cxTranslate\n        }}\"\n      />\n      <cx-form-errors\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        [control]=\"checkoutLoginForm.get('email')\"\n      ></cx-form-errors>\n    </label>\n  </div>\n\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutLogin.confirmEmail.label' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"email\"\n        name=\"emailConfirmation\"\n        class=\"form-control\"\n        formControlName=\"emailConfirmation\"\n        placeholder=\"{{\n          'checkoutLogin.confirmEmail.placeholder' | cxTranslate\n        }}\"\n      />\n      <cx-form-errors\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        [control]=\"checkoutLoginForm.get('emailConfirmation')\"\n      ></cx-form-errors>\n    </label>\n  </div>\n\n  <button type=\"submit\" class=\"btn btn-block btn-primary\">\n    {{ 'checkoutLogin.continue' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { FormErrorsModule } from '@spartacus/storefront';\nimport { NotCheckoutAuthGuard } from '../../guards/not-checkout-auth.guard';\nimport { CheckoutLoginComponent } from './checkout-login.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    ReactiveFormsModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        GuestCheckoutLoginComponent: {\n          component: CheckoutLoginComponent,\n          guards: [NotCheckoutAuthGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutLoginComponent],\n  exports: [CheckoutLoginComponent],\n})\nexport class CheckoutLoginModule {}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { ActiveCartService, Cart, SemanticPathService } from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CartNotEmptyGuard implements CanActivate {\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([_, loaded]) => loaded),\n      map(([cart]) => {\n        if (this.isEmpty(cart)) {\n          return this.router.parseUrl(this.semanticPathService.get('home'));\n        }\n        return true;\n      })\n    );\n  }\n\n  private isEmpty(cart: Cart): boolean {\n    return cart && !cart.totalItems;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CheckoutConfig,\n  DeliveryModePreferences,\n} from '@spartacus/checkout/root';\nimport { DeliveryMode } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutConfigService {\n  private express: boolean = this.checkoutConfig.checkout?.express ?? false;\n  private guest: boolean = this.checkoutConfig.checkout?.guest ?? false;\n  private defaultDeliveryMode: Array<DeliveryModePreferences | string> =\n    this.checkoutConfig.checkout?.defaultDeliveryMode || [];\n\n  constructor(private checkoutConfig: CheckoutConfig) {}\n\n  protected compareDeliveryCost(\n    deliveryMode1: DeliveryMode,\n    deliveryMode2: DeliveryMode\n  ): number {\n    if (\n      deliveryMode1.deliveryCost?.value &&\n      deliveryMode2.deliveryCost?.value\n    ) {\n      if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {\n        return 1;\n      } else if (\n        deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value\n      ) {\n        return -1;\n      }\n    }\n    return 0;\n  }\n\n  protected findMatchingDeliveryMode(\n    deliveryModes: DeliveryMode[],\n    index = 0\n  ): string | undefined {\n    switch (this.defaultDeliveryMode[index]) {\n      case DeliveryModePreferences.FREE:\n        if (deliveryModes[0].deliveryCost?.value === 0) {\n          return deliveryModes[0].code;\n        }\n        break;\n      case DeliveryModePreferences.LEAST_EXPENSIVE:\n        const leastExpensiveFound = deliveryModes.find(\n          (deliveryMode) => deliveryMode.deliveryCost?.value !== 0\n        );\n        if (leastExpensiveFound) {\n          return leastExpensiveFound.code;\n        }\n        break;\n      case DeliveryModePreferences.MOST_EXPENSIVE:\n        return deliveryModes[deliveryModes.length - 1].code;\n      default:\n        const codeFound = deliveryModes.find(\n          (deliveryMode) =>\n            deliveryMode.code === this.defaultDeliveryMode[index]\n        );\n        if (codeFound) {\n          return codeFound.code;\n        }\n    }\n    const lastMode = this.defaultDeliveryMode.length - 1 <= index;\n    return lastMode\n      ? deliveryModes[0].code\n      : this.findMatchingDeliveryMode(deliveryModes, index + 1);\n  }\n\n  getPreferredDeliveryMode(deliveryModes: DeliveryMode[]): string | undefined {\n    deliveryModes.sort(this.compareDeliveryCost);\n    return this.findMatchingDeliveryMode(deliveryModes);\n  }\n\n  isExpressCheckout(): boolean {\n    return this.express;\n  }\n\n  isGuestCheckout(): boolean {\n    return this.guest;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport {\n  ActiveCartService,\n  AuthRedirectService,\n  AuthService,\n  B2BUser,\n  B2BUserRole,\n  GlobalMessageService,\n  GlobalMessageType,\n  SemanticPathService,\n} from '@spartacus/core';\nimport { User, UserAccountFacade } from '@spartacus/user/account/root';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutAuthGuard implements CanActivate {\n  constructor(\n    protected authService: AuthService,\n    protected authRedirectService: AuthRedirectService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected activeCartService: ActiveCartService,\n    protected semanticPathService: SemanticPathService,\n    protected router: Router,\n    protected userService: UserAccountFacade,\n    protected globalMessageService: GlobalMessageService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.authService.isUserLoggedIn(),\n      this.activeCartService.getAssignedUser(),\n      this.userService.get(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([, , _user, isStable]) => isStable),\n      // if the user is authenticated and we have their data, OR if the user is anonymous\n      filter(([isLoggedIn, , user]) => (!!user && isLoggedIn) || !isLoggedIn),\n      map(([isLoggedIn, cartUser, user]) => {\n        if (!isLoggedIn) {\n          return this.handleAnonymousUser(cartUser);\n        } else if (user && 'roles' in user) {\n          return this.handleUserRole(user);\n        }\n        return isLoggedIn;\n      })\n    );\n  }\n\n  protected handleAnonymousUser(cartUser?: User): boolean | UrlTree {\n    if (this.activeCartService.isGuestCart()) {\n      return !!cartUser;\n    }\n    this.authRedirectService.saveCurrentNavigationUrl();\n    if (this.checkoutConfigService.isGuestCheckout()) {\n      return this.router.createUrlTree(\n        [this.semanticPathService.get('login')],\n        { queryParams: { forced: true } }\n      );\n    } else {\n      return this.router.parseUrl(this.semanticPathService.get('login'));\n    }\n  }\n\n  protected handleUserRole(user: User): boolean | UrlTree {\n    const roles = (<B2BUser>user).roles;\n    if (roles?.includes(B2BUserRole.CUSTOMER)) {\n      return true;\n    }\n    this.globalMessageService.add(\n      { key: 'checkout.invalid.accountType' },\n      GlobalMessageType.MSG_TYPE_WARNING\n    );\n    return this.router.parseUrl(this.semanticPathService.get('home'));\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CheckoutDeliveryFacade,\n  CheckoutFacade,\n  CheckoutPaymentFacade,\n} from '@spartacus/checkout/root';\nimport {\n  ActiveCartService,\n  Address,\n  EMAIL_PATTERN,\n  OCC_USER_ID_ANONYMOUS,\n  OCC_USER_ID_GUEST,\n  PaymentDetails,\n} from '@spartacus/core';\nimport { combineLatest, Observable } from 'rxjs';\nimport {\n  filter,\n  map,\n  shareReplay,\n  skipWhile,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutDetailsService {\n  cartId$: Observable<string>;\n  getCheckoutDetailsLoaded$: Observable<boolean>;\n\n  constructor(\n    protected checkoutService: CheckoutFacade,\n    protected checkoutDeliveryService: CheckoutDeliveryFacade,\n    protected checkoutPaymentService: CheckoutPaymentFacade,\n    protected activeCartService: ActiveCartService\n  ) {\n    this.cartId$ = combineLatest([\n      this.activeCartService.getActive(),\n      this.activeCartService.isStable(),\n    ]).pipe(\n      filter(([, isStable]) => isStable),\n      map(([cartData]) => {\n        const cartUser = cartData.user;\n\n        if (\n          cartUser &&\n          (cartUser.uid === OCC_USER_ID_ANONYMOUS ||\n            cartUser.uid === OCC_USER_ID_GUEST ||\n            !!cartUser.uid?.split('|').slice(1).join('|').match(EMAIL_PATTERN))\n        ) {\n          return cartData.guid as string;\n        }\n        return cartData.code as string;\n      }),\n      filter((cartId) => !!cartId)\n    );\n\n    this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(\n      tap((cartId) => this.checkoutService.loadCheckoutDetails(cartId)),\n      shareReplay(1),\n      switchMap(() => this.checkoutService.getCheckoutDetailsLoaded()),\n      skipWhile((loaded) => !loaded)\n    );\n  }\n\n  getDeliveryAddress(): Observable<Address> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutDeliveryService.getDeliveryAddress())\n    );\n  }\n\n  getSelectedDeliveryModeCode(): Observable<string> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() =>\n        this.checkoutDeliveryService.getSelectedDeliveryModeCode()\n      )\n    );\n  }\n\n  getPaymentDetails(): Observable<PaymentDetails> {\n    return this.getCheckoutDetailsLoaded$.pipe(\n      switchMap(() => this.checkoutPaymentService.getPaymentDetails())\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  CheckoutDeliveryFacade,\n  CheckoutPaymentFacade,\n  ClearCheckoutFacade,\n} from '@spartacus/checkout/root';\nimport {\n  Address,\n  DeliveryMode,\n  PaymentDetails,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport {\n  debounceTime,\n  distinctUntilChanged,\n  filter,\n  map,\n  switchMap,\n  tap,\n} from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutDetailsService } from './checkout-details.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpressCheckoutService {\n  private shippingAddressSet$: Observable<boolean>;\n  private deliveryModeSet$: Observable<boolean>;\n  private paymentMethodSet$: Observable<boolean>;\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected userPaymentService: UserPaymentService,\n    protected checkoutDeliveryService: CheckoutDeliveryFacade,\n    protected checkoutPaymentService: CheckoutPaymentFacade,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected clearCheckoutService: ClearCheckoutFacade\n  ) {\n    this.setShippingAddress();\n    this.setDeliveryMode();\n    this.setPaymentMethod();\n  }\n\n  protected setShippingAddress() {\n    this.shippingAddressSet$ = combineLatest([\n      this.userAddressService.getAddresses(),\n      this.userAddressService.getAddressesLoadedSuccess(),\n      this.checkoutDeliveryService.getSetDeliveryAddressProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!addressesLoadedSuccess) {\n            this.userAddressService.loadAddresses();\n          }\n        }\n      ),\n      filter(\n        ([, addressesLoadedSuccess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => addressesLoadedSuccess\n      ),\n      switchMap(\n        ([addresses, , setDeliveryAddressProcess]: [\n          Address[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          const defaultAddress =\n            addresses.find((address) => address.defaultAddress) || addresses[0];\n          if (defaultAddress && Object.keys(defaultAddress).length) {\n            if (\n              !(\n                setDeliveryAddressProcess.success ||\n                setDeliveryAddressProcess.error ||\n                setDeliveryAddressProcess.loading\n              )\n            ) {\n              this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);\n            }\n            return of(setDeliveryAddressProcess).pipe(\n              filter(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    ((setDeliveryAddressProcessState.success ||\n                      setDeliveryAddressProcessState.error) &&\n                      !setDeliveryAddressProcessState.loading) ??\n                    false\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setDeliveryAddressProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setDeliveryAddressProcessState.success) {\n                    return this.checkoutDetailsService.getDeliveryAddress();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  protected setPaymentMethod() {\n    this.paymentMethodSet$ = combineLatest([\n      this.deliveryModeSet$,\n      this.userPaymentService.getPaymentMethods(),\n      this.userPaymentService.getPaymentMethodsLoadedSuccess(),\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),\n    ]).pipe(\n      debounceTime(0),\n      tap(\n        ([, , paymentMethodsLoadedSuccess]: [\n          boolean,\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!paymentMethodsLoadedSuccess) {\n            this.userPaymentService.loadPaymentMethods();\n          }\n        }\n      ),\n      filter(\n        ([, , success]: [\n          boolean,\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => success\n      ),\n      switchMap(\n        ([deliveryModeSet, payments, , setPaymentDetailsProcess]: [\n          boolean,\n          PaymentDetails[],\n          boolean,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (!deliveryModeSet) {\n            return of(false);\n          }\n\n          const defaultPayment =\n            payments.find((address) => address.defaultPayment) || payments[0];\n          if (defaultPayment && Object.keys(defaultPayment).length) {\n            if (\n              !(\n                setPaymentDetailsProcess.success ||\n                setPaymentDetailsProcess.error ||\n                setPaymentDetailsProcess.loading\n              )\n            ) {\n              this.checkoutPaymentService.setPaymentDetails(defaultPayment);\n            }\n            return of(setPaymentDetailsProcess).pipe(\n              filter(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  return (\n                    ((setPaymentDetailsProcessState.success ||\n                      setPaymentDetailsProcessState.error) &&\n                      !setPaymentDetailsProcessState.loading) ??\n                    false\n                  );\n                }\n              ),\n              switchMap(\n                (\n                  setPaymentDetailsProcessState: StateUtils.LoaderState<void>\n                ) => {\n                  if (setPaymentDetailsProcessState.success) {\n                    return this.checkoutDetailsService.getPaymentDetails();\n                  }\n                  return of(false);\n                }\n              ),\n              map((data) => Boolean(data && Object.keys(data).length))\n            );\n          }\n          return of(false);\n        }\n      )\n    );\n  }\n\n  protected setDeliveryMode() {\n    this.deliveryModeSet$ = combineLatest([\n      this.shippingAddressSet$,\n      this.checkoutDeliveryService.getSupportedDeliveryModes(),\n      this.checkoutDeliveryService.getSetDeliveryModeProcess(),\n      this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),\n    ]).pipe(\n      debounceTime(0),\n      switchMap(\n        ([\n          addressSet,\n          supportedDeliveryModes,\n          setDeliveryModeStatusFlag,\n          loadSupportedDeliveryModeStatus,\n        ]: [\n          boolean,\n          DeliveryMode[],\n          StateUtils.LoaderState<void>,\n          StateUtils.LoaderState<void>\n        ]) => {\n          if (addressSet) {\n            return of([\n              supportedDeliveryModes,\n              setDeliveryModeStatusFlag,\n              loadSupportedDeliveryModeStatus,\n            ]).pipe(\n              filter(\n                ([, , supportedDeliveryModeStatus]: any) =>\n                  supportedDeliveryModeStatus.success ?? false\n              ),\n              switchMap(\n                ([deliveryModes, setDeliveryModeStatus, ,]: [\n                  DeliveryMode[],\n                  StateUtils.LoaderState<void>,\n                  StateUtils.LoaderState<void>\n                ]) => {\n                  if (Boolean(deliveryModes.length)) {\n                    const preferredDeliveryMode =\n                      this.checkoutConfigService.getPreferredDeliveryMode(\n                        deliveryModes\n                      );\n                    return of([\n                      preferredDeliveryMode,\n                      setDeliveryModeStatus,\n                    ]).pipe(\n                      tap(([deliveryMode, deliveryModeLoadingStatus]: any) => {\n                        if (\n                          deliveryMode &&\n                          !(\n                            deliveryModeLoadingStatus.success ||\n                            deliveryModeLoadingStatus.error ||\n                            deliveryModeLoadingStatus.loading\n                          )\n                        ) {\n                          this.checkoutDeliveryService.setDeliveryMode(\n                            deliveryMode\n                          );\n                        }\n                      }),\n                      filter(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          return (\n                            ((deliveryModeLoadingStatus.success ||\n                              deliveryModeLoadingStatus.error) &&\n                              !deliveryModeLoadingStatus.loading) ??\n                            false\n                          );\n                        }\n                      ),\n                      switchMap(\n                        ([, deliveryModeLoadingStatus]: [\n                          string,\n                          StateUtils.LoaderState<void>\n                        ]) => {\n                          if (deliveryModeLoadingStatus.success) {\n                            return this.checkoutDetailsService.getSelectedDeliveryModeCode();\n                          }\n                          return of(false);\n                        }\n                      ),\n                      map((data) => Boolean(data))\n                    );\n                  }\n                  return of(false);\n                }\n              )\n            );\n          } else {\n            return of(false);\n          }\n        }\n      ),\n      distinctUntilChanged()\n    );\n  }\n\n  public trySetDefaultCheckoutDetails(): Observable<boolean> {\n    this.clearCheckoutService.resetCheckoutProcesses();\n\n    return this.paymentMethodSet$.pipe(\n      map((paymentMethodSet) => Boolean(paymentMethodSet))\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutConfig,\n  CheckoutStep,\n  CheckoutStepType,\n} from '@spartacus/checkout/root';\nimport { RoutingConfigService, RoutingService } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutStepService {\n  // initial enabled steps\n  allSteps: CheckoutStep[];\n\n  readonly steps$: BehaviorSubject<CheckoutStep[]> = new BehaviorSubject<\n    CheckoutStep[]\n  >([]);\n\n  readonly activeStepIndex$: Observable<number> = this.routingService\n    .getRouterState()\n    .pipe(\n      switchMap((router) => {\n        const activeStepUrl = router.state.context.id;\n        return this.steps$.pipe(\n          map((steps) => {\n            let activeIndex: number = 0;\n            steps.forEach((step, index) => {\n              const routeUrl = `/${\n                this.routingConfigService.getRouteConfig(step.routeName)\n                  .paths?.[0]\n              }`;\n              if (routeUrl === activeStepUrl) {\n                activeIndex = index;\n              }\n            });\n            return activeIndex;\n          })\n        );\n      })\n    );\n\n  constructor(\n    protected routingService: RoutingService,\n    protected checkoutConfig: CheckoutConfig,\n    protected routingConfigService: RoutingConfigService\n  ) {\n    this.resetSteps();\n  }\n\n  back(activatedRoute: ActivatedRoute): void {\n    const previousUrl = this.getPreviousCheckoutStepUrl(activatedRoute);\n    this.routingService.go(previousUrl === null ? 'cart' : previousUrl);\n  }\n\n  next(activatedRoute: ActivatedRoute): void {\n    const nextUrl = this.getNextCheckoutStepUrl(activatedRoute);\n    this.routingService.go(nextUrl);\n  }\n\n  goToStepWithIndex(stepIndex: number): void {\n    this.routingService.go(\n      this.getStepUrlFromStepRoute(this.allSteps[stepIndex].routeName)\n    );\n  }\n\n  getBackBntText(activatedRoute: ActivatedRoute): string {\n    if (this.getPreviousCheckoutStepUrl(activatedRoute) === null) {\n      return 'checkout.backToCart';\n    }\n    return 'common.back';\n  }\n\n  resetSteps(): void {\n    this.allSteps = (this.checkoutConfig.checkout?.steps ?? [])\n      .filter((step) => !step.disabled)\n      .map((x) => Object.assign({}, x));\n    this.steps$.next(this.allSteps);\n  }\n\n  disableEnableStep(\n    currentStepType: CheckoutStepType,\n    disabled: boolean\n  ): void {\n    const currentStep = this.allSteps.find((step) =>\n      step.type.includes(currentStepType)\n    );\n    if (currentStep && currentStep.disabled !== disabled) {\n      currentStep.disabled = disabled;\n      this.steps$.next(this.allSteps.filter((step) => !step.disabled));\n    }\n  }\n\n  getCheckoutStep(currentStepType: CheckoutStepType): CheckoutStep | undefined {\n    const index = this.getCheckoutStepIndex('type', currentStepType);\n    if (index !== null) {\n      return this.allSteps[index];\n    }\n  }\n\n  getCheckoutStepRoute(currentStepType: CheckoutStepType): string | undefined {\n    return this.getCheckoutStep(currentStepType)?.routeName;\n  }\n\n  getFirstCheckoutStepRoute(): string {\n    return this.allSteps[0].routeName;\n  }\n\n  getNextCheckoutStepUrl(activatedRoute: ActivatedRoute): string | null {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    if (stepIndex !== null && stepIndex >= 0) {\n      let i = 1;\n      while (\n        this.allSteps[stepIndex + i] &&\n        this.allSteps[stepIndex + i].disabled\n      ) {\n        i++;\n      }\n      const nextStep = this.allSteps[stepIndex + i];\n      if (nextStep) {\n        return this.getStepUrlFromStepRoute(nextStep.routeName);\n      }\n    }\n    return null;\n  }\n\n  getPreviousCheckoutStepUrl(activatedRoute: ActivatedRoute): string | null {\n    const stepIndex = this.getCurrentStepIndex(activatedRoute);\n\n    if (stepIndex !== null && stepIndex >= 0) {\n      let i = 1;\n      while (\n        this.allSteps[stepIndex - i] &&\n        this.allSteps[stepIndex - i].disabled\n      ) {\n        i++;\n      }\n      const previousStep = this.allSteps[stepIndex - i];\n      if (previousStep) {\n        return this.getStepUrlFromStepRoute(previousStep.routeName);\n      }\n    }\n    return null;\n  }\n\n  getCurrentStepIndex(activatedRoute: ActivatedRoute): number | null {\n    const currentStepUrl = this.getStepUrlFromActivatedRoute(activatedRoute);\n\n    const stepIndex = this.allSteps.findIndex(\n      (step) =>\n        currentStepUrl === `/${this.getStepUrlFromStepRoute(step.routeName)}`\n    );\n    return stepIndex === -1 ? null : stepIndex;\n  }\n\n  private getStepUrlFromActivatedRoute(\n    activatedRoute: ActivatedRoute\n  ): string | null {\n    return activatedRoute &&\n      activatedRoute.snapshot &&\n      activatedRoute.snapshot.url\n      ? `/${activatedRoute.snapshot.url.join('/')}`\n      : null;\n  }\n\n  private getStepUrlFromStepRoute(stepRoute: string): string | null {\n    return (\n      this.routingConfigService.getRouteConfig(stepRoute).paths?.[0] ?? null\n    );\n  }\n\n  private getCheckoutStepIndex(key: string, value: any): number | null {\n    return key && value\n      ? this.allSteps.findIndex((step: CheckoutStep) => {\n          const propertyVal = step[key as keyof CheckoutStep];\n          return propertyVal instanceof Array\n            ? propertyVal.includes(value)\n            : propertyVal === value;\n        })\n      : null;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CheckoutStepType } from '@spartacus/checkout/root';\nimport { ActiveCartService, RoutingConfigService } from '@spartacus/core';\nimport { Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { CheckoutConfigService } from '../services/checkout-config.service';\nimport { CheckoutStepService } from '../services/checkout-step.service';\nimport { ExpressCheckoutService } from '../services/express-checkout.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutGuard implements CanActivate {\n  private readonly firstStep$: Observable<UrlTree>;\n\n  constructor(\n    protected router: Router,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutConfigService: CheckoutConfigService,\n    protected expressCheckoutService: ExpressCheckoutService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService\n  ) {\n    this.firstStep$ = of(\n      this.router.parseUrl(\n        this.routingConfigService.getRouteConfig(\n          this.checkoutStepService.getFirstCheckoutStepRoute()\n        ).paths?.[0] as string\n      )\n    );\n  }\n\n  canActivate(): Observable<boolean | UrlTree> {\n    if (\n      this.checkoutConfigService.isExpressCheckout() &&\n      !this.activeCartService.isGuestCart()\n    ) {\n      return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(\n        switchMap((expressCheckoutPossible: boolean) => {\n          const reviewOrderRoute =\n            this.checkoutStepService.getCheckoutStepRoute(\n              CheckoutStepType.REVIEW_ORDER\n            );\n          return expressCheckoutPossible && reviewOrderRoute\n            ? of(\n                this.router.parseUrl(\n                  this.routingConfigService.getRouteConfig(reviewOrderRoute)\n                    .paths?.[0] as string\n                )\n              )\n            : this.firstStep$;\n        })\n      );\n    }\n    return this.firstStep$;\n  }\n}\n","import { Component, ChangeDetectionStrategy } from '@angular/core';\n\n@Component({\n  selector: 'cx-checkout-orchestrator',\n  template: '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrchestratorComponent {\n  constructor() {}\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutGuard } from '../../guards/checkout.guard';\nimport { CheckoutOrchestratorComponent } from './checkout-orchestrator.component';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrchestrator: {\n          component: CheckoutOrchestratorComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrchestratorComponent],\n  exports: [CheckoutOrchestratorComponent],\n})\nexport class CheckoutOrchestratorModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n@Component({\n  selector: 'cx-checkout-order-summary',\n  templateUrl: './checkout-order-summary.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutOrderSummaryComponent {\n  cart$: Observable<Cart>;\n\n  constructor(protected activeCartService: ActiveCartService) {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","<cx-order-summary [cart]=\"cart$ | async\"></cx-order-summary>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, provideDefaultConfig } from '@spartacus/core';\nimport { CartSharedModule } from '@spartacus/storefront';\nimport { CheckoutOrderSummaryComponent } from './checkout-order-summary.component';\n\n@NgModule({\n  imports: [CommonModule, CartSharedModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutOrderSummary: {\n          component: CheckoutOrderSummaryComponent,\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutOrderSummaryComponent],\n  exports: [CheckoutOrderSummaryComponent],\n})\nexport class CheckoutOrderSummaryModule {}\n","import { Injectable, isDevMode } from '@angular/core';\nimport {\n  ActivatedRouteSnapshot,\n  CanActivate,\n  Router,\n  RouterStateSnapshot,\n  UrlTree,\n} from '@angular/router';\nimport {\n  CheckoutCostCenterFacade,\n  CheckoutStep,\n  CheckoutStepType,\n  PaymentTypeFacade,\n} from '@spartacus/checkout/root';\nimport { RoutingConfigService } from '@spartacus/core';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutDetailsService } from '../services/checkout-details.service';\nimport { CheckoutStepService } from '../services/checkout-step.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutStepsSetGuard implements CanActivate {\n  constructor(\n    protected paymentTypeService: PaymentTypeFacade,\n    protected checkoutStepService: CheckoutStepService,\n    protected checkoutDetailsService: CheckoutDetailsService,\n    protected routingConfigService: RoutingConfigService,\n    protected checkoutCostCenterService: CheckoutCostCenterFacade,\n    protected router: Router\n  ) {}\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    _: RouterStateSnapshot\n  ): Observable<boolean | UrlTree> {\n    let currentIndex = -1;\n    const currentRouteUrl = '/' + route.url.join('/');\n\n    // check whether the previous step is set\n    return combineLatest([\n      this.checkoutStepService.steps$,\n      this.paymentTypeService.isAccountPayment(),\n    ]).pipe(\n      tap(([, isAccount]) => {\n        this.checkoutStepService.disableEnableStep(\n          CheckoutStepType.PAYMENT_DETAILS,\n          isAccount\n        );\n      }),\n      take(1),\n      switchMap(([steps, isAccount]) => {\n        currentIndex = steps.findIndex((step) => {\n          const stepRouteUrl = `/${\n            this.routingConfigService.getRouteConfig(step.routeName).paths?.[0]\n          }`;\n          return stepRouteUrl === currentRouteUrl;\n        });\n        // get current step\n        let currentStep;\n        if (currentIndex >= 0) {\n          currentStep = steps[currentIndex];\n        }\n        if (Boolean(currentStep)) {\n          return this.isStepSet(steps[currentIndex - 1], isAccount);\n        } else {\n          if (isDevMode()) {\n            console.warn(\n              `Missing step with route '${currentRouteUrl}' in checkout configuration or this step is disabled.`\n            );\n          }\n          return of(this.getUrl('checkout'));\n        }\n      })\n    );\n  }\n\n  protected isStepSet(\n    step: CheckoutStep,\n    isAccountPayment: boolean\n  ): Observable<boolean | UrlTree> {\n    if (step && !step.disabled) {\n      switch (step.type[0]) {\n        case CheckoutStepType.PAYMENT_TYPE: {\n          return this.isPaymentTypeSet(step);\n        }\n        case CheckoutStepType.SHIPPING_ADDRESS: {\n          return this.isShippingAddressAndCostCenterSet(step, isAccountPayment);\n        }\n        case CheckoutStepType.DELIVERY_MODE: {\n          return this.isDeliveryModeSet(step);\n        }\n        case CheckoutStepType.PAYMENT_DETAILS: {\n          return this.isPaymentDetailsSet(step);\n        }\n        case CheckoutStepType.REVIEW_ORDER: {\n          break;\n        }\n      }\n    }\n    return of(true);\n  }\n\n  protected isPaymentTypeSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.paymentTypeService.getSelectedPaymentType().pipe(\n      map((paymentType) => {\n        if (Boolean(paymentType)) {\n          return true;\n        } else {\n          return this.getUrl(step.routeName);\n        }\n      })\n    );\n  }\n\n  protected isShippingAddressAndCostCenterSet(\n    step: CheckoutStep,\n    isAccountPayment: boolean\n  ): Observable<boolean | UrlTree> {\n    return combineLatest([\n      this.checkoutDetailsService.getDeliveryAddress(),\n      this.checkoutCostCenterService.getCostCenter(),\n    ]).pipe(\n      map(([deliveryAddress, costCenter]) => {\n        if (isAccountPayment) {\n          if (\n            deliveryAddress &&\n            Object.keys(deliveryAddress).length &&\n            Boolean(costCenter)\n          ) {\n            return true;\n          } else {\n            return this.getUrl(step.routeName);\n          }\n        } else {\n          if (\n            deliveryAddress &&\n            Object.keys(deliveryAddress).length &&\n            costCenter === undefined\n          ) {\n            return true;\n          } else {\n            return this.getUrl(step.routeName);\n          }\n        }\n      })\n    );\n  }\n\n  protected isDeliveryModeSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.checkoutDetailsService\n      .getSelectedDeliveryModeCode()\n      .pipe(\n        map((mode: string) =>\n          mode && mode.length ? true : this.getUrl(step.routeName)\n        )\n      );\n  }\n\n  protected isPaymentDetailsSet(\n    step: CheckoutStep\n  ): Observable<boolean | UrlTree> {\n    return this.checkoutDetailsService\n      .getPaymentDetails()\n      .pipe(\n        map((paymentDetails) =>\n          paymentDetails && Object.keys(paymentDetails).length !== 0\n            ? true\n            : this.getUrl(step.routeName)\n        )\n      );\n  }\n\n  private getUrl(routeName: string): UrlTree {\n    return this.router.parseUrl(\n      this.routingConfigService.getRouteConfig(routeName).paths?.[0] as string\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CheckoutStep } from '@spartacus/checkout/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-bottom',\n  templateUrl: './checkout-progress-mobile-bottom.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressMobileBottomComponent {\n  private _steps$: BehaviorSubject<CheckoutStep[]> =\n    this.checkoutStepService.steps$;\n\n  constructor(protected checkoutStepService: CheckoutStepService) {}\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<number> =\n    this.checkoutStepService.activeStepIndex$.pipe(\n      tap((index) => (this.activeStepIndex = index))\n    );\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this._steps$.asObservable();\n  }\n}\n","<div *ngIf=\"(activeStepIndex$ | async) !== undefined\">\n  <div class=\"cx-media\">\n    <div *ngFor=\"let step of steps$ | async; let i = index\">\n      <div class=\"cx-list-media\" *ngIf=\"i > activeStepIndex\">\n        <div>{{ i + 1 }}. {{ step.name | cxTranslate }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CheckoutStepsSetGuard } from '../../../guards/checkout-steps-set.guard';\nimport { CheckoutProgressMobileBottomComponent } from './checkout-progress-mobile-bottom.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileBottom: {\n          component: CheckoutProgressMobileBottomComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileBottomComponent],\n  exports: [CheckoutProgressMobileBottomComponent],\n})\nexport class CheckoutProgressMobileBottomModule {}\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { CheckoutStep } from '@spartacus/checkout/root';\nimport { ActiveCartService, Cart } from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress-mobile-top',\n  templateUrl: './checkout-progress-mobile-top.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressMobileTopComponent implements OnInit {\n  private _steps$: BehaviorSubject<CheckoutStep[]> =\n    this.checkoutStepService.steps$;\n\n  constructor(\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService\n  ) {}\n\n  cart$: Observable<Cart>;\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<number> =\n    this.checkoutStepService.activeStepIndex$.pipe(\n      tap((index) => (this.activeStepIndex = index))\n    );\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this._steps$.asObservable();\n  }\n\n  ngOnInit(): void {\n    this.cart$ = this.activeCartService.getActive();\n  }\n}\n","<div *ngIf=\"(activeStepIndex$ | async) !== undefined\">\n  <div *ngIf=\"cart$ | async as cart\">\n    <div class=\"cx-media\">\n      <div class=\"cx-list-media\" *ngIf=\"cart?.totalItems && cart?.subTotal\">\n        {{ 'cartItems.cartTotal' | cxTranslate: { count: cart.totalItems } }}:\n        {{ cart.subTotal.formattedValue }}\n      </div>\n      <div *ngFor=\"let step of steps$ | async; let i = index\">\n        <div class=\"cx-list-media\" *ngIf=\"i < activeStepIndex\">\n          <div>{{ i + 1 }}. {{ step.name | cxTranslate }}</div>\n          <button\n            class=\"btn btn-link\"\n            [routerLink]=\"{ cxRoute: step.routeName } | cxUrl\"\n          >\n            {{ 'common.edit' | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"cx-list-media is-active\" *ngIf=\"i === activeStepIndex\">\n          <div>{{ i + 1 }}. {{ step.name | cxTranslate }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../../guards/checkout-auth.guard';\nimport { CheckoutStepsSetGuard } from '../../../guards/checkout-steps-set.guard';\nimport { CheckoutProgressMobileTopComponent } from './checkout-progress-mobile-top.component';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgressMobileTop: {\n          component: CheckoutProgressMobileTopComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CheckoutProgressMobileTopComponent],\n  exports: [CheckoutProgressMobileTopComponent],\n})\nexport class CheckoutProgressMobileTopModule {}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'cxMultiLine',\n})\nexport class MultiLinePipe implements PipeTransform {\n  transform(value: string): string {\n    const lastIndex = value.lastIndexOf(' ');\n\n    if (lastIndex === -1) return value;\n\n    return (\n      value.substring(0, lastIndex) +\n      '<br />' +\n      value.substring(lastIndex, value.length).trim()\n    );\n  }\n}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CheckoutStep } from '@spartacus/checkout/root';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-checkout-progress',\n  templateUrl: './checkout-progress.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CheckoutProgressComponent {\n  private _steps$: BehaviorSubject<CheckoutStep[]> =\n    this.checkoutStepService.steps$;\n\n  constructor(protected checkoutStepService: CheckoutStepService) {}\n\n  activeStepIndex: number;\n  activeStepIndex$: Observable<number> =\n    this.checkoutStepService.activeStepIndex$.pipe(\n      tap((index) => (this.activeStepIndex = index))\n    );\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this._steps$.asObservable();\n  }\n\n  getTabIndex(stepIndex: number): number {\n    return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;\n  }\n\n  isActive(index: number): boolean {\n    return index === this.activeStepIndex;\n  }\n\n  isDisabled(index: number): boolean {\n    return index > this.activeStepIndex;\n  }\n}\n","<section *ngIf=\"(activeStepIndex$ | async) !== undefined\">\n  <div class=\"cx-nav d-none d-lg-block d-xl-block\">\n    <ul class=\"cx-list\">\n      <ng-container *ngFor=\"let step of steps$ | async; let i = index\">\n        <li\n          class=\"cx-item\"\n          [class.active]=\"isActive(i)\"\n          [class.disabled]=\"isDisabled(i)\"\n        >\n          <a\n            [routerLink]=\"{ cxRoute: step.routeName } | cxUrl\"\n            class=\"cx-link\"\n            [class.active]=\"isActive(i)\"\n            [class.disabled]=\"isDisabled(i)\"\n            [tabindex]=\"getTabIndex(i)\"\n            [innerHTML]=\"step.name | cxTranslate | cxMultiLine\"\n          >\n          </a>\n        </li>\n      </ng-container>\n    </ul>\n  </div>\n</section>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CheckoutStepsSetGuard } from '../../guards/checkout-steps-set.guard';\nimport { CheckoutProgressComponent } from './checkout-progress.component';\nimport { MultiLinePipe } from './multiline-titles.pipe';\n\n@NgModule({\n  imports: [CommonModule, UrlModule, I18nModule, RouterModule],\n  declarations: [CheckoutProgressComponent, MultiLinePipe],\n  exports: [CheckoutProgressComponent],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutProgress: {\n          component: CheckoutProgressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class CheckoutProgressModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CheckoutCostCenterFacade,\n  PaymentTypeFacade,\n} from '@spartacus/checkout/root';\nimport { CostCenter, UserCostCenterService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { filter, map, tap, withLatestFrom } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-cost-center',\n  templateUrl: 'cost-center.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CostCenterComponent {\n  costCenterId: string | undefined;\n\n  constructor(\n    protected userCostCenterService: UserCostCenterService,\n    protected checkoutCostCenterService: CheckoutCostCenterFacade,\n    protected paymentTypeService: PaymentTypeFacade\n  ) {}\n\n  get isAccountPayment$(): Observable<boolean> {\n    return this.paymentTypeService.isAccountPayment();\n  }\n\n  get costCenters$(): Observable<CostCenter[]> {\n    return this.userCostCenterService.getActiveCostCenters().pipe(\n      withLatestFrom(this.checkoutCostCenterService.getCostCenter()),\n      filter(([costCenters]) => Boolean(costCenters)),\n      tap(([costCenters, cartCostCenter]) => {\n        if (!Boolean(cartCostCenter)) {\n          this.setCostCenter(costCenters[0].code as string);\n        } else {\n          this.costCenterId = cartCostCenter;\n        }\n      }),\n      map(([costCenters]) => costCenters)\n    );\n  }\n\n  setCostCenter(selectCostCenter: string): void {\n    this.costCenterId = selectCostCenter;\n    this.checkoutCostCenterService.setCostCenter(this.costCenterId);\n  }\n}\n","<ng-container *ngIf=\"isAccountPayment$ | async\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-xl-10\">\n      <ng-container *ngIf=\"costCenters$ | async as costCenters\">\n        <div *ngIf=\"costCenters.length !== 0\">\n          <label>\n            <span class=\"label-content required\">{{\n              'checkoutPO.costCenter' | cxTranslate\n            }}</span>\n            <select (change)=\"setCostCenter($event.target.value)\">\n              <option\n                *ngFor=\"let costCenter of costCenters\"\n                value=\"{{ costCenter.code }}\"\n                [selected]=\"costCenterId === costCenter.code\"\n              >\n                {{ costCenter.name }}\n              </option>\n            </select>\n            <span class=\"label-content\">{{\n              'checkoutPO.availableLabel' | cxTranslate\n            }}</span>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { CostCenterComponent } from './cost-center.component';\nimport { CartValidationGuard } from '@spartacus/storefront';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutCostCenterComponent: {\n          component: CostCenterComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CartValidationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [CostCenterComponent],\n})\nexport class CostCenterModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutDeliveryFacade } from '@spartacus/checkout/root';\nimport { DeliveryMode } from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  takeWhile,\n  withLatestFrom,\n} from 'rxjs/operators';\nimport { CheckoutConfigService } from '../../services/checkout-config.service';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-delivery-mode',\n  templateUrl: './delivery-mode.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DeliveryModeComponent implements OnInit, OnDestroy {\n  supportedDeliveryModes$: Observable<DeliveryMode[]>;\n  selectedDeliveryMode$: Observable<DeliveryMode>;\n  continueButtonPressed = false;\n\n  backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);\n\n  deliveryModeSub: Subscription;\n\n  mode: FormGroup = this.fb.group({\n    deliveryModeId: ['', Validators.required],\n  });\n\n  constructor(\n    private fb: FormBuilder,\n    private checkoutDeliveryService: CheckoutDeliveryFacade,\n    private checkoutConfigService: CheckoutConfigService,\n    private activatedRoute: ActivatedRoute,\n    protected checkoutStepService: CheckoutStepService\n  ) {}\n\n  ngOnInit() {\n    this.supportedDeliveryModes$ = this.checkoutDeliveryService\n      .getSupportedDeliveryModes()\n      .pipe(\n        filter((deliveryModes: DeliveryMode[]) => !!deliveryModes?.length),\n        distinctUntilChanged(\n          (current: DeliveryMode[], previous: DeliveryMode[]) => {\n            return JSON.stringify(current) === JSON.stringify(previous);\n          }\n        )\n      );\n\n    // Reload delivery modes on error\n    this.checkoutDeliveryService\n      .getLoadSupportedDeliveryModeProcess()\n      .pipe(takeWhile((state) => state?.success === false))\n      .subscribe((state) => {\n        if (state.error && !state.loading) {\n          this.checkoutDeliveryService.loadSupportedDeliveryModes();\n        }\n      });\n\n    this.deliveryModeSub = this.supportedDeliveryModes$\n      .pipe(\n        withLatestFrom(\n          this.checkoutDeliveryService\n            .getSelectedDeliveryMode()\n            .pipe(\n              map(\n                (deliveryMode: DeliveryMode | null | undefined) =>\n                  deliveryMode?.code\n              )\n            )\n        )\n      )\n      .subscribe(\n        ([deliveryModes, code]: [DeliveryMode[], string | undefined]) => {\n          if (\n            !(\n              code &&\n              !!deliveryModes.find((deliveryMode) => deliveryMode.code === code)\n            )\n          ) {\n            code =\n              this.checkoutConfigService.getPreferredDeliveryMode(\n                deliveryModes\n              );\n          }\n          if (code) {\n            this.mode.controls['deliveryModeId'].setValue(code);\n            this.checkoutDeliveryService.setDeliveryMode(code);\n          }\n        }\n      );\n  }\n\n  changeMode(code: string): void {\n    this.checkoutDeliveryService.setDeliveryMode(code);\n  }\n\n  next(): void {\n    if (this.mode.valid && this.mode.value) {\n      this.continueButtonPressed = true;\n      this.checkoutStepService.next(this.activatedRoute);\n    }\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n\n  get deliveryModeInvalid(): boolean {\n    return this.mode.controls['deliveryModeId'].invalid;\n  }\n\n  ngOnDestroy(): void {\n    if (this.deliveryModeSub) {\n      this.deliveryModeSub.unsubscribe();\n    }\n  }\n}\n","<div [formGroup]=\"mode\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-lg-9\">\n      <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n        {{ 'checkoutShipping.shippingMethod' | cxTranslate }}\n      </h2>\n\n      <ng-container\n        *ngIf=\"(supportedDeliveryModes$ | async)?.length; else loading\"\n      >\n        <div\n          class=\"form-check\"\n          *ngFor=\"let mode of supportedDeliveryModes$ | async\"\n        >\n          <input\n            class=\"form-check-input\"\n            role=\"radio\"\n            type=\"radio\"\n            id=\"deliveryMode-{{ mode.code }}\"\n            aria-checked=\"true\"\n            (change)=\"changeMode(mode.code)\"\n            [value]=\"mode.code\"\n            formControlName=\"deliveryModeId\"\n          />\n          <label\n            class=\"cx-delivery-label form-check-label form-radio-label\"\n            for=\"deliveryMode-{{ mode.code }}\"\n          >\n            <div class=\"cx-delivery-mode\">{{ mode.name }}</div>\n            <div class=\"cx-delivery-price\">\n              {{ mode.deliveryCost.formattedValue }}\n            </div>\n            <div class=\"cx-delivery-details\">{{ mode.description }}</div>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"!continueButtonPressed; else loading\">\n    <div class=\"row cx-checkout-btns\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n          {{ backBtnText | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          class=\"btn btn-block btn-primary\"\n          [disabled]=\"deliveryModeInvalid\"\n          (click)=\"next()\"\n        >\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { SpinnerModule } from '@spartacus/storefront';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { DeliveryModeComponent } from './delivery-mode.component';\n\n@NgModule({\n  imports: [CommonModule, ReactiveFormsModule, I18nModule, SpinnerModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutDeliveryMode: {\n          component: DeliveryModeComponent,\n          // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard here?\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [DeliveryModeComponent],\n  exports: [DeliveryModeComponent],\n})\nexport class DeliveryModeModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport {\n  CheckoutDeliveryFacade,\n  CheckoutPaymentFacade,\n} from '@spartacus/checkout/root';\nimport {\n  Address,\n  AddressValidation,\n  CardType,\n  Country,\n  GlobalMessageService,\n  GlobalMessageType,\n  Region,\n  StateUtils,\n  UserAddressService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport {\n  Card,\n  ICON_TYPE,\n  ModalRef,\n  ModalService,\n  SuggestedAddressDialogComponent,\n} from '@spartacus/storefront';\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\nimport { map, switchMap, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-payment-form',\n  templateUrl: './payment-form.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentFormComponent implements OnInit {\n  iconTypes = ICON_TYPE;\n\n  suggestedAddressModalRef: ModalRef | null;\n  months: string[] = [];\n  years: number[] = [];\n\n  cardTypes$: Observable<CardType[]>;\n  shippingAddress$: Observable<Address>;\n  countries$: Observable<Country[]>;\n  loading$: Observable<StateUtils.LoaderState<void>>;\n  sameAsShippingAddress = true;\n  regions$: Observable<Region[]>;\n  selectedCountry$: BehaviorSubject<string> = new BehaviorSubject<string>('');\n  showSameAsShippingAddressCheckbox$: Observable<boolean>;\n\n  @Input()\n  setAsDefaultField: boolean;\n\n  @Input()\n  paymentMethodsCount: number;\n\n  @Output()\n  goBack = new EventEmitter<any>();\n\n  @Output()\n  closeForm = new EventEmitter<any>();\n\n  @Output()\n  setPaymentDetails = new EventEmitter<any>();\n\n  paymentForm: FormGroup = this.fb.group({\n    cardType: this.fb.group({\n      code: [null, Validators.required],\n    }),\n    accountHolderName: ['', Validators.required],\n    cardNumber: ['', Validators.required],\n    expiryMonth: [null, Validators.required],\n    expiryYear: [null, Validators.required],\n    cvn: ['', Validators.required],\n    defaultPayment: [false],\n  });\n\n  billingAddressForm: FormGroup = this.fb.group({\n    firstName: ['', Validators.required],\n    lastName: ['', Validators.required],\n    line1: ['', Validators.required],\n    line2: [''],\n    town: ['', Validators.required],\n    region: this.fb.group({\n      isocodeShort: [null, Validators.required],\n    }),\n    country: this.fb.group({\n      isocode: [null, Validators.required],\n    }),\n    postalCode: ['', Validators.required],\n  });\n\n  constructor(\n    protected checkoutPaymentService: CheckoutPaymentFacade,\n    protected checkoutDeliveryService: CheckoutDeliveryFacade,\n    protected userPaymentService: UserPaymentService,\n    protected globalMessageService: GlobalMessageService,\n    protected fb: FormBuilder,\n    protected modalService: ModalService,\n    protected userAddressService: UserAddressService\n  ) {}\n\n  ngOnInit() {\n    this.expMonthAndYear();\n    this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(\n      tap((countries) => {\n        // If the store is empty fetch countries. This is also used when changing language.\n        if (Object.keys(countries).length === 0) {\n          this.userPaymentService.loadBillingCountries();\n        }\n      })\n    );\n\n    this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(\n      tap((cardTypes) => {\n        if (Object.keys(cardTypes).length === 0) {\n          this.checkoutPaymentService.loadSupportedCardTypes();\n        }\n      })\n    );\n\n    this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();\n    this.loading$ =\n      this.checkoutPaymentService.getSetPaymentDetailsResultProcess();\n\n    this.showSameAsShippingAddressCheckbox$ = combineLatest([\n      this.countries$,\n      this.shippingAddress$,\n    ]).pipe(\n      map(([countries, address]) => {\n        return (\n          (address?.country &&\n            !!countries.filter(\n              (country: Country): boolean =>\n                country.isocode === address.country?.isocode\n            ).length) ??\n          false\n        );\n      }),\n      tap((shouldShowCheckbox) => {\n        this.sameAsShippingAddress = shouldShowCheckbox;\n      })\n    );\n\n    this.regions$ = this.selectedCountry$.pipe(\n      switchMap((country) => this.userAddressService.getRegions(country)),\n      tap((regions) => {\n        const regionControl = this.billingAddressForm.get(\n          'region.isocodeShort'\n        );\n        if (regions.length > 0) {\n          regionControl?.enable();\n        } else {\n          regionControl?.disable();\n        }\n      })\n    );\n  }\n\n  expMonthAndYear(): void {\n    const year = new Date().getFullYear();\n\n    for (let i = 0; i < 10; i++) {\n      this.years.push(year + i);\n    }\n\n    for (let j = 1; j <= 12; j++) {\n      if (j < 10) {\n        this.months.push(`0${j}`);\n      } else {\n        this.months.push(j.toString());\n      }\n    }\n  }\n\n  toggleDefaultPaymentMethod(): void {\n    this.paymentForm.value.defaultPayment =\n      !this.paymentForm.value.defaultPayment;\n  }\n\n  toggleSameAsShippingAddress(): void {\n    this.sameAsShippingAddress = !this.sameAsShippingAddress;\n  }\n\n  getAddressCardContent(address: Address): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country?.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n    } as Card;\n  }\n\n  openSuggestedAddress(results: AddressValidation): void {\n    if (!this.suggestedAddressModalRef) {\n      this.suggestedAddressModalRef = this.modalService.open(\n        SuggestedAddressDialogComponent,\n        { centered: true, size: 'lg' }\n      );\n      this.suggestedAddressModalRef.componentInstance.enteredAddress =\n        this.billingAddressForm.value;\n      this.suggestedAddressModalRef.componentInstance.suggestedAddresses =\n        results.suggestedAddresses;\n      this.suggestedAddressModalRef.result\n        .then(() => {\n          this.suggestedAddressModalRef = null;\n        })\n        .catch(() => {\n          // this  callback is called when modal is closed with Esc key or clicking backdrop\n          this.suggestedAddressModalRef = null;\n        });\n    }\n  }\n\n  close(): void {\n    this.closeForm.emit();\n  }\n\n  back(): void {\n    this.goBack.emit();\n  }\n\n  verifyAddress(): void {\n    if (this.sameAsShippingAddress) {\n      this.next();\n    } else {\n      this.userAddressService\n        .verifyAddress(this.billingAddressForm.value)\n        .subscribe((result) => {\n          this.handleAddressVerificationResults(result);\n        });\n    }\n  }\n\n  protected handleAddressVerificationResults(results: AddressValidation) {\n    if (results.decision === 'ACCEPT') {\n      this.next();\n    } else if (results.decision === 'REJECT') {\n      this.globalMessageService.add(\n        { key: 'addressForm.invalidAddress' },\n        GlobalMessageType.MSG_TYPE_ERROR\n      );\n    } else if (results.decision === 'REVIEW') {\n      this.openSuggestedAddress(results);\n    }\n  }\n\n  countrySelected(country: Country): void {\n    this.billingAddressForm.get('country.isocode')?.setValue(country.isocode);\n    this.selectedCountry$.next(country.isocode as string);\n  }\n\n  next(): void {\n    if (this.paymentForm.valid) {\n      if (this.sameAsShippingAddress) {\n        this.setPaymentDetails.emit({\n          paymentDetails: this.paymentForm.value,\n          billingAddress: null,\n        });\n      } else {\n        if (this.billingAddressForm.valid) {\n          this.setPaymentDetails.emit({\n            paymentDetails: this.paymentForm.value,\n            billingAddress: this.billingAddressForm.value,\n          });\n        } else {\n          this.billingAddressForm.markAllAsTouched();\n        }\n      }\n    } else {\n      this.paymentForm.markAllAsTouched();\n\n      if (!this.sameAsShippingAddress) {\n        this.billingAddressForm.markAllAsTouched();\n      }\n    }\n  }\n}\n","<!-- FORM -->\n<ng-container *ngIf=\"!(loading$ | async)?.loading; else spinner\">\n  <form (ngSubmit)=\"next()\" [formGroup]=\"paymentForm\">\n    <div class=\"row\">\n      <div class=\"col-md-12 col-xl-10\">\n        <div class=\"form-group\" formGroupName=\"cardType\">\n          <ng-container *ngIf=\"cardTypes$ | async as cardTypes\">\n            <div *ngIf=\"cardTypes.length !== 0\">\n              <label>\n                <span class=\"label-content required\">{{\n                  'paymentForm.paymentType' | cxTranslate\n                }}</span>\n                <ng-select\n                  aria-required=\"true\"\n                  [searchable]=\"true\"\n                  [clearable]=\"false\"\n                  [items]=\"cardTypes\"\n                  bindLabel=\"name\"\n                  bindValue=\"code\"\n                  placeholder=\"{{ 'paymentForm.selectOne' | cxTranslate }}\"\n                  formControlName=\"code\"\n                >\n                </ng-select>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"paymentForm.get('cardType.code')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </ng-container>\n        </div>\n\n        <div class=\"form-group\">\n          <label>\n            <span class=\"label-content\">{{\n              'paymentForm.accountHolderName.label' | cxTranslate\n            }}</span>\n            <input\n              aria-required=\"true\"\n              class=\"form-control\"\n              type=\"text\"\n              placeholder=\"{{\n                'paymentForm.accountHolderName.placeholder' | cxTranslate\n              }}\"\n              formControlName=\"accountHolderName\"\n            />\n            <cx-form-errors\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n              [control]=\"paymentForm.get('accountHolderName')\"\n            ></cx-form-errors>\n          </label>\n        </div>\n\n        <div class=\"form-group\">\n          <label>\n            <span class=\"label-content\">{{\n              'paymentForm.cardNumber' | cxTranslate\n            }}</span>\n            <input\n              aria-required=\"true\"\n              type=\"text\"\n              class=\"form-control\"\n              formControlName=\"cardNumber\"\n            />\n            <cx-form-errors\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n              [control]=\"paymentForm.get('cardNumber')\"\n            ></cx-form-errors>\n          </label>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"form-group col-md-8\">\n            <fieldset class=\"cx-payment-form-exp-date\">\n              <legend class=\"label-content\">\n                {{ 'paymentForm.expirationDate' | cxTranslate }}\n              </legend>\n              <label class=\"cx-payment-form-exp-date-wrapper\">\n                <ng-select\n                  aria-required=\"true\"\n                  [searchable]=\"true\"\n                  [clearable]=\"false\"\n                  [items]=\"months\"\n                  placeholder=\"{{ 'paymentForm.monthMask' | cxTranslate }}\"\n                  formControlName=\"expiryMonth\"\n                  [attr.aria-label]=\"\n                    'paymentForm.expirationMonth'\n                      | cxTranslate\n                        : { selected: paymentForm.get('expiryMonth')?.value }\n                  \"\n                >\n                </ng-select>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"paymentForm.get('expiryMonth')\"\n                ></cx-form-errors>\n              </label>\n              <label class=\"cx-payment-form-exp-date-wrapper\">\n                <ng-select\n                  aria-required=\"true\"\n                  [searchable]=\"true\"\n                  [clearable]=\"false\"\n                  [items]=\"years\"\n                  placeholder=\"{{ 'paymentForm.yearMask' | cxTranslate }}\"\n                  [attr.aria-label]=\"\n                    'paymentForm.expirationYear'\n                      | cxTranslate\n                        : { selected: paymentForm.get('expiryYear')?.value }\n                  \"\n                  formControlName=\"expiryYear\"\n                >\n                </ng-select>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"paymentForm.get('expiryYear')\"\n                ></cx-form-errors>\n              </label>\n            </fieldset>\n          </div>\n\n          <div class=\"form-group col-md-4\">\n            <label>\n              <span class=\"label-content\">\n                {{ 'paymentForm.securityCode' | cxTranslate }}\n                <cx-icon\n                  [type]=\"iconTypes.INFO\"\n                  class=\"cx-payment-form-tooltip\"\n                  placement=\"right\"\n                  title=\"{{ 'paymentForm.securityCodeTitle' | cxTranslate }}\"\n                  alt=\"\"\n                ></cx-icon>\n              </span>\n              <input\n                aria-required=\"true\"\n                type=\"text\"\n                class=\"form-control\"\n                id=\"cVVNumber\"\n                formControlName=\"cvn\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"paymentForm.get('cvn')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n        </div>\n\n        <div class=\"form-group\" *ngIf=\"setAsDefaultField\">\n          <div class=\"form-check\">\n            <label>\n              <input\n                type=\"checkbox\"\n                class=\"form-check-input\"\n                (change)=\"toggleDefaultPaymentMethod()\"\n              />\n              <span class=\"form-check-label\">{{\n                'paymentForm.setAsDefault' | cxTranslate\n              }}</span>\n            </label>\n          </div>\n        </div>\n\n        <!-- BILLING -->\n        <div class=\"cx-payment-form-billing\">\n          <div class=\"cx-payment-form-billing-address\">\n            {{ 'paymentForm.billingAddress' | cxTranslate }}\n          </div>\n\n          <!-- SAME AS SHIPPING CHECKBOX -->\n          <ng-container *ngIf=\"showSameAsShippingAddressCheckbox$ | async\">\n            <div class=\"form-group\">\n              <div class=\"form-check\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    class=\"form-check-input\"\n                    [checked]=\"sameAsShippingAddress\"\n                    (change)=\"toggleSameAsShippingAddress()\"\n                  />\n                  <span class=\"form-check-label\">{{\n                    'paymentForm.sameAsShippingAddress' | cxTranslate\n                  }}</span>\n                </label>\n              </div>\n            </div>\n          </ng-container>\n\n          <!-- BILLING INFO COMPONENT -->\n          <ng-container\n            *ngIf=\"\n              sameAsShippingAddress &&\n                (shippingAddress$ | async) as shippingAddress;\n              else billingAddress\n            \"\n          >\n            <cx-card\n              [content]=\"getAddressCardContent(shippingAddress)\"\n            ></cx-card>\n          </ng-container>\n\n          <ng-template #billingAddress>\n            <div [formGroup]=\"billingAddressForm\">\n              <div class=\"form-group\" formGroupName=\"country\">\n                <ng-container *ngIf=\"countries$ | async as countries\">\n                  <div *ngIf=\"countries.length !== 0\">\n                    <label aria-required=\"true\">\n                      <span class=\"label-content required\">{{\n                        'addressForm.country' | cxTranslate\n                      }}</span>\n                      <ng-select\n                        aria-required=\"true\"\n                        [searchable]=\"true\"\n                        [clearable]=\"false\"\n                        [items]=\"countries\"\n                        bindLabel=\"name\"\n                        bindValue=\"isocode\"\n                        placeholder=\"{{\n                          'addressForm.selectOne' | cxTranslate\n                        }}\"\n                        (change)=\"countrySelected($event)\"\n                        formControlName=\"isocode\"\n                      >\n                      </ng-select>\n                      <cx-form-errors\n                        aria-live=\"assertive\"\n                        aria-atomic=\"true\"\n                        [control]=\"billingAddressForm.get('country.isocode')\"\n                      ></cx-form-errors>\n                    </label>\n                  </div>\n                </ng-container>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content required\">{{\n                    'addressForm.firstName.label' | cxTranslate\n                  }}</span>\n                  <input\n                    aria-required=\"true\"\n                    class=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"{{\n                      'addressForm.firstName.placeholder' | cxTranslate\n                    }}\"\n                    formControlName=\"firstName\"\n                  />\n                  <cx-form-errors\n                    aria-live=\"assertive\"\n                    aria-atomic=\"true\"\n                    [control]=\"billingAddressForm.get('firstName')\"\n                  ></cx-form-errors>\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content required\">{{\n                    'addressForm.lastName.label' | cxTranslate\n                  }}</span>\n                  <input\n                    aria-required=\"true\"\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{\n                      'addressForm.lastName.placeholder' | cxTranslate\n                    }}\"\n                    formControlName=\"lastName\"\n                  />\n                  <cx-form-errors\n                    aria-live=\"assertive\"\n                    aria-atomic=\"true\"\n                    [control]=\"billingAddressForm.get('lastName')\"\n                  ></cx-form-errors>\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content required\">{{\n                    'addressForm.address1' | cxTranslate\n                  }}</span>\n                  <input\n                    aria-required=\"true\"\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{\n                      'addressForm.streetAddress' | cxTranslate\n                    }}\"\n                    formControlName=\"line1\"\n                  />\n                  <cx-form-errors\n                    aria-live=\"assertive\"\n                    aria-atomic=\"true\"\n                    [control]=\"billingAddressForm.get('line1')\"\n                  ></cx-form-errors>\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content\">{{\n                    'addressForm.address2' | cxTranslate\n                  }}</span>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{ 'addressForm.aptSuite' | cxTranslate }}\"\n                    formControlName=\"line2\"\n                  />\n                </label>\n              </div>\n              <div class=\"row\">\n                <div class=\"form-group col-md-6\">\n                  <label>\n                    <span class=\"label-content required\">{{\n                      'addressForm.city.label' | cxTranslate\n                    }}</span>\n                    <input\n                      aria-required=\"true\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{\n                        'addressForm.city.placeholder' | cxTranslate\n                      }}\"\n                      formControlName=\"town\"\n                    />\n                    <cx-form-errors\n                      aria-live=\"assertive\"\n                      aria-atomic=\"true\"\n                      [control]=\"billingAddressForm.get('town')\"\n                    ></cx-form-errors>\n                  </label>\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <label>\n                    <span class=\"label-content required\">{{\n                      'addressForm.zipCode.label' | cxTranslate\n                    }}</span>\n                    <input\n                      aria-required=\"true\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{\n                        'addressForm.zipCode.placeholder' | cxTranslate\n                      }}\"\n                      formControlName=\"postalCode\"\n                    />\n                    <cx-form-errors\n                      aria-live=\"assertive\"\n                      aria-atomic=\"true\"\n                      [control]=\"billingAddressForm.get('postalCode')\"\n                    ></cx-form-errors>\n                  </label>\n                </div>\n                <ng-container\n                  *ngIf=\"regions$ | async as regions\"\n                  formGroupName=\"region\"\n                >\n                  <ng-container *ngIf=\"regions.length !== 0\">\n                    <div class=\"form-group col-md-6\">\n                      <label aria-required=\"true\">\n                        <span class=\"label-content required\">{{\n                          'addressForm.state' | cxTranslate\n                        }}</span>\n                        <ng-select\n                          aria-required=\"true\"\n                          class=\"region-select\"\n                          formControlName=\"isocodeShort\"\n                          [searchable]=\"true\"\n                          [clearable]=\"false\"\n                          [items]=\"regions\"\n                          bindLabel=\"{{\n                            regions[0].name ? 'name' : 'isocodeShort'\n                          }}\"\n                          bindValue=\"{{\n                            regions[0].name ? 'isocodeShort' : 'region'\n                          }}\"\n                          placeholder=\"{{\n                            'addressForm.selectOne' | cxTranslate\n                          }}\"\n                        >\n                        </ng-select>\n                        <cx-form-errors\n                          aria-live=\"assertive\"\n                          aria-atomic=\"true\"\n                          [control]=\"\n                            billingAddressForm.get('region.isocodeShort')\n                          \"\n                        ></cx-form-errors>\n                      </label>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <!-- BUTTON SECTION -->\n    <div class=\"cx-checkout-btns row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          *ngIf=\"paymentMethodsCount === 0\"\n          class=\"btn btn-block btn-action\"\n          (click)=\"back()\"\n        >\n          {{ 'common.back' | cxTranslate }}\n        </button>\n        <button\n          *ngIf=\"paymentMethodsCount > 0\"\n          class=\"btn btn-block btn-action\"\n          (click)=\"close()\"\n        >\n          {{ 'paymentForm.changePayment' | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-primary\" type=\"submit\">\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </form>\n</ng-container>\n\n<ng-template #spinner>\n  <cx-spinner></cx-spinner>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { I18nModule } from '@spartacus/core';\nimport {\n  CardModule,\n  FormErrorsModule,\n  IconModule,\n  SpinnerModule,\n} from '@spartacus/storefront';\nimport { PaymentFormComponent } from './payment-form.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgSelectModule,\n    CardModule,\n    I18nModule,\n    IconModule,\n    SpinnerModule,\n    FormErrorsModule,\n  ],\n  declarations: [PaymentFormComponent],\n  exports: [PaymentFormComponent],\n})\nexport class PaymentFormModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutDeliveryFacade,\n  CheckoutFacade,\n  CheckoutPaymentFacade,\n} from '@spartacus/checkout/root';\nimport {\n  ActiveCartService,\n  Address,\n  GlobalMessageService,\n  GlobalMessageType,\n  PaymentDetails,\n  TranslationService,\n  UserPaymentService,\n} from '@spartacus/core';\nimport { Card, ICON_TYPE } from '@spartacus/storefront';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap, take, tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-payment-method',\n  templateUrl: './payment-method.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentMethodComponent implements OnInit, OnDestroy {\n  iconTypes = ICON_TYPE;\n  existingPaymentMethods$: Observable<PaymentDetails[]>;\n  isLoading$: Observable<boolean>;\n  cards$: Observable<{ content: Card; paymentMethod: PaymentDetails }[]>;\n  selectedMethod$: Observable<PaymentDetails>;\n  isGuestCheckout = false;\n  newPaymentFormManuallyOpened = false;\n\n  backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);\n\n  protected shouldRedirect: boolean;\n  protected deliveryAddress: Address;\n\n  constructor(\n    protected userPaymentService: UserPaymentService,\n    protected checkoutService: CheckoutFacade,\n    protected checkoutDeliveryService: CheckoutDeliveryFacade,\n    protected checkoutPaymentService: CheckoutPaymentFacade,\n    protected globalMessageService: GlobalMessageService,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService\n  ) {}\n\n  ngOnInit() {\n    this.shouldRedirect = false;\n    this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();\n\n    if (!this.activeCartService.isGuestCart()) {\n      this.userPaymentService.loadPaymentMethods();\n    } else {\n      this.isGuestCheckout = true;\n    }\n\n    this.checkoutDeliveryService\n      .getDeliveryAddress()\n      .pipe(take(1))\n      .subscribe((address: Address) => {\n        this.deliveryAddress = address;\n      });\n\n    this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();\n\n    this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(\n      tap((paymentInfo: any) => {\n        if (paymentInfo && !!Object.keys(paymentInfo).length) {\n          if (paymentInfo['hasError']) {\n            Object.keys(paymentInfo).forEach((key) => {\n              if (key.startsWith('InvalidField')) {\n                this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);\n              }\n            });\n            this.checkoutService.clearCheckoutStep(3);\n          } else if (this.shouldRedirect) {\n            this.next();\n          }\n        }\n      })\n    );\n\n    this.cards$ = combineLatest([\n      this.existingPaymentMethods$.pipe(\n        switchMap((methods) => {\n          return !methods?.length\n            ? of([])\n            : combineLatest(\n                methods.map((method) =>\n                  combineLatest([\n                    of(method),\n                    this.translation.translate('paymentCard.expires', {\n                      month: method.expiryMonth,\n                      year: method.expiryYear,\n                    }),\n                  ]).pipe(\n                    map(([payment, translation]) => ({\n                      payment,\n                      expiryTranslation: translation,\n                    }))\n                  )\n                )\n              );\n        })\n      ),\n      this.selectedMethod$,\n      this.translation.translate('paymentForm.useThisPayment'),\n      this.translation.translate('paymentCard.defaultPaymentMethod'),\n      this.translation.translate('paymentCard.selected'),\n    ]).pipe(\n      map(\n        ([\n          paymentMethods,\n          selectedMethod,\n          textUseThisPayment,\n          textDefaultPaymentMethod,\n          textSelected,\n        ]) => {\n          if (\n            paymentMethods.length &&\n            (!selectedMethod || Object.keys(selectedMethod).length === 0)\n          ) {\n            const defaultPaymentMethod = paymentMethods.find(\n              (paymentMethod) => paymentMethod.payment.defaultPayment\n            );\n            if (defaultPaymentMethod) {\n              selectedMethod = defaultPaymentMethod.payment;\n              this.checkoutPaymentService.setPaymentDetails(selectedMethod);\n            }\n          }\n          return paymentMethods.map((payment) => ({\n            content: this.createCard(\n              payment.payment,\n              {\n                textExpires: payment.expiryTranslation,\n                textUseThisPayment,\n                textDefaultPaymentMethod,\n                textSelected,\n              },\n              selectedMethod\n            ),\n            paymentMethod: payment.payment,\n          }));\n        }\n      )\n    );\n  }\n\n  selectPaymentMethod(paymentDetails: PaymentDetails): void {\n    this.checkoutPaymentService.setPaymentDetails(paymentDetails);\n  }\n\n  showNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = true;\n  }\n\n  hideNewPaymentForm(): void {\n    this.newPaymentFormManuallyOpened = false;\n  }\n\n  setPaymentDetails({\n    paymentDetails,\n    billingAddress,\n  }: {\n    paymentDetails: PaymentDetails;\n    billingAddress?: Address;\n  }): void {\n    const details: PaymentDetails = { ...paymentDetails };\n    details.billingAddress = billingAddress || this.deliveryAddress;\n    this.checkoutPaymentService.createPaymentDetails(details);\n    this.shouldRedirect = true;\n  }\n\n  ngOnDestroy(): void {\n    this.checkoutPaymentService.paymentProcessSuccess();\n  }\n\n  protected getCardIcon(code: string): string {\n    let ccIcon: string;\n    if (code === 'visa') {\n      ccIcon = this.iconTypes.VISA;\n    } else if (code === 'master' || code === 'mastercard_eurocard') {\n      ccIcon = this.iconTypes.MASTER_CARD;\n    } else if (code === 'diners') {\n      ccIcon = this.iconTypes.DINERS_CLUB;\n    } else if (code === 'amex') {\n      ccIcon = this.iconTypes.AMEX;\n    } else {\n      ccIcon = this.iconTypes.CREDIT_CARD;\n    }\n\n    return ccIcon;\n  }\n\n  protected sendPaymentMethodFailGlobalMessage(field: string) {\n    this.globalMessageService.add(\n      {\n        key: 'paymentMethods.invalidField',\n        params: { field },\n      },\n      GlobalMessageType.MSG_TYPE_ERROR\n    );\n  }\n\n  protected createCard(\n    paymentDetails: PaymentDetails,\n    cardLabels: {\n      textDefaultPaymentMethod: string;\n      textExpires: string;\n      textUseThisPayment: string;\n      textSelected: string;\n    },\n    selected: PaymentDetails\n  ): Card {\n    return {\n      title: paymentDetails.defaultPayment\n        ? cardLabels.textDefaultPaymentMethod\n        : '',\n      textBold: paymentDetails.accountHolderName,\n      text: [paymentDetails.cardNumber ?? '', cardLabels.textExpires],\n      img: this.getCardIcon(paymentDetails.cardType?.code as string),\n      actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],\n      header:\n        selected?.id === paymentDetails.id\n          ? cardLabels.textSelected\n          : undefined,\n    };\n  }\n\n  next(): void {\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","<ng-container *ngIf=\"cards$ | async as cards\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'paymentForm.payment' | cxTranslate }}\n  </h2>\n  <ng-container *ngIf=\"!(isLoading$ | async); else loading\">\n    <ng-container\n      *ngIf=\"\n        cards?.length && !newPaymentFormManuallyOpened;\n        else newPaymentForm\n      \"\n    >\n      <p class=\"cx-checkout-text\">\n        {{ 'paymentForm.choosePaymentMethod' | cxTranslate }}\n      </p>\n      <div class=\"cx-checkout-btns row\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"showNewPaymentForm()\"\n          >\n            {{ 'paymentForm.addNewPayment' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-body row\">\n        <div\n          class=\"cx-payment-card col-md-12 col-lg-6\"\n          *ngFor=\"let card of cards; let i = index\"\n        >\n          <div class=\"cx-payment-card-inner\">\n            <cx-card\n              [border]=\"true\"\n              [fitToContainer]=\"true\"\n              [content]=\"card.content\"\n              (sendCard)=\"selectPaymentMethod(card.paymentMethod)\"\n            ></cx-card>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row cx-checkout-btns\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n            {{ backBtnText | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-primary\"\n            [disabled]=\"!(selectedMethod$ | async)?.id\"\n            (click)=\"next()\"\n          >\n            {{ 'common.continue' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #newPaymentForm>\n      <cx-payment-form\n        (setPaymentDetails)=\"setPaymentDetails($event)\"\n        (closeForm)=\"hideNewPaymentForm()\"\n        (goBack)=\"back()\"\n        [paymentMethodsCount]=\"cards?.length || 0\"\n        [setAsDefaultField]=\"!isGuestCheckout\"\n      ></cx-payment-form>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #loading>\n    <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n  </ng-template>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { CardModule, SpinnerModule } from '@spartacus/storefront';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PaymentFormModule } from './payment-form/payment-form.module';\nimport { PaymentMethodComponent } from './payment-method.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    PaymentFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentDetails: {\n          component: PaymentMethodComponent,\n          // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentMethodComponent],\n  exports: [PaymentMethodComponent],\n})\nexport class PaymentMethodModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  ViewChild,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CheckoutStepType, PaymentTypeFacade } from '@spartacus/checkout/root';\nimport {\n  B2BPaymentTypeEnum,\n  isNotUndefined,\n  PaymentType,\n} from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { distinctUntilChanged, filter, tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\n@Component({\n  selector: 'cx-payment-type',\n  templateUrl: './payment-type.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PaymentTypeComponent {\n  @ViewChild('poNumber', { static: false })\n  private _poNumberInput: ElementRef;\n\n  typeSelected: string;\n  cartPoNumber: string;\n\n  paymentTypes$: Observable<PaymentType[]> =\n    this.paymentTypeService.getPaymentTypes();\n\n  typeSelected$: Observable<string> = this.paymentTypeService\n    .getSelectedPaymentType()\n    .pipe(\n      filter(isNotUndefined),\n      distinctUntilChanged(),\n      tap((selected) => {\n        this.typeSelected = selected;\n        this.checkoutStepService.resetSteps();\n        this.checkoutStepService.disableEnableStep(\n          CheckoutStepType.PAYMENT_DETAILS,\n          selected === B2BPaymentTypeEnum.ACCOUNT_PAYMENT\n        );\n      })\n    );\n\n  cartPoNumber$: Observable<string> = this.paymentTypeService\n    .getPoNumber()\n    .pipe(\n      filter(isNotUndefined),\n      tap((po) => {\n        return (this.cartPoNumber = po);\n      })\n    );\n\n  constructor(\n    protected paymentTypeService: PaymentTypeFacade,\n    protected checkoutStepService: CheckoutStepService,\n    protected activatedRoute: ActivatedRoute\n  ) {}\n\n  changeType(code: string): void {\n    this.paymentTypeService.setPaymentType(code);\n    this.typeSelected = code;\n  }\n\n  next(): void {\n    // set po number to cart\n    const poNumInput = this._poNumberInput.nativeElement.value;\n    if (this.typeSelected && poNumInput !== this.cartPoNumber) {\n      this.paymentTypeService.setPaymentType(this.typeSelected, poNumInput);\n    }\n\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutPO.poNumber' | cxTranslate\n      }}</span>\n      <input\n        #poNumber\n        class=\"form-control\"\n        formControlName=\"poNumber\"\n        type=\"text\"\n        placeholder=\"{{ 'checkoutPO.placeholder' | cxTranslate }}\"\n        value=\"{{ cartPoNumber$ | async }}\"\n      />\n    </label>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <ng-container\n      *ngIf=\"\n        (paymentTypes$ | async)?.length && typeSelected$ | async;\n        else loading\n      \"\n    >\n      <label class=\"cx-payment-type-container\">\n        <span class=\"label-content\">{{\n          'paymentTypes.title' | cxTranslate\n        }}</span>\n        <div class=\"form-check\" *ngFor=\"let type of paymentTypes$ | async\">\n          <input\n            id=\"paymentType-{{ type.code }}\"\n            class=\"form-check-input\"\n            role=\"radio\"\n            type=\"radio\"\n            aria-checked=\"true\"\n            (change)=\"changeType(type.code)\"\n            [value]=\"type.code\"\n            [checked]=\"type.code == typeSelected\"\n            formControlName=\"paymentType\"\n          />\n          <label\n            class=\"cx-payment-type-label form-check-label form-radio-label\"\n            for=\"paymentType-{{ type.code }}\"\n          >\n            <div class=\"cx-payment-type\">\n              {{ 'paymentTypes.paymentType_' + type?.code | cxTranslate }}\n            </div>\n          </label>\n        </div>\n      </label>\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"cx-checkout-btns row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n      {{ 'checkout.backToCart' | cxTranslate }}\n    </button>\n  </div>\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-primary\" (click)=\"next()\">\n      {{ 'common.continue' | cxTranslate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CmsConfig, ConfigModule, I18nModule } from '@spartacus/core';\nimport { SpinnerModule, CartValidationGuard } from '@spartacus/storefront';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { PaymentTypeComponent } from './payment-type.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    I18nModule,\n    SpinnerModule,\n    ConfigModule.withConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPaymentType: {\n          component: PaymentTypeComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CartValidationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PaymentTypeComponent],\n  exports: [PaymentTypeComponent],\n})\nexport class PaymentTypeModule {}\n","import {\n  DIALOG_TYPE,\n  LayoutConfig,\n  SpinnerComponent,\n} from '@spartacus/storefront';\n\nexport const defaultPlaceOrderSpinnerLayoutConfig: LayoutConfig = {\n  launch: {\n    PLACE_ORDER_SPINNER: {\n      inline: true,\n      component: SpinnerComponent,\n      dialogType: DIALOG_TYPE.POPOVER_CENTER_BACKDROP,\n    },\n  },\n};\n","import { Injectable } from '@angular/core';\nimport {\n  DaysOfWeek,\n  recurrencePeriod,\n  ScheduleReplenishmentForm,\n} from '@spartacus/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CheckoutReplenishmentFormService {\n  /**\n   * Default form data\n   */\n  readonly defaultFormData: ScheduleReplenishmentForm = {\n    daysOfWeek: [DaysOfWeek.MONDAY],\n    nthDayOfMonth: '1',\n    numberOfDays: '14',\n    numberOfWeeks: '1',\n    recurrencePeriod: recurrencePeriod.DAILY,\n    replenishmentStartDate: new Date().toISOString().split('T')[0],\n  };\n\n  private scheduleReplenishmentFormData$: BehaviorSubject<ScheduleReplenishmentForm> =\n    new BehaviorSubject<ScheduleReplenishmentForm>(this.defaultFormData);\n\n  constructor() {}\n\n  getScheduleReplenishmentFormData(): Observable<ScheduleReplenishmentForm> {\n    return this.scheduleReplenishmentFormData$.asObservable();\n  }\n\n  setScheduleReplenishmentFormData(formData: ScheduleReplenishmentForm): void {\n    this.scheduleReplenishmentFormData$.next(formData);\n  }\n\n  resetScheduleReplenishmentFormData(): void {\n    this.scheduleReplenishmentFormData$.next(this.defaultFormData);\n  }\n}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  OnDestroy,\n  OnInit,\n  ViewContainerRef,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport {\n  ORDER_TYPE,\n  recurrencePeriod,\n  RoutingService,\n  ScheduleReplenishmentForm,\n} from '@spartacus/core';\nimport { LaunchDialogService, LAUNCH_CALLER } from '@spartacus/storefront';\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\nimport { CheckoutReplenishmentFormService } from '../../services/checkout-replenishment-form-service';\n\n@Component({\n  selector: 'cx-place-order',\n  templateUrl: './place-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PlaceOrderComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n\n  currentOrderType: ORDER_TYPE;\n  scheduleReplenishmentFormData: ScheduleReplenishmentForm;\n  placedOrder: void | Observable<ComponentRef<any> | undefined>;\n\n  daysOfWeekNotChecked$ = new BehaviorSubject<boolean>(false);\n\n  checkoutSubmitForm: FormGroup = this.fb.group({\n    termsAndConditions: [false, Validators.requiredTrue],\n  });\n\n  get termsAndConditionInvalid(): Boolean {\n    return this.checkoutSubmitForm.invalid;\n  }\n\n  constructor(\n    protected checkoutService: CheckoutFacade,\n    protected routingService: RoutingService,\n    protected fb: FormBuilder,\n    protected checkoutReplenishmentFormService: CheckoutReplenishmentFormService,\n    protected launchDialogService: LaunchDialogService,\n    protected vcr: ViewContainerRef\n  ) {}\n\n  submitForm(): void {\n    if (this.checkoutSubmitForm.valid && Boolean(this.currentOrderType)) {\n      switch (this.currentOrderType) {\n        case ORDER_TYPE.PLACE_ORDER: {\n          this.checkoutService.placeOrder(this.checkoutSubmitForm.valid);\n          break;\n        }\n\n        case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {\n          this.checkoutService.scheduleReplenishmentOrder(\n            this.scheduleReplenishmentFormData,\n            this.checkoutSubmitForm.valid\n          );\n          break;\n        }\n      }\n    } else {\n      this.checkoutSubmitForm.markAllAsTouched();\n    }\n  }\n\n  ngOnInit(): void {\n    this.subscription.add(\n      combineLatest([\n        this.checkoutService.getPlaceOrderLoading(),\n        this.checkoutService.getPlaceOrderSuccess(),\n        this.checkoutService.getPlaceOrderError(),\n      ]).subscribe(([orderLoading, orderSuccess, orderError]) => {\n        if (orderLoading) {\n          this.placedOrder = this.launchDialogService.launch(\n            LAUNCH_CALLER.PLACE_ORDER_SPINNER,\n            this.vcr\n          );\n        }\n\n        if (orderError) {\n          if (this.placedOrder) {\n            this.placedOrder\n              .subscribe((component) => {\n                this.launchDialogService.clear(\n                  LAUNCH_CALLER.PLACE_ORDER_SPINNER\n                );\n                if (component) {\n                  component.destroy();\n                }\n              })\n              .unsubscribe();\n            this.checkoutService.clearPlaceOrderState();\n          }\n        }\n\n        if (orderSuccess) {\n          this.onSuccess(orderSuccess);\n        }\n      })\n    );\n\n    this.subscription.add(\n      this.checkoutService\n        .getCurrentOrderType()\n        .subscribe((orderType) => (this.currentOrderType = orderType))\n    );\n\n    this.subscription.add(\n      this.checkoutReplenishmentFormService\n        .getScheduleReplenishmentFormData()\n        .subscribe((data) => {\n          this.scheduleReplenishmentFormData = data;\n\n          this.daysOfWeekNotChecked$.next(\n            data.daysOfWeek?.length === 0 &&\n              data.recurrencePeriod === recurrencePeriod.WEEKLY\n          );\n        })\n    );\n  }\n\n  onSuccess(data: boolean): void {\n    if (data) {\n      switch (this.currentOrderType) {\n        case ORDER_TYPE.PLACE_ORDER: {\n          this.routingService.go({ cxRoute: 'orderConfirmation' });\n          break;\n        }\n\n        case ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {\n          this.routingService.go({ cxRoute: 'replenishmentConfirmation' });\n          break;\n        }\n      }\n      this.checkoutReplenishmentFormService.resetScheduleReplenishmentFormData();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n    this.launchDialogService.clear(LAUNCH_CALLER.PLACE_ORDER_SPINNER);\n    this.checkoutService.clearPlaceOrderState();\n  }\n}\n","<form\n  (ngSubmit)=\"submitForm()\"\n  class=\"cx-place-order-form form-check\"\n  [formGroup]=\"checkoutSubmitForm\"\n>\n  <div class=\"form-group\">\n    <label>\n      <input\n        formControlName=\"termsAndConditions\"\n        class=\"scaled-input form-check-input\"\n        type=\"checkbox\"\n      />\n      <span class=\"form-check-label\">\n        {{ 'checkoutReview.confirmThatRead' | cxTranslate }}\n        <a\n          [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n          class=\"cx-tc-link\"\n          target=\"_blank\"\n        >\n          {{ 'checkoutReview.termsAndConditions' | cxTranslate }}\n        </a>\n      </span>\n    </label>\n  </div>\n\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-block\"\n    [disabled]=\"termsAndConditionInvalid || (daysOfWeekNotChecked$ | async)\"\n  >\n    {{ 'checkoutReview.placeOrder' | cxTranslate }}\n  </button>\n</form>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideConfig,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { defaultPlaceOrderSpinnerLayoutConfig } from './default-place-order-spinner-layout.config';\nimport { PlaceOrderComponent } from './place-order.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    UrlModule,\n    I18nModule,\n    ReactiveFormsModule,\n  ],\n  providers: [\n    provideConfig(defaultPlaceOrderSpinnerLayoutConfig),\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutPlaceOrder: {\n          component: PlaceOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [PlaceOrderComponent],\n  exports: [PlaceOrderComponent],\n})\nexport class PlaceOrderModule {}\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport {\n  CheckoutCostCenterFacade,\n  CheckoutDeliveryFacade,\n  CheckoutPaymentFacade,\n  checkoutPaymentSteps,\n  checkoutShippingSteps,\n  CheckoutStep,\n  CheckoutStepType,\n  PaymentTypeFacade,\n} from '@spartacus/checkout/root';\nimport {\n  ActiveCartService,\n  Address,\n  Cart,\n  CostCenter,\n  Country,\n  DeliveryMode,\n  OrderEntry,\n  PaymentDetails,\n  PromotionLocation,\n  TranslationService,\n  UserAddressService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { Card, ICON_TYPE } from '@spartacus/storefront';\nimport { combineLatest, Observable } from 'rxjs';\nimport { filter, map, switchMap, tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../services/index';\n\n@Component({\n  selector: 'cx-review-submit',\n  templateUrl: './review-submit.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ReviewSubmitComponent {\n  iconTypes = ICON_TYPE;\n  checkoutStepType = CheckoutStepType;\n  promotionLocation: PromotionLocation = PromotionLocation.ActiveCart;\n\n  constructor(\n    protected checkoutDeliveryService: CheckoutDeliveryFacade,\n    protected checkoutPaymentService: CheckoutPaymentFacade,\n    protected userAddressService: UserAddressService,\n    protected activeCartService: ActiveCartService,\n    protected translation: TranslationService,\n    protected checkoutStepService: CheckoutStepService,\n    protected paymentTypeService: PaymentTypeFacade,\n    protected checkoutCostCenterService: CheckoutCostCenterFacade,\n    protected userCostCenterService: UserCostCenterService\n  ) {}\n\n  get cart$(): Observable<Cart> {\n    return this.activeCartService.getActive();\n  }\n\n  get entries$(): Observable<OrderEntry[]> {\n    return this.activeCartService.getEntries();\n  }\n\n  get steps$(): Observable<CheckoutStep[]> {\n    return this.checkoutStepService.steps$;\n  }\n\n  get deliveryAddress$(): Observable<Address> {\n    return this.checkoutDeliveryService.getDeliveryAddress();\n  }\n\n  get deliveryMode$(): Observable<DeliveryMode | null | undefined> {\n    return this.checkoutDeliveryService.getSelectedDeliveryMode().pipe(\n      tap((selected: DeliveryMode | null | undefined) => {\n        if (selected === null) {\n          this.checkoutDeliveryService.loadSupportedDeliveryModes();\n        }\n      })\n    );\n  }\n\n  get paymentDetails$(): Observable<PaymentDetails> {\n    return this.checkoutPaymentService.getPaymentDetails();\n  }\n\n  get countryName$(): Observable<string | undefined> {\n    return this.deliveryAddress$.pipe(\n      switchMap((address: Address) =>\n        this.userAddressService.getCountry(address?.country?.isocode as string)\n      ),\n      tap((country: Country) => {\n        if (country === null) {\n          this.userAddressService.loadDeliveryCountries();\n        }\n      }),\n      map((country: Country) => country && country.name)\n    );\n  }\n\n  get poNumber$(): Observable<string | undefined> {\n    return this.paymentTypeService.getPoNumber();\n  }\n\n  get paymentType$(): Observable<string | undefined> {\n    return this.paymentTypeService.getSelectedPaymentType();\n  }\n\n  get isAccountPayment$(): Observable<boolean> {\n    return this.paymentTypeService.isAccountPayment();\n  }\n\n  get costCenter$(): Observable<CostCenter | undefined> {\n    return this.userCostCenterService.getActiveCostCenters().pipe(\n      filter((costCenters) => Boolean(costCenters)),\n      switchMap((costCenters) => {\n        return this.checkoutCostCenterService.getCostCenter().pipe(\n          map((code) => {\n            return costCenters.find((cc) => cc.code === code);\n          })\n        );\n      })\n    );\n  }\n\n  getShippingAddressCard(\n    deliveryAddress: Address,\n    countryName: string\n  ): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('addressCard.shipTo'),\n    ]).pipe(\n      map(([textTitle]) => {\n        if (!countryName) {\n          countryName = deliveryAddress?.country?.isocode as string;\n        }\n\n        let region = '';\n        if (\n          deliveryAddress &&\n          deliveryAddress.region &&\n          deliveryAddress.region.isocode\n        ) {\n          region = deliveryAddress.region.isocode + ', ';\n        }\n\n        return {\n          title: textTitle,\n          textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,\n          text: [\n            deliveryAddress.line1,\n            deliveryAddress.line2,\n            deliveryAddress.town + ', ' + region + countryName,\n            deliveryAddress.postalCode,\n            deliveryAddress.phone,\n          ],\n        } as Card;\n      })\n    );\n  }\n\n  getCostCenterCard(costCenter?: CostCenter): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutPO.costCenter'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: costCenter?.name,\n          text: ['(' + costCenter?.unit?.name + ')'],\n        };\n      })\n    );\n  }\n\n  getDeliveryModeCard(deliveryMode: DeliveryMode): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutShipping.shippingMethod'),\n    ]).pipe(\n      map(([textTitle]) => {\n        return {\n          title: textTitle,\n          textBold: deliveryMode.name,\n          text: [\n            deliveryMode.description,\n            deliveryMode.deliveryCost?.formattedValue\n              ? deliveryMode.deliveryCost?.formattedValue\n              : '',\n          ],\n        } as Card;\n      })\n    );\n  }\n\n  getPaymentMethodCard(paymentDetails: PaymentDetails): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('paymentForm.payment'),\n      this.translation.translate('paymentCard.expires', {\n        month: paymentDetails.expiryMonth,\n        year: paymentDetails.expiryYear,\n      }),\n      this.translation.translate('paymentForm.billingAddress'),\n    ]).pipe(\n      map(([textTitle, textExpires, billingAddress]) => {\n        const region = paymentDetails.billingAddress?.region?.isocode\n          ? paymentDetails.billingAddress?.region?.isocode + ', '\n          : '';\n        return {\n          title: textTitle,\n          textBold: paymentDetails.accountHolderName,\n          text: [paymentDetails.cardNumber, textExpires],\n          paragraphs: [\n            {\n              title: billingAddress + ':',\n              text: [\n                paymentDetails.billingAddress?.firstName +\n                  ' ' +\n                  paymentDetails.billingAddress?.lastName,\n                paymentDetails.billingAddress?.line1,\n                paymentDetails.billingAddress?.town +\n                  ', ' +\n                  region +\n                  paymentDetails.billingAddress?.country?.isocode,\n                paymentDetails.billingAddress?.postalCode,\n              ],\n            },\n          ],\n        } as Card;\n      })\n    );\n  }\n\n  getPoNumberCard(poNumber?: string | null): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutReview.poNumber'),\n      this.translation.translate('checkoutPO.noPoNumber'),\n    ]).pipe(\n      map(([textTitle, noneTextTitle]) => {\n        return {\n          title: textTitle,\n          textBold: poNumber ? poNumber : noneTextTitle,\n        };\n      })\n    );\n  }\n\n  getPaymentTypeCard(paymentType?: string): Observable<Card> {\n    return combineLatest([\n      this.translation.translate('checkoutProgress.methodOfPayment'),\n      this.translation.translate('paymentTypes.paymentType_' + paymentType),\n    ]).pipe(\n      map(([textTitle, paymentTypeTranslation]) => {\n        return {\n          title: textTitle,\n          textBold: paymentTypeTranslation,\n        };\n      })\n    );\n  }\n\n  getCheckoutStepUrl(stepType: CheckoutStepType): string | undefined {\n    const step = this.checkoutStepService.getCheckoutStep(stepType);\n    return step && step.routeName;\n  }\n\n  shippingSteps(steps: CheckoutStep[]): CheckoutStep[] {\n    return steps.filter((step) => checkoutShippingSteps.includes(step.type[0]));\n  }\n\n  paymentSteps(steps: CheckoutStep[]): CheckoutStep[] {\n    return steps.filter((step) => checkoutPaymentSteps.includes(step.type[0]));\n  }\n}\n","<div class=\"cx-review\">\n  <!-- TITLE -->\n  <h2 class=\"cx-review-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutReview.review' | cxTranslate }}\n  </h2>\n\n  <div class=\"cx-review-summary row\">\n    <ng-container *ngIf=\"(steps$ | async)?.slice(0, -1) as steps\">\n      <div class=\"col-md-12 col-lg-6 col-xl-6 cx-review-payment-col\">\n        <ng-container *ngFor=\"let step of paymentSteps(steps)\">\n          <ng-container [ngSwitch]=\"step.type[0]\">\n            <ng-container *ngSwitchCase=\"checkoutStepType.PAYMENT_TYPE\">\n              <ng-container *ngTemplateOutlet=\"poNumber\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.PAYMENT_TYPE\">\n              <ng-container *ngTemplateOutlet=\"paymentType\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.PAYMENT_DETAILS\">\n              <ng-container *ngTemplateOutlet=\"paymentMethod\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.SHIPPING_ADDRESS\">\n              <ng-container *ngTemplateOutlet=\"costCenter\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n      <div class=\"col-md-12 col-lg-6 col-xl-6 cx-review-shipping-col\">\n        <ng-container *ngFor=\"let step of shippingSteps(steps)\">\n          <ng-container [ngSwitch]=\"step.type[0]\">\n            <ng-container *ngSwitchCase=\"checkoutStepType.SHIPPING_ADDRESS\">\n              <ng-container *ngTemplateOutlet=\"shippingAddress\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.DELIVERY_MODE\">\n              <ng-container *ngTemplateOutlet=\"deliveryMode\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n\n  <!-- PO NUMBER SECTION -->\n  <ng-template #poNumber>\n    <div class=\"cx-review-summary-card\">\n      <cx-card [content]=\"getPoNumberCard(poNumber$ | async) | async\"></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentType' | cxTranslate\"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_TYPE)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- PAYMENT TYPE SECTION -->\n  <ng-template #paymentType>\n    <div class=\"cx-review-summary-card\">\n      <cx-card\n        *ngIf=\"paymentType$ | async as paymentType\"\n        [content]=\"getPaymentTypeCard(paymentType) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentType' | cxTranslate\"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_TYPE)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- COST CENTER SECTION -->\n  <ng-template #costCenter>\n    <ng-container *ngIf=\"isAccountPayment$ | async\">\n      <div class=\"cx-review-summary-card\">\n        <cx-card\n          *ngIf=\"costCenter$ | async as costCenter\"\n          [content]=\"getCostCenterCard(costCenter) | async\"\n        ></cx-card>\n        <div class=\"cx-review-summary-edit-step\">\n          <a\n            [attr.aria-label]=\"\n              'checkoutReview.editShippingAddressDetails' | cxTranslate\n            \"\n            [routerLink]=\"\n              {\n                cxRoute: getCheckoutStepUrl(checkoutStepType.SHIPPING_ADDRESS)\n              } | cxUrl\n            \"\n            ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n          ></a>\n        </div>\n      </div>\n    </ng-container>\n  </ng-template>\n\n  <!-- SHIPPING ADDRESS SECTION -->\n  <ng-template #shippingAddress>\n    <div\n      *ngIf=\"deliveryAddress$ | async as deliveryAddress\"\n      class=\"cx-review-summary-card cx-review-card-address\"\n    >\n      <cx-card\n        *ngIf=\"countryName$ | async as countryName\"\n        [content]=\"getShippingAddressCard(deliveryAddress, countryName) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"\n            'checkoutReview.editShippingAddressDetails' | cxTranslate\n          \"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepType.SHIPPING_ADDRESS)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- DELIVERY MODE SECTION -->\n  <ng-template #deliveryMode>\n    <div class=\"cx-review-summary-card cx-review-card-shipping\">\n      <cx-card\n        *ngIf=\"deliveryMode$ | async as deliveryMode\"\n        [content]=\"getDeliveryModeCard(deliveryMode) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editDeliveryMode' | cxTranslate\"\n          [routerLink]=\"\n            { cxRoute: getCheckoutStepUrl(checkoutStepType.DELIVERY_MODE) }\n              | cxUrl\n          \"\n        >\n          <cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon>\n        </a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- PAYMENT METHOD SECTION -->\n  <ng-template #paymentMethod>\n    <div class=\"cx-review-summary-card cx-review-card-payment\">\n      <div>\n        <cx-card\n          *ngIf=\"paymentDetails$ | async as paymentDetails\"\n          [content]=\"getPaymentMethodCard(paymentDetails) | async\"\n        ></cx-card>\n      </div>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentDetails' | cxTranslate\"\n          [routerLink]=\"\n            { cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_DETAILS) }\n              | cxUrl\n          \"\n        >\n          <cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon>\n        </a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- CART ITEM SECTION -->\n  <ng-container *ngIf=\"cart$ | async as cart\">\n    <h4 class=\"cx-review-cart-total d-none d-lg-block d-xl-block\">\n      {{\n        'cartItems.cartTotal'\n          | cxTranslate: { count: cart.deliveryItemsQuantity }\n      }}:\n      {{ cart.totalPrice?.formattedValue }}\n    </h4>\n    <h4 class=\"cx-review-cart-heading d-block d-lg-none d-xl-none\">\n      {{ 'checkoutReview.placeOrder' | cxTranslate }}\n    </h4>\n    <div\n      class=\"cx-review-cart-item col-md-12\"\n      *ngIf=\"entries$ | async as entries\"\n    >\n      <cx-promotions\n        [promotions]=\"\n          (cart.appliedOrderPromotions || []).concat(\n            cart.potentialOrderPromotions || []\n          )\n        \"\n      ></cx-promotions>\n\n      <cx-cart-item-list\n        [items]=\"entries\"\n        [readonly]=\"true\"\n        [promotionLocation]=\"promotionLocation\"\n      ></cx-cart-item-list>\n    </div>\n  </ng-container>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport {\n  CmsConfig,\n  I18nModule,\n  provideDefaultConfig,\n  UrlModule,\n} from '@spartacus/core';\nimport {\n  CardModule,\n  CartSharedModule,\n  IconModule,\n  PromotionsModule,\n} from '@spartacus/storefront';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ReviewSubmitComponent } from './review-submit.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CardModule,\n    CartSharedModule,\n    I18nModule,\n    UrlModule,\n    RouterModule,\n    PromotionsModule,\n    IconModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutReviewOrder: {\n          component: ReviewSubmitComponent,\n          // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ReviewSubmitComponent],\n  exports: [ReviewSubmitComponent],\n})\nexport class ReviewSubmitModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport {\n  DaysOfWeek,\n  ORDER_TYPE,\n  recurrencePeriod,\n  ScheduleReplenishmentForm,\n} from '@spartacus/core';\nimport { ICON_TYPE } from '@spartacus/storefront';\nimport { Observable, Subscription } from 'rxjs';\nimport { CheckoutReplenishmentFormService } from '../../services/checkout-replenishment-form-service';\n\n@Component({\n  selector: 'cx-schedule-replenishment-order',\n  templateUrl: './schedule-replenishment-order.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScheduleReplenishmentOrderComponent implements OnInit, OnDestroy {\n  private subscription: Subscription = new Subscription();\n\n  iconTypes = ICON_TYPE;\n  orderTypes = ORDER_TYPE;\n  daysOfWeek = Object.values(DaysOfWeek);\n  recurrencePeriodType = Object.values(recurrencePeriod);\n\n  selectedOrderType$: Observable<ORDER_TYPE> =\n    this.checkoutService.getCurrentOrderType();\n\n  isMonthly: Boolean = false;\n  isWeekly: Boolean = false;\n  currentDaysOfWeek: DaysOfWeek[] = [];\n  numberOfDays: string[];\n  numberOfWeeks: string[];\n  currentDate: string | undefined;\n  scheduleReplenishmentFormData: ScheduleReplenishmentForm;\n\n  constructor(\n    protected checkoutService: CheckoutFacade,\n    protected checkoutReplenishmentFormService: CheckoutReplenishmentFormService\n  ) {}\n\n  ngOnInit(): void {\n    this.subscription.add(\n      this.checkoutReplenishmentFormService\n        .getScheduleReplenishmentFormData()\n        .subscribe((data) => {\n          this.scheduleReplenishmentFormData = data;\n        })\n    );\n\n    this.initConfig();\n  }\n\n  changeOrderType(orderType: ORDER_TYPE): void {\n    this.checkoutService.setOrderType(orderType);\n  }\n\n  changeNumberOfDays(nDays: string): void {\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      numberOfDays: nDays,\n    });\n  }\n\n  changeNumberOfWeeks(nWeeks: string): void {\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      numberOfWeeks: nWeeks,\n    });\n  }\n\n  changeRecurrencePeriodType(type: string): void {\n    this.isWeekly = type === recurrencePeriod.WEEKLY;\n    this.isMonthly = type === recurrencePeriod.MONTHLY;\n\n    this.numberOfDays = this.isMonthly\n      ? this.createNumberStringArray(31)\n      : this.createNumberStringArray(30);\n\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      recurrencePeriod: type,\n    });\n  }\n\n  changeDayOfTheMonth(dayOfMonth: string): void {\n    this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n      ...this.scheduleReplenishmentFormData,\n      nthDayOfMonth: dayOfMonth,\n    });\n  }\n\n  changeReplenishmentStartDate(date: string): void {\n    if (Boolean(date)) {\n      this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n        ...this.scheduleReplenishmentFormData,\n        replenishmentStartDate: date,\n      });\n    }\n  }\n\n  changeRepeatDays(day: DaysOfWeek, isChecked: boolean): void {\n    if (isChecked) {\n      this.currentDaysOfWeek = [...this.currentDaysOfWeek];\n\n      this.currentDaysOfWeek.push(day);\n\n      this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n        ...this.scheduleReplenishmentFormData,\n        daysOfWeek: this.currentDaysOfWeek,\n      });\n    } else {\n      const foundDay = this.currentDaysOfWeek.find((data) => day === data);\n\n      if (!foundDay) return;\n\n      const index = this.currentDaysOfWeek.indexOf(foundDay);\n      this.currentDaysOfWeek.splice(index, 1);\n\n      this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData({\n        ...this.scheduleReplenishmentFormData,\n        daysOfWeek: this.currentDaysOfWeek,\n      });\n    }\n  }\n\n  hasDaysOfWeekChecked(day: DaysOfWeek): boolean {\n    return this.currentDaysOfWeek.includes(day);\n  }\n\n  private initConfig(): void {\n    this.isMonthly =\n      this.scheduleReplenishmentFormData.recurrencePeriod ===\n      recurrencePeriod.MONTHLY;\n\n    this.isWeekly =\n      this.scheduleReplenishmentFormData.recurrencePeriod ===\n      recurrencePeriod.WEEKLY;\n\n    this.currentDaysOfWeek = [\n      ...(this.scheduleReplenishmentFormData.daysOfWeek ?? []),\n    ];\n\n    this.numberOfDays = this.isMonthly\n      ? this.createNumberStringArray(31)\n      : this.createNumberStringArray(30);\n\n    this.numberOfWeeks = this.createNumberStringArray(12);\n\n    this.currentDate =\n      this.scheduleReplenishmentFormData.replenishmentStartDate;\n  }\n\n  private createNumberStringArray(n: number): string[] {\n    return Array(n)\n      .fill(0)\n      .map((_, y) => (y + 1).toString());\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","<div class=\"cx-order-type-card\">\n  <div class=\"cx-label-container\">\n    <h5 class=\"cx-order-replenishment-header\">\n      {{ 'checkoutReview.autoReplenishOrder' | cxTranslate }}\n    </h5>\n    <cx-icon [type]=\"iconTypes.CLOCK\"></cx-icon>\n  </div>\n  <div\n    class=\"cx-order-type-container form-check\"\n    *ngFor=\"let type of orderTypes | keyvalue\"\n  >\n    <input\n      id=\"orderType-{{ type.value }}\"\n      class=\"scaled-input form-check-input\"\n      role=\"radio\"\n      type=\"radio\"\n      formControlName=\"orderType\"\n      aria-checked=\"true\"\n      (change)=\"changeOrderType(type.value)\"\n      [value]=\"type.value\"\n      [checked]=\"type.value == (selectedOrderType$ | async)\"\n    />\n    <label\n      class=\"order-type-label form-check-label form-radio-label\"\n      for=\"orderType-{{ type.value }}\"\n    >\n      <div class=\"order-type\">\n        {{ 'checkoutReview.orderType_' + type?.value | cxTranslate }}\n      </div>\n    </label>\n  </div>\n  <ng-container\n    *ngIf=\"\n      scheduleReplenishmentFormData &&\n      (selectedOrderType$ | async) === orderTypes.SCHEDULE_REPLENISHMENT_ORDER\n    \"\n  >\n    <div class=\"cx-replenishment-form-data-container\">\n      <div *ngIf=\"!isMonthly\" class=\"cx-days\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <ng-container *ngIf=\"isWeekly; else isDaily\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfWeeks($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nWeeks of numberOfWeeks\"\n              [value]=\"nWeeks\"\n              [selected]=\"\n                nWeeks === scheduleReplenishmentFormData.numberOfWeeks\n              \"\n            >\n              {{ nWeeks }}\n            </option>\n          </select>\n        </ng-container>\n        <ng-template #isDaily>\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfDays($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.numberOfDays\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </ng-template>\n      </div>\n      <div class=\"cx-month\">\n        <span *ngIf=\"isMonthly\" class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <select\n          class=\"form-control\"\n          (change)=\"changeRecurrencePeriodType($event.target.value)\"\n        >\n          <option\n            *ngFor=\"let type of recurrencePeriodType\"\n            [value]=\"type\"\n            [selected]=\"type === scheduleReplenishmentFormData.recurrencePeriod\"\n          >\n            {{ 'checkoutReview.recurrencePeriodType_' + type | cxTranslate }}\n          </option>\n        </select>\n      </div>\n      <div *ngIf=\"isMonthly\" class=\"cx-dayMonth\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.dayOfMonth' | cxTranslate\n        }}</span>\n        <div class=\"cx-day-of-month\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeDayOfTheMonth($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.nthDayOfMonth\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"cx-replenishment-form-data-container\">\n      <span class=\"form-data-label\">{{\n        'checkoutReview.startOn' | cxTranslate\n      }}</span>\n      <div class=\"cx-replenishment-date\">\n        <input\n          type=\"date\"\n          placeholder=\"yyyy-mm-dd\"\n          [value]=\"currentDate\"\n          (change)=\"changeReplenishmentStartDate($event.target.value)\"\n        />\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"isWeekly\"\n      class=\"cx-replenishment-form-data-container cx-repeat-days-container\"\n    >\n      <span class=\"cx-repeat-days form-data-label\">{{\n        'checkoutReview.repeatOnDays' | cxTranslate\n      }}</span>\n      <div *ngFor=\"let day of daysOfWeek\" class=\"form-check\">\n        <label for=\"day-{{ day }}\" class=\"cx-week-day\">{{\n          day | titlecase\n        }}</label\n        ><input\n          id=\"day-{{ day }}\"\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [checked]=\"hasDaysOfWeekChecked(day)\"\n          (change)=\"changeRepeatDays(day, $event.target.checked)\"\n        />\n      </div>\n    </div>\n  </ng-container>\n</div>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport { IconModule } from '@spartacus/storefront';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ScheduleReplenishmentOrderComponent } from './schedule-replenishment-order.component';\n\n@NgModule({\n  imports: [CommonModule, RouterModule, I18nModule, IconModule],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutScheduleReplenishmentOrder: {\n          component: ScheduleReplenishmentOrderComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ScheduleReplenishmentOrderComponent],\n  exports: [ScheduleReplenishmentOrderComponent],\n})\nexport class ScheduleReplenishmentOrderModule {}\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  CheckoutCostCenterFacade,\n  CheckoutDeliveryFacade,\n  PaymentTypeFacade,\n} from '@spartacus/checkout/root';\nimport {\n  ActiveCartService,\n  Address,\n  TranslationService,\n  UserAddressService,\n  UserCostCenterService,\n} from '@spartacus/core';\nimport { Card } from '@spartacus/storefront';\nimport { combineLatest, Observable, Subscription } from 'rxjs';\nimport { distinctUntilChanged, map, switchMap, tap } from 'rxjs/operators';\nimport { CheckoutStepService } from '../../services/checkout-step.service';\n\nexport interface CardWithAddress {\n  card: Card;\n  address: Address;\n}\n\n@Component({\n  selector: 'cx-shipping-address',\n  templateUrl: './shipping-address.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShippingAddressComponent implements OnInit, OnDestroy {\n  addressFormOpened = false;\n  forceLoader = false; // this helps with smoother steps transition\n  selectedAddress: Address;\n  doneAutoSelect = false;\n  isAccountPayment = false;\n\n  protected subscriptions = new Subscription();\n\n  constructor(\n    protected userAddressService: UserAddressService,\n    protected checkoutDeliveryService: CheckoutDeliveryFacade,\n    protected activatedRoute: ActivatedRoute,\n    protected translation: TranslationService,\n    protected activeCartService: ActiveCartService,\n    protected checkoutStepService: CheckoutStepService,\n    protected paymentTypeService?: PaymentTypeFacade,\n    protected userCostCenterService?: UserCostCenterService,\n    protected checkoutCostCenterService?: CheckoutCostCenterFacade\n  ) {}\n\n  get isGuestCheckout(): boolean {\n    return this.activeCartService.isGuestCart();\n  }\n\n  get backBtnText(): string {\n    return this.checkoutStepService.getBackBntText(this.activatedRoute);\n  }\n\n  get isLoading$(): Observable<boolean> {\n    return this.userAddressService.getAddressesLoading();\n  }\n\n  get selectedAddress$(): Observable<Address> {\n    return this.checkoutDeliveryService.getDeliveryAddress().pipe(\n      tap((address) => {\n        if (\n          address &&\n          (this.selectedAddress === undefined ||\n            this.selectedAddress.id !== address.id)\n        ) {\n          this.selectedAddress = address;\n          if (this.forceLoader) {\n            this.next();\n          }\n        }\n      })\n    );\n  }\n\n  get cards$(): Observable<CardWithAddress[]> {\n    return combineLatest([\n      this.getSupportedAddresses(),\n      this.selectedAddress$,\n      this.translation.translate('checkoutAddress.defaultShippingAddress'),\n      this.translation.translate('checkoutAddress.shipToThisAddress'),\n      this.translation.translate('addressCard.selected'),\n    ]).pipe(\n      tap(([addresses, selected]) =>\n        this.selectDefaultAddress(addresses, selected)\n      ),\n      map(([addresses, selected, textDefault, textShipTo, textSelected]) =>\n        (<any>addresses).map((address: Address) => ({\n          address,\n          card: this.getCardContent(\n            address,\n            selected,\n            textDefault,\n            textShipTo,\n            textSelected\n          ),\n        }))\n      )\n    );\n  }\n\n  getSupportedAddresses(): Observable<Address[]> {\n    if (\n      this.isAccountPayment &&\n      this.checkoutCostCenterService &&\n      this.userCostCenterService\n    ) {\n      return this.checkoutCostCenterService.getCostCenter().pipe(\n        distinctUntilChanged(),\n        switchMap((selected) => {\n          this.doneAutoSelect = false;\n          return (\n            this.userCostCenterService?.getCostCenterAddresses(\n              selected as string\n            ) ?? []\n          );\n        })\n      );\n    }\n    return this.userAddressService.getAddresses();\n  }\n\n  selectDefaultAddress(addresses: Address[], selected: Address | undefined) {\n    if (\n      !this.doneAutoSelect &&\n      addresses &&\n      addresses.length &&\n      (!selected || Object.keys(selected).length === 0)\n    ) {\n      if (this.isAccountPayment) {\n        if (addresses.length === 1) {\n          this.selectAddress(addresses[0]);\n        }\n      } else {\n        selected = addresses.find((address) => address.defaultAddress);\n        if (selected) {\n          this.selectAddress(selected);\n        }\n      }\n      this.doneAutoSelect = true;\n    }\n  }\n\n  ngOnInit(): void {\n    if (\n      this.paymentTypeService &&\n      this.userCostCenterService &&\n      this.checkoutCostCenterService\n    ) {\n      this.subscriptions.add(\n        this.paymentTypeService\n          .isAccountPayment()\n          .pipe(distinctUntilChanged())\n          .subscribe((isAccount) => (this.isAccountPayment = isAccount))\n      );\n    }\n\n    if (!this.isGuestCheckout && !this.isAccountPayment) {\n      this.userAddressService.loadAddresses();\n    }\n  }\n\n  getCardContent(\n    address: Address,\n    selected: any,\n    textDefaultShippingAddress: string,\n    textShipToThisAddress: string,\n    textSelected: string\n  ): Card {\n    let region = '';\n    if (address.region && address.region.isocode) {\n      region = address.region.isocode + ', ';\n    }\n\n    return {\n      title: address.defaultAddress ? textDefaultShippingAddress : '',\n      textBold: address.firstName + ' ' + address.lastName,\n      text: [\n        address.line1,\n        address.line2,\n        address.town + ', ' + region + address.country?.isocode,\n        address.postalCode,\n        address.phone,\n      ],\n      actions: [{ name: textShipToThisAddress, event: 'send' }],\n      header: selected && selected.id === address.id ? textSelected : '',\n    } as Card;\n  }\n\n  selectAddress(address: Address): void {\n    this.checkoutDeliveryService.setDeliveryAddress(address);\n  }\n\n  addAddress(address: Address): void {\n    this.forceLoader = true;\n    if (Boolean(address)) {\n      this.checkoutDeliveryService.createAndSetAddress(address);\n    } else {\n      this.forceLoader = false;\n      this.next();\n    }\n  }\n\n  showNewAddressForm(): void {\n    this.addressFormOpened = true;\n  }\n\n  hideNewAddressForm(goPrevious: boolean = false): void {\n    this.addressFormOpened = false;\n    if (goPrevious) {\n      this.back();\n    }\n  }\n\n  next(): void {\n    this.checkoutStepService.next(this.activatedRoute);\n  }\n\n  back(): void {\n    this.checkoutStepService.back(this.activatedRoute);\n  }\n\n  ngOnDestroy() {\n    this.subscriptions.unsubscribe();\n  }\n}\n","<ng-container *ngIf=\"cards$ | async as cards\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutAddress.shippingAddress' | cxTranslate }}\n  </h2>\n  <ng-container *ngIf=\"!forceLoader && !(isLoading$ | async); else loading\">\n    <ng-container\n      *ngIf=\"\n        isAccountPayment || (cards?.length && !addressFormOpened);\n        else newAddressForm\n      \"\n    >\n      <p class=\"cx-checkout-text\">\n        {{ 'checkoutAddress.selectYourShippingAddress' | cxTranslate }}\n      </p>\n      <div class=\"cx-checkout-btns row\" *ngIf=\"!isAccountPayment\">\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"showNewAddressForm()\"\n          >\n            {{ 'checkoutAddress.addNewAddress' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-body row\">\n        <div\n          class=\"cx-shipping-address-card col-md-12 col-lg-6\"\n          *ngFor=\"let card of cards; let i = index\"\n        >\n          <div\n            class=\"cx-shipping-address-card-inner\"\n            (click)=\"selectAddress(card.address)\"\n          >\n            <cx-card\n              [border]=\"true\"\n              [fitToContainer]=\"true\"\n              [content]=\"card.card\"\n              (sendCard)=\"selectAddress(card.address)\"\n            ></cx-card>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-btns row\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button class=\"cx-btn btn btn-block btn-action\" (click)=\"back()\">\n            {{ backBtnText | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"cx-btn btn btn-block btn-primary\"\n            [disabled]=\"!selectedAddress?.id\"\n            (click)=\"next()\"\n          >\n            {{ 'common.continue' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #newAddressForm>\n      <cx-address-form\n        *ngIf=\"cards.length; else initialAddressForm\"\n        [showTitleCode]=\"true\"\n        (backToAddress)=\"hideNewAddressForm(false)\"\n        (submitAddress)=\"addAddress($event)\"\n      ></cx-address-form>\n      <ng-template #initialAddressForm>\n        <cx-address-form\n          [showTitleCode]=\"true\"\n          [setAsDefaultField]=\"!isGuestCheckout\"\n          [addressData]=\"selectedAddress\"\n          cancelBtnLabel=\"{{ backBtnText | cxTranslate }}\"\n          (backToAddress)=\"hideNewAddressForm(true)\"\n          (submitAddress)=\"addAddress($event)\"\n        ></cx-address-form>\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #loading>\n    <div class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </ng-template>\n</ng-container>\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { CmsConfig, I18nModule, provideDefaultConfig } from '@spartacus/core';\nimport {\n  AddressFormModule,\n  CardModule,\n  SpinnerModule,\n  CartValidationGuard,\n} from '@spartacus/storefront';\nimport { CartNotEmptyGuard } from '../../guards/cart-not-empty.guard';\nimport { CheckoutAuthGuard } from '../../guards/checkout-auth.guard';\nimport { ShippingAddressComponent } from './shipping-address.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    AddressFormModule,\n    CardModule,\n    SpinnerModule,\n    I18nModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        CheckoutShippingAddress: {\n          component: ShippingAddressComponent,\n          guards: [CheckoutAuthGuard, CartNotEmptyGuard, CartValidationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [ShippingAddressComponent],\n  exports: [ShippingAddressComponent],\n})\nexport class ShippingAddressModule {}\n","import { Component, Input, OnDestroy } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthService, RoutingService } from '@spartacus/core';\nimport { CustomFormValidators } from '@spartacus/storefront';\nimport { UserRegisterFacade } from '@spartacus/user/profile/root';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'cx-guest-register-form',\n  templateUrl: './guest-register-form.component.html',\n})\nexport class GuestRegisterFormComponent implements OnDestroy {\n  @Input() guid: string;\n  @Input() email: string;\n\n  subscription: Subscription;\n  guestRegisterForm: FormGroup = this.fb.group(\n    {\n      password: [\n        '',\n        [Validators.required, CustomFormValidators.passwordValidator],\n      ],\n      passwordconf: ['', Validators.required],\n    },\n    {\n      validators: CustomFormValidators.passwordsMustMatch(\n        'password',\n        'passwordconf'\n      ),\n    }\n  );\n\n  constructor(\n    protected userRegisterFacade: UserRegisterFacade,\n    protected routingService: RoutingService,\n    protected authService: AuthService,\n    protected fb: FormBuilder\n  ) {}\n\n  submit() {\n    if (this.guestRegisterForm.valid) {\n      this.userRegisterFacade.registerGuest(\n        this.guid,\n        this.guestRegisterForm.value.password\n      );\n      if (!this.subscription) {\n        this.subscription = this.authService\n          .isUserLoggedIn()\n          .subscribe((isLoggedIn) => {\n            if (isLoggedIn) {\n              this.routingService.go({ cxRoute: 'home' });\n            }\n          });\n      }\n    } else {\n      this.guestRegisterForm.markAllAsTouched();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","<div class=\"register-guest\">\n  <div class=\"col-md-6 col-lg-4\">\n    <h3>{{ 'checkoutOrderConfirmation.createAccount' | cxTranslate }}</h3>\n    <p>\n      {{\n        'checkoutOrderConfirmation.createAccountForNext'\n          | cxTranslate: { email: email }\n      }}\n    </p>\n\n    <form (ngSubmit)=\"submit()\" [formGroup]=\"guestRegisterForm\">\n      <div class=\"form-group\">\n        <label>\n          <span class=\"label-content\">{{\n            'register.password.label' | cxTranslate\n          }}</span>\n          <input\n            aria-required=\"true\"\n            class=\"form-control\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"{{ 'register.password.placeholder' | cxTranslate }}\"\n            formControlName=\"password\"\n          />\n          <cx-form-errors\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n            [control]=\"guestRegisterForm.get('password')\"\n          ></cx-form-errors>\n        </label>\n      </div>\n\n      <div class=\"form-group\">\n        <label>\n          <span class=\"label-content\">{{\n            'register.confirmPassword.label' | cxTranslate\n          }}</span>\n          <input\n            aria-required=\"true\"\n            class=\"form-control\"\n            type=\"password\"\n            name=\"passwordconf\"\n            placeholder=\"{{\n              'register.confirmPassword.placeholder' | cxTranslate\n            }}\"\n            formControlName=\"passwordconf\"\n          />\n          <cx-form-errors\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n            [control]=\"guestRegisterForm.get('passwordconf')\"\n          ></cx-form-errors>\n        </label>\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-block btn-primary\">\n        {{ 'common.submit' | cxTranslate }}\n      </button>\n    </form>\n  </div>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport { Order, PromotionLocation } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-items',\n  templateUrl: './order-confirmation-items.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationItemsComponent implements OnInit, OnDestroy {\n  promotionLocation: PromotionLocation = PromotionLocation.Checkout;\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutFacade) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","<div class=\"cx-order-items container\" *ngIf=\"order$ | async as order\">\n  <h4 class=\"cx-order-items-header\">\n    {{ 'checkoutOrderConfirmation.orderItems' | cxTranslate }}\n  </h4>\n\n  <cx-promotions\n    [promotions]=\"order.appliedOrderPromotions || []\"\n  ></cx-promotions>\n\n  <cx-cart-item-list\n    [items]=\"order.entries\"\n    [readonly]=\"true\"\n    [promotionLocation]=\"promotionLocation\"\n  ></cx-cart-item-list>\n</div>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-overview',\n  templateUrl: './order-confirmation-overview.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationOverviewComponent implements OnInit, OnDestroy {\n  order$: Observable<any>;\n\n  constructor(protected checkoutService: CheckoutFacade) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <cx-order-overview [order]=\"order\"></cx-order-overview>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport { ORDER_TYPE } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n@Component({\n  selector: 'cx-order-confirmation-thank-you-message',\n  templateUrl: './order-confirmation-thank-you-message.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationThankYouMessageComponent\n  implements OnInit, OnDestroy\n{\n  order$: Observable<any>;\n  isReplenishmentOrderType$: Observable<boolean>;\n\n  isGuestCustomer = false;\n  orderGuid: string;\n\n  constructor(protected checkoutService: CheckoutFacade) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails().pipe(\n      tap((order) => {\n        this.isGuestCustomer =\n          'guestCustomer' in order ? order.guestCustomer ?? false : false;\n        this.orderGuid = order.guid as string;\n      })\n    );\n\n    this.isReplenishmentOrderType$ = this.checkoutService\n      .getCurrentOrderType()\n      .pipe(\n        map(\n          (orderType) => ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER === orderType\n        )\n      );\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"cx-page-header\">\n    <h1 class=\"cx-page-title\">\n      {{ 'checkoutOrderConfirmation.confirmationOfOrder' | cxTranslate }}\n      {{\n        (isReplenishmentOrderType$ | async)\n          ? order.replenishmentOrderCode\n          : order.code\n      }}\n    </h1>\n  </div>\n\n  <div class=\"cx-order-confirmation-message\">\n    <h2>{{ 'checkoutOrderConfirmation.thankYou' | cxTranslate }}</h2>\n    <p>\n      {{ 'checkoutOrderConfirmation.invoiceHasBeenSentByEmail' | cxTranslate }}\n    </p>\n  </div>\n\n  <div *ngIf=\"isGuestCustomer\">\n    <cx-guest-register-form\n      [guid]=\"orderGuid\"\n      [email]=\"order.paymentInfo.billingAddress.email\"\n    ></cx-guest-register-form>\n  </div>\n\n  <cx-add-to-home-screen-banner></cx-add-to-home-screen-banner>\n</ng-container>\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  OnDestroy,\n  OnInit,\n} from '@angular/core';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport { Order } from '@spartacus/core';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'cx-order-confirmation-totals',\n  templateUrl: './order-confirmation-totals.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class OrderConfirmationTotalsComponent implements OnInit, OnDestroy {\n  order$: Observable<Order>;\n\n  constructor(protected checkoutService: CheckoutFacade) {}\n\n  ngOnInit() {\n    this.order$ = this.checkoutService.getOrderDetails();\n  }\n\n  ngOnDestroy() {\n    this.checkoutService.clearCheckoutData();\n  }\n}\n","<div class=\"cx-order-summary container\" *ngIf=\"order$ | async as order\">\n  <div class=\"row justify-content-end\">\n    <div class=\"col-sm-12 col-md-6 col-lg-5 col-xl-4\">\n      <cx-order-summary [cart]=\"order\"></cx-order-summary>\n    </div>\n  </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, UrlTree } from '@angular/router';\nimport { CheckoutFacade } from '@spartacus/checkout/root';\nimport { SemanticPathService } from '@spartacus/core';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class OrderConfirmationGuard implements CanActivate {\n  constructor(\n    private checkoutService: CheckoutFacade,\n    private router: Router,\n    private semanticPathService: SemanticPathService\n  ) {}\n\n  canActivate(): Observable<boolean | UrlTree> {\n    return this.checkoutService.getOrderDetails().pipe(\n      map((orderDetails) => {\n        if (orderDetails && Object.keys(orderDetails).length !== 0) {\n          return true;\n        } else {\n          return this.router.parseUrl(this.semanticPathService.get('orders'));\n        }\n      })\n    );\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport {\n  CardModule,\n  CartSharedModule,\n  FormErrorsModule,\n  OrderOverviewModule,\n  PromotionsModule,\n  PwaModule,\n} from '@spartacus/storefront';\nimport { GuestRegisterFormComponent } from './components/guest-register-form/guest-register-form.component';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\n// eslint-disable-next-line\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\nconst orderConfirmationComponents = [\n  OrderConfirmationItemsComponent,\n  OrderConfirmationOverviewComponent,\n  OrderConfirmationThankYouMessageComponent,\n  OrderConfirmationTotalsComponent,\n  GuestRegisterFormComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n    OrderOverviewModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        OrderConfirmationThankMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        OrderConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n  declarations: [...orderConfirmationComponents],\n  exports: [...orderConfirmationComponents],\n})\nexport class OrderConfirmationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport {\n  CmsConfig,\n  FeaturesConfigModule,\n  I18nModule,\n  provideDefaultConfig,\n} from '@spartacus/core';\nimport {\n  CardModule,\n  CartSharedModule,\n  FormErrorsModule,\n  PromotionsModule,\n  PwaModule,\n} from '@spartacus/storefront';\nimport { OrderConfirmationItemsComponent } from './components/order-confirmation-items/order-confirmation-items.component';\nimport { OrderConfirmationOverviewComponent } from './components/order-confirmation-overview/order-confirmation-overview.component';\nimport { OrderConfirmationThankYouMessageComponent } from './components/order-confirmation-thank-you-message/order-confirmation-thank-you-message.component';\nimport { OrderConfirmationTotalsComponent } from './components/order-confirmation-totals/order-confirmation-totals.component';\nimport { OrderConfirmationGuard } from './guards/order-confirmation.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CartSharedModule,\n    CardModule,\n    PwaModule,\n    PromotionsModule,\n    I18nModule,\n    ReactiveFormsModule,\n    FeaturesConfigModule,\n    FormErrorsModule,\n  ],\n  providers: [\n    provideDefaultConfig(<CmsConfig>{\n      cmsComponents: {\n        ReplenishmentConfirmationMessageComponent: {\n          component: OrderConfirmationThankYouMessageComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        ReplenishmentConfirmationOverviewComponent: {\n          component: OrderConfirmationOverviewComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        ReplenishmentConfirmationItemsComponent: {\n          component: OrderConfirmationItemsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n        ReplenishmentConfirmationTotalsComponent: {\n          component: OrderConfirmationTotalsComponent,\n          guards: [OrderConfirmationGuard],\n        },\n      },\n    }),\n  ],\n})\nexport class ReplenishmentOrderConfirmationModule {}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { CheckoutLoginModule } from './components/checkout-login/checkout-login.module';\nimport { CheckoutOrchestratorModule } from './components/checkout-orchestrator/checkout-orchestrator.module';\nimport { CheckoutOrderSummaryModule } from './components/checkout-order-summary/checkout-order-summary.module';\n// eslint-disable-next-line\nimport { CheckoutProgressMobileBottomModule } from './components/checkout-progress/checkout-progress-mobile-bottom/checkout-progress-mobile-bottom.module';\n// eslint-disable-next-line\nimport { CheckoutProgressMobileTopModule } from './components/checkout-progress/checkout-progress-mobile-top/checkout-progress-mobile-top.module';\nimport { CheckoutProgressModule } from './components/checkout-progress/checkout-progress.module';\nimport { CostCenterModule } from './components/cost-center/cost-center.module';\nimport { DeliveryModeModule } from './components/delivery-mode/delivery-mode.module';\nimport { PaymentMethodModule } from './components/payment-method/payment-method.module';\nimport { PaymentTypeModule } from './components/payment-type/payment-type.module';\nimport { PlaceOrderModule } from './components/place-order/place-order.module';\nimport { ReviewSubmitModule } from './components/review-submit/review-submit.module';\nimport { ScheduleReplenishmentOrderModule } from './components/schedule-replenishment-order/schedule-replenishment-order.module';\nimport { ShippingAddressModule } from './components/shipping-address/shipping-address.module';\nimport { OrderConfirmationModule } from './order-confirmation/order-confirmation.module';\nimport { ReplenishmentOrderConfirmationModule } from './order-confirmation/replenishment-order-confirmation.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    CheckoutOrchestratorModule,\n    CheckoutOrderSummaryModule,\n    CheckoutProgressModule,\n    CheckoutProgressMobileTopModule,\n    CheckoutProgressMobileBottomModule,\n    PaymentTypeModule,\n    DeliveryModeModule,\n    PaymentMethodModule,\n    PlaceOrderModule,\n    ScheduleReplenishmentOrderModule,\n    ReviewSubmitModule,\n    ShippingAddressModule,\n    CostCenterModule,\n    OrderConfirmationModule,\n    ReplenishmentOrderConfirmationModule,\n    CheckoutLoginModule,\n  ],\n})\nexport class CheckoutComponentsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}