(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@angular/forms'), require('@spartacus/core'), require('@spartacus/storefront'), require('rxjs/operators'), require('@angular/router'), require('rxjs'), require('@spartacus/checkout/root'), require('@spartacus/user/account/root'), require('@ng-select/ng-select'), require('@spartacus/user/profile/root')) :
    typeof define === 'function' && define.amd ? define('@spartacus/checkout/components', ['exports', '@angular/common', '@angular/core', '@angular/forms', '@spartacus/core', '@spartacus/storefront', 'rxjs/operators', '@angular/router', 'rxjs', '@spartacus/checkout/root', '@spartacus/user/account/root', '@ng-select/ng-select', '@spartacus/user/profile/root'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.checkout = global.spartacus.checkout || {}, global.spartacus.checkout.components = {}), global.ng.common, global.ng.core, global.ng.forms, global.core, global.storefront, global.rxjs.operators, global.ng.router, global.rxjs, global.spartacus.checkout.root, global.userAccountRoot, global['ng-select'], global.userProfileRoot));
}(this, (function (exports, i3$2, i0, i3$1, i1, i4, operators, i3, rxjs, i1$1, i4$1, i5, i1$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i3__namespace$2 = /*#__PURE__*/_interopNamespace(i3$2);
    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i3__namespace$1 = /*#__PURE__*/_interopNamespace(i3$1);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i4__namespace$1 = /*#__PURE__*/_interopNamespace(i4$1);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);

    var NotCheckoutAuthGuard = /** @class */ (function () {
        function NotCheckoutAuthGuard(authService, activeCartService, semanticPathService, router) {
            this.authService = authService;
            this.activeCartService = activeCartService;
            this.semanticPathService = semanticPathService;
            this.router = router;
        }
        NotCheckoutAuthGuard.prototype.canActivate = function () {
            var _this = this;
            return this.authService.isUserLoggedIn().pipe(operators.map(function (isLoggedIn) {
                if (isLoggedIn) {
                    return _this.router.parseUrl(_this.semanticPathService.get('home'));
                }
                else if (_this.activeCartService.isGuestCart()) {
                    return _this.router.parseUrl(_this.semanticPathService.get('cart'));
                }
                return !isLoggedIn;
            }));
        };
        return NotCheckoutAuthGuard;
    }());
    NotCheckoutAuthGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotCheckoutAuthGuard, deps: [{ token: i1__namespace.AuthService }, { token: i1__namespace.ActiveCartService }, { token: i1__namespace.SemanticPathService }, { token: i3__namespace.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    NotCheckoutAuthGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotCheckoutAuthGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: NotCheckoutAuthGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.AuthService }, { type: i1__namespace.ActiveCartService }, { type: i1__namespace.SemanticPathService }, { type: i3__namespace.Router }]; } });

    var CheckoutLoginComponent = /** @class */ (function () {
        function CheckoutLoginComponent(formBuilder, authRedirectService, activeCartService) {
            this.formBuilder = formBuilder;
            this.authRedirectService = authRedirectService;
            this.activeCartService = activeCartService;
            this.checkoutLoginForm = this.formBuilder.group({
                email: ['', [i3$1.Validators.required, i4.CustomFormValidators.emailValidator]],
                emailConfirmation: ['', [i3$1.Validators.required]],
            }, {
                validators: i4.CustomFormValidators.emailsMustMatch('email', 'emailConfirmation'),
            });
        }
        CheckoutLoginComponent.prototype.onSubmit = function () {
            var _this = this;
            var _a;
            if (this.checkoutLoginForm.valid) {
                var email = (_a = this.checkoutLoginForm.get('email')) === null || _a === void 0 ? void 0 : _a.value;
                this.activeCartService.addEmail(email);
                if (!this.sub) {
                    this.sub = this.activeCartService.getAssignedUser().subscribe(function () {
                        if (_this.activeCartService.isGuestCart()) {
                            _this.authRedirectService.redirect();
                        }
                    });
                }
            }
            else {
                this.checkoutLoginForm.markAllAsTouched();
            }
        };
        CheckoutLoginComponent.prototype.ngOnDestroy = function () {
            if (this.sub) {
                this.sub.unsubscribe();
            }
        };
        return CheckoutLoginComponent;
    }());
    CheckoutLoginComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutLoginComponent, deps: [{ token: i3__namespace$1.FormBuilder }, { token: i1__namespace.AuthRedirectService }, { token: i1__namespace.ActiveCartService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CheckoutLoginComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CheckoutLoginComponent, selector: "cx-checkout-login", ngImport: i0__namespace, template: "<form (ngSubmit)=\"onSubmit()\" [formGroup]=\"checkoutLoginForm\">\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutLogin.emailAddress.label' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"email\"\n        name=\"email\"\n        class=\"form-control\"\n        formControlName=\"email\"\n        placeholder=\"{{\n          'checkoutLogin.emailAddress.placeholder' | cxTranslate\n        }}\"\n      />\n      <cx-form-errors\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        [control]=\"checkoutLoginForm.get('email')\"\n      ></cx-form-errors>\n    </label>\n  </div>\n\n  <div class=\"form-group\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutLogin.confirmEmail.label' | cxTranslate\n      }}</span>\n      <input\n        aria-required=\"true\"\n        type=\"email\"\n        name=\"emailConfirmation\"\n        class=\"form-control\"\n        formControlName=\"emailConfirmation\"\n        placeholder=\"{{\n          'checkoutLogin.confirmEmail.placeholder' | cxTranslate\n        }}\"\n      />\n      <cx-form-errors\n        aria-live=\"assertive\"\n        aria-atomic=\"true\"\n        [control]=\"checkoutLoginForm.get('emailConfirmation')\"\n      ></cx-form-errors>\n    </label>\n  </div>\n\n  <button type=\"submit\" class=\"btn btn-block btn-primary\">\n    {{ 'checkoutLogin.continue' | cxTranslate }}\n  </button>\n</form>\n", components: [{ type: i4__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i3__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutLoginComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-checkout-login',
                        templateUrl: './checkout-login.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$1.FormBuilder }, { type: i1__namespace.AuthRedirectService }, { type: i1__namespace.ActiveCartService }]; } });

    var CheckoutLoginModule = /** @class */ (function () {
        function CheckoutLoginModule() {
        }
        return CheckoutLoginModule;
    }());
    CheckoutLoginModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutLoginModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutLoginModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutLoginModule, declarations: [CheckoutLoginComponent], imports: [i3$2.CommonModule,
            i1.I18nModule,
            i3$1.FormsModule,
            i3$1.ReactiveFormsModule,
            i3$1.FormsModule,
            i3$1.ReactiveFormsModule,
            i4.FormErrorsModule], exports: [CheckoutLoginComponent] });
    CheckoutLoginModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutLoginModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    GuestCheckoutLoginComponent: {
                        component: CheckoutLoginComponent,
                        guards: [NotCheckoutAuthGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i1.I18nModule,
                i3$1.FormsModule,
                i3$1.ReactiveFormsModule,
                i3$1.FormsModule,
                i3$1.ReactiveFormsModule,
                i4.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutLoginModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i1.I18nModule,
                            i3$1.FormsModule,
                            i3$1.ReactiveFormsModule,
                            i3$1.FormsModule,
                            i3$1.ReactiveFormsModule,
                            i4.FormErrorsModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    GuestCheckoutLoginComponent: {
                                        component: CheckoutLoginComponent,
                                        guards: [NotCheckoutAuthGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [CheckoutLoginComponent],
                        exports: [CheckoutLoginComponent],
                    }]
            }] });

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CartNotEmptyGuard = /** @class */ (function () {
        function CartNotEmptyGuard(activeCartService, semanticPathService, router) {
            this.activeCartService = activeCartService;
            this.semanticPathService = semanticPathService;
            this.router = router;
        }
        CartNotEmptyGuard.prototype.canActivate = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.activeCartService.isStable(),
            ]).pipe(operators.filter(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], loaded = _b[1];
                return loaded;
            }), operators.map(function (_a) {
                var _b = __read(_a, 1), cart = _b[0];
                if (_this.isEmpty(cart)) {
                    return _this.router.parseUrl(_this.semanticPathService.get('home'));
                }
                return true;
            }));
        };
        CartNotEmptyGuard.prototype.isEmpty = function (cart) {
            return cart && !cart.totalItems;
        };
        return CartNotEmptyGuard;
    }());
    CartNotEmptyGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CartNotEmptyGuard, deps: [{ token: i1__namespace.ActiveCartService }, { token: i1__namespace.SemanticPathService }, { token: i3__namespace.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CartNotEmptyGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CartNotEmptyGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CartNotEmptyGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveCartService }, { type: i1__namespace.SemanticPathService }, { type: i3__namespace.Router }]; } });

    var CheckoutConfigService = /** @class */ (function () {
        function CheckoutConfigService(checkoutConfig) {
            var _a, _b, _c, _d, _e;
            this.checkoutConfig = checkoutConfig;
            this.express = (_b = (_a = this.checkoutConfig.checkout) === null || _a === void 0 ? void 0 : _a.express) !== null && _b !== void 0 ? _b : false;
            this.guest = (_d = (_c = this.checkoutConfig.checkout) === null || _c === void 0 ? void 0 : _c.guest) !== null && _d !== void 0 ? _d : false;
            this.defaultDeliveryMode = ((_e = this.checkoutConfig.checkout) === null || _e === void 0 ? void 0 : _e.defaultDeliveryMode) || [];
        }
        CheckoutConfigService.prototype.compareDeliveryCost = function (deliveryMode1, deliveryMode2) {
            var _a, _b;
            if (((_a = deliveryMode1.deliveryCost) === null || _a === void 0 ? void 0 : _a.value) &&
                ((_b = deliveryMode2.deliveryCost) === null || _b === void 0 ? void 0 : _b.value)) {
                if (deliveryMode1.deliveryCost.value > deliveryMode2.deliveryCost.value) {
                    return 1;
                }
                else if (deliveryMode1.deliveryCost.value < deliveryMode2.deliveryCost.value) {
                    return -1;
                }
            }
            return 0;
        };
        CheckoutConfigService.prototype.findMatchingDeliveryMode = function (deliveryModes, index) {
            var _this = this;
            if (index === void 0) { index = 0; }
            var _a;
            switch (this.defaultDeliveryMode[index]) {
                case i1$1.DeliveryModePreferences.FREE:
                    if (((_a = deliveryModes[0].deliveryCost) === null || _a === void 0 ? void 0 : _a.value) === 0) {
                        return deliveryModes[0].code;
                    }
                    break;
                case i1$1.DeliveryModePreferences.LEAST_EXPENSIVE:
                    var leastExpensiveFound = deliveryModes.find(function (deliveryMode) { var _a; return ((_a = deliveryMode.deliveryCost) === null || _a === void 0 ? void 0 : _a.value) !== 0; });
                    if (leastExpensiveFound) {
                        return leastExpensiveFound.code;
                    }
                    break;
                case i1$1.DeliveryModePreferences.MOST_EXPENSIVE:
                    return deliveryModes[deliveryModes.length - 1].code;
                default:
                    var codeFound = deliveryModes.find(function (deliveryMode) { return deliveryMode.code === _this.defaultDeliveryMode[index]; });
                    if (codeFound) {
                        return codeFound.code;
                    }
            }
            var lastMode = this.defaultDeliveryMode.length - 1 <= index;
            return lastMode
                ? deliveryModes[0].code
                : this.findMatchingDeliveryMode(deliveryModes, index + 1);
        };
        CheckoutConfigService.prototype.getPreferredDeliveryMode = function (deliveryModes) {
            deliveryModes.sort(this.compareDeliveryCost);
            return this.findMatchingDeliveryMode(deliveryModes);
        };
        CheckoutConfigService.prototype.isExpressCheckout = function () {
            return this.express;
        };
        CheckoutConfigService.prototype.isGuestCheckout = function () {
            return this.guest;
        };
        return CheckoutConfigService;
    }());
    CheckoutConfigService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutConfigService, deps: [{ token: i1__namespace$1.CheckoutConfig }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutConfigService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutConfigService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutConfigService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutConfig }]; } });

    var CheckoutAuthGuard = /** @class */ (function () {
        function CheckoutAuthGuard(authService, authRedirectService, checkoutConfigService, activeCartService, semanticPathService, router, userService, globalMessageService) {
            this.authService = authService;
            this.authRedirectService = authRedirectService;
            this.checkoutConfigService = checkoutConfigService;
            this.activeCartService = activeCartService;
            this.semanticPathService = semanticPathService;
            this.router = router;
            this.userService = userService;
            this.globalMessageService = globalMessageService;
        }
        CheckoutAuthGuard.prototype.canActivate = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.authService.isUserLoggedIn(),
                this.activeCartService.getAssignedUser(),
                this.userService.get(),
                this.activeCartService.isStable(),
            ]).pipe(operators.filter(function (_a) {
                var _b = __read(_a, 4), _user = _b[2], isStable = _b[3];
                return isStable;
            }), 
            // if the user is authenticated and we have their data, OR if the user is anonymous
            operators.filter(function (_a) {
                var _b = __read(_a, 3), isLoggedIn = _b[0], user = _b[2];
                return (!!user && isLoggedIn) || !isLoggedIn;
            }), operators.map(function (_a) {
                var _b = __read(_a, 3), isLoggedIn = _b[0], cartUser = _b[1], user = _b[2];
                if (!isLoggedIn) {
                    return _this.handleAnonymousUser(cartUser);
                }
                else if (user && 'roles' in user) {
                    return _this.handleUserRole(user);
                }
                return isLoggedIn;
            }));
        };
        CheckoutAuthGuard.prototype.handleAnonymousUser = function (cartUser) {
            if (this.activeCartService.isGuestCart()) {
                return !!cartUser;
            }
            this.authRedirectService.saveCurrentNavigationUrl();
            if (this.checkoutConfigService.isGuestCheckout()) {
                return this.router.createUrlTree([this.semanticPathService.get('login')], { queryParams: { forced: true } });
            }
            else {
                return this.router.parseUrl(this.semanticPathService.get('login'));
            }
        };
        CheckoutAuthGuard.prototype.handleUserRole = function (user) {
            var roles = user.roles;
            if (roles === null || roles === void 0 ? void 0 : roles.includes(i1.B2BUserRole.CUSTOMER)) {
                return true;
            }
            this.globalMessageService.add({ key: 'checkout.invalid.accountType' }, i1.GlobalMessageType.MSG_TYPE_WARNING);
            return this.router.parseUrl(this.semanticPathService.get('home'));
        };
        return CheckoutAuthGuard;
    }());
    CheckoutAuthGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutAuthGuard, deps: [{ token: i1__namespace.AuthService }, { token: i1__namespace.AuthRedirectService }, { token: CheckoutConfigService }, { token: i1__namespace.ActiveCartService }, { token: i1__namespace.SemanticPathService }, { token: i3__namespace.Router }, { token: i4__namespace$1.UserAccountFacade }, { token: i1__namespace.GlobalMessageService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutAuthGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutAuthGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutAuthGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.AuthService }, { type: i1__namespace.AuthRedirectService }, { type: CheckoutConfigService }, { type: i1__namespace.ActiveCartService }, { type: i1__namespace.SemanticPathService }, { type: i3__namespace.Router }, { type: i4__namespace$1.UserAccountFacade }, { type: i1__namespace.GlobalMessageService }]; } });

    var CheckoutDetailsService = /** @class */ (function () {
        function CheckoutDetailsService(checkoutService, checkoutDeliveryService, checkoutPaymentService, activeCartService) {
            var _this = this;
            this.checkoutService = checkoutService;
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.checkoutPaymentService = checkoutPaymentService;
            this.activeCartService = activeCartService;
            this.cartId$ = rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.activeCartService.isStable(),
            ]).pipe(operators.filter(function (_b) {
                var _c = __read(_b, 2), isStable = _c[1];
                return isStable;
            }), operators.map(function (_b) {
                var _c = __read(_b, 1), cartData = _c[0];
                var _a;
                var cartUser = cartData.user;
                if (cartUser &&
                    (cartUser.uid === i1.OCC_USER_ID_ANONYMOUS ||
                        cartUser.uid === i1.OCC_USER_ID_GUEST ||
                        !!((_a = cartUser.uid) === null || _a === void 0 ? void 0 : _a.split('|').slice(1).join('|').match(i1.EMAIL_PATTERN)))) {
                    return cartData.guid;
                }
                return cartData.code;
            }), operators.filter(function (cartId) { return !!cartId; }));
            this.getCheckoutDetailsLoaded$ = this.cartId$.pipe(operators.tap(function (cartId) { return _this.checkoutService.loadCheckoutDetails(cartId); }), operators.shareReplay(1), operators.switchMap(function () { return _this.checkoutService.getCheckoutDetailsLoaded(); }), operators.skipWhile(function (loaded) { return !loaded; }));
        }
        CheckoutDetailsService.prototype.getDeliveryAddress = function () {
            var _this = this;
            return this.getCheckoutDetailsLoaded$.pipe(operators.switchMap(function () { return _this.checkoutDeliveryService.getDeliveryAddress(); }));
        };
        CheckoutDetailsService.prototype.getSelectedDeliveryModeCode = function () {
            var _this = this;
            return this.getCheckoutDetailsLoaded$.pipe(operators.switchMap(function () { return _this.checkoutDeliveryService.getSelectedDeliveryModeCode(); }));
        };
        CheckoutDetailsService.prototype.getPaymentDetails = function () {
            var _this = this;
            return this.getCheckoutDetailsLoaded$.pipe(operators.switchMap(function () { return _this.checkoutPaymentService.getPaymentDetails(); }));
        };
        return CheckoutDetailsService;
    }());
    CheckoutDetailsService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDetailsService, deps: [{ token: i1__namespace$1.CheckoutFacade }, { token: i1__namespace$1.CheckoutDeliveryFacade }, { token: i1__namespace$1.CheckoutPaymentFacade }, { token: i1__namespace.ActiveCartService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutDetailsService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDetailsService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDetailsService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }, { type: i1__namespace$1.CheckoutDeliveryFacade }, { type: i1__namespace$1.CheckoutPaymentFacade }, { type: i1__namespace.ActiveCartService }]; } });

    var ExpressCheckoutService = /** @class */ (function () {
        function ExpressCheckoutService(userAddressService, userPaymentService, checkoutDeliveryService, checkoutPaymentService, checkoutDetailsService, checkoutConfigService, clearCheckoutService) {
            this.userAddressService = userAddressService;
            this.userPaymentService = userPaymentService;
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.checkoutPaymentService = checkoutPaymentService;
            this.checkoutDetailsService = checkoutDetailsService;
            this.checkoutConfigService = checkoutConfigService;
            this.clearCheckoutService = clearCheckoutService;
            this.setShippingAddress();
            this.setDeliveryMode();
            this.setPaymentMethod();
        }
        ExpressCheckoutService.prototype.setShippingAddress = function () {
            var _this = this;
            this.shippingAddressSet$ = rxjs.combineLatest([
                this.userAddressService.getAddresses(),
                this.userAddressService.getAddressesLoadedSuccess(),
                this.checkoutDeliveryService.getSetDeliveryAddressProcess(),
            ]).pipe(operators.debounceTime(0), operators.tap(function (_b) {
                var _c = __read(_b, 2), addressesLoadedSuccess = _c[1];
                if (!addressesLoadedSuccess) {
                    _this.userAddressService.loadAddresses();
                }
            }), operators.filter(function (_b) {
                var _c = __read(_b, 2), addressesLoadedSuccess = _c[1];
                return addressesLoadedSuccess;
            }), operators.switchMap(function (_b) {
                var _c = __read(_b, 3), addresses = _c[0], setDeliveryAddressProcess = _c[2];
                var defaultAddress = addresses.find(function (address) { return address.defaultAddress; }) || addresses[0];
                if (defaultAddress && Object.keys(defaultAddress).length) {
                    if (!(setDeliveryAddressProcess.success ||
                        setDeliveryAddressProcess.error ||
                        setDeliveryAddressProcess.loading)) {
                        _this.checkoutDeliveryService.setDeliveryAddress(defaultAddress);
                    }
                    return rxjs.of(setDeliveryAddressProcess).pipe(operators.filter(function (setDeliveryAddressProcessState) {
                        var _a;
                        return ((_a = ((setDeliveryAddressProcessState.success ||
                            setDeliveryAddressProcessState.error) &&
                            !setDeliveryAddressProcessState.loading)) !== null && _a !== void 0 ? _a : false);
                    }), operators.switchMap(function (setDeliveryAddressProcessState) {
                        if (setDeliveryAddressProcessState.success) {
                            return _this.checkoutDetailsService.getDeliveryAddress();
                        }
                        return rxjs.of(false);
                    }), operators.map(function (data) { return Boolean(data && Object.keys(data).length); }));
                }
                return rxjs.of(false);
            }), operators.distinctUntilChanged());
        };
        ExpressCheckoutService.prototype.setPaymentMethod = function () {
            var _this = this;
            this.paymentMethodSet$ = rxjs.combineLatest([
                this.deliveryModeSet$,
                this.userPaymentService.getPaymentMethods(),
                this.userPaymentService.getPaymentMethodsLoadedSuccess(),
                this.checkoutPaymentService.getSetPaymentDetailsResultProcess(),
            ]).pipe(operators.debounceTime(0), operators.tap(function (_b) {
                var _c = __read(_b, 3), paymentMethodsLoadedSuccess = _c[2];
                if (!paymentMethodsLoadedSuccess) {
                    _this.userPaymentService.loadPaymentMethods();
                }
            }), operators.filter(function (_b) {
                var _c = __read(_b, 3), success = _c[2];
                return success;
            }), operators.switchMap(function (_b) {
                var _c = __read(_b, 4), deliveryModeSet = _c[0], payments = _c[1], setPaymentDetailsProcess = _c[3];
                if (!deliveryModeSet) {
                    return rxjs.of(false);
                }
                var defaultPayment = payments.find(function (address) { return address.defaultPayment; }) || payments[0];
                if (defaultPayment && Object.keys(defaultPayment).length) {
                    if (!(setPaymentDetailsProcess.success ||
                        setPaymentDetailsProcess.error ||
                        setPaymentDetailsProcess.loading)) {
                        _this.checkoutPaymentService.setPaymentDetails(defaultPayment);
                    }
                    return rxjs.of(setPaymentDetailsProcess).pipe(operators.filter(function (setPaymentDetailsProcessState) {
                        var _a;
                        return ((_a = ((setPaymentDetailsProcessState.success ||
                            setPaymentDetailsProcessState.error) &&
                            !setPaymentDetailsProcessState.loading)) !== null && _a !== void 0 ? _a : false);
                    }), operators.switchMap(function (setPaymentDetailsProcessState) {
                        if (setPaymentDetailsProcessState.success) {
                            return _this.checkoutDetailsService.getPaymentDetails();
                        }
                        return rxjs.of(false);
                    }), operators.map(function (data) { return Boolean(data && Object.keys(data).length); }));
                }
                return rxjs.of(false);
            }));
        };
        ExpressCheckoutService.prototype.setDeliveryMode = function () {
            var _this = this;
            this.deliveryModeSet$ = rxjs.combineLatest([
                this.shippingAddressSet$,
                this.checkoutDeliveryService.getSupportedDeliveryModes(),
                this.checkoutDeliveryService.getSetDeliveryModeProcess(),
                this.checkoutDeliveryService.getLoadSupportedDeliveryModeProcess(),
            ]).pipe(operators.debounceTime(0), operators.switchMap(function (_b) {
                var _c = __read(_b, 4), addressSet = _c[0], supportedDeliveryModes = _c[1], setDeliveryModeStatusFlag = _c[2], loadSupportedDeliveryModeStatus = _c[3];
                if (addressSet) {
                    return rxjs.of([
                        supportedDeliveryModes,
                        setDeliveryModeStatusFlag,
                        loadSupportedDeliveryModeStatus,
                    ]).pipe(operators.filter(function (_b) {
                        var _c = __read(_b, 3), supportedDeliveryModeStatus = _c[2];
                        var _a;
                        return (_a = supportedDeliveryModeStatus.success) !== null && _a !== void 0 ? _a : false;
                    }), operators.switchMap(function (_b) {
                        var _c = __read(_b, 3), deliveryModes = _c[0], setDeliveryModeStatus = _c[1];
                        if (Boolean(deliveryModes.length)) {
                            var preferredDeliveryMode = _this.checkoutConfigService.getPreferredDeliveryMode(deliveryModes);
                            return rxjs.of([
                                preferredDeliveryMode,
                                setDeliveryModeStatus,
                            ]).pipe(operators.tap(function (_b) {
                                var _c = __read(_b, 2), deliveryMode = _c[0], deliveryModeLoadingStatus = _c[1];
                                if (deliveryMode &&
                                    !(deliveryModeLoadingStatus.success ||
                                        deliveryModeLoadingStatus.error ||
                                        deliveryModeLoadingStatus.loading)) {
                                    _this.checkoutDeliveryService.setDeliveryMode(deliveryMode);
                                }
                            }), operators.filter(function (_b) {
                                var _c = __read(_b, 2), deliveryModeLoadingStatus = _c[1];
                                var _a;
                                return ((_a = ((deliveryModeLoadingStatus.success ||
                                    deliveryModeLoadingStatus.error) &&
                                    !deliveryModeLoadingStatus.loading)) !== null && _a !== void 0 ? _a : false);
                            }), operators.switchMap(function (_b) {
                                var _c = __read(_b, 2), deliveryModeLoadingStatus = _c[1];
                                if (deliveryModeLoadingStatus.success) {
                                    return _this.checkoutDetailsService.getSelectedDeliveryModeCode();
                                }
                                return rxjs.of(false);
                            }), operators.map(function (data) { return Boolean(data); }));
                        }
                        return rxjs.of(false);
                    }));
                }
                else {
                    return rxjs.of(false);
                }
            }), operators.distinctUntilChanged());
        };
        ExpressCheckoutService.prototype.trySetDefaultCheckoutDetails = function () {
            this.clearCheckoutService.resetCheckoutProcesses();
            return this.paymentMethodSet$.pipe(operators.map(function (paymentMethodSet) { return Boolean(paymentMethodSet); }));
        };
        return ExpressCheckoutService;
    }());
    ExpressCheckoutService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ExpressCheckoutService, deps: [{ token: i1__namespace.UserAddressService }, { token: i1__namespace.UserPaymentService }, { token: i1__namespace$1.CheckoutDeliveryFacade }, { token: i1__namespace$1.CheckoutPaymentFacade }, { token: CheckoutDetailsService }, { token: CheckoutConfigService }, { token: i1__namespace$1.ClearCheckoutFacade }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ExpressCheckoutService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ExpressCheckoutService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ExpressCheckoutService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.UserAddressService }, { type: i1__namespace.UserPaymentService }, { type: i1__namespace$1.CheckoutDeliveryFacade }, { type: i1__namespace$1.CheckoutPaymentFacade }, { type: CheckoutDetailsService }, { type: CheckoutConfigService }, { type: i1__namespace$1.ClearCheckoutFacade }]; } });

    var CheckoutStepService = /** @class */ (function () {
        function CheckoutStepService(routingService, checkoutConfig, routingConfigService) {
            var _this = this;
            this.routingService = routingService;
            this.checkoutConfig = checkoutConfig;
            this.routingConfigService = routingConfigService;
            this.steps$ = new rxjs.BehaviorSubject([]);
            this.activeStepIndex$ = this.routingService
                .getRouterState()
                .pipe(operators.switchMap(function (router) {
                var activeStepUrl = router.state.context.id;
                return _this.steps$.pipe(operators.map(function (steps) {
                    var activeIndex = 0;
                    steps.forEach(function (step, index) {
                        var _a;
                        var routeUrl = "/" + ((_a = _this.routingConfigService.getRouteConfig(step.routeName)
                            .paths) === null || _a === void 0 ? void 0 : _a[0]);
                        if (routeUrl === activeStepUrl) {
                            activeIndex = index;
                        }
                    });
                    return activeIndex;
                }));
            }));
            this.resetSteps();
        }
        CheckoutStepService.prototype.back = function (activatedRoute) {
            var previousUrl = this.getPreviousCheckoutStepUrl(activatedRoute);
            this.routingService.go(previousUrl === null ? 'cart' : previousUrl);
        };
        CheckoutStepService.prototype.next = function (activatedRoute) {
            var nextUrl = this.getNextCheckoutStepUrl(activatedRoute);
            this.routingService.go(nextUrl);
        };
        CheckoutStepService.prototype.goToStepWithIndex = function (stepIndex) {
            this.routingService.go(this.getStepUrlFromStepRoute(this.allSteps[stepIndex].routeName));
        };
        CheckoutStepService.prototype.getBackBntText = function (activatedRoute) {
            if (this.getPreviousCheckoutStepUrl(activatedRoute) === null) {
                return 'checkout.backToCart';
            }
            return 'common.back';
        };
        CheckoutStepService.prototype.resetSteps = function () {
            var _a, _b;
            this.allSteps = ((_b = (_a = this.checkoutConfig.checkout) === null || _a === void 0 ? void 0 : _a.steps) !== null && _b !== void 0 ? _b : [])
                .filter(function (step) { return !step.disabled; })
                .map(function (x) { return Object.assign({}, x); });
            this.steps$.next(this.allSteps);
        };
        CheckoutStepService.prototype.disableEnableStep = function (currentStepType, disabled) {
            var currentStep = this.allSteps.find(function (step) { return step.type.includes(currentStepType); });
            if (currentStep && currentStep.disabled !== disabled) {
                currentStep.disabled = disabled;
                this.steps$.next(this.allSteps.filter(function (step) { return !step.disabled; }));
            }
        };
        CheckoutStepService.prototype.getCheckoutStep = function (currentStepType) {
            var index = this.getCheckoutStepIndex('type', currentStepType);
            if (index !== null) {
                return this.allSteps[index];
            }
        };
        CheckoutStepService.prototype.getCheckoutStepRoute = function (currentStepType) {
            var _a;
            return (_a = this.getCheckoutStep(currentStepType)) === null || _a === void 0 ? void 0 : _a.routeName;
        };
        CheckoutStepService.prototype.getFirstCheckoutStepRoute = function () {
            return this.allSteps[0].routeName;
        };
        CheckoutStepService.prototype.getNextCheckoutStepUrl = function (activatedRoute) {
            var stepIndex = this.getCurrentStepIndex(activatedRoute);
            if (stepIndex !== null && stepIndex >= 0) {
                var i = 1;
                while (this.allSteps[stepIndex + i] &&
                    this.allSteps[stepIndex + i].disabled) {
                    i++;
                }
                var nextStep = this.allSteps[stepIndex + i];
                if (nextStep) {
                    return this.getStepUrlFromStepRoute(nextStep.routeName);
                }
            }
            return null;
        };
        CheckoutStepService.prototype.getPreviousCheckoutStepUrl = function (activatedRoute) {
            var stepIndex = this.getCurrentStepIndex(activatedRoute);
            if (stepIndex !== null && stepIndex >= 0) {
                var i = 1;
                while (this.allSteps[stepIndex - i] &&
                    this.allSteps[stepIndex - i].disabled) {
                    i++;
                }
                var previousStep = this.allSteps[stepIndex - i];
                if (previousStep) {
                    return this.getStepUrlFromStepRoute(previousStep.routeName);
                }
            }
            return null;
        };
        CheckoutStepService.prototype.getCurrentStepIndex = function (activatedRoute) {
            var _this = this;
            var currentStepUrl = this.getStepUrlFromActivatedRoute(activatedRoute);
            var stepIndex = this.allSteps.findIndex(function (step) { return currentStepUrl === "/" + _this.getStepUrlFromStepRoute(step.routeName); });
            return stepIndex === -1 ? null : stepIndex;
        };
        CheckoutStepService.prototype.getStepUrlFromActivatedRoute = function (activatedRoute) {
            return activatedRoute &&
                activatedRoute.snapshot &&
                activatedRoute.snapshot.url
                ? "/" + activatedRoute.snapshot.url.join('/')
                : null;
        };
        CheckoutStepService.prototype.getStepUrlFromStepRoute = function (stepRoute) {
            var _a, _b;
            return ((_b = (_a = this.routingConfigService.getRouteConfig(stepRoute).paths) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null);
        };
        CheckoutStepService.prototype.getCheckoutStepIndex = function (key, value) {
            return key && value
                ? this.allSteps.findIndex(function (step) {
                    var propertyVal = step[key];
                    return propertyVal instanceof Array
                        ? propertyVal.includes(value)
                        : propertyVal === value;
                })
                : null;
        };
        return CheckoutStepService;
    }());
    CheckoutStepService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStepService, deps: [{ token: i1__namespace.RoutingService }, { token: i1__namespace$1.CheckoutConfig }, { token: i1__namespace.RoutingConfigService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutStepService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStepService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStepService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.RoutingService }, { type: i1__namespace$1.CheckoutConfig }, { type: i1__namespace.RoutingConfigService }]; } });

    var CheckoutGuard = /** @class */ (function () {
        function CheckoutGuard(router, routingConfigService, checkoutConfigService, expressCheckoutService, activeCartService, checkoutStepService) {
            var _a;
            this.router = router;
            this.routingConfigService = routingConfigService;
            this.checkoutConfigService = checkoutConfigService;
            this.expressCheckoutService = expressCheckoutService;
            this.activeCartService = activeCartService;
            this.checkoutStepService = checkoutStepService;
            this.firstStep$ = rxjs.of(this.router.parseUrl((_a = this.routingConfigService.getRouteConfig(this.checkoutStepService.getFirstCheckoutStepRoute()).paths) === null || _a === void 0 ? void 0 : _a[0]));
        }
        CheckoutGuard.prototype.canActivate = function () {
            var _this = this;
            if (this.checkoutConfigService.isExpressCheckout() &&
                !this.activeCartService.isGuestCart()) {
                return this.expressCheckoutService.trySetDefaultCheckoutDetails().pipe(operators.switchMap(function (expressCheckoutPossible) {
                    var _a;
                    var reviewOrderRoute = _this.checkoutStepService.getCheckoutStepRoute(i1$1.CheckoutStepType.REVIEW_ORDER);
                    return expressCheckoutPossible && reviewOrderRoute
                        ? rxjs.of(_this.router.parseUrl((_a = _this.routingConfigService.getRouteConfig(reviewOrderRoute)
                            .paths) === null || _a === void 0 ? void 0 : _a[0]))
                        : _this.firstStep$;
                }));
            }
            return this.firstStep$;
        };
        return CheckoutGuard;
    }());
    CheckoutGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutGuard, deps: [{ token: i3__namespace.Router }, { token: i1__namespace.RoutingConfigService }, { token: CheckoutConfigService }, { token: ExpressCheckoutService }, { token: i1__namespace.ActiveCartService }, { token: CheckoutStepService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace.Router }, { type: i1__namespace.RoutingConfigService }, { type: CheckoutConfigService }, { type: ExpressCheckoutService }, { type: i1__namespace.ActiveCartService }, { type: CheckoutStepService }]; } });

    var CheckoutOrchestratorComponent = /** @class */ (function () {
        function CheckoutOrchestratorComponent() {
        }
        return CheckoutOrchestratorComponent;
    }());
    CheckoutOrchestratorComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrchestratorComponent, deps: [], target: i0__namespace.ɵɵFactoryTarget.Component });
    CheckoutOrchestratorComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CheckoutOrchestratorComponent, selector: "cx-checkout-orchestrator", ngImport: i0__namespace, template: '', isInline: true, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrchestratorComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-checkout-orchestrator',
                        template: '',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return []; } });

    var CheckoutOrchestratorModule = /** @class */ (function () {
        function CheckoutOrchestratorModule() {
        }
        return CheckoutOrchestratorModule;
    }());
    CheckoutOrchestratorModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrchestratorModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutOrchestratorModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrchestratorModule, declarations: [CheckoutOrchestratorComponent], imports: [i3$2.CommonModule], exports: [CheckoutOrchestratorComponent] });
    CheckoutOrchestratorModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrchestratorModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutOrchestrator: {
                        component: CheckoutOrchestratorComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrchestratorModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutOrchestrator: {
                                        component: CheckoutOrchestratorComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [CheckoutOrchestratorComponent],
                        exports: [CheckoutOrchestratorComponent],
                    }]
            }] });

    var CheckoutOrderSummaryComponent = /** @class */ (function () {
        function CheckoutOrderSummaryComponent(activeCartService) {
            this.activeCartService = activeCartService;
            this.cart$ = this.activeCartService.getActive();
        }
        return CheckoutOrderSummaryComponent;
    }());
    CheckoutOrderSummaryComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrderSummaryComponent, deps: [{ token: i1__namespace.ActiveCartService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CheckoutOrderSummaryComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CheckoutOrderSummaryComponent, selector: "cx-checkout-order-summary", ngImport: i0__namespace, template: "<cx-order-summary [cart]=\"cart$ | async\"></cx-order-summary>\n", components: [{ type: i4__namespace.OrderSummaryComponent, selector: "cx-order-summary", inputs: ["cart"] }], pipes: { "async": i3__namespace$2.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrderSummaryComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-checkout-order-summary',
                        templateUrl: './checkout-order-summary.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveCartService }]; } });

    var CheckoutOrderSummaryModule = /** @class */ (function () {
        function CheckoutOrderSummaryModule() {
        }
        return CheckoutOrderSummaryModule;
    }());
    CheckoutOrderSummaryModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrderSummaryModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutOrderSummaryModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrderSummaryModule, declarations: [CheckoutOrderSummaryComponent], imports: [i3$2.CommonModule, i4.CartSharedModule], exports: [CheckoutOrderSummaryComponent] });
    CheckoutOrderSummaryModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrderSummaryModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutOrderSummary: {
                        component: CheckoutOrderSummaryComponent,
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule, i4.CartSharedModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutOrderSummaryModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule, i4.CartSharedModule],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutOrderSummary: {
                                        component: CheckoutOrderSummaryComponent,
                                    },
                                },
                            }),
                        ],
                        declarations: [CheckoutOrderSummaryComponent],
                        exports: [CheckoutOrderSummaryComponent],
                    }]
            }] });

    var CheckoutStepsSetGuard = /** @class */ (function () {
        function CheckoutStepsSetGuard(paymentTypeService, checkoutStepService, checkoutDetailsService, routingConfigService, checkoutCostCenterService, router) {
            this.paymentTypeService = paymentTypeService;
            this.checkoutStepService = checkoutStepService;
            this.checkoutDetailsService = checkoutDetailsService;
            this.routingConfigService = routingConfigService;
            this.checkoutCostCenterService = checkoutCostCenterService;
            this.router = router;
        }
        CheckoutStepsSetGuard.prototype.canActivate = function (route, _) {
            var _this = this;
            var currentIndex = -1;
            var currentRouteUrl = '/' + route.url.join('/');
            // check whether the previous step is set
            return rxjs.combineLatest([
                this.checkoutStepService.steps$,
                this.paymentTypeService.isAccountPayment(),
            ]).pipe(operators.tap(function (_b) {
                var _c = __read(_b, 2), isAccount = _c[1];
                _this.checkoutStepService.disableEnableStep(i1$1.CheckoutStepType.PAYMENT_DETAILS, isAccount);
            }), operators.take(1), operators.switchMap(function (_b) {
                var _c = __read(_b, 2), steps = _c[0], isAccount = _c[1];
                currentIndex = steps.findIndex(function (step) {
                    var _a;
                    var stepRouteUrl = "/" + ((_a = _this.routingConfigService.getRouteConfig(step.routeName).paths) === null || _a === void 0 ? void 0 : _a[0]);
                    return stepRouteUrl === currentRouteUrl;
                });
                // get current step
                var currentStep;
                if (currentIndex >= 0) {
                    currentStep = steps[currentIndex];
                }
                if (Boolean(currentStep)) {
                    return _this.isStepSet(steps[currentIndex - 1], isAccount);
                }
                else {
                    if (i0.isDevMode()) {
                        console.warn("Missing step with route '" + currentRouteUrl + "' in checkout configuration or this step is disabled.");
                    }
                    return rxjs.of(_this.getUrl('checkout'));
                }
            }));
        };
        CheckoutStepsSetGuard.prototype.isStepSet = function (step, isAccountPayment) {
            if (step && !step.disabled) {
                switch (step.type[0]) {
                    case i1$1.CheckoutStepType.PAYMENT_TYPE: {
                        return this.isPaymentTypeSet(step);
                    }
                    case i1$1.CheckoutStepType.SHIPPING_ADDRESS: {
                        return this.isShippingAddressAndCostCenterSet(step, isAccountPayment);
                    }
                    case i1$1.CheckoutStepType.DELIVERY_MODE: {
                        return this.isDeliveryModeSet(step);
                    }
                    case i1$1.CheckoutStepType.PAYMENT_DETAILS: {
                        return this.isPaymentDetailsSet(step);
                    }
                    case i1$1.CheckoutStepType.REVIEW_ORDER: {
                        break;
                    }
                }
            }
            return rxjs.of(true);
        };
        CheckoutStepsSetGuard.prototype.isPaymentTypeSet = function (step) {
            var _this = this;
            return this.paymentTypeService.getSelectedPaymentType().pipe(operators.map(function (paymentType) {
                if (Boolean(paymentType)) {
                    return true;
                }
                else {
                    return _this.getUrl(step.routeName);
                }
            }));
        };
        CheckoutStepsSetGuard.prototype.isShippingAddressAndCostCenterSet = function (step, isAccountPayment) {
            var _this = this;
            return rxjs.combineLatest([
                this.checkoutDetailsService.getDeliveryAddress(),
                this.checkoutCostCenterService.getCostCenter(),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), deliveryAddress = _c[0], costCenter = _c[1];
                if (isAccountPayment) {
                    if (deliveryAddress &&
                        Object.keys(deliveryAddress).length &&
                        Boolean(costCenter)) {
                        return true;
                    }
                    else {
                        return _this.getUrl(step.routeName);
                    }
                }
                else {
                    if (deliveryAddress &&
                        Object.keys(deliveryAddress).length &&
                        costCenter === undefined) {
                        return true;
                    }
                    else {
                        return _this.getUrl(step.routeName);
                    }
                }
            }));
        };
        CheckoutStepsSetGuard.prototype.isDeliveryModeSet = function (step) {
            var _this = this;
            return this.checkoutDetailsService
                .getSelectedDeliveryModeCode()
                .pipe(operators.map(function (mode) { return mode && mode.length ? true : _this.getUrl(step.routeName); }));
        };
        CheckoutStepsSetGuard.prototype.isPaymentDetailsSet = function (step) {
            var _this = this;
            return this.checkoutDetailsService
                .getPaymentDetails()
                .pipe(operators.map(function (paymentDetails) { return paymentDetails && Object.keys(paymentDetails).length !== 0
                ? true
                : _this.getUrl(step.routeName); }));
        };
        CheckoutStepsSetGuard.prototype.getUrl = function (routeName) {
            var _a;
            return this.router.parseUrl((_a = this.routingConfigService.getRouteConfig(routeName).paths) === null || _a === void 0 ? void 0 : _a[0]);
        };
        return CheckoutStepsSetGuard;
    }());
    CheckoutStepsSetGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStepsSetGuard, deps: [{ token: i1__namespace$1.PaymentTypeFacade }, { token: CheckoutStepService }, { token: CheckoutDetailsService }, { token: i1__namespace.RoutingConfigService }, { token: i1__namespace$1.CheckoutCostCenterFacade }, { token: i3__namespace.Router }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutStepsSetGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStepsSetGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStepsSetGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.PaymentTypeFacade }, { type: CheckoutStepService }, { type: CheckoutDetailsService }, { type: i1__namespace.RoutingConfigService }, { type: i1__namespace$1.CheckoutCostCenterFacade }, { type: i3__namespace.Router }]; } });

    var CheckoutProgressMobileBottomComponent = /** @class */ (function () {
        function CheckoutProgressMobileBottomComponent(checkoutStepService) {
            var _this = this;
            this.checkoutStepService = checkoutStepService;
            this._steps$ = this.checkoutStepService.steps$;
            this.activeStepIndex$ = this.checkoutStepService.activeStepIndex$.pipe(operators.tap(function (index) { return (_this.activeStepIndex = index); }));
        }
        Object.defineProperty(CheckoutProgressMobileBottomComponent.prototype, "steps$", {
            get: function () {
                return this._steps$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        return CheckoutProgressMobileBottomComponent;
    }());
    CheckoutProgressMobileBottomComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileBottomComponent, deps: [{ token: CheckoutStepService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CheckoutProgressMobileBottomComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CheckoutProgressMobileBottomComponent, selector: "cx-checkout-progress-mobile-bottom", ngImport: i0__namespace, template: "<div *ngIf=\"(activeStepIndex$ | async) !== undefined\">\n  <div class=\"cx-media\">\n    <div *ngFor=\"let step of steps$ | async; let i = index\">\n      <div class=\"cx-list-media\" *ngIf=\"i > activeStepIndex\">\n        <div>{{ i + 1 }}. {{ step.name | cxTranslate }}</div>\n      </div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileBottomComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-checkout-progress-mobile-bottom',
                        templateUrl: './checkout-progress-mobile-bottom.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: CheckoutStepService }]; } });

    var CheckoutProgressMobileBottomModule = /** @class */ (function () {
        function CheckoutProgressMobileBottomModule() {
        }
        return CheckoutProgressMobileBottomModule;
    }());
    CheckoutProgressMobileBottomModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileBottomModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutProgressMobileBottomModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileBottomModule, declarations: [CheckoutProgressMobileBottomComponent], imports: [i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule], exports: [CheckoutProgressMobileBottomComponent] });
    CheckoutProgressMobileBottomModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileBottomModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutProgressMobileBottom: {
                        component: CheckoutProgressMobileBottomComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileBottomModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutProgressMobileBottom: {
                                        component: CheckoutProgressMobileBottomComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [CheckoutProgressMobileBottomComponent],
                        exports: [CheckoutProgressMobileBottomComponent],
                    }]
            }] });

    var CheckoutProgressMobileTopComponent = /** @class */ (function () {
        function CheckoutProgressMobileTopComponent(activeCartService, checkoutStepService) {
            var _this = this;
            this.activeCartService = activeCartService;
            this.checkoutStepService = checkoutStepService;
            this._steps$ = this.checkoutStepService.steps$;
            this.activeStepIndex$ = this.checkoutStepService.activeStepIndex$.pipe(operators.tap(function (index) { return (_this.activeStepIndex = index); }));
        }
        Object.defineProperty(CheckoutProgressMobileTopComponent.prototype, "steps$", {
            get: function () {
                return this._steps$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        CheckoutProgressMobileTopComponent.prototype.ngOnInit = function () {
            this.cart$ = this.activeCartService.getActive();
        };
        return CheckoutProgressMobileTopComponent;
    }());
    CheckoutProgressMobileTopComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileTopComponent, deps: [{ token: i1__namespace.ActiveCartService }, { token: CheckoutStepService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CheckoutProgressMobileTopComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CheckoutProgressMobileTopComponent, selector: "cx-checkout-progress-mobile-top", ngImport: i0__namespace, template: "<div *ngIf=\"(activeStepIndex$ | async) !== undefined\">\n  <div *ngIf=\"cart$ | async as cart\">\n    <div class=\"cx-media\">\n      <div class=\"cx-list-media\" *ngIf=\"cart?.totalItems && cart?.subTotal\">\n        {{ 'cartItems.cartTotal' | cxTranslate: { count: cart.totalItems } }}:\n        {{ cart.subTotal.formattedValue }}\n      </div>\n      <div *ngFor=\"let step of steps$ | async; let i = index\">\n        <div class=\"cx-list-media\" *ngIf=\"i < activeStepIndex\">\n          <div>{{ i + 1 }}. {{ step.name | cxTranslate }}</div>\n          <button\n            class=\"btn btn-link\"\n            [routerLink]=\"{ cxRoute: step.routeName } | cxUrl\"\n          >\n            {{ 'common.edit' | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"cx-list-media is-active\" *ngIf=\"i === activeStepIndex\">\n          <div>{{ i + 1 }}. {{ step.name | cxTranslate }}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n", directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.RouterLink, selector: ":not(a):not(area)[routerLink]", inputs: ["routerLink", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe, "cxUrl": i1__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileTopComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-checkout-progress-mobile-top',
                        templateUrl: './checkout-progress-mobile-top.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.ActiveCartService }, { type: CheckoutStepService }]; } });

    var CheckoutProgressMobileTopModule = /** @class */ (function () {
        function CheckoutProgressMobileTopModule() {
        }
        return CheckoutProgressMobileTopModule;
    }());
    CheckoutProgressMobileTopModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileTopModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutProgressMobileTopModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileTopModule, declarations: [CheckoutProgressMobileTopComponent], imports: [i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule], exports: [CheckoutProgressMobileTopComponent] });
    CheckoutProgressMobileTopModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileTopModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutProgressMobileTop: {
                        component: CheckoutProgressMobileTopComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressMobileTopModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutProgressMobileTop: {
                                        component: CheckoutProgressMobileTopComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [CheckoutProgressMobileTopComponent],
                        exports: [CheckoutProgressMobileTopComponent],
                    }]
            }] });

    var MultiLinePipe = /** @class */ (function () {
        function MultiLinePipe() {
        }
        MultiLinePipe.prototype.transform = function (value) {
            var lastIndex = value.lastIndexOf(' ');
            if (lastIndex === -1)
                return value;
            return (value.substring(0, lastIndex) +
                '<br />' +
                value.substring(lastIndex, value.length).trim());
        };
        return MultiLinePipe;
    }());
    MultiLinePipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MultiLinePipe, deps: [], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    MultiLinePipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MultiLinePipe, name: "cxMultiLine" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: MultiLinePipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: 'cxMultiLine',
                    }]
            }] });

    var CheckoutProgressComponent = /** @class */ (function () {
        function CheckoutProgressComponent(checkoutStepService) {
            var _this = this;
            this.checkoutStepService = checkoutStepService;
            this._steps$ = this.checkoutStepService.steps$;
            this.activeStepIndex$ = this.checkoutStepService.activeStepIndex$.pipe(operators.tap(function (index) { return (_this.activeStepIndex = index); }));
        }
        Object.defineProperty(CheckoutProgressComponent.prototype, "steps$", {
            get: function () {
                return this._steps$.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        CheckoutProgressComponent.prototype.getTabIndex = function (stepIndex) {
            return !this.isActive(stepIndex) && !this.isDisabled(stepIndex) ? 0 : -1;
        };
        CheckoutProgressComponent.prototype.isActive = function (index) {
            return index === this.activeStepIndex;
        };
        CheckoutProgressComponent.prototype.isDisabled = function (index) {
            return index > this.activeStepIndex;
        };
        return CheckoutProgressComponent;
    }());
    CheckoutProgressComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressComponent, deps: [{ token: CheckoutStepService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CheckoutProgressComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CheckoutProgressComponent, selector: "cx-checkout-progress", ngImport: i0__namespace, template: "<section *ngIf=\"(activeStepIndex$ | async) !== undefined\">\n  <div class=\"cx-nav d-none d-lg-block d-xl-block\">\n    <ul class=\"cx-list\">\n      <ng-container *ngFor=\"let step of steps$ | async; let i = index\">\n        <li\n          class=\"cx-item\"\n          [class.active]=\"isActive(i)\"\n          [class.disabled]=\"isDisabled(i)\"\n        >\n          <a\n            [routerLink]=\"{ cxRoute: step.routeName } | cxUrl\"\n            class=\"cx-link\"\n            [class.active]=\"isActive(i)\"\n            [class.disabled]=\"isDisabled(i)\"\n            [tabindex]=\"getTabIndex(i)\"\n            [innerHTML]=\"step.name | cxTranslate | cxMultiLine\"\n          >\n          </a>\n        </li>\n      </ng-container>\n    </ul>\n  </div>\n</section>\n", directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxUrl": i1__namespace.UrlPipe, "cxMultiLine": MultiLinePipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-checkout-progress',
                        templateUrl: './checkout-progress.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: CheckoutStepService }]; } });

    var CheckoutProgressModule = /** @class */ (function () {
        function CheckoutProgressModule() {
        }
        return CheckoutProgressModule;
    }());
    CheckoutProgressModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutProgressModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressModule, declarations: [CheckoutProgressComponent, MultiLinePipe], imports: [i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule], exports: [CheckoutProgressComponent] });
    CheckoutProgressModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutProgress: {
                        component: CheckoutProgressComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutProgressModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule, i1.UrlModule, i1.I18nModule, i3.RouterModule],
                        declarations: [CheckoutProgressComponent, MultiLinePipe],
                        exports: [CheckoutProgressComponent],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutProgress: {
                                        component: CheckoutProgressComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, CheckoutStepsSetGuard],
                                    },
                                },
                            }),
                        ],
                    }]
            }] });

    var CostCenterComponent = /** @class */ (function () {
        function CostCenterComponent(userCostCenterService, checkoutCostCenterService, paymentTypeService) {
            this.userCostCenterService = userCostCenterService;
            this.checkoutCostCenterService = checkoutCostCenterService;
            this.paymentTypeService = paymentTypeService;
        }
        Object.defineProperty(CostCenterComponent.prototype, "isAccountPayment$", {
            get: function () {
                return this.paymentTypeService.isAccountPayment();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(CostCenterComponent.prototype, "costCenters$", {
            get: function () {
                var _this = this;
                return this.userCostCenterService.getActiveCostCenters().pipe(operators.withLatestFrom(this.checkoutCostCenterService.getCostCenter()), operators.filter(function (_a) {
                    var _b = __read(_a, 1), costCenters = _b[0];
                    return Boolean(costCenters);
                }), operators.tap(function (_a) {
                    var _b = __read(_a, 2), costCenters = _b[0], cartCostCenter = _b[1];
                    if (!Boolean(cartCostCenter)) {
                        _this.setCostCenter(costCenters[0].code);
                    }
                    else {
                        _this.costCenterId = cartCostCenter;
                    }
                }), operators.map(function (_a) {
                    var _b = __read(_a, 1), costCenters = _b[0];
                    return costCenters;
                }));
            },
            enumerable: false,
            configurable: true
        });
        CostCenterComponent.prototype.setCostCenter = function (selectCostCenter) {
            this.costCenterId = selectCostCenter;
            this.checkoutCostCenterService.setCostCenter(this.costCenterId);
        };
        return CostCenterComponent;
    }());
    CostCenterComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterComponent, deps: [{ token: i1__namespace.UserCostCenterService }, { token: i1__namespace$1.CheckoutCostCenterFacade }, { token: i1__namespace$1.PaymentTypeFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    CostCenterComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: CostCenterComponent, selector: "cx-cost-center", ngImport: i0__namespace, template: "<ng-container *ngIf=\"isAccountPayment$ | async\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-xl-10\">\n      <ng-container *ngIf=\"costCenters$ | async as costCenters\">\n        <div *ngIf=\"costCenters.length !== 0\">\n          <label>\n            <span class=\"label-content required\">{{\n              'checkoutPO.costCenter' | cxTranslate\n            }}</span>\n            <select (change)=\"setCostCenter($event.target.value)\">\n              <option\n                *ngFor=\"let costCenter of costCenters\"\n                value=\"{{ costCenter.code }}\"\n                [selected]=\"costCenterId === costCenter.code\"\n              >\n                {{ costCenter.name }}\n              </option>\n            </select>\n            <span class=\"label-content\">{{\n              'checkoutPO.availableLabel' | cxTranslate\n            }}</span>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n</ng-container>\n", directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-cost-center',
                        templateUrl: 'cost-center.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.UserCostCenterService }, { type: i1__namespace$1.CheckoutCostCenterFacade }, { type: i1__namespace$1.PaymentTypeFacade }]; } });

    var CostCenterModule = /** @class */ (function () {
        function CostCenterModule() {
        }
        return CostCenterModule;
    }());
    CostCenterModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CostCenterModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterModule, declarations: [CostCenterComponent], imports: [i3$2.CommonModule,
            i1.I18nModule, i1__namespace.ConfigModule] });
    CostCenterModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterModule, imports: [[
                i3$2.CommonModule,
                i1.I18nModule,
                i1.ConfigModule.withConfig({
                    cmsComponents: {
                        CheckoutCostCenterComponent: {
                            component: CostCenterComponent,
                            guards: [CheckoutAuthGuard, CartNotEmptyGuard, i4.CartValidationGuard],
                        },
                    },
                }),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CostCenterModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i1.I18nModule,
                            i1.ConfigModule.withConfig({
                                cmsComponents: {
                                    CheckoutCostCenterComponent: {
                                        component: CostCenterComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, i4.CartValidationGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [CostCenterComponent],
                    }]
            }] });

    var DeliveryModeComponent = /** @class */ (function () {
        function DeliveryModeComponent(fb, checkoutDeliveryService, checkoutConfigService, activatedRoute, checkoutStepService) {
            this.fb = fb;
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.checkoutConfigService = checkoutConfigService;
            this.activatedRoute = activatedRoute;
            this.checkoutStepService = checkoutStepService;
            this.continueButtonPressed = false;
            this.backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);
            this.mode = this.fb.group({
                deliveryModeId: ['', i3$1.Validators.required],
            });
        }
        DeliveryModeComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.supportedDeliveryModes$ = this.checkoutDeliveryService
                .getSupportedDeliveryModes()
                .pipe(operators.filter(function (deliveryModes) { return !!(deliveryModes === null || deliveryModes === void 0 ? void 0 : deliveryModes.length); }), operators.distinctUntilChanged(function (current, previous) {
                return JSON.stringify(current) === JSON.stringify(previous);
            }));
            // Reload delivery modes on error
            this.checkoutDeliveryService
                .getLoadSupportedDeliveryModeProcess()
                .pipe(operators.takeWhile(function (state) { return (state === null || state === void 0 ? void 0 : state.success) === false; }))
                .subscribe(function (state) {
                if (state.error && !state.loading) {
                    _this.checkoutDeliveryService.loadSupportedDeliveryModes();
                }
            });
            this.deliveryModeSub = this.supportedDeliveryModes$
                .pipe(operators.withLatestFrom(this.checkoutDeliveryService
                .getSelectedDeliveryMode()
                .pipe(operators.map(function (deliveryMode) { return deliveryMode === null || deliveryMode === void 0 ? void 0 : deliveryMode.code; }))))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), deliveryModes = _b[0], code = _b[1];
                if (!(code &&
                    !!deliveryModes.find(function (deliveryMode) { return deliveryMode.code === code; }))) {
                    code =
                        _this.checkoutConfigService.getPreferredDeliveryMode(deliveryModes);
                }
                if (code) {
                    _this.mode.controls['deliveryModeId'].setValue(code);
                    _this.checkoutDeliveryService.setDeliveryMode(code);
                }
            });
        };
        DeliveryModeComponent.prototype.changeMode = function (code) {
            this.checkoutDeliveryService.setDeliveryMode(code);
        };
        DeliveryModeComponent.prototype.next = function () {
            if (this.mode.valid && this.mode.value) {
                this.continueButtonPressed = true;
                this.checkoutStepService.next(this.activatedRoute);
            }
        };
        DeliveryModeComponent.prototype.back = function () {
            this.checkoutStepService.back(this.activatedRoute);
        };
        Object.defineProperty(DeliveryModeComponent.prototype, "deliveryModeInvalid", {
            get: function () {
                return this.mode.controls['deliveryModeId'].invalid;
            },
            enumerable: false,
            configurable: true
        });
        DeliveryModeComponent.prototype.ngOnDestroy = function () {
            if (this.deliveryModeSub) {
                this.deliveryModeSub.unsubscribe();
            }
        };
        return DeliveryModeComponent;
    }());
    DeliveryModeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeliveryModeComponent, deps: [{ token: i3__namespace$1.FormBuilder }, { token: i1__namespace$1.CheckoutDeliveryFacade }, { token: CheckoutConfigService }, { token: i3__namespace.ActivatedRoute }, { token: CheckoutStepService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    DeliveryModeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: DeliveryModeComponent, selector: "cx-delivery-mode", ngImport: i0__namespace, template: "<div [formGroup]=\"mode\">\n  <div class=\"row\">\n    <div class=\"col-md-12 col-lg-9\">\n      <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n        {{ 'checkoutShipping.shippingMethod' | cxTranslate }}\n      </h2>\n\n      <ng-container\n        *ngIf=\"(supportedDeliveryModes$ | async)?.length; else loading\"\n      >\n        <div\n          class=\"form-check\"\n          *ngFor=\"let mode of supportedDeliveryModes$ | async\"\n        >\n          <input\n            class=\"form-check-input\"\n            role=\"radio\"\n            type=\"radio\"\n            id=\"deliveryMode-{{ mode.code }}\"\n            aria-checked=\"true\"\n            (change)=\"changeMode(mode.code)\"\n            [value]=\"mode.code\"\n            formControlName=\"deliveryModeId\"\n          />\n          <label\n            class=\"cx-delivery-label form-check-label form-radio-label\"\n            for=\"deliveryMode-{{ mode.code }}\"\n          >\n            <div class=\"cx-delivery-mode\">{{ mode.name }}</div>\n            <div class=\"cx-delivery-price\">\n              {{ mode.deliveryCost.formattedValue }}\n            </div>\n            <div class=\"cx-delivery-details\">{{ mode.description }}</div>\n          </label>\n        </div>\n      </ng-container>\n    </div>\n  </div>\n\n  <ng-container *ngIf=\"!continueButtonPressed; else loading\">\n    <div class=\"row cx-checkout-btns\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n          {{ backBtnText | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          class=\"btn btn-block btn-primary\"\n          [disabled]=\"deliveryModeInvalid\"\n          (click)=\"next()\"\n        >\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </ng-container>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n", components: [{ type: i4__namespace.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i3__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$1.RadioControlValueAccessor, selector: "input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]", inputs: ["name", "formControlName", "value"] }, { type: i3__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe, "async": i3__namespace$2.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeliveryModeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-delivery-mode',
                        templateUrl: './delivery-mode.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i3__namespace$1.FormBuilder }, { type: i1__namespace$1.CheckoutDeliveryFacade }, { type: CheckoutConfigService }, { type: i3__namespace.ActivatedRoute }, { type: CheckoutStepService }]; } });

    var DeliveryModeModule = /** @class */ (function () {
        function DeliveryModeModule() {
        }
        return DeliveryModeModule;
    }());
    DeliveryModeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeliveryModeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    DeliveryModeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeliveryModeModule, declarations: [DeliveryModeComponent], imports: [i3$2.CommonModule, i3$1.ReactiveFormsModule, i1.I18nModule, i4.SpinnerModule], exports: [DeliveryModeComponent] });
    DeliveryModeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeliveryModeModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutDeliveryMode: {
                        component: DeliveryModeComponent,
                        // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard here?
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule, i3$1.ReactiveFormsModule, i1.I18nModule, i4.SpinnerModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: DeliveryModeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule, i3$1.ReactiveFormsModule, i1.I18nModule, i4.SpinnerModule],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutDeliveryMode: {
                                        component: DeliveryModeComponent,
                                        // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard here?
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [DeliveryModeComponent],
                        exports: [DeliveryModeComponent],
                    }]
            }] });

    var PaymentFormComponent = /** @class */ (function () {
        function PaymentFormComponent(checkoutPaymentService, checkoutDeliveryService, userPaymentService, globalMessageService, fb, modalService, userAddressService) {
            this.checkoutPaymentService = checkoutPaymentService;
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.userPaymentService = userPaymentService;
            this.globalMessageService = globalMessageService;
            this.fb = fb;
            this.modalService = modalService;
            this.userAddressService = userAddressService;
            this.iconTypes = i4.ICON_TYPE;
            this.months = [];
            this.years = [];
            this.sameAsShippingAddress = true;
            this.selectedCountry$ = new rxjs.BehaviorSubject('');
            this.goBack = new i0.EventEmitter();
            this.closeForm = new i0.EventEmitter();
            this.setPaymentDetails = new i0.EventEmitter();
            this.paymentForm = this.fb.group({
                cardType: this.fb.group({
                    code: [null, i3$1.Validators.required],
                }),
                accountHolderName: ['', i3$1.Validators.required],
                cardNumber: ['', i3$1.Validators.required],
                expiryMonth: [null, i3$1.Validators.required],
                expiryYear: [null, i3$1.Validators.required],
                cvn: ['', i3$1.Validators.required],
                defaultPayment: [false],
            });
            this.billingAddressForm = this.fb.group({
                firstName: ['', i3$1.Validators.required],
                lastName: ['', i3$1.Validators.required],
                line1: ['', i3$1.Validators.required],
                line2: [''],
                town: ['', i3$1.Validators.required],
                region: this.fb.group({
                    isocodeShort: [null, i3$1.Validators.required],
                }),
                country: this.fb.group({
                    isocode: [null, i3$1.Validators.required],
                }),
                postalCode: ['', i3$1.Validators.required],
            });
        }
        PaymentFormComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.expMonthAndYear();
            this.countries$ = this.userPaymentService.getAllBillingCountries().pipe(operators.tap(function (countries) {
                // If the store is empty fetch countries. This is also used when changing language.
                if (Object.keys(countries).length === 0) {
                    _this.userPaymentService.loadBillingCountries();
                }
            }));
            this.cardTypes$ = this.checkoutPaymentService.getCardTypes().pipe(operators.tap(function (cardTypes) {
                if (Object.keys(cardTypes).length === 0) {
                    _this.checkoutPaymentService.loadSupportedCardTypes();
                }
            }));
            this.shippingAddress$ = this.checkoutDeliveryService.getDeliveryAddress();
            this.loading$ =
                this.checkoutPaymentService.getSetPaymentDetailsResultProcess();
            this.showSameAsShippingAddressCheckbox$ = rxjs.combineLatest([
                this.countries$,
                this.shippingAddress$,
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), countries = _c[0], address = _c[1];
                var _a;
                return ((_a = ((address === null || address === void 0 ? void 0 : address.country) &&
                    !!countries.filter(function (country) { var _a; return country.isocode === ((_a = address.country) === null || _a === void 0 ? void 0 : _a.isocode); }).length)) !== null && _a !== void 0 ? _a : false);
            }), operators.tap(function (shouldShowCheckbox) {
                _this.sameAsShippingAddress = shouldShowCheckbox;
            }));
            this.regions$ = this.selectedCountry$.pipe(operators.switchMap(function (country) { return _this.userAddressService.getRegions(country); }), operators.tap(function (regions) {
                var regionControl = _this.billingAddressForm.get('region.isocodeShort');
                if (regions.length > 0) {
                    regionControl === null || regionControl === void 0 ? void 0 : regionControl.enable();
                }
                else {
                    regionControl === null || regionControl === void 0 ? void 0 : regionControl.disable();
                }
            }));
        };
        PaymentFormComponent.prototype.expMonthAndYear = function () {
            var year = new Date().getFullYear();
            for (var i = 0; i < 10; i++) {
                this.years.push(year + i);
            }
            for (var j = 1; j <= 12; j++) {
                if (j < 10) {
                    this.months.push("0" + j);
                }
                else {
                    this.months.push(j.toString());
                }
            }
        };
        PaymentFormComponent.prototype.toggleDefaultPaymentMethod = function () {
            this.paymentForm.value.defaultPayment =
                !this.paymentForm.value.defaultPayment;
        };
        PaymentFormComponent.prototype.toggleSameAsShippingAddress = function () {
            this.sameAsShippingAddress = !this.sameAsShippingAddress;
        };
        PaymentFormComponent.prototype.getAddressCardContent = function (address) {
            var _a;
            var region = '';
            if (address.region && address.region.isocode) {
                region = address.region.isocode + ', ';
            }
            return {
                textBold: address.firstName + ' ' + address.lastName,
                text: [
                    address.line1,
                    address.line2,
                    address.town + ', ' + region + ((_a = address.country) === null || _a === void 0 ? void 0 : _a.isocode),
                    address.postalCode,
                    address.phone,
                ],
            };
        };
        PaymentFormComponent.prototype.openSuggestedAddress = function (results) {
            var _this = this;
            if (!this.suggestedAddressModalRef) {
                this.suggestedAddressModalRef = this.modalService.open(i4.SuggestedAddressDialogComponent, { centered: true, size: 'lg' });
                this.suggestedAddressModalRef.componentInstance.enteredAddress =
                    this.billingAddressForm.value;
                this.suggestedAddressModalRef.componentInstance.suggestedAddresses =
                    results.suggestedAddresses;
                this.suggestedAddressModalRef.result
                    .then(function () {
                    _this.suggestedAddressModalRef = null;
                })
                    .catch(function () {
                    // this  callback is called when modal is closed with Esc key or clicking backdrop
                    _this.suggestedAddressModalRef = null;
                });
            }
        };
        PaymentFormComponent.prototype.close = function () {
            this.closeForm.emit();
        };
        PaymentFormComponent.prototype.back = function () {
            this.goBack.emit();
        };
        PaymentFormComponent.prototype.verifyAddress = function () {
            var _this = this;
            if (this.sameAsShippingAddress) {
                this.next();
            }
            else {
                this.userAddressService
                    .verifyAddress(this.billingAddressForm.value)
                    .subscribe(function (result) {
                    _this.handleAddressVerificationResults(result);
                });
            }
        };
        PaymentFormComponent.prototype.handleAddressVerificationResults = function (results) {
            if (results.decision === 'ACCEPT') {
                this.next();
            }
            else if (results.decision === 'REJECT') {
                this.globalMessageService.add({ key: 'addressForm.invalidAddress' }, i1.GlobalMessageType.MSG_TYPE_ERROR);
            }
            else if (results.decision === 'REVIEW') {
                this.openSuggestedAddress(results);
            }
        };
        PaymentFormComponent.prototype.countrySelected = function (country) {
            var _a;
            (_a = this.billingAddressForm.get('country.isocode')) === null || _a === void 0 ? void 0 : _a.setValue(country.isocode);
            this.selectedCountry$.next(country.isocode);
        };
        PaymentFormComponent.prototype.next = function () {
            if (this.paymentForm.valid) {
                if (this.sameAsShippingAddress) {
                    this.setPaymentDetails.emit({
                        paymentDetails: this.paymentForm.value,
                        billingAddress: null,
                    });
                }
                else {
                    if (this.billingAddressForm.valid) {
                        this.setPaymentDetails.emit({
                            paymentDetails: this.paymentForm.value,
                            billingAddress: this.billingAddressForm.value,
                        });
                    }
                    else {
                        this.billingAddressForm.markAllAsTouched();
                    }
                }
            }
            else {
                this.paymentForm.markAllAsTouched();
                if (!this.sameAsShippingAddress) {
                    this.billingAddressForm.markAllAsTouched();
                }
            }
        };
        return PaymentFormComponent;
    }());
    PaymentFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentFormComponent, deps: [{ token: i1__namespace$1.CheckoutPaymentFacade }, { token: i1__namespace$1.CheckoutDeliveryFacade }, { token: i1__namespace.UserPaymentService }, { token: i1__namespace.GlobalMessageService }, { token: i3__namespace$1.FormBuilder }, { token: i4__namespace.ModalService }, { token: i1__namespace.UserAddressService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PaymentFormComponent, selector: "cx-payment-form", inputs: { setAsDefaultField: "setAsDefaultField", paymentMethodsCount: "paymentMethodsCount" }, outputs: { goBack: "goBack", closeForm: "closeForm", setPaymentDetails: "setPaymentDetails" }, ngImport: i0__namespace, template: "<!-- FORM -->\n<ng-container *ngIf=\"!(loading$ | async)?.loading; else spinner\">\n  <form (ngSubmit)=\"next()\" [formGroup]=\"paymentForm\">\n    <div class=\"row\">\n      <div class=\"col-md-12 col-xl-10\">\n        <div class=\"form-group\" formGroupName=\"cardType\">\n          <ng-container *ngIf=\"cardTypes$ | async as cardTypes\">\n            <div *ngIf=\"cardTypes.length !== 0\">\n              <label>\n                <span class=\"label-content required\">{{\n                  'paymentForm.paymentType' | cxTranslate\n                }}</span>\n                <ng-select\n                  aria-required=\"true\"\n                  [searchable]=\"true\"\n                  [clearable]=\"false\"\n                  [items]=\"cardTypes\"\n                  bindLabel=\"name\"\n                  bindValue=\"code\"\n                  placeholder=\"{{ 'paymentForm.selectOne' | cxTranslate }}\"\n                  formControlName=\"code\"\n                >\n                </ng-select>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"paymentForm.get('cardType.code')\"\n                ></cx-form-errors>\n              </label>\n            </div>\n          </ng-container>\n        </div>\n\n        <div class=\"form-group\">\n          <label>\n            <span class=\"label-content\">{{\n              'paymentForm.accountHolderName.label' | cxTranslate\n            }}</span>\n            <input\n              aria-required=\"true\"\n              class=\"form-control\"\n              type=\"text\"\n              placeholder=\"{{\n                'paymentForm.accountHolderName.placeholder' | cxTranslate\n              }}\"\n              formControlName=\"accountHolderName\"\n            />\n            <cx-form-errors\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n              [control]=\"paymentForm.get('accountHolderName')\"\n            ></cx-form-errors>\n          </label>\n        </div>\n\n        <div class=\"form-group\">\n          <label>\n            <span class=\"label-content\">{{\n              'paymentForm.cardNumber' | cxTranslate\n            }}</span>\n            <input\n              aria-required=\"true\"\n              type=\"text\"\n              class=\"form-control\"\n              formControlName=\"cardNumber\"\n            />\n            <cx-form-errors\n              aria-live=\"assertive\"\n              aria-atomic=\"true\"\n              [control]=\"paymentForm.get('cardNumber')\"\n            ></cx-form-errors>\n          </label>\n        </div>\n\n        <div class=\"row\">\n          <div class=\"form-group col-md-8\">\n            <fieldset class=\"cx-payment-form-exp-date\">\n              <legend class=\"label-content\">\n                {{ 'paymentForm.expirationDate' | cxTranslate }}\n              </legend>\n              <label class=\"cx-payment-form-exp-date-wrapper\">\n                <ng-select\n                  aria-required=\"true\"\n                  [searchable]=\"true\"\n                  [clearable]=\"false\"\n                  [items]=\"months\"\n                  placeholder=\"{{ 'paymentForm.monthMask' | cxTranslate }}\"\n                  formControlName=\"expiryMonth\"\n                  [attr.aria-label]=\"\n                    'paymentForm.expirationMonth'\n                      | cxTranslate\n                        : { selected: paymentForm.get('expiryMonth')?.value }\n                  \"\n                >\n                </ng-select>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"paymentForm.get('expiryMonth')\"\n                ></cx-form-errors>\n              </label>\n              <label class=\"cx-payment-form-exp-date-wrapper\">\n                <ng-select\n                  aria-required=\"true\"\n                  [searchable]=\"true\"\n                  [clearable]=\"false\"\n                  [items]=\"years\"\n                  placeholder=\"{{ 'paymentForm.yearMask' | cxTranslate }}\"\n                  [attr.aria-label]=\"\n                    'paymentForm.expirationYear'\n                      | cxTranslate\n                        : { selected: paymentForm.get('expiryYear')?.value }\n                  \"\n                  formControlName=\"expiryYear\"\n                >\n                </ng-select>\n                <cx-form-errors\n                  aria-live=\"assertive\"\n                  aria-atomic=\"true\"\n                  [control]=\"paymentForm.get('expiryYear')\"\n                ></cx-form-errors>\n              </label>\n            </fieldset>\n          </div>\n\n          <div class=\"form-group col-md-4\">\n            <label>\n              <span class=\"label-content\">\n                {{ 'paymentForm.securityCode' | cxTranslate }}\n                <cx-icon\n                  [type]=\"iconTypes.INFO\"\n                  class=\"cx-payment-form-tooltip\"\n                  placement=\"right\"\n                  title=\"{{ 'paymentForm.securityCodeTitle' | cxTranslate }}\"\n                  alt=\"\"\n                ></cx-icon>\n              </span>\n              <input\n                aria-required=\"true\"\n                type=\"text\"\n                class=\"form-control\"\n                id=\"cVVNumber\"\n                formControlName=\"cvn\"\n              />\n              <cx-form-errors\n                aria-live=\"assertive\"\n                aria-atomic=\"true\"\n                [control]=\"paymentForm.get('cvn')\"\n              ></cx-form-errors>\n            </label>\n          </div>\n        </div>\n\n        <div class=\"form-group\" *ngIf=\"setAsDefaultField\">\n          <div class=\"form-check\">\n            <label>\n              <input\n                type=\"checkbox\"\n                class=\"form-check-input\"\n                (change)=\"toggleDefaultPaymentMethod()\"\n              />\n              <span class=\"form-check-label\">{{\n                'paymentForm.setAsDefault' | cxTranslate\n              }}</span>\n            </label>\n          </div>\n        </div>\n\n        <!-- BILLING -->\n        <div class=\"cx-payment-form-billing\">\n          <div class=\"cx-payment-form-billing-address\">\n            {{ 'paymentForm.billingAddress' | cxTranslate }}\n          </div>\n\n          <!-- SAME AS SHIPPING CHECKBOX -->\n          <ng-container *ngIf=\"showSameAsShippingAddressCheckbox$ | async\">\n            <div class=\"form-group\">\n              <div class=\"form-check\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    class=\"form-check-input\"\n                    [checked]=\"sameAsShippingAddress\"\n                    (change)=\"toggleSameAsShippingAddress()\"\n                  />\n                  <span class=\"form-check-label\">{{\n                    'paymentForm.sameAsShippingAddress' | cxTranslate\n                  }}</span>\n                </label>\n              </div>\n            </div>\n          </ng-container>\n\n          <!-- BILLING INFO COMPONENT -->\n          <ng-container\n            *ngIf=\"\n              sameAsShippingAddress &&\n                (shippingAddress$ | async) as shippingAddress;\n              else billingAddress\n            \"\n          >\n            <cx-card\n              [content]=\"getAddressCardContent(shippingAddress)\"\n            ></cx-card>\n          </ng-container>\n\n          <ng-template #billingAddress>\n            <div [formGroup]=\"billingAddressForm\">\n              <div class=\"form-group\" formGroupName=\"country\">\n                <ng-container *ngIf=\"countries$ | async as countries\">\n                  <div *ngIf=\"countries.length !== 0\">\n                    <label aria-required=\"true\">\n                      <span class=\"label-content required\">{{\n                        'addressForm.country' | cxTranslate\n                      }}</span>\n                      <ng-select\n                        aria-required=\"true\"\n                        [searchable]=\"true\"\n                        [clearable]=\"false\"\n                        [items]=\"countries\"\n                        bindLabel=\"name\"\n                        bindValue=\"isocode\"\n                        placeholder=\"{{\n                          'addressForm.selectOne' | cxTranslate\n                        }}\"\n                        (change)=\"countrySelected($event)\"\n                        formControlName=\"isocode\"\n                      >\n                      </ng-select>\n                      <cx-form-errors\n                        aria-live=\"assertive\"\n                        aria-atomic=\"true\"\n                        [control]=\"billingAddressForm.get('country.isocode')\"\n                      ></cx-form-errors>\n                    </label>\n                  </div>\n                </ng-container>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content required\">{{\n                    'addressForm.firstName.label' | cxTranslate\n                  }}</span>\n                  <input\n                    aria-required=\"true\"\n                    class=\"form-control\"\n                    type=\"text\"\n                    placeholder=\"{{\n                      'addressForm.firstName.placeholder' | cxTranslate\n                    }}\"\n                    formControlName=\"firstName\"\n                  />\n                  <cx-form-errors\n                    aria-live=\"assertive\"\n                    aria-atomic=\"true\"\n                    [control]=\"billingAddressForm.get('firstName')\"\n                  ></cx-form-errors>\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content required\">{{\n                    'addressForm.lastName.label' | cxTranslate\n                  }}</span>\n                  <input\n                    aria-required=\"true\"\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{\n                      'addressForm.lastName.placeholder' | cxTranslate\n                    }}\"\n                    formControlName=\"lastName\"\n                  />\n                  <cx-form-errors\n                    aria-live=\"assertive\"\n                    aria-atomic=\"true\"\n                    [control]=\"billingAddressForm.get('lastName')\"\n                  ></cx-form-errors>\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content required\">{{\n                    'addressForm.address1' | cxTranslate\n                  }}</span>\n                  <input\n                    aria-required=\"true\"\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{\n                      'addressForm.streetAddress' | cxTranslate\n                    }}\"\n                    formControlName=\"line1\"\n                  />\n                  <cx-form-errors\n                    aria-live=\"assertive\"\n                    aria-atomic=\"true\"\n                    [control]=\"billingAddressForm.get('line1')\"\n                  ></cx-form-errors>\n                </label>\n              </div>\n              <div class=\"form-group\">\n                <label>\n                  <span class=\"label-content\">{{\n                    'addressForm.address2' | cxTranslate\n                  }}</span>\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    placeholder=\"{{ 'addressForm.aptSuite' | cxTranslate }}\"\n                    formControlName=\"line2\"\n                  />\n                </label>\n              </div>\n              <div class=\"row\">\n                <div class=\"form-group col-md-6\">\n                  <label>\n                    <span class=\"label-content required\">{{\n                      'addressForm.city.label' | cxTranslate\n                    }}</span>\n                    <input\n                      aria-required=\"true\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{\n                        'addressForm.city.placeholder' | cxTranslate\n                      }}\"\n                      formControlName=\"town\"\n                    />\n                    <cx-form-errors\n                      aria-live=\"assertive\"\n                      aria-atomic=\"true\"\n                      [control]=\"billingAddressForm.get('town')\"\n                    ></cx-form-errors>\n                  </label>\n                </div>\n                <div class=\"form-group col-md-6\">\n                  <label>\n                    <span class=\"label-content required\">{{\n                      'addressForm.zipCode.label' | cxTranslate\n                    }}</span>\n                    <input\n                      aria-required=\"true\"\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\"{{\n                        'addressForm.zipCode.placeholder' | cxTranslate\n                      }}\"\n                      formControlName=\"postalCode\"\n                    />\n                    <cx-form-errors\n                      aria-live=\"assertive\"\n                      aria-atomic=\"true\"\n                      [control]=\"billingAddressForm.get('postalCode')\"\n                    ></cx-form-errors>\n                  </label>\n                </div>\n                <ng-container\n                  *ngIf=\"regions$ | async as regions\"\n                  formGroupName=\"region\"\n                >\n                  <ng-container *ngIf=\"regions.length !== 0\">\n                    <div class=\"form-group col-md-6\">\n                      <label aria-required=\"true\">\n                        <span class=\"label-content required\">{{\n                          'addressForm.state' | cxTranslate\n                        }}</span>\n                        <ng-select\n                          aria-required=\"true\"\n                          class=\"region-select\"\n                          formControlName=\"isocodeShort\"\n                          [searchable]=\"true\"\n                          [clearable]=\"false\"\n                          [items]=\"regions\"\n                          bindLabel=\"{{\n                            regions[0].name ? 'name' : 'isocodeShort'\n                          }}\"\n                          bindValue=\"{{\n                            regions[0].name ? 'isocodeShort' : 'region'\n                          }}\"\n                          placeholder=\"{{\n                            'addressForm.selectOne' | cxTranslate\n                          }}\"\n                        >\n                        </ng-select>\n                        <cx-form-errors\n                          aria-live=\"assertive\"\n                          aria-atomic=\"true\"\n                          [control]=\"\n                            billingAddressForm.get('region.isocodeShort')\n                          \"\n                        ></cx-form-errors>\n                      </label>\n                    </div>\n                  </ng-container>\n                </ng-container>\n              </div>\n            </div>\n          </ng-template>\n        </div>\n      </div>\n    </div>\n\n    <!-- BUTTON SECTION -->\n    <div class=\"cx-checkout-btns row\">\n      <div class=\"col-md-12 col-lg-6\">\n        <button\n          *ngIf=\"paymentMethodsCount === 0\"\n          class=\"btn btn-block btn-action\"\n          (click)=\"back()\"\n        >\n          {{ 'common.back' | cxTranslate }}\n        </button>\n        <button\n          *ngIf=\"paymentMethodsCount > 0\"\n          class=\"btn btn-block btn-action\"\n          (click)=\"close()\"\n        >\n          {{ 'paymentForm.changePayment' | cxTranslate }}\n        </button>\n      </div>\n      <div class=\"col-md-12 col-lg-6\">\n        <button class=\"btn btn-block btn-primary\" type=\"submit\">\n          {{ 'common.continue' | cxTranslate }}\n        </button>\n      </div>\n    </div>\n  </form>\n</ng-container>\n\n<ng-template #spinner>\n  <cx-spinner></cx-spinner>\n</ng-template>\n", components: [{ type: i5__namespace.NgSelectComponent, selector: "ng-select", inputs: ["markFirst", "dropdownPosition", "loading", "closeOnSelect", "hideSelected", "selectOnTab", "bufferAmount", "selectableGroup", "selectableGroupAsModel", "searchFn", "trackByFn", "clearOnBackspace", "labelForId", "inputAttrs", "readonly", "searchWhileComposing", "minTermLength", "editableSearchTerm", "keyDownFn", "multiple", "addTag", "searchable", "clearable", "isOpen", "items", "compareWith", "clearSearchOnAdd", "bindLabel", "placeholder", "notFoundText", "typeToSearchText", "addTagText", "loadingText", "clearAllText", "virtualScroll", "openOnEnter", "appendTo", "bindValue", "appearance", "maxSelectedItems", "groupBy", "groupValue", "tabIndex", "typeahead"], outputs: ["blur", "focus", "change", "open", "close", "search", "clear", "add", "remove", "scroll", "scrollToEnd"] }, { type: i4__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }, { type: i4__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: i4__namespace.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { type: i4__namespace.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i3__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-payment-form',
                        templateUrl: './payment-form.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutPaymentFacade }, { type: i1__namespace$1.CheckoutDeliveryFacade }, { type: i1__namespace.UserPaymentService }, { type: i1__namespace.GlobalMessageService }, { type: i3__namespace$1.FormBuilder }, { type: i4__namespace.ModalService }, { type: i1__namespace.UserAddressService }]; }, propDecorators: { setAsDefaultField: [{
                    type: i0.Input
                }], paymentMethodsCount: [{
                    type: i0.Input
                }], goBack: [{
                    type: i0.Output
                }], closeForm: [{
                    type: i0.Output
                }], setPaymentDetails: [{
                    type: i0.Output
                }] } });

    var PaymentFormModule = /** @class */ (function () {
        function PaymentFormModule() {
        }
        return PaymentFormModule;
    }());
    PaymentFormModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentFormModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentFormModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentFormModule, declarations: [PaymentFormComponent], imports: [i3$2.CommonModule,
            i3$1.ReactiveFormsModule,
            i5.NgSelectModule,
            i4.CardModule,
            i1.I18nModule,
            i4.IconModule,
            i4.SpinnerModule,
            i4.FormErrorsModule], exports: [PaymentFormComponent] });
    PaymentFormModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentFormModule, imports: [[
                i3$2.CommonModule,
                i3$1.ReactiveFormsModule,
                i5.NgSelectModule,
                i4.CardModule,
                i1.I18nModule,
                i4.IconModule,
                i4.SpinnerModule,
                i4.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentFormModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i3$1.ReactiveFormsModule,
                            i5.NgSelectModule,
                            i4.CardModule,
                            i1.I18nModule,
                            i4.IconModule,
                            i4.SpinnerModule,
                            i4.FormErrorsModule,
                        ],
                        declarations: [PaymentFormComponent],
                        exports: [PaymentFormComponent],
                    }]
            }] });

    var PaymentMethodComponent = /** @class */ (function () {
        function PaymentMethodComponent(userPaymentService, checkoutService, checkoutDeliveryService, checkoutPaymentService, globalMessageService, activatedRoute, translation, activeCartService, checkoutStepService) {
            this.userPaymentService = userPaymentService;
            this.checkoutService = checkoutService;
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.checkoutPaymentService = checkoutPaymentService;
            this.globalMessageService = globalMessageService;
            this.activatedRoute = activatedRoute;
            this.translation = translation;
            this.activeCartService = activeCartService;
            this.checkoutStepService = checkoutStepService;
            this.iconTypes = i4.ICON_TYPE;
            this.isGuestCheckout = false;
            this.newPaymentFormManuallyOpened = false;
            this.backBtnText = this.checkoutStepService.getBackBntText(this.activatedRoute);
        }
        PaymentMethodComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.shouldRedirect = false;
            this.isLoading$ = this.userPaymentService.getPaymentMethodsLoading();
            if (!this.activeCartService.isGuestCart()) {
                this.userPaymentService.loadPaymentMethods();
            }
            else {
                this.isGuestCheckout = true;
            }
            this.checkoutDeliveryService
                .getDeliveryAddress()
                .pipe(operators.take(1))
                .subscribe(function (address) {
                _this.deliveryAddress = address;
            });
            this.existingPaymentMethods$ = this.userPaymentService.getPaymentMethods();
            this.selectedMethod$ = this.checkoutPaymentService.getPaymentDetails().pipe(operators.tap(function (paymentInfo) {
                if (paymentInfo && !!Object.keys(paymentInfo).length) {
                    if (paymentInfo['hasError']) {
                        Object.keys(paymentInfo).forEach(function (key) {
                            if (key.startsWith('InvalidField')) {
                                _this.sendPaymentMethodFailGlobalMessage(paymentInfo[key]);
                            }
                        });
                        _this.checkoutService.clearCheckoutStep(3);
                    }
                    else if (_this.shouldRedirect) {
                        _this.next();
                    }
                }
            }));
            this.cards$ = rxjs.combineLatest([
                this.existingPaymentMethods$.pipe(operators.switchMap(function (methods) {
                    return !(methods === null || methods === void 0 ? void 0 : methods.length)
                        ? rxjs.of([])
                        : rxjs.combineLatest(methods.map(function (method) { return rxjs.combineLatest([
                            rxjs.of(method),
                            _this.translation.translate('paymentCard.expires', {
                                month: method.expiryMonth,
                                year: method.expiryYear,
                            }),
                        ]).pipe(operators.map(function (_c) {
                            var _d = __read(_c, 2), payment = _d[0], translation = _d[1];
                            return ({
                                payment: payment,
                                expiryTranslation: translation,
                            });
                        })); }));
                })),
                this.selectedMethod$,
                this.translation.translate('paymentForm.useThisPayment'),
                this.translation.translate('paymentCard.defaultPaymentMethod'),
                this.translation.translate('paymentCard.selected'),
            ]).pipe(operators.map(function (_c) {
                var _d = __read(_c, 5), paymentMethods = _d[0], selectedMethod = _d[1], textUseThisPayment = _d[2], textDefaultPaymentMethod = _d[3], textSelected = _d[4];
                if (paymentMethods.length &&
                    (!selectedMethod || Object.keys(selectedMethod).length === 0)) {
                    var defaultPaymentMethod = paymentMethods.find(function (paymentMethod) { return paymentMethod.payment.defaultPayment; });
                    if (defaultPaymentMethod) {
                        selectedMethod = defaultPaymentMethod.payment;
                        _this.checkoutPaymentService.setPaymentDetails(selectedMethod);
                    }
                }
                return paymentMethods.map(function (payment) { return ({
                    content: _this.createCard(payment.payment, {
                        textExpires: payment.expiryTranslation,
                        textUseThisPayment: textUseThisPayment,
                        textDefaultPaymentMethod: textDefaultPaymentMethod,
                        textSelected: textSelected,
                    }, selectedMethod),
                    paymentMethod: payment.payment,
                }); });
            }));
        };
        PaymentMethodComponent.prototype.selectPaymentMethod = function (paymentDetails) {
            this.checkoutPaymentService.setPaymentDetails(paymentDetails);
        };
        PaymentMethodComponent.prototype.showNewPaymentForm = function () {
            this.newPaymentFormManuallyOpened = true;
        };
        PaymentMethodComponent.prototype.hideNewPaymentForm = function () {
            this.newPaymentFormManuallyOpened = false;
        };
        PaymentMethodComponent.prototype.setPaymentDetails = function (_c) {
            var paymentDetails = _c.paymentDetails, billingAddress = _c.billingAddress;
            var details = Object.assign({}, paymentDetails);
            details.billingAddress = billingAddress || this.deliveryAddress;
            this.checkoutPaymentService.createPaymentDetails(details);
            this.shouldRedirect = true;
        };
        PaymentMethodComponent.prototype.ngOnDestroy = function () {
            this.checkoutPaymentService.paymentProcessSuccess();
        };
        PaymentMethodComponent.prototype.getCardIcon = function (code) {
            var ccIcon;
            if (code === 'visa') {
                ccIcon = this.iconTypes.VISA;
            }
            else if (code === 'master' || code === 'mastercard_eurocard') {
                ccIcon = this.iconTypes.MASTER_CARD;
            }
            else if (code === 'diners') {
                ccIcon = this.iconTypes.DINERS_CLUB;
            }
            else if (code === 'amex') {
                ccIcon = this.iconTypes.AMEX;
            }
            else {
                ccIcon = this.iconTypes.CREDIT_CARD;
            }
            return ccIcon;
        };
        PaymentMethodComponent.prototype.sendPaymentMethodFailGlobalMessage = function (field) {
            this.globalMessageService.add({
                key: 'paymentMethods.invalidField',
                params: { field: field },
            }, i1.GlobalMessageType.MSG_TYPE_ERROR);
        };
        PaymentMethodComponent.prototype.createCard = function (paymentDetails, cardLabels, selected) {
            var _a, _b;
            return {
                title: paymentDetails.defaultPayment
                    ? cardLabels.textDefaultPaymentMethod
                    : '',
                textBold: paymentDetails.accountHolderName,
                text: [(_a = paymentDetails.cardNumber) !== null && _a !== void 0 ? _a : '', cardLabels.textExpires],
                img: this.getCardIcon((_b = paymentDetails.cardType) === null || _b === void 0 ? void 0 : _b.code),
                actions: [{ name: cardLabels.textUseThisPayment, event: 'send' }],
                header: (selected === null || selected === void 0 ? void 0 : selected.id) === paymentDetails.id
                    ? cardLabels.textSelected
                    : undefined,
            };
        };
        PaymentMethodComponent.prototype.next = function () {
            this.checkoutStepService.next(this.activatedRoute);
        };
        PaymentMethodComponent.prototype.back = function () {
            this.checkoutStepService.back(this.activatedRoute);
        };
        return PaymentMethodComponent;
    }());
    PaymentMethodComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentMethodComponent, deps: [{ token: i1__namespace.UserPaymentService }, { token: i1__namespace$1.CheckoutFacade }, { token: i1__namespace$1.CheckoutDeliveryFacade }, { token: i1__namespace$1.CheckoutPaymentFacade }, { token: i1__namespace.GlobalMessageService }, { token: i3__namespace.ActivatedRoute }, { token: i1__namespace.TranslationService }, { token: i1__namespace.ActiveCartService }, { token: CheckoutStepService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentMethodComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PaymentMethodComponent, selector: "cx-payment-method", ngImport: i0__namespace, template: "<ng-container *ngIf=\"cards$ | async as cards\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'paymentForm.payment' | cxTranslate }}\n  </h2>\n  <ng-container *ngIf=\"!(isLoading$ | async); else loading\">\n    <ng-container\n      *ngIf=\"\n        cards?.length && !newPaymentFormManuallyOpened;\n        else newPaymentForm\n      \"\n    >\n      <p class=\"cx-checkout-text\">\n        {{ 'paymentForm.choosePaymentMethod' | cxTranslate }}\n      </p>\n      <div class=\"cx-checkout-btns row\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"showNewPaymentForm()\"\n          >\n            {{ 'paymentForm.addNewPayment' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-body row\">\n        <div\n          class=\"cx-payment-card col-md-12 col-lg-6\"\n          *ngFor=\"let card of cards; let i = index\"\n        >\n          <div class=\"cx-payment-card-inner\">\n            <cx-card\n              [border]=\"true\"\n              [fitToContainer]=\"true\"\n              [content]=\"card.content\"\n              (sendCard)=\"selectPaymentMethod(card.paymentMethod)\"\n            ></cx-card>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"row cx-checkout-btns\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n            {{ backBtnText | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-primary\"\n            [disabled]=\"!(selectedMethod$ | async)?.id\"\n            (click)=\"next()\"\n          >\n            {{ 'common.continue' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #newPaymentForm>\n      <cx-payment-form\n        (setPaymentDetails)=\"setPaymentDetails($event)\"\n        (closeForm)=\"hideNewPaymentForm()\"\n        (goBack)=\"back()\"\n        [paymentMethodsCount]=\"cards?.length || 0\"\n        [setAsDefaultField]=\"!isGuestCheckout\"\n      ></cx-payment-form>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #loading>\n    <div class=\"cx-spinner\"><cx-spinner></cx-spinner></div>\n  </ng-template>\n</ng-container>\n", components: [{ type: i4__namespace.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { type: PaymentFormComponent, selector: "cx-payment-form", inputs: ["setAsDefaultField", "paymentMethodsCount"], outputs: ["goBack", "closeForm", "setPaymentDetails"] }, { type: i4__namespace.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentMethodComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-payment-method',
                        templateUrl: './payment-method.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.UserPaymentService }, { type: i1__namespace$1.CheckoutFacade }, { type: i1__namespace$1.CheckoutDeliveryFacade }, { type: i1__namespace$1.CheckoutPaymentFacade }, { type: i1__namespace.GlobalMessageService }, { type: i3__namespace.ActivatedRoute }, { type: i1__namespace.TranslationService }, { type: i1__namespace.ActiveCartService }, { type: CheckoutStepService }]; } });

    var PaymentMethodModule = /** @class */ (function () {
        function PaymentMethodModule() {
        }
        return PaymentMethodModule;
    }());
    PaymentMethodModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentMethodModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentMethodModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentMethodModule, declarations: [PaymentMethodComponent], imports: [i3$2.CommonModule,
            i3.RouterModule,
            PaymentFormModule,
            i4.CardModule,
            i4.SpinnerModule,
            i1.I18nModule], exports: [PaymentMethodComponent] });
    PaymentMethodModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentMethodModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutPaymentDetails: {
                        component: PaymentMethodComponent,
                        // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i3.RouterModule,
                PaymentFormModule,
                i4.CardModule,
                i4.SpinnerModule,
                i1.I18nModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentMethodModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i3.RouterModule,
                            PaymentFormModule,
                            i4.CardModule,
                            i4.SpinnerModule,
                            i1.I18nModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutPaymentDetails: {
                                        component: PaymentMethodComponent,
                                        // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [PaymentMethodComponent],
                        exports: [PaymentMethodComponent],
                    }]
            }] });

    var PaymentTypeComponent = /** @class */ (function () {
        function PaymentTypeComponent(paymentTypeService, checkoutStepService, activatedRoute) {
            var _this = this;
            this.paymentTypeService = paymentTypeService;
            this.checkoutStepService = checkoutStepService;
            this.activatedRoute = activatedRoute;
            this.paymentTypes$ = this.paymentTypeService.getPaymentTypes();
            this.typeSelected$ = this.paymentTypeService
                .getSelectedPaymentType()
                .pipe(operators.filter(i1.isNotUndefined), operators.distinctUntilChanged(), operators.tap(function (selected) {
                _this.typeSelected = selected;
                _this.checkoutStepService.resetSteps();
                _this.checkoutStepService.disableEnableStep(i1$1.CheckoutStepType.PAYMENT_DETAILS, selected === i1.B2BPaymentTypeEnum.ACCOUNT_PAYMENT);
            }));
            this.cartPoNumber$ = this.paymentTypeService
                .getPoNumber()
                .pipe(operators.filter(i1.isNotUndefined), operators.tap(function (po) {
                return (_this.cartPoNumber = po);
            }));
        }
        PaymentTypeComponent.prototype.changeType = function (code) {
            this.paymentTypeService.setPaymentType(code);
            this.typeSelected = code;
        };
        PaymentTypeComponent.prototype.next = function () {
            // set po number to cart
            var poNumInput = this._poNumberInput.nativeElement.value;
            if (this.typeSelected && poNumInput !== this.cartPoNumber) {
                this.paymentTypeService.setPaymentType(this.typeSelected, poNumInput);
            }
            this.checkoutStepService.next(this.activatedRoute);
        };
        PaymentTypeComponent.prototype.back = function () {
            this.checkoutStepService.back(this.activatedRoute);
        };
        return PaymentTypeComponent;
    }());
    PaymentTypeComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeComponent, deps: [{ token: i1__namespace$1.PaymentTypeFacade }, { token: CheckoutStepService }, { token: i3__namespace.ActivatedRoute }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PaymentTypeComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PaymentTypeComponent, selector: "cx-payment-type", viewQueries: [{ propertyName: "_poNumberInput", first: true, predicate: ["poNumber"], descendants: true }], ngImport: i0__namespace, template: "<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <label>\n      <span class=\"label-content\">{{\n        'checkoutPO.poNumber' | cxTranslate\n      }}</span>\n      <input\n        #poNumber\n        class=\"form-control\"\n        formControlName=\"poNumber\"\n        type=\"text\"\n        placeholder=\"{{ 'checkoutPO.placeholder' | cxTranslate }}\"\n        value=\"{{ cartPoNumber$ | async }}\"\n      />\n    </label>\n  </div>\n</div>\n<div class=\"row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <ng-container\n      *ngIf=\"\n        (paymentTypes$ | async)?.length && typeSelected$ | async;\n        else loading\n      \"\n    >\n      <label class=\"cx-payment-type-container\">\n        <span class=\"label-content\">{{\n          'paymentTypes.title' | cxTranslate\n        }}</span>\n        <div class=\"form-check\" *ngFor=\"let type of paymentTypes$ | async\">\n          <input\n            id=\"paymentType-{{ type.code }}\"\n            class=\"form-check-input\"\n            role=\"radio\"\n            type=\"radio\"\n            aria-checked=\"true\"\n            (change)=\"changeType(type.code)\"\n            [value]=\"type.code\"\n            [checked]=\"type.code == typeSelected\"\n            formControlName=\"paymentType\"\n          />\n          <label\n            class=\"cx-payment-type-label form-check-label form-radio-label\"\n            for=\"paymentType-{{ type.code }}\"\n          >\n            <div class=\"cx-payment-type\">\n              {{ 'paymentTypes.paymentType_' + type?.code | cxTranslate }}\n            </div>\n          </label>\n        </div>\n      </label>\n    </ng-container>\n  </div>\n</div>\n\n<div class=\"cx-checkout-btns row\">\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-action\" (click)=\"back()\">\n      {{ 'checkout.backToCart' | cxTranslate }}\n    </button>\n  </div>\n  <div class=\"col-md-12 col-lg-6\">\n    <button class=\"btn btn-block btn-primary\" (click)=\"next()\">\n      {{ 'common.continue' | cxTranslate }}\n    </button>\n  </div>\n</div>\n\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n", components: [{ type: i4__namespace.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe, "async": i3__namespace$2.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-payment-type',
                        templateUrl: './payment-type.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.PaymentTypeFacade }, { type: CheckoutStepService }, { type: i3__namespace.ActivatedRoute }]; }, propDecorators: { _poNumberInput: [{
                    type: i0.ViewChild,
                    args: ['poNumber', { static: false }]
                }] } });

    var PaymentTypeModule = /** @class */ (function () {
        function PaymentTypeModule() {
        }
        return PaymentTypeModule;
    }());
    PaymentTypeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PaymentTypeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeModule, declarations: [PaymentTypeComponent], imports: [i3$2.CommonModule,
            i1.I18nModule,
            i4.SpinnerModule, i1__namespace.ConfigModule], exports: [PaymentTypeComponent] });
    PaymentTypeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeModule, imports: [[
                i3$2.CommonModule,
                i1.I18nModule,
                i4.SpinnerModule,
                i1.ConfigModule.withConfig({
                    cmsComponents: {
                        CheckoutPaymentType: {
                            component: PaymentTypeComponent,
                            guards: [CheckoutAuthGuard, CartNotEmptyGuard, i4.CartValidationGuard],
                        },
                    },
                }),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i1.I18nModule,
                            i4.SpinnerModule,
                            i1.ConfigModule.withConfig({
                                cmsComponents: {
                                    CheckoutPaymentType: {
                                        component: PaymentTypeComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, i4.CartValidationGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [PaymentTypeComponent],
                        exports: [PaymentTypeComponent],
                    }]
            }] });

    var defaultPlaceOrderSpinnerLayoutConfig = {
        launch: {
            PLACE_ORDER_SPINNER: {
                inline: true,
                component: i4.SpinnerComponent,
                dialogType: i4.DIALOG_TYPE.POPOVER_CENTER_BACKDROP,
            },
        },
    };

    var CheckoutReplenishmentFormService = /** @class */ (function () {
        function CheckoutReplenishmentFormService() {
            /**
             * Default form data
             */
            this.defaultFormData = {
                daysOfWeek: [i1.DaysOfWeek.MONDAY],
                nthDayOfMonth: '1',
                numberOfDays: '14',
                numberOfWeeks: '1',
                recurrencePeriod: i1.recurrencePeriod.DAILY,
                replenishmentStartDate: new Date().toISOString().split('T')[0],
            };
            this.scheduleReplenishmentFormData$ = new rxjs.BehaviorSubject(this.defaultFormData);
        }
        CheckoutReplenishmentFormService.prototype.getScheduleReplenishmentFormData = function () {
            return this.scheduleReplenishmentFormData$.asObservable();
        };
        CheckoutReplenishmentFormService.prototype.setScheduleReplenishmentFormData = function (formData) {
            this.scheduleReplenishmentFormData$.next(formData);
        };
        CheckoutReplenishmentFormService.prototype.resetScheduleReplenishmentFormData = function () {
            this.scheduleReplenishmentFormData$.next(this.defaultFormData);
        };
        return CheckoutReplenishmentFormService;
    }());
    CheckoutReplenishmentFormService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutReplenishmentFormService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutReplenishmentFormService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutReplenishmentFormService, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutReplenishmentFormService, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return []; } });

    var PlaceOrderComponent = /** @class */ (function () {
        function PlaceOrderComponent(checkoutService, routingService, fb, checkoutReplenishmentFormService, launchDialogService, vcr) {
            this.checkoutService = checkoutService;
            this.routingService = routingService;
            this.fb = fb;
            this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
            this.launchDialogService = launchDialogService;
            this.vcr = vcr;
            this.subscription = new rxjs.Subscription();
            this.daysOfWeekNotChecked$ = new rxjs.BehaviorSubject(false);
            this.checkoutSubmitForm = this.fb.group({
                termsAndConditions: [false, i3$1.Validators.requiredTrue],
            });
        }
        Object.defineProperty(PlaceOrderComponent.prototype, "termsAndConditionInvalid", {
            get: function () {
                return this.checkoutSubmitForm.invalid;
            },
            enumerable: false,
            configurable: true
        });
        PlaceOrderComponent.prototype.submitForm = function () {
            if (this.checkoutSubmitForm.valid && Boolean(this.currentOrderType)) {
                switch (this.currentOrderType) {
                    case i1.ORDER_TYPE.PLACE_ORDER: {
                        this.checkoutService.placeOrder(this.checkoutSubmitForm.valid);
                        break;
                    }
                    case i1.ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                        this.checkoutService.scheduleReplenishmentOrder(this.scheduleReplenishmentFormData, this.checkoutSubmitForm.valid);
                        break;
                    }
                }
            }
            else {
                this.checkoutSubmitForm.markAllAsTouched();
            }
        };
        PlaceOrderComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription.add(rxjs.combineLatest([
                this.checkoutService.getPlaceOrderLoading(),
                this.checkoutService.getPlaceOrderSuccess(),
                this.checkoutService.getPlaceOrderError(),
            ]).subscribe(function (_b) {
                var _c = __read(_b, 3), orderLoading = _c[0], orderSuccess = _c[1], orderError = _c[2];
                if (orderLoading) {
                    _this.placedOrder = _this.launchDialogService.launch("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */, _this.vcr);
                }
                if (orderError) {
                    if (_this.placedOrder) {
                        _this.placedOrder
                            .subscribe(function (component) {
                            _this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */);
                            if (component) {
                                component.destroy();
                            }
                        })
                            .unsubscribe();
                        _this.checkoutService.clearPlaceOrderState();
                    }
                }
                if (orderSuccess) {
                    _this.onSuccess(orderSuccess);
                }
            }));
            this.subscription.add(this.checkoutService
                .getCurrentOrderType()
                .subscribe(function (orderType) { return (_this.currentOrderType = orderType); }));
            this.subscription.add(this.checkoutReplenishmentFormService
                .getScheduleReplenishmentFormData()
                .subscribe(function (data) {
                var _a;
                _this.scheduleReplenishmentFormData = data;
                _this.daysOfWeekNotChecked$.next(((_a = data.daysOfWeek) === null || _a === void 0 ? void 0 : _a.length) === 0 &&
                    data.recurrencePeriod === i1.recurrencePeriod.WEEKLY);
            }));
        };
        PlaceOrderComponent.prototype.onSuccess = function (data) {
            if (data) {
                switch (this.currentOrderType) {
                    case i1.ORDER_TYPE.PLACE_ORDER: {
                        this.routingService.go({ cxRoute: 'orderConfirmation' });
                        break;
                    }
                    case i1.ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER: {
                        this.routingService.go({ cxRoute: 'replenishmentConfirmation' });
                        break;
                    }
                }
                this.checkoutReplenishmentFormService.resetScheduleReplenishmentFormData();
            }
        };
        PlaceOrderComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
            this.launchDialogService.clear("PLACE_ORDER_SPINNER" /* PLACE_ORDER_SPINNER */);
            this.checkoutService.clearPlaceOrderState();
        };
        return PlaceOrderComponent;
    }());
    PlaceOrderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PlaceOrderComponent, deps: [{ token: i1__namespace$1.CheckoutFacade }, { token: i1__namespace.RoutingService }, { token: i3__namespace$1.FormBuilder }, { token: CheckoutReplenishmentFormService }, { token: i4__namespace.LaunchDialogService }, { token: i0__namespace.ViewContainerRef }], target: i0__namespace.ɵɵFactoryTarget.Component });
    PlaceOrderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: PlaceOrderComponent, selector: "cx-place-order", ngImport: i0__namespace, template: "<form\n  (ngSubmit)=\"submitForm()\"\n  class=\"cx-place-order-form form-check\"\n  [formGroup]=\"checkoutSubmitForm\"\n>\n  <div class=\"form-group\">\n    <label>\n      <input\n        formControlName=\"termsAndConditions\"\n        class=\"scaled-input form-check-input\"\n        type=\"checkbox\"\n      />\n      <span class=\"form-check-label\">\n        {{ 'checkoutReview.confirmThatRead' | cxTranslate }}\n        <a\n          [routerLink]=\"{ cxRoute: 'termsAndConditions' } | cxUrl\"\n          class=\"cx-tc-link\"\n          target=\"_blank\"\n        >\n          {{ 'checkoutReview.termsAndConditions' | cxTranslate }}\n        </a>\n      </span>\n    </label>\n  </div>\n\n  <button\n    type=\"submit\"\n    class=\"btn btn-primary btn-block\"\n    [disabled]=\"termsAndConditionInvalid || (daysOfWeekNotChecked$ | async)\"\n  >\n    {{ 'checkoutReview.placeOrder' | cxTranslate }}\n  </button>\n</form>\n", directives: [{ type: i3__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i3__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe, "cxUrl": i1__namespace.UrlPipe, "async": i3__namespace$2.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PlaceOrderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-place-order',
                        templateUrl: './place-order.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }, { type: i1__namespace.RoutingService }, { type: i3__namespace$1.FormBuilder }, { type: CheckoutReplenishmentFormService }, { type: i4__namespace.LaunchDialogService }, { type: i0__namespace.ViewContainerRef }]; } });

    var PlaceOrderModule = /** @class */ (function () {
        function PlaceOrderModule() {
        }
        return PlaceOrderModule;
    }());
    PlaceOrderModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PlaceOrderModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    PlaceOrderModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PlaceOrderModule, declarations: [PlaceOrderComponent], imports: [i3$2.CommonModule,
            i3.RouterModule,
            i1.UrlModule,
            i1.I18nModule,
            i3$1.ReactiveFormsModule], exports: [PlaceOrderComponent] });
    PlaceOrderModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PlaceOrderModule, providers: [
            i1.provideConfig(defaultPlaceOrderSpinnerLayoutConfig),
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutPlaceOrder: {
                        component: PlaceOrderComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i3.RouterModule,
                i1.UrlModule,
                i1.I18nModule,
                i3$1.ReactiveFormsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PlaceOrderModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i3.RouterModule,
                            i1.UrlModule,
                            i1.I18nModule,
                            i3$1.ReactiveFormsModule,
                        ],
                        providers: [
                            i1.provideConfig(defaultPlaceOrderSpinnerLayoutConfig),
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutPlaceOrder: {
                                        component: PlaceOrderComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [PlaceOrderComponent],
                        exports: [PlaceOrderComponent],
                    }]
            }] });

    var ReviewSubmitComponent = /** @class */ (function () {
        function ReviewSubmitComponent(checkoutDeliveryService, checkoutPaymentService, userAddressService, activeCartService, translation, checkoutStepService, paymentTypeService, checkoutCostCenterService, userCostCenterService) {
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.checkoutPaymentService = checkoutPaymentService;
            this.userAddressService = userAddressService;
            this.activeCartService = activeCartService;
            this.translation = translation;
            this.checkoutStepService = checkoutStepService;
            this.paymentTypeService = paymentTypeService;
            this.checkoutCostCenterService = checkoutCostCenterService;
            this.userCostCenterService = userCostCenterService;
            this.iconTypes = i4.ICON_TYPE;
            this.checkoutStepType = i1$1.CheckoutStepType;
            this.promotionLocation = i1.PromotionLocation.ActiveCart;
        }
        Object.defineProperty(ReviewSubmitComponent.prototype, "cart$", {
            get: function () {
                return this.activeCartService.getActive();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "entries$", {
            get: function () {
                return this.activeCartService.getEntries();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "steps$", {
            get: function () {
                return this.checkoutStepService.steps$;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "deliveryAddress$", {
            get: function () {
                return this.checkoutDeliveryService.getDeliveryAddress();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "deliveryMode$", {
            get: function () {
                var _this = this;
                return this.checkoutDeliveryService.getSelectedDeliveryMode().pipe(operators.tap(function (selected) {
                    if (selected === null) {
                        _this.checkoutDeliveryService.loadSupportedDeliveryModes();
                    }
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "paymentDetails$", {
            get: function () {
                return this.checkoutPaymentService.getPaymentDetails();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "countryName$", {
            get: function () {
                var _this = this;
                return this.deliveryAddress$.pipe(operators.switchMap(function (address) { var _a; return _this.userAddressService.getCountry((_a = address === null || address === void 0 ? void 0 : address.country) === null || _a === void 0 ? void 0 : _a.isocode); }), operators.tap(function (country) {
                    if (country === null) {
                        _this.userAddressService.loadDeliveryCountries();
                    }
                }), operators.map(function (country) { return country && country.name; }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "poNumber$", {
            get: function () {
                return this.paymentTypeService.getPoNumber();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "paymentType$", {
            get: function () {
                return this.paymentTypeService.getSelectedPaymentType();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "isAccountPayment$", {
            get: function () {
                return this.paymentTypeService.isAccountPayment();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ReviewSubmitComponent.prototype, "costCenter$", {
            get: function () {
                var _this = this;
                return this.userCostCenterService.getActiveCostCenters().pipe(operators.filter(function (costCenters) { return Boolean(costCenters); }), operators.switchMap(function (costCenters) {
                    return _this.checkoutCostCenterService.getCostCenter().pipe(operators.map(function (code) {
                        return costCenters.find(function (cc) { return cc.code === code; });
                    }));
                }));
            },
            enumerable: false,
            configurable: true
        });
        ReviewSubmitComponent.prototype.getShippingAddressCard = function (deliveryAddress, countryName) {
            return rxjs.combineLatest([
                this.translation.translate('addressCard.shipTo'),
            ]).pipe(operators.map(function (_m) {
                var _o = __read(_m, 1), textTitle = _o[0];
                var _a;
                if (!countryName) {
                    countryName = (_a = deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.country) === null || _a === void 0 ? void 0 : _a.isocode;
                }
                var region = '';
                if (deliveryAddress &&
                    deliveryAddress.region &&
                    deliveryAddress.region.isocode) {
                    region = deliveryAddress.region.isocode + ', ';
                }
                return {
                    title: textTitle,
                    textBold: deliveryAddress.firstName + ' ' + deliveryAddress.lastName,
                    text: [
                        deliveryAddress.line1,
                        deliveryAddress.line2,
                        deliveryAddress.town + ', ' + region + countryName,
                        deliveryAddress.postalCode,
                        deliveryAddress.phone,
                    ],
                };
            }));
        };
        ReviewSubmitComponent.prototype.getCostCenterCard = function (costCenter) {
            return rxjs.combineLatest([
                this.translation.translate('checkoutPO.costCenter'),
            ]).pipe(operators.map(function (_m) {
                var _o = __read(_m, 1), textTitle = _o[0];
                var _a;
                return {
                    title: textTitle,
                    textBold: costCenter === null || costCenter === void 0 ? void 0 : costCenter.name,
                    text: ['(' + ((_a = costCenter === null || costCenter === void 0 ? void 0 : costCenter.unit) === null || _a === void 0 ? void 0 : _a.name) + ')'],
                };
            }));
        };
        ReviewSubmitComponent.prototype.getDeliveryModeCard = function (deliveryMode) {
            return rxjs.combineLatest([
                this.translation.translate('checkoutShipping.shippingMethod'),
            ]).pipe(operators.map(function (_m) {
                var _o = __read(_m, 1), textTitle = _o[0];
                var _a, _b;
                return {
                    title: textTitle,
                    textBold: deliveryMode.name,
                    text: [
                        deliveryMode.description,
                        ((_a = deliveryMode.deliveryCost) === null || _a === void 0 ? void 0 : _a.formattedValue)
                            ? (_b = deliveryMode.deliveryCost) === null || _b === void 0 ? void 0 : _b.formattedValue
                            : '',
                    ],
                };
            }));
        };
        ReviewSubmitComponent.prototype.getPaymentMethodCard = function (paymentDetails) {
            return rxjs.combineLatest([
                this.translation.translate('paymentForm.payment'),
                this.translation.translate('paymentCard.expires', {
                    month: paymentDetails.expiryMonth,
                    year: paymentDetails.expiryYear,
                }),
                this.translation.translate('paymentForm.billingAddress'),
            ]).pipe(operators.map(function (_m) {
                var _o = __read(_m, 3), textTitle = _o[0], textExpires = _o[1], billingAddress = _o[2];
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                var region = ((_b = (_a = paymentDetails.billingAddress) === null || _a === void 0 ? void 0 : _a.region) === null || _b === void 0 ? void 0 : _b.isocode)
                    ? ((_d = (_c = paymentDetails.billingAddress) === null || _c === void 0 ? void 0 : _c.region) === null || _d === void 0 ? void 0 : _d.isocode) + ', '
                    : '';
                return {
                    title: textTitle,
                    textBold: paymentDetails.accountHolderName,
                    text: [paymentDetails.cardNumber, textExpires],
                    paragraphs: [
                        {
                            title: billingAddress + ':',
                            text: [
                                ((_e = paymentDetails.billingAddress) === null || _e === void 0 ? void 0 : _e.firstName) +
                                    ' ' +
                                    ((_f = paymentDetails.billingAddress) === null || _f === void 0 ? void 0 : _f.lastName),
                                (_g = paymentDetails.billingAddress) === null || _g === void 0 ? void 0 : _g.line1,
                                ((_h = paymentDetails.billingAddress) === null || _h === void 0 ? void 0 : _h.town) +
                                    ', ' +
                                    region +
                                    ((_k = (_j = paymentDetails.billingAddress) === null || _j === void 0 ? void 0 : _j.country) === null || _k === void 0 ? void 0 : _k.isocode),
                                (_l = paymentDetails.billingAddress) === null || _l === void 0 ? void 0 : _l.postalCode,
                            ],
                        },
                    ],
                };
            }));
        };
        ReviewSubmitComponent.prototype.getPoNumberCard = function (poNumber) {
            return rxjs.combineLatest([
                this.translation.translate('checkoutReview.poNumber'),
                this.translation.translate('checkoutPO.noPoNumber'),
            ]).pipe(operators.map(function (_m) {
                var _o = __read(_m, 2), textTitle = _o[0], noneTextTitle = _o[1];
                return {
                    title: textTitle,
                    textBold: poNumber ? poNumber : noneTextTitle,
                };
            }));
        };
        ReviewSubmitComponent.prototype.getPaymentTypeCard = function (paymentType) {
            return rxjs.combineLatest([
                this.translation.translate('checkoutProgress.methodOfPayment'),
                this.translation.translate('paymentTypes.paymentType_' + paymentType),
            ]).pipe(operators.map(function (_m) {
                var _o = __read(_m, 2), textTitle = _o[0], paymentTypeTranslation = _o[1];
                return {
                    title: textTitle,
                    textBold: paymentTypeTranslation,
                };
            }));
        };
        ReviewSubmitComponent.prototype.getCheckoutStepUrl = function (stepType) {
            var step = this.checkoutStepService.getCheckoutStep(stepType);
            return step && step.routeName;
        };
        ReviewSubmitComponent.prototype.shippingSteps = function (steps) {
            return steps.filter(function (step) { return i1$1.checkoutShippingSteps.includes(step.type[0]); });
        };
        ReviewSubmitComponent.prototype.paymentSteps = function (steps) {
            return steps.filter(function (step) { return i1$1.checkoutPaymentSteps.includes(step.type[0]); });
        };
        return ReviewSubmitComponent;
    }());
    ReviewSubmitComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReviewSubmitComponent, deps: [{ token: i1__namespace$1.CheckoutDeliveryFacade }, { token: i1__namespace$1.CheckoutPaymentFacade }, { token: i1__namespace.UserAddressService }, { token: i1__namespace.ActiveCartService }, { token: i1__namespace.TranslationService }, { token: CheckoutStepService }, { token: i1__namespace$1.PaymentTypeFacade }, { token: i1__namespace$1.CheckoutCostCenterFacade }, { token: i1__namespace.UserCostCenterService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ReviewSubmitComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ReviewSubmitComponent, selector: "cx-review-submit", ngImport: i0__namespace, template: "<div class=\"cx-review\">\n  <!-- TITLE -->\n  <h2 class=\"cx-review-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutReview.review' | cxTranslate }}\n  </h2>\n\n  <div class=\"cx-review-summary row\">\n    <ng-container *ngIf=\"(steps$ | async)?.slice(0, -1) as steps\">\n      <div class=\"col-md-12 col-lg-6 col-xl-6 cx-review-payment-col\">\n        <ng-container *ngFor=\"let step of paymentSteps(steps)\">\n          <ng-container [ngSwitch]=\"step.type[0]\">\n            <ng-container *ngSwitchCase=\"checkoutStepType.PAYMENT_TYPE\">\n              <ng-container *ngTemplateOutlet=\"poNumber\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.PAYMENT_TYPE\">\n              <ng-container *ngTemplateOutlet=\"paymentType\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.PAYMENT_DETAILS\">\n              <ng-container *ngTemplateOutlet=\"paymentMethod\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.SHIPPING_ADDRESS\">\n              <ng-container *ngTemplateOutlet=\"costCenter\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n      <div class=\"col-md-12 col-lg-6 col-xl-6 cx-review-shipping-col\">\n        <ng-container *ngFor=\"let step of shippingSteps(steps)\">\n          <ng-container [ngSwitch]=\"step.type[0]\">\n            <ng-container *ngSwitchCase=\"checkoutStepType.SHIPPING_ADDRESS\">\n              <ng-container *ngTemplateOutlet=\"shippingAddress\"></ng-container>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"checkoutStepType.DELIVERY_MODE\">\n              <ng-container *ngTemplateOutlet=\"deliveryMode\"></ng-container>\n            </ng-container>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n  </div>\n\n  <!-- PO NUMBER SECTION -->\n  <ng-template #poNumber>\n    <div class=\"cx-review-summary-card\">\n      <cx-card [content]=\"getPoNumberCard(poNumber$ | async) | async\"></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentType' | cxTranslate\"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_TYPE)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- PAYMENT TYPE SECTION -->\n  <ng-template #paymentType>\n    <div class=\"cx-review-summary-card\">\n      <cx-card\n        *ngIf=\"paymentType$ | async as paymentType\"\n        [content]=\"getPaymentTypeCard(paymentType) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentType' | cxTranslate\"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_TYPE)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- COST CENTER SECTION -->\n  <ng-template #costCenter>\n    <ng-container *ngIf=\"isAccountPayment$ | async\">\n      <div class=\"cx-review-summary-card\">\n        <cx-card\n          *ngIf=\"costCenter$ | async as costCenter\"\n          [content]=\"getCostCenterCard(costCenter) | async\"\n        ></cx-card>\n        <div class=\"cx-review-summary-edit-step\">\n          <a\n            [attr.aria-label]=\"\n              'checkoutReview.editShippingAddressDetails' | cxTranslate\n            \"\n            [routerLink]=\"\n              {\n                cxRoute: getCheckoutStepUrl(checkoutStepType.SHIPPING_ADDRESS)\n              } | cxUrl\n            \"\n            ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n          ></a>\n        </div>\n      </div>\n    </ng-container>\n  </ng-template>\n\n  <!-- SHIPPING ADDRESS SECTION -->\n  <ng-template #shippingAddress>\n    <div\n      *ngIf=\"deliveryAddress$ | async as deliveryAddress\"\n      class=\"cx-review-summary-card cx-review-card-address\"\n    >\n      <cx-card\n        *ngIf=\"countryName$ | async as countryName\"\n        [content]=\"getShippingAddressCard(deliveryAddress, countryName) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"\n            'checkoutReview.editShippingAddressDetails' | cxTranslate\n          \"\n          [routerLink]=\"\n            {\n              cxRoute: getCheckoutStepUrl(checkoutStepType.SHIPPING_ADDRESS)\n            } | cxUrl\n          \"\n          ><cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon\n        ></a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- DELIVERY MODE SECTION -->\n  <ng-template #deliveryMode>\n    <div class=\"cx-review-summary-card cx-review-card-shipping\">\n      <cx-card\n        *ngIf=\"deliveryMode$ | async as deliveryMode\"\n        [content]=\"getDeliveryModeCard(deliveryMode) | async\"\n      ></cx-card>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editDeliveryMode' | cxTranslate\"\n          [routerLink]=\"\n            { cxRoute: getCheckoutStepUrl(checkoutStepType.DELIVERY_MODE) }\n              | cxUrl\n          \"\n        >\n          <cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon>\n        </a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- PAYMENT METHOD SECTION -->\n  <ng-template #paymentMethod>\n    <div class=\"cx-review-summary-card cx-review-card-payment\">\n      <div>\n        <cx-card\n          *ngIf=\"paymentDetails$ | async as paymentDetails\"\n          [content]=\"getPaymentMethodCard(paymentDetails) | async\"\n        ></cx-card>\n      </div>\n      <div class=\"cx-review-summary-edit-step\">\n        <a\n          [attr.aria-label]=\"'checkoutReview.editPaymentDetails' | cxTranslate\"\n          [routerLink]=\"\n            { cxRoute: getCheckoutStepUrl(checkoutStepType.PAYMENT_DETAILS) }\n              | cxUrl\n          \"\n        >\n          <cx-icon aria-hidden=\"true\" [type]=\"iconTypes.PENCIL\"></cx-icon>\n        </a>\n      </div>\n    </div>\n  </ng-template>\n\n  <!-- CART ITEM SECTION -->\n  <ng-container *ngIf=\"cart$ | async as cart\">\n    <h4 class=\"cx-review-cart-total d-none d-lg-block d-xl-block\">\n      {{\n        'cartItems.cartTotal'\n          | cxTranslate: { count: cart.deliveryItemsQuantity }\n      }}:\n      {{ cart.totalPrice?.formattedValue }}\n    </h4>\n    <h4 class=\"cx-review-cart-heading d-block d-lg-none d-xl-none\">\n      {{ 'checkoutReview.placeOrder' | cxTranslate }}\n    </h4>\n    <div\n      class=\"cx-review-cart-item col-md-12\"\n      *ngIf=\"entries$ | async as entries\"\n    >\n      <cx-promotions\n        [promotions]=\"\n          (cart.appliedOrderPromotions || []).concat(\n            cart.potentialOrderPromotions || []\n          )\n        \"\n      ></cx-promotions>\n\n      <cx-cart-item-list\n        [items]=\"entries\"\n        [readonly]=\"true\"\n        [promotionLocation]=\"promotionLocation\"\n      ></cx-cart-item-list>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i4__namespace.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { type: i4__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }, { type: i4__namespace.PromotionsComponent, selector: "cx-promotions", inputs: ["promotions"] }, { type: i4__namespace.CartItemListComponent, selector: "cx-cart-item-list", inputs: ["readonly", "hasHeader", "options", "cartId", "items", "promotionLocation", "cartIsLoading"] }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$2.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i3__namespace$2.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i3__namespace$2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3__namespace.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe, "async": i3__namespace$2.AsyncPipe, "cxUrl": i1__namespace.UrlPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReviewSubmitComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-review-submit',
                        templateUrl: './review-submit.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutDeliveryFacade }, { type: i1__namespace$1.CheckoutPaymentFacade }, { type: i1__namespace.UserAddressService }, { type: i1__namespace.ActiveCartService }, { type: i1__namespace.TranslationService }, { type: CheckoutStepService }, { type: i1__namespace$1.PaymentTypeFacade }, { type: i1__namespace$1.CheckoutCostCenterFacade }, { type: i1__namespace.UserCostCenterService }]; } });

    var ReviewSubmitModule = /** @class */ (function () {
        function ReviewSubmitModule() {
        }
        return ReviewSubmitModule;
    }());
    ReviewSubmitModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReviewSubmitModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReviewSubmitModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReviewSubmitModule, declarations: [ReviewSubmitComponent], imports: [i3$2.CommonModule,
            i4.CardModule,
            i4.CartSharedModule,
            i1.I18nModule,
            i1.UrlModule,
            i3.RouterModule,
            i4.PromotionsModule,
            i4.IconModule], exports: [ReviewSubmitComponent] });
    ReviewSubmitModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReviewSubmitModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutReviewOrder: {
                        component: ReviewSubmitComponent,
                        // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i4.CardModule,
                i4.CartSharedModule,
                i1.I18nModule,
                i1.UrlModule,
                i3.RouterModule,
                i4.PromotionsModule,
                i4.IconModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReviewSubmitModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i4.CardModule,
                            i4.CartSharedModule,
                            i1.I18nModule,
                            i1.UrlModule,
                            i3.RouterModule,
                            i4.PromotionsModule,
                            i4.IconModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutReviewOrder: {
                                        component: ReviewSubmitComponent,
                                        // TODO(#8880): Shouldn't we keep ShippingAddressSetGuard and others here?
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [ReviewSubmitComponent],
                        exports: [ReviewSubmitComponent],
                    }]
            }] });

    var ScheduleReplenishmentOrderComponent = /** @class */ (function () {
        function ScheduleReplenishmentOrderComponent(checkoutService, checkoutReplenishmentFormService) {
            this.checkoutService = checkoutService;
            this.checkoutReplenishmentFormService = checkoutReplenishmentFormService;
            this.subscription = new rxjs.Subscription();
            this.iconTypes = i4.ICON_TYPE;
            this.orderTypes = i1.ORDER_TYPE;
            this.daysOfWeek = Object.values(i1.DaysOfWeek);
            this.recurrencePeriodType = Object.values(i1.recurrencePeriod);
            this.selectedOrderType$ = this.checkoutService.getCurrentOrderType();
            this.isMonthly = false;
            this.isWeekly = false;
            this.currentDaysOfWeek = [];
        }
        ScheduleReplenishmentOrderComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription.add(this.checkoutReplenishmentFormService
                .getScheduleReplenishmentFormData()
                .subscribe(function (data) {
                _this.scheduleReplenishmentFormData = data;
            }));
            this.initConfig();
        };
        ScheduleReplenishmentOrderComponent.prototype.changeOrderType = function (orderType) {
            this.checkoutService.setOrderType(orderType);
        };
        ScheduleReplenishmentOrderComponent.prototype.changeNumberOfDays = function (nDays) {
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { numberOfDays: nDays }));
        };
        ScheduleReplenishmentOrderComponent.prototype.changeNumberOfWeeks = function (nWeeks) {
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { numberOfWeeks: nWeeks }));
        };
        ScheduleReplenishmentOrderComponent.prototype.changeRecurrencePeriodType = function (type) {
            this.isWeekly = type === i1.recurrencePeriod.WEEKLY;
            this.isMonthly = type === i1.recurrencePeriod.MONTHLY;
            this.numberOfDays = this.isMonthly
                ? this.createNumberStringArray(31)
                : this.createNumberStringArray(30);
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { recurrencePeriod: type }));
        };
        ScheduleReplenishmentOrderComponent.prototype.changeDayOfTheMonth = function (dayOfMonth) {
            this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { nthDayOfMonth: dayOfMonth }));
        };
        ScheduleReplenishmentOrderComponent.prototype.changeReplenishmentStartDate = function (date) {
            if (Boolean(date)) {
                this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { replenishmentStartDate: date }));
            }
        };
        ScheduleReplenishmentOrderComponent.prototype.changeRepeatDays = function (day, isChecked) {
            if (isChecked) {
                this.currentDaysOfWeek = __spreadArray([], __read(this.currentDaysOfWeek));
                this.currentDaysOfWeek.push(day);
                this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { daysOfWeek: this.currentDaysOfWeek }));
            }
            else {
                var foundDay = this.currentDaysOfWeek.find(function (data) { return day === data; });
                if (!foundDay)
                    return;
                var index = this.currentDaysOfWeek.indexOf(foundDay);
                this.currentDaysOfWeek.splice(index, 1);
                this.checkoutReplenishmentFormService.setScheduleReplenishmentFormData(Object.assign(Object.assign({}, this.scheduleReplenishmentFormData), { daysOfWeek: this.currentDaysOfWeek }));
            }
        };
        ScheduleReplenishmentOrderComponent.prototype.hasDaysOfWeekChecked = function (day) {
            return this.currentDaysOfWeek.includes(day);
        };
        ScheduleReplenishmentOrderComponent.prototype.initConfig = function () {
            var _a;
            this.isMonthly =
                this.scheduleReplenishmentFormData.recurrencePeriod ===
                    i1.recurrencePeriod.MONTHLY;
            this.isWeekly =
                this.scheduleReplenishmentFormData.recurrencePeriod ===
                    i1.recurrencePeriod.WEEKLY;
            this.currentDaysOfWeek = __spreadArray([], __read(((_a = this.scheduleReplenishmentFormData.daysOfWeek) !== null && _a !== void 0 ? _a : [])));
            this.numberOfDays = this.isMonthly
                ? this.createNumberStringArray(31)
                : this.createNumberStringArray(30);
            this.numberOfWeeks = this.createNumberStringArray(12);
            this.currentDate =
                this.scheduleReplenishmentFormData.replenishmentStartDate;
        };
        ScheduleReplenishmentOrderComponent.prototype.createNumberStringArray = function (n) {
            return Array(n)
                .fill(0)
                .map(function (_, y) { return (y + 1).toString(); });
        };
        ScheduleReplenishmentOrderComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        return ScheduleReplenishmentOrderComponent;
    }());
    ScheduleReplenishmentOrderComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ScheduleReplenishmentOrderComponent, deps: [{ token: i1__namespace$1.CheckoutFacade }, { token: CheckoutReplenishmentFormService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ScheduleReplenishmentOrderComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ScheduleReplenishmentOrderComponent, selector: "cx-schedule-replenishment-order", ngImport: i0__namespace, template: "<div class=\"cx-order-type-card\">\n  <div class=\"cx-label-container\">\n    <h5 class=\"cx-order-replenishment-header\">\n      {{ 'checkoutReview.autoReplenishOrder' | cxTranslate }}\n    </h5>\n    <cx-icon [type]=\"iconTypes.CLOCK\"></cx-icon>\n  </div>\n  <div\n    class=\"cx-order-type-container form-check\"\n    *ngFor=\"let type of orderTypes | keyvalue\"\n  >\n    <input\n      id=\"orderType-{{ type.value }}\"\n      class=\"scaled-input form-check-input\"\n      role=\"radio\"\n      type=\"radio\"\n      formControlName=\"orderType\"\n      aria-checked=\"true\"\n      (change)=\"changeOrderType(type.value)\"\n      [value]=\"type.value\"\n      [checked]=\"type.value == (selectedOrderType$ | async)\"\n    />\n    <label\n      class=\"order-type-label form-check-label form-radio-label\"\n      for=\"orderType-{{ type.value }}\"\n    >\n      <div class=\"order-type\">\n        {{ 'checkoutReview.orderType_' + type?.value | cxTranslate }}\n      </div>\n    </label>\n  </div>\n  <ng-container\n    *ngIf=\"\n      scheduleReplenishmentFormData &&\n      (selectedOrderType$ | async) === orderTypes.SCHEDULE_REPLENISHMENT_ORDER\n    \"\n  >\n    <div class=\"cx-replenishment-form-data-container\">\n      <div *ngIf=\"!isMonthly\" class=\"cx-days\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <ng-container *ngIf=\"isWeekly; else isDaily\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfWeeks($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nWeeks of numberOfWeeks\"\n              [value]=\"nWeeks\"\n              [selected]=\"\n                nWeeks === scheduleReplenishmentFormData.numberOfWeeks\n              \"\n            >\n              {{ nWeeks }}\n            </option>\n          </select>\n        </ng-container>\n        <ng-template #isDaily>\n          <select\n            class=\"form-control\"\n            (change)=\"changeNumberOfDays($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.numberOfDays\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </ng-template>\n      </div>\n      <div class=\"cx-month\">\n        <span *ngIf=\"isMonthly\" class=\"form-data-label\">{{\n          'checkoutReview.every' | cxTranslate\n        }}</span>\n        <select\n          class=\"form-control\"\n          (change)=\"changeRecurrencePeriodType($event.target.value)\"\n        >\n          <option\n            *ngFor=\"let type of recurrencePeriodType\"\n            [value]=\"type\"\n            [selected]=\"type === scheduleReplenishmentFormData.recurrencePeriod\"\n          >\n            {{ 'checkoutReview.recurrencePeriodType_' + type | cxTranslate }}\n          </option>\n        </select>\n      </div>\n      <div *ngIf=\"isMonthly\" class=\"cx-dayMonth\">\n        <span class=\"form-data-label\">{{\n          'checkoutReview.dayOfMonth' | cxTranslate\n        }}</span>\n        <div class=\"cx-day-of-month\">\n          <select\n            class=\"form-control\"\n            (change)=\"changeDayOfTheMonth($event.target.value)\"\n          >\n            <option\n              *ngFor=\"let nDays of numberOfDays\"\n              [value]=\"nDays\"\n              [selected]=\"nDays === scheduleReplenishmentFormData.nthDayOfMonth\"\n            >\n              {{ nDays }}\n            </option>\n          </select>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"cx-replenishment-form-data-container\">\n      <span class=\"form-data-label\">{{\n        'checkoutReview.startOn' | cxTranslate\n      }}</span>\n      <div class=\"cx-replenishment-date\">\n        <input\n          type=\"date\"\n          placeholder=\"yyyy-mm-dd\"\n          [value]=\"currentDate\"\n          (change)=\"changeReplenishmentStartDate($event.target.value)\"\n        />\n      </div>\n    </div>\n\n    <div\n      *ngIf=\"isWeekly\"\n      class=\"cx-replenishment-form-data-container cx-repeat-days-container\"\n    >\n      <span class=\"cx-repeat-days form-data-label\">{{\n        'checkoutReview.repeatOnDays' | cxTranslate\n      }}</span>\n      <div *ngFor=\"let day of daysOfWeek\" class=\"form-check\">\n        <label for=\"day-{{ day }}\" class=\"cx-week-day\">{{\n          day | titlecase\n        }}</label\n        ><input\n          id=\"day-{{ day }}\"\n          type=\"checkbox\"\n          class=\"form-check-input\"\n          [checked]=\"hasDaysOfWeekChecked(day)\"\n          (change)=\"changeRepeatDays(day, $event.target.checked)\"\n        />\n      </div>\n    </div>\n  </ng-container>\n</div>\n", components: [{ type: i4__namespace.IconComponent, selector: "cx-icon,[cxIcon]", inputs: ["cxIcon", "type"] }], directives: [{ type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe, "keyvalue": i3__namespace$2.KeyValuePipe, "async": i3__namespace$2.AsyncPipe, "titlecase": i3__namespace$2.TitleCasePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ScheduleReplenishmentOrderComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-schedule-replenishment-order',
                        templateUrl: './schedule-replenishment-order.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }, { type: CheckoutReplenishmentFormService }]; } });

    var ScheduleReplenishmentOrderModule = /** @class */ (function () {
        function ScheduleReplenishmentOrderModule() {
        }
        return ScheduleReplenishmentOrderModule;
    }());
    ScheduleReplenishmentOrderModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ScheduleReplenishmentOrderModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ScheduleReplenishmentOrderModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ScheduleReplenishmentOrderModule, declarations: [ScheduleReplenishmentOrderComponent], imports: [i3$2.CommonModule, i3.RouterModule, i1.I18nModule, i4.IconModule], exports: [ScheduleReplenishmentOrderComponent] });
    ScheduleReplenishmentOrderModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ScheduleReplenishmentOrderModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutScheduleReplenishmentOrder: {
                        component: ScheduleReplenishmentOrderComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                    },
                },
            }),
        ], imports: [[i3$2.CommonModule, i3.RouterModule, i1.I18nModule, i4.IconModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ScheduleReplenishmentOrderModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [i3$2.CommonModule, i3.RouterModule, i1.I18nModule, i4.IconModule],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutScheduleReplenishmentOrder: {
                                        component: ScheduleReplenishmentOrderComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [ScheduleReplenishmentOrderComponent],
                        exports: [ScheduleReplenishmentOrderComponent],
                    }]
            }] });

    var ShippingAddressComponent = /** @class */ (function () {
        function ShippingAddressComponent(userAddressService, checkoutDeliveryService, activatedRoute, translation, activeCartService, checkoutStepService, paymentTypeService, userCostCenterService, checkoutCostCenterService) {
            this.userAddressService = userAddressService;
            this.checkoutDeliveryService = checkoutDeliveryService;
            this.activatedRoute = activatedRoute;
            this.translation = translation;
            this.activeCartService = activeCartService;
            this.checkoutStepService = checkoutStepService;
            this.paymentTypeService = paymentTypeService;
            this.userCostCenterService = userCostCenterService;
            this.checkoutCostCenterService = checkoutCostCenterService;
            this.addressFormOpened = false;
            this.forceLoader = false; // this helps with smoother steps transition
            this.doneAutoSelect = false;
            this.isAccountPayment = false;
            this.subscriptions = new rxjs.Subscription();
        }
        Object.defineProperty(ShippingAddressComponent.prototype, "isGuestCheckout", {
            get: function () {
                return this.activeCartService.isGuestCart();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShippingAddressComponent.prototype, "backBtnText", {
            get: function () {
                return this.checkoutStepService.getBackBntText(this.activatedRoute);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShippingAddressComponent.prototype, "isLoading$", {
            get: function () {
                return this.userAddressService.getAddressesLoading();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShippingAddressComponent.prototype, "selectedAddress$", {
            get: function () {
                var _this = this;
                return this.checkoutDeliveryService.getDeliveryAddress().pipe(operators.tap(function (address) {
                    if (address &&
                        (_this.selectedAddress === undefined ||
                            _this.selectedAddress.id !== address.id)) {
                        _this.selectedAddress = address;
                        if (_this.forceLoader) {
                            _this.next();
                        }
                    }
                }));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ShippingAddressComponent.prototype, "cards$", {
            get: function () {
                var _this = this;
                return rxjs.combineLatest([
                    this.getSupportedAddresses(),
                    this.selectedAddress$,
                    this.translation.translate('checkoutAddress.defaultShippingAddress'),
                    this.translation.translate('checkoutAddress.shipToThisAddress'),
                    this.translation.translate('addressCard.selected'),
                ]).pipe(operators.tap(function (_c) {
                    var _d = __read(_c, 2), addresses = _d[0], selected = _d[1];
                    return _this.selectDefaultAddress(addresses, selected);
                }), operators.map(function (_c) {
                    var _d = __read(_c, 5), addresses = _d[0], selected = _d[1], textDefault = _d[2], textShipTo = _d[3], textSelected = _d[4];
                    return addresses.map(function (address) { return ({
                        address: address,
                        card: _this.getCardContent(address, selected, textDefault, textShipTo, textSelected),
                    }); });
                }));
            },
            enumerable: false,
            configurable: true
        });
        ShippingAddressComponent.prototype.getSupportedAddresses = function () {
            var _this = this;
            if (this.isAccountPayment &&
                this.checkoutCostCenterService &&
                this.userCostCenterService) {
                return this.checkoutCostCenterService.getCostCenter().pipe(operators.distinctUntilChanged(), operators.switchMap(function (selected) {
                    var _a, _b;
                    _this.doneAutoSelect = false;
                    return ((_b = (_a = _this.userCostCenterService) === null || _a === void 0 ? void 0 : _a.getCostCenterAddresses(selected)) !== null && _b !== void 0 ? _b : []);
                }));
            }
            return this.userAddressService.getAddresses();
        };
        ShippingAddressComponent.prototype.selectDefaultAddress = function (addresses, selected) {
            if (!this.doneAutoSelect &&
                addresses &&
                addresses.length &&
                (!selected || Object.keys(selected).length === 0)) {
                if (this.isAccountPayment) {
                    if (addresses.length === 1) {
                        this.selectAddress(addresses[0]);
                    }
                }
                else {
                    selected = addresses.find(function (address) { return address.defaultAddress; });
                    if (selected) {
                        this.selectAddress(selected);
                    }
                }
                this.doneAutoSelect = true;
            }
        };
        ShippingAddressComponent.prototype.ngOnInit = function () {
            var _this = this;
            if (this.paymentTypeService &&
                this.userCostCenterService &&
                this.checkoutCostCenterService) {
                this.subscriptions.add(this.paymentTypeService
                    .isAccountPayment()
                    .pipe(operators.distinctUntilChanged())
                    .subscribe(function (isAccount) { return (_this.isAccountPayment = isAccount); }));
            }
            if (!this.isGuestCheckout && !this.isAccountPayment) {
                this.userAddressService.loadAddresses();
            }
        };
        ShippingAddressComponent.prototype.getCardContent = function (address, selected, textDefaultShippingAddress, textShipToThisAddress, textSelected) {
            var _a;
            var region = '';
            if (address.region && address.region.isocode) {
                region = address.region.isocode + ', ';
            }
            return {
                title: address.defaultAddress ? textDefaultShippingAddress : '',
                textBold: address.firstName + ' ' + address.lastName,
                text: [
                    address.line1,
                    address.line2,
                    address.town + ', ' + region + ((_a = address.country) === null || _a === void 0 ? void 0 : _a.isocode),
                    address.postalCode,
                    address.phone,
                ],
                actions: [{ name: textShipToThisAddress, event: 'send' }],
                header: selected && selected.id === address.id ? textSelected : '',
            };
        };
        ShippingAddressComponent.prototype.selectAddress = function (address) {
            this.checkoutDeliveryService.setDeliveryAddress(address);
        };
        ShippingAddressComponent.prototype.addAddress = function (address) {
            this.forceLoader = true;
            if (Boolean(address)) {
                this.checkoutDeliveryService.createAndSetAddress(address);
            }
            else {
                this.forceLoader = false;
                this.next();
            }
        };
        ShippingAddressComponent.prototype.showNewAddressForm = function () {
            this.addressFormOpened = true;
        };
        ShippingAddressComponent.prototype.hideNewAddressForm = function (goPrevious) {
            if (goPrevious === void 0) { goPrevious = false; }
            this.addressFormOpened = false;
            if (goPrevious) {
                this.back();
            }
        };
        ShippingAddressComponent.prototype.next = function () {
            this.checkoutStepService.next(this.activatedRoute);
        };
        ShippingAddressComponent.prototype.back = function () {
            this.checkoutStepService.back(this.activatedRoute);
        };
        ShippingAddressComponent.prototype.ngOnDestroy = function () {
            this.subscriptions.unsubscribe();
        };
        return ShippingAddressComponent;
    }());
    ShippingAddressComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ShippingAddressComponent, deps: [{ token: i1__namespace.UserAddressService }, { token: i1__namespace$1.CheckoutDeliveryFacade }, { token: i3__namespace.ActivatedRoute }, { token: i1__namespace.TranslationService }, { token: i1__namespace.ActiveCartService }, { token: CheckoutStepService }, { token: i1__namespace$1.PaymentTypeFacade }, { token: i1__namespace.UserCostCenterService }, { token: i1__namespace$1.CheckoutCostCenterFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    ShippingAddressComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: ShippingAddressComponent, selector: "cx-shipping-address", ngImport: i0__namespace, template: "<ng-container *ngIf=\"cards$ | async as cards\">\n  <h2 class=\"cx-checkout-title d-none d-lg-block d-xl-block\">\n    {{ 'checkoutAddress.shippingAddress' | cxTranslate }}\n  </h2>\n  <ng-container *ngIf=\"!forceLoader && !(isLoading$ | async); else loading\">\n    <ng-container\n      *ngIf=\"\n        isAccountPayment || (cards?.length && !addressFormOpened);\n        else newAddressForm\n      \"\n    >\n      <p class=\"cx-checkout-text\">\n        {{ 'checkoutAddress.selectYourShippingAddress' | cxTranslate }}\n      </p>\n      <div class=\"cx-checkout-btns row\" *ngIf=\"!isAccountPayment\">\n        <div class=\"col-sm-12 col-md-12 col-lg-6\">\n          <button\n            class=\"btn btn-block btn-action\"\n            (click)=\"showNewAddressForm()\"\n          >\n            {{ 'checkoutAddress.addNewAddress' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-body row\">\n        <div\n          class=\"cx-shipping-address-card col-md-12 col-lg-6\"\n          *ngFor=\"let card of cards; let i = index\"\n        >\n          <div\n            class=\"cx-shipping-address-card-inner\"\n            (click)=\"selectAddress(card.address)\"\n          >\n            <cx-card\n              [border]=\"true\"\n              [fitToContainer]=\"true\"\n              [content]=\"card.card\"\n              (sendCard)=\"selectAddress(card.address)\"\n            ></cx-card>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"cx-checkout-btns row\">\n        <div class=\"col-md-12 col-lg-6\">\n          <button class=\"cx-btn btn btn-block btn-action\" (click)=\"back()\">\n            {{ backBtnText | cxTranslate }}\n          </button>\n        </div>\n        <div class=\"col-md-12 col-lg-6\">\n          <button\n            class=\"cx-btn btn btn-block btn-primary\"\n            [disabled]=\"!selectedAddress?.id\"\n            (click)=\"next()\"\n          >\n            {{ 'common.continue' | cxTranslate }}\n          </button>\n        </div>\n      </div>\n    </ng-container>\n\n    <ng-template #newAddressForm>\n      <cx-address-form\n        *ngIf=\"cards.length; else initialAddressForm\"\n        [showTitleCode]=\"true\"\n        (backToAddress)=\"hideNewAddressForm(false)\"\n        (submitAddress)=\"addAddress($event)\"\n      ></cx-address-form>\n      <ng-template #initialAddressForm>\n        <cx-address-form\n          [showTitleCode]=\"true\"\n          [setAsDefaultField]=\"!isGuestCheckout\"\n          [addressData]=\"selectedAddress\"\n          cancelBtnLabel=\"{{ backBtnText | cxTranslate }}\"\n          (backToAddress)=\"hideNewAddressForm(true)\"\n          (submitAddress)=\"addAddress($event)\"\n        ></cx-address-form>\n      </ng-template>\n    </ng-template>\n  </ng-container>\n\n  <ng-template #loading>\n    <div class=\"cx-spinner\">\n      <cx-spinner></cx-spinner>\n    </div>\n  </ng-template>\n</ng-container>\n", components: [{ type: i4__namespace.CardComponent, selector: "cx-card", inputs: ["border", "editMode", "isDefault", "content", "fitToContainer", "truncateText", "charactersLimit"], outputs: ["deleteCard", "setDefaultCard", "sendCard", "editCard", "cancelCard"] }, { type: i4__namespace.AddressFormComponent, selector: "cx-address-form", inputs: ["addressData", "actionBtnLabel", "cancelBtnLabel", "setAsDefaultField", "showTitleCode", "showCancelBtn"], outputs: ["submitAddress", "backToAddress"] }, { type: i4__namespace.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3__namespace$2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ShippingAddressComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-shipping-address',
                        templateUrl: './shipping-address.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.UserAddressService }, { type: i1__namespace$1.CheckoutDeliveryFacade }, { type: i3__namespace.ActivatedRoute }, { type: i1__namespace.TranslationService }, { type: i1__namespace.ActiveCartService }, { type: CheckoutStepService }, { type: i1__namespace$1.PaymentTypeFacade }, { type: i1__namespace.UserCostCenterService }, { type: i1__namespace$1.CheckoutCostCenterFacade }]; } });

    var ShippingAddressModule = /** @class */ (function () {
        function ShippingAddressModule() {
        }
        return ShippingAddressModule;
    }());
    ShippingAddressModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ShippingAddressModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ShippingAddressModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ShippingAddressModule, declarations: [ShippingAddressComponent], imports: [i3$2.CommonModule,
            i3.RouterModule,
            i4.AddressFormModule,
            i4.CardModule,
            i4.SpinnerModule,
            i1.I18nModule], exports: [ShippingAddressComponent] });
    ShippingAddressModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ShippingAddressModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    CheckoutShippingAddress: {
                        component: ShippingAddressComponent,
                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, i4.CartValidationGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i3.RouterModule,
                i4.AddressFormModule,
                i4.CardModule,
                i4.SpinnerModule,
                i1.I18nModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ShippingAddressModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i3.RouterModule,
                            i4.AddressFormModule,
                            i4.CardModule,
                            i4.SpinnerModule,
                            i1.I18nModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    CheckoutShippingAddress: {
                                        component: ShippingAddressComponent,
                                        guards: [CheckoutAuthGuard, CartNotEmptyGuard, i4.CartValidationGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: [ShippingAddressComponent],
                        exports: [ShippingAddressComponent],
                    }]
            }] });

    var GuestRegisterFormComponent = /** @class */ (function () {
        function GuestRegisterFormComponent(userRegisterFacade, routingService, authService, fb) {
            this.userRegisterFacade = userRegisterFacade;
            this.routingService = routingService;
            this.authService = authService;
            this.fb = fb;
            this.guestRegisterForm = this.fb.group({
                password: [
                    '',
                    [i3$1.Validators.required, i4.CustomFormValidators.passwordValidator],
                ],
                passwordconf: ['', i3$1.Validators.required],
            }, {
                validators: i4.CustomFormValidators.passwordsMustMatch('password', 'passwordconf'),
            });
        }
        GuestRegisterFormComponent.prototype.submit = function () {
            var _this = this;
            if (this.guestRegisterForm.valid) {
                this.userRegisterFacade.registerGuest(this.guid, this.guestRegisterForm.value.password);
                if (!this.subscription) {
                    this.subscription = this.authService
                        .isUserLoggedIn()
                        .subscribe(function (isLoggedIn) {
                        if (isLoggedIn) {
                            _this.routingService.go({ cxRoute: 'home' });
                        }
                    });
                }
            }
            else {
                this.guestRegisterForm.markAllAsTouched();
            }
        };
        GuestRegisterFormComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return GuestRegisterFormComponent;
    }());
    GuestRegisterFormComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: GuestRegisterFormComponent, deps: [{ token: i1__namespace$2.UserRegisterFacade }, { token: i1__namespace.RoutingService }, { token: i1__namespace.AuthService }, { token: i3__namespace$1.FormBuilder }], target: i0__namespace.ɵɵFactoryTarget.Component });
    GuestRegisterFormComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: GuestRegisterFormComponent, selector: "cx-guest-register-form", inputs: { guid: "guid", email: "email" }, ngImport: i0__namespace, template: "<div class=\"register-guest\">\n  <div class=\"col-md-6 col-lg-4\">\n    <h3>{{ 'checkoutOrderConfirmation.createAccount' | cxTranslate }}</h3>\n    <p>\n      {{\n        'checkoutOrderConfirmation.createAccountForNext'\n          | cxTranslate: { email: email }\n      }}\n    </p>\n\n    <form (ngSubmit)=\"submit()\" [formGroup]=\"guestRegisterForm\">\n      <div class=\"form-group\">\n        <label>\n          <span class=\"label-content\">{{\n            'register.password.label' | cxTranslate\n          }}</span>\n          <input\n            aria-required=\"true\"\n            class=\"form-control\"\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"{{ 'register.password.placeholder' | cxTranslate }}\"\n            formControlName=\"password\"\n          />\n          <cx-form-errors\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n            [control]=\"guestRegisterForm.get('password')\"\n          ></cx-form-errors>\n        </label>\n      </div>\n\n      <div class=\"form-group\">\n        <label>\n          <span class=\"label-content\">{{\n            'register.confirmPassword.label' | cxTranslate\n          }}</span>\n          <input\n            aria-required=\"true\"\n            class=\"form-control\"\n            type=\"password\"\n            name=\"passwordconf\"\n            placeholder=\"{{\n              'register.confirmPassword.placeholder' | cxTranslate\n            }}\"\n            formControlName=\"passwordconf\"\n          />\n          <cx-form-errors\n            aria-live=\"assertive\"\n            aria-atomic=\"true\"\n            [control]=\"guestRegisterForm.get('passwordconf')\"\n          ></cx-form-errors>\n        </label>\n      </div>\n\n      <button type=\"submit\" class=\"btn btn-block btn-primary\">\n        {{ 'common.submit' | cxTranslate }}\n      </button>\n    </form>\n  </div>\n</div>\n", components: [{ type: i4__namespace.FormErrorsComponent, selector: "cx-form-errors", inputs: ["prefix", "translationParams", "control"] }], directives: [{ type: i3__namespace$1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3__namespace$1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3__namespace$1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i3__namespace$1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3__namespace$1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3__namespace$1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }], pipes: { "cxTranslate": i1__namespace.TranslatePipe } });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: GuestRegisterFormComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-guest-register-form',
                        templateUrl: './guest-register-form.component.html',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$2.UserRegisterFacade }, { type: i1__namespace.RoutingService }, { type: i1__namespace.AuthService }, { type: i3__namespace$1.FormBuilder }]; }, propDecorators: { guid: [{
                    type: i0.Input
                }], email: [{
                    type: i0.Input
                }] } });

    var OrderConfirmationItemsComponent = /** @class */ (function () {
        function OrderConfirmationItemsComponent(checkoutService) {
            this.checkoutService = checkoutService;
            this.promotionLocation = i1.PromotionLocation.Checkout;
        }
        OrderConfirmationItemsComponent.prototype.ngOnInit = function () {
            this.order$ = this.checkoutService.getOrderDetails();
        };
        OrderConfirmationItemsComponent.prototype.ngOnDestroy = function () {
            this.checkoutService.clearCheckoutData();
        };
        return OrderConfirmationItemsComponent;
    }());
    OrderConfirmationItemsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationItemsComponent, deps: [{ token: i1__namespace$1.CheckoutFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderConfirmationItemsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderConfirmationItemsComponent, selector: "cx-order-confirmation-items", ngImport: i0__namespace, template: "<div class=\"cx-order-items container\" *ngIf=\"order$ | async as order\">\n  <h4 class=\"cx-order-items-header\">\n    {{ 'checkoutOrderConfirmation.orderItems' | cxTranslate }}\n  </h4>\n\n  <cx-promotions\n    [promotions]=\"order.appliedOrderPromotions || []\"\n  ></cx-promotions>\n\n  <cx-cart-item-list\n    [items]=\"order.entries\"\n    [readonly]=\"true\"\n    [promotionLocation]=\"promotionLocation\"\n  ></cx-cart-item-list>\n</div>\n", components: [{ type: i4__namespace.PromotionsComponent, selector: "cx-promotions", inputs: ["promotions"] }, { type: i4__namespace.CartItemListComponent, selector: "cx-cart-item-list", inputs: ["readonly", "hasHeader", "options", "cartId", "items", "promotionLocation", "cartIsLoading"] }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationItemsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-confirmation-items',
                        templateUrl: './order-confirmation-items.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }]; } });

    var OrderConfirmationOverviewComponent = /** @class */ (function () {
        function OrderConfirmationOverviewComponent(checkoutService) {
            this.checkoutService = checkoutService;
        }
        OrderConfirmationOverviewComponent.prototype.ngOnInit = function () {
            this.order$ = this.checkoutService.getOrderDetails();
        };
        OrderConfirmationOverviewComponent.prototype.ngOnDestroy = function () {
            this.checkoutService.clearCheckoutData();
        };
        return OrderConfirmationOverviewComponent;
    }());
    OrderConfirmationOverviewComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationOverviewComponent, deps: [{ token: i1__namespace$1.CheckoutFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderConfirmationOverviewComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderConfirmationOverviewComponent, selector: "cx-order-confirmation-overview", ngImport: i0__namespace, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <cx-order-overview [order]=\"order\"></cx-order-overview>\n</ng-container>\n", components: [{ type: i4__namespace.OrderOverviewComponent, selector: "cx-order-overview", inputs: ["order"] }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace$2.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationOverviewComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-confirmation-overview',
                        templateUrl: './order-confirmation-overview.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }]; } });

    var OrderConfirmationThankYouMessageComponent = /** @class */ (function () {
        function OrderConfirmationThankYouMessageComponent(checkoutService) {
            this.checkoutService = checkoutService;
            this.isGuestCustomer = false;
        }
        OrderConfirmationThankYouMessageComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.order$ = this.checkoutService.getOrderDetails().pipe(operators.tap(function (order) {
                var _a;
                _this.isGuestCustomer =
                    'guestCustomer' in order ? (_a = order.guestCustomer) !== null && _a !== void 0 ? _a : false : false;
                _this.orderGuid = order.guid;
            }));
            this.isReplenishmentOrderType$ = this.checkoutService
                .getCurrentOrderType()
                .pipe(operators.map(function (orderType) { return i1.ORDER_TYPE.SCHEDULE_REPLENISHMENT_ORDER === orderType; }));
        };
        OrderConfirmationThankYouMessageComponent.prototype.ngOnDestroy = function () {
            this.checkoutService.clearCheckoutData();
        };
        return OrderConfirmationThankYouMessageComponent;
    }());
    OrderConfirmationThankYouMessageComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationThankYouMessageComponent, deps: [{ token: i1__namespace$1.CheckoutFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderConfirmationThankYouMessageComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderConfirmationThankYouMessageComponent, selector: "cx-order-confirmation-thank-you-message", ngImport: i0__namespace, template: "<ng-container *ngIf=\"order$ | async as order\">\n  <div class=\"cx-page-header\">\n    <h1 class=\"cx-page-title\">\n      {{ 'checkoutOrderConfirmation.confirmationOfOrder' | cxTranslate }}\n      {{\n        (isReplenishmentOrderType$ | async)\n          ? order.replenishmentOrderCode\n          : order.code\n      }}\n    </h1>\n  </div>\n\n  <div class=\"cx-order-confirmation-message\">\n    <h2>{{ 'checkoutOrderConfirmation.thankYou' | cxTranslate }}</h2>\n    <p>\n      {{ 'checkoutOrderConfirmation.invoiceHasBeenSentByEmail' | cxTranslate }}\n    </p>\n  </div>\n\n  <div *ngIf=\"isGuestCustomer\">\n    <cx-guest-register-form\n      [guid]=\"orderGuid\"\n      [email]=\"order.paymentInfo.billingAddress.email\"\n    ></cx-guest-register-form>\n  </div>\n\n  <cx-add-to-home-screen-banner></cx-add-to-home-screen-banner>\n</ng-container>\n", components: [{ type: GuestRegisterFormComponent, selector: "cx-guest-register-form", inputs: ["guid", "email"] }, { type: i4__namespace.AddToHomeScreenBannerComponent, selector: "cx-add-to-home-screen-banner" }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace$2.AsyncPipe, "cxTranslate": i1__namespace.TranslatePipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationThankYouMessageComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-confirmation-thank-you-message',
                        templateUrl: './order-confirmation-thank-you-message.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }]; } });

    var OrderConfirmationTotalsComponent = /** @class */ (function () {
        function OrderConfirmationTotalsComponent(checkoutService) {
            this.checkoutService = checkoutService;
        }
        OrderConfirmationTotalsComponent.prototype.ngOnInit = function () {
            this.order$ = this.checkoutService.getOrderDetails();
        };
        OrderConfirmationTotalsComponent.prototype.ngOnDestroy = function () {
            this.checkoutService.clearCheckoutData();
        };
        return OrderConfirmationTotalsComponent;
    }());
    OrderConfirmationTotalsComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationTotalsComponent, deps: [{ token: i1__namespace$1.CheckoutFacade }], target: i0__namespace.ɵɵFactoryTarget.Component });
    OrderConfirmationTotalsComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: OrderConfirmationTotalsComponent, selector: "cx-order-confirmation-totals", ngImport: i0__namespace, template: "<div class=\"cx-order-summary container\" *ngIf=\"order$ | async as order\">\n  <div class=\"row justify-content-end\">\n    <div class=\"col-sm-12 col-md-6 col-lg-5 col-xl-4\">\n      <cx-order-summary [cart]=\"order\"></cx-order-summary>\n    </div>\n  </div>\n</div>\n", components: [{ type: i4__namespace.OrderSummaryComponent, selector: "cx-order-summary", inputs: ["cart"] }], directives: [{ type: i3__namespace$2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3__namespace$2.AsyncPipe }, changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationTotalsComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'cx-order-confirmation-totals',
                        templateUrl: './order-confirmation-totals.component.html',
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }]; } });

    var OrderConfirmationGuard = /** @class */ (function () {
        function OrderConfirmationGuard(checkoutService, router, semanticPathService) {
            this.checkoutService = checkoutService;
            this.router = router;
            this.semanticPathService = semanticPathService;
        }
        OrderConfirmationGuard.prototype.canActivate = function () {
            var _this = this;
            return this.checkoutService.getOrderDetails().pipe(operators.map(function (orderDetails) {
                if (orderDetails && Object.keys(orderDetails).length !== 0) {
                    return true;
                }
                else {
                    return _this.router.parseUrl(_this.semanticPathService.get('orders'));
                }
            }));
        };
        return OrderConfirmationGuard;
    }());
    OrderConfirmationGuard.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationGuard, deps: [{ token: i1__namespace$1.CheckoutFacade }, { token: i3__namespace.Router }, { token: i1__namespace.SemanticPathService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    OrderConfirmationGuard.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationGuard, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationGuard, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace$1.CheckoutFacade }, { type: i3__namespace.Router }, { type: i1__namespace.SemanticPathService }]; } });

    var orderConfirmationComponents = [
        OrderConfirmationItemsComponent,
        OrderConfirmationOverviewComponent,
        OrderConfirmationThankYouMessageComponent,
        OrderConfirmationTotalsComponent,
        GuestRegisterFormComponent,
    ];
    var OrderConfirmationModule = /** @class */ (function () {
        function OrderConfirmationModule() {
        }
        return OrderConfirmationModule;
    }());
    OrderConfirmationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    OrderConfirmationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationModule, declarations: [OrderConfirmationItemsComponent,
            OrderConfirmationOverviewComponent,
            OrderConfirmationThankYouMessageComponent,
            OrderConfirmationTotalsComponent,
            GuestRegisterFormComponent], imports: [i3$2.CommonModule,
            i4.CartSharedModule,
            i4.CardModule,
            i4.PwaModule,
            i4.PromotionsModule,
            i1.I18nModule,
            i3$1.ReactiveFormsModule,
            i1.FeaturesConfigModule,
            i4.FormErrorsModule,
            i4.OrderOverviewModule], exports: [OrderConfirmationItemsComponent,
            OrderConfirmationOverviewComponent,
            OrderConfirmationThankYouMessageComponent,
            OrderConfirmationTotalsComponent,
            GuestRegisterFormComponent] });
    OrderConfirmationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    OrderConfirmationThankMessageComponent: {
                        component: OrderConfirmationThankYouMessageComponent,
                        guards: [OrderConfirmationGuard],
                    },
                    OrderConfirmationItemsComponent: {
                        component: OrderConfirmationItemsComponent,
                        guards: [OrderConfirmationGuard],
                    },
                    OrderConfirmationTotalsComponent: {
                        component: OrderConfirmationTotalsComponent,
                        guards: [OrderConfirmationGuard],
                    },
                    OrderConfirmationOverviewComponent: {
                        component: OrderConfirmationOverviewComponent,
                        guards: [OrderConfirmationGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i4.CartSharedModule,
                i4.CardModule,
                i4.PwaModule,
                i4.PromotionsModule,
                i1.I18nModule,
                i3$1.ReactiveFormsModule,
                i1.FeaturesConfigModule,
                i4.FormErrorsModule,
                i4.OrderOverviewModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: OrderConfirmationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i4.CartSharedModule,
                            i4.CardModule,
                            i4.PwaModule,
                            i4.PromotionsModule,
                            i1.I18nModule,
                            i3$1.ReactiveFormsModule,
                            i1.FeaturesConfigModule,
                            i4.FormErrorsModule,
                            i4.OrderOverviewModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    OrderConfirmationThankMessageComponent: {
                                        component: OrderConfirmationThankYouMessageComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                    OrderConfirmationItemsComponent: {
                                        component: OrderConfirmationItemsComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                    OrderConfirmationTotalsComponent: {
                                        component: OrderConfirmationTotalsComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                    OrderConfirmationOverviewComponent: {
                                        component: OrderConfirmationOverviewComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                },
                            }),
                        ],
                        declarations: __spreadArray([], __read(orderConfirmationComponents)),
                        exports: __spreadArray([], __read(orderConfirmationComponents)),
                    }]
            }] });

    var ReplenishmentOrderConfirmationModule = /** @class */ (function () {
        function ReplenishmentOrderConfirmationModule() {
        }
        return ReplenishmentOrderConfirmationModule;
    }());
    ReplenishmentOrderConfirmationModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderConfirmationModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    ReplenishmentOrderConfirmationModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderConfirmationModule, imports: [i3$2.CommonModule,
            i4.CartSharedModule,
            i4.CardModule,
            i4.PwaModule,
            i4.PromotionsModule,
            i1.I18nModule,
            i3$1.ReactiveFormsModule,
            i1.FeaturesConfigModule,
            i4.FormErrorsModule] });
    ReplenishmentOrderConfirmationModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderConfirmationModule, providers: [
            i1.provideDefaultConfig({
                cmsComponents: {
                    ReplenishmentConfirmationMessageComponent: {
                        component: OrderConfirmationThankYouMessageComponent,
                        guards: [OrderConfirmationGuard],
                    },
                    ReplenishmentConfirmationOverviewComponent: {
                        component: OrderConfirmationOverviewComponent,
                        guards: [OrderConfirmationGuard],
                    },
                    ReplenishmentConfirmationItemsComponent: {
                        component: OrderConfirmationItemsComponent,
                        guards: [OrderConfirmationGuard],
                    },
                    ReplenishmentConfirmationTotalsComponent: {
                        component: OrderConfirmationTotalsComponent,
                        guards: [OrderConfirmationGuard],
                    },
                },
            }),
        ], imports: [[
                i3$2.CommonModule,
                i4.CartSharedModule,
                i4.CardModule,
                i4.PwaModule,
                i4.PromotionsModule,
                i1.I18nModule,
                i3$1.ReactiveFormsModule,
                i1.FeaturesConfigModule,
                i4.FormErrorsModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderConfirmationModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            i4.CartSharedModule,
                            i4.CardModule,
                            i4.PwaModule,
                            i4.PromotionsModule,
                            i1.I18nModule,
                            i3$1.ReactiveFormsModule,
                            i1.FeaturesConfigModule,
                            i4.FormErrorsModule,
                        ],
                        providers: [
                            i1.provideDefaultConfig({
                                cmsComponents: {
                                    ReplenishmentConfirmationMessageComponent: {
                                        component: OrderConfirmationThankYouMessageComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                    ReplenishmentConfirmationOverviewComponent: {
                                        component: OrderConfirmationOverviewComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                    ReplenishmentConfirmationItemsComponent: {
                                        component: OrderConfirmationItemsComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                    ReplenishmentConfirmationTotalsComponent: {
                                        component: OrderConfirmationTotalsComponent,
                                        guards: [OrderConfirmationGuard],
                                    },
                                },
                            }),
                        ],
                    }]
            }] });

    var CheckoutComponentsModule = /** @class */ (function () {
        function CheckoutComponentsModule() {
        }
        return CheckoutComponentsModule;
    }());
    CheckoutComponentsModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutComponentsModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutComponentsModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutComponentsModule, imports: [i3$2.CommonModule,
            CheckoutOrchestratorModule,
            CheckoutOrderSummaryModule,
            CheckoutProgressModule,
            CheckoutProgressMobileTopModule,
            CheckoutProgressMobileBottomModule,
            PaymentTypeModule,
            DeliveryModeModule,
            PaymentMethodModule,
            PlaceOrderModule,
            ScheduleReplenishmentOrderModule,
            ReviewSubmitModule,
            ShippingAddressModule,
            CostCenterModule,
            OrderConfirmationModule,
            ReplenishmentOrderConfirmationModule,
            CheckoutLoginModule] });
    CheckoutComponentsModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutComponentsModule, imports: [[
                i3$2.CommonModule,
                CheckoutOrchestratorModule,
                CheckoutOrderSummaryModule,
                CheckoutProgressModule,
                CheckoutProgressMobileTopModule,
                CheckoutProgressMobileBottomModule,
                PaymentTypeModule,
                DeliveryModeModule,
                PaymentMethodModule,
                PlaceOrderModule,
                ScheduleReplenishmentOrderModule,
                ReviewSubmitModule,
                ShippingAddressModule,
                CostCenterModule,
                OrderConfirmationModule,
                ReplenishmentOrderConfirmationModule,
                CheckoutLoginModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutComponentsModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3$2.CommonModule,
                            CheckoutOrchestratorModule,
                            CheckoutOrderSummaryModule,
                            CheckoutProgressModule,
                            CheckoutProgressMobileTopModule,
                            CheckoutProgressMobileBottomModule,
                            PaymentTypeModule,
                            DeliveryModeModule,
                            PaymentMethodModule,
                            PlaceOrderModule,
                            ScheduleReplenishmentOrderModule,
                            ReviewSubmitModule,
                            ShippingAddressModule,
                            CostCenterModule,
                            OrderConfirmationModule,
                            ReplenishmentOrderConfirmationModule,
                            CheckoutLoginModule,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CartNotEmptyGuard = CartNotEmptyGuard;
    exports.CheckoutAuthGuard = CheckoutAuthGuard;
    exports.CheckoutComponentsModule = CheckoutComponentsModule;
    exports.CheckoutConfigService = CheckoutConfigService;
    exports.CheckoutDetailsService = CheckoutDetailsService;
    exports.CheckoutGuard = CheckoutGuard;
    exports.CheckoutLoginComponent = CheckoutLoginComponent;
    exports.CheckoutLoginModule = CheckoutLoginModule;
    exports.CheckoutOrchestratorComponent = CheckoutOrchestratorComponent;
    exports.CheckoutOrchestratorModule = CheckoutOrchestratorModule;
    exports.CheckoutOrderSummaryComponent = CheckoutOrderSummaryComponent;
    exports.CheckoutOrderSummaryModule = CheckoutOrderSummaryModule;
    exports.CheckoutProgressComponent = CheckoutProgressComponent;
    exports.CheckoutProgressMobileBottomComponent = CheckoutProgressMobileBottomComponent;
    exports.CheckoutProgressMobileBottomModule = CheckoutProgressMobileBottomModule;
    exports.CheckoutProgressMobileTopComponent = CheckoutProgressMobileTopComponent;
    exports.CheckoutProgressMobileTopModule = CheckoutProgressMobileTopModule;
    exports.CheckoutProgressModule = CheckoutProgressModule;
    exports.CheckoutReplenishmentFormService = CheckoutReplenishmentFormService;
    exports.CheckoutStepService = CheckoutStepService;
    exports.CheckoutStepsSetGuard = CheckoutStepsSetGuard;
    exports.DeliveryModeComponent = DeliveryModeComponent;
    exports.DeliveryModeModule = DeliveryModeModule;
    exports.ExpressCheckoutService = ExpressCheckoutService;
    exports.GuestRegisterFormComponent = GuestRegisterFormComponent;
    exports.NotCheckoutAuthGuard = NotCheckoutAuthGuard;
    exports.OrderConfirmationGuard = OrderConfirmationGuard;
    exports.OrderConfirmationItemsComponent = OrderConfirmationItemsComponent;
    exports.OrderConfirmationModule = OrderConfirmationModule;
    exports.OrderConfirmationOverviewComponent = OrderConfirmationOverviewComponent;
    exports.OrderConfirmationThankYouMessageComponent = OrderConfirmationThankYouMessageComponent;
    exports.OrderConfirmationTotalsComponent = OrderConfirmationTotalsComponent;
    exports.PaymentFormComponent = PaymentFormComponent;
    exports.PaymentFormModule = PaymentFormModule;
    exports.PaymentMethodComponent = PaymentMethodComponent;
    exports.PaymentMethodModule = PaymentMethodModule;
    exports.PaymentTypeComponent = PaymentTypeComponent;
    exports.PaymentTypeModule = PaymentTypeModule;
    exports.PlaceOrderComponent = PlaceOrderComponent;
    exports.PlaceOrderModule = PlaceOrderModule;
    exports.ReplenishmentOrderConfirmationModule = ReplenishmentOrderConfirmationModule;
    exports.ReviewSubmitComponent = ReviewSubmitComponent;
    exports.ReviewSubmitModule = ReviewSubmitModule;
    exports.ScheduleReplenishmentOrderComponent = ScheduleReplenishmentOrderComponent;
    exports.ScheduleReplenishmentOrderModule = ScheduleReplenishmentOrderModule;
    exports.ShippingAddressComponent = ShippingAddressComponent;
    exports.ShippingAddressModule = ShippingAddressModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-checkout-components.umd.js.map
