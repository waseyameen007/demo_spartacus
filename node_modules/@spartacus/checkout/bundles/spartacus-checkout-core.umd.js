(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@spartacus/core'), require('@spartacus/checkout/root'), require('@spartacus/cart/saved-cart/root'), require('rxjs'), require('rxjs/operators'), require('@ngrx/store'), require('@angular/common'), require('@ngrx/effects')) :
    typeof define === 'function' && define.amd ? define('@spartacus/checkout/core', ['exports', '@angular/core', '@spartacus/core', '@spartacus/checkout/root', '@spartacus/cart/saved-cart/root', 'rxjs', 'rxjs/operators', '@ngrx/store', '@angular/common', '@ngrx/effects'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.spartacus = global.spartacus || {}, global.spartacus.checkout = global.spartacus.checkout || {}, global.spartacus.checkout.core = {}), global.ng.core, global.core, global.spartacus.checkout.root, global.savedCartRoot, global.rxjs, global.rxjs.operators, global.store, global.ng.common, global.effects));
}(this, (function (exports, i0, i2, i1, root, rxjs, operators, i1$1, common, i1$2) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () {
                            return e[k];
                        }
                    });
                }
            });
        }
        n['default'] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1$2);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var CheckoutAdapter = /** @class */ (function () {
        function CheckoutAdapter() {
        }
        return CheckoutAdapter;
    }());

    var CheckoutConnector = /** @class */ (function () {
        function CheckoutConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutConnector.prototype.placeOrder = function (userId, cartId, termsChecked) {
            return this.adapter.placeOrder(userId, cartId, termsChecked);
        };
        CheckoutConnector.prototype.loadCheckoutDetails = function (userId, cartId) {
            return this.adapter.loadCheckoutDetails(userId, cartId);
        };
        CheckoutConnector.prototype.clearCheckoutDeliveryAddress = function (userId, cartId) {
            return this.adapter.clearCheckoutDeliveryAddress(userId, cartId);
        };
        CheckoutConnector.prototype.clearCheckoutDeliveryMode = function (userId, cartId) {
            return this.adapter.clearCheckoutDeliveryMode(userId, cartId);
        };
        return CheckoutConnector;
    }());
    CheckoutConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutConnector, deps: [{ token: CheckoutAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutConnector });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutConnector, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CheckoutAdapter }]; } });

    var CheckoutCostCenterAdapter = /** @class */ (function () {
        function CheckoutCostCenterAdapter() {
        }
        return CheckoutCostCenterAdapter;
    }());

    var CheckoutCostCenterConnector = /** @class */ (function () {
        function CheckoutCostCenterConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutCostCenterConnector.prototype.setCostCenter = function (userId, cartId, costCenterId) {
            return this.adapter.setCostCenter(userId, cartId, costCenterId);
        };
        return CheckoutCostCenterConnector;
    }());
    CheckoutCostCenterConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCostCenterConnector, deps: [{ token: CheckoutCostCenterAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutCostCenterConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCostCenterConnector });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCostCenterConnector, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CheckoutCostCenterAdapter }]; } });

    var CheckoutDeliveryAdapter = /** @class */ (function () {
        function CheckoutDeliveryAdapter() {
        }
        return CheckoutDeliveryAdapter;
    }());

    var CheckoutDeliveryConnector = /** @class */ (function () {
        function CheckoutDeliveryConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutDeliveryConnector.prototype.createAddress = function (userId, cartId, address) {
            return this.adapter.createAddress(userId, cartId, address);
        };
        CheckoutDeliveryConnector.prototype.setAddress = function (userId, cartId, addressId) {
            return this.adapter.setAddress(userId, cartId, addressId);
        };
        CheckoutDeliveryConnector.prototype.setMode = function (userId, cartId, deliveryModeId) {
            return this.adapter.setMode(userId, cartId, deliveryModeId);
        };
        CheckoutDeliveryConnector.prototype.getMode = function (userId, cartId) {
            return this.adapter.getMode(userId, cartId);
        };
        CheckoutDeliveryConnector.prototype.getSupportedModes = function (userId, cartId) {
            return this.adapter.getSupportedModes(userId, cartId);
        };
        return CheckoutDeliveryConnector;
    }());
    CheckoutDeliveryConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDeliveryConnector, deps: [{ token: CheckoutDeliveryAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutDeliveryConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDeliveryConnector });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDeliveryConnector, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CheckoutDeliveryAdapter }]; } });

    var PaymentTypeAdapter = /** @class */ (function () {
        function PaymentTypeAdapter() {
        }
        return PaymentTypeAdapter;
    }());

    var PaymentTypeConnector = /** @class */ (function () {
        function PaymentTypeConnector(adapter) {
            this.adapter = adapter;
        }
        PaymentTypeConnector.prototype.getPaymentTypes = function () {
            return this.adapter.loadPaymentTypes();
        };
        PaymentTypeConnector.prototype.setPaymentType = function (userId, cartId, typeCode, poNumber) {
            return this.adapter.setPaymentType(userId, cartId, typeCode, poNumber);
        };
        return PaymentTypeConnector;
    }());
    PaymentTypeConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeConnector, deps: [{ token: PaymentTypeAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentTypeConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeConnector });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeConnector, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: PaymentTypeAdapter }]; } });

    var CheckoutPaymentAdapter = /** @class */ (function () {
        function CheckoutPaymentAdapter() {
        }
        return CheckoutPaymentAdapter;
    }());

    var CheckoutPaymentConnector = /** @class */ (function () {
        function CheckoutPaymentConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutPaymentConnector.prototype.create = function (userId, cartId, paymentDetails) {
            return this.adapter.create(userId, cartId, paymentDetails);
        };
        CheckoutPaymentConnector.prototype.set = function (userId, cartId, paymentDetailsId) {
            return this.adapter.set(userId, cartId, paymentDetailsId);
        };
        CheckoutPaymentConnector.prototype.getCardTypes = function () {
            return this.adapter.loadCardTypes();
        };
        return CheckoutPaymentConnector;
    }());
    CheckoutPaymentConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPaymentConnector, deps: [{ token: CheckoutPaymentAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutPaymentConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPaymentConnector });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPaymentConnector, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CheckoutPaymentAdapter }]; } });

    var CheckoutReplenishmentOrderAdapter = /** @class */ (function () {
        function CheckoutReplenishmentOrderAdapter() {
        }
        return CheckoutReplenishmentOrderAdapter;
    }());

    var CheckoutReplenishmentOrderConnector = /** @class */ (function () {
        function CheckoutReplenishmentOrderConnector(adapter) {
            this.adapter = adapter;
        }
        CheckoutReplenishmentOrderConnector.prototype.scheduleReplenishmentOrder = function (cartId, scheduleReplenishmentForm, termsChecked, userId) {
            return this.adapter.scheduleReplenishmentOrder(cartId, scheduleReplenishmentForm, termsChecked, userId);
        };
        return CheckoutReplenishmentOrderConnector;
    }());
    CheckoutReplenishmentOrderConnector.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutReplenishmentOrderConnector, deps: [{ token: CheckoutReplenishmentOrderAdapter }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutReplenishmentOrderConnector.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutReplenishmentOrderConnector });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutReplenishmentOrderConnector, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: CheckoutReplenishmentOrderAdapter }]; } });

    var LOAD_CARD_TYPES = '[Checkout] Load Card Types';
    var LOAD_CARD_TYPES_FAIL = '[Checkout] Load Card Fail';
    var LOAD_CARD_TYPES_SUCCESS = '[Checkout] Load Card Success';
    var LoadCardTypes = /** @class */ (function () {
        function LoadCardTypes() {
            this.type = LOAD_CARD_TYPES;
        }
        return LoadCardTypes;
    }());
    var LoadCardTypesFail = /** @class */ (function () {
        function LoadCardTypesFail(payload) {
            this.payload = payload;
            this.type = LOAD_CARD_TYPES_FAIL;
        }
        return LoadCardTypesFail;
    }());
    var LoadCardTypesSuccess = /** @class */ (function () {
        function LoadCardTypesSuccess(payload) {
            this.payload = payload;
            this.type = LOAD_CARD_TYPES_SUCCESS;
        }
        return LoadCardTypesSuccess;
    }());

    var CHECKOUT_FEATURE = 'checkout';
    var CHECKOUT_DETAILS = '[Checkout] Checkout Details';
    var SET_DELIVERY_ADDRESS_PROCESS_ID = 'setDeliveryAddress';
    var SET_DELIVERY_MODE_PROCESS_ID = 'setDeliveryMode';
    var SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = 'setSupportedDeliveryMode';
    var SET_PAYMENT_DETAILS_PROCESS_ID = 'setPaymentDetails';
    var GET_PAYMENT_TYPES_PROCESS_ID = 'getPaymentTypes';
    var SET_COST_CENTER_PROCESS_ID = 'setCostCenter';
    var PLACED_ORDER_PROCESS_ID = 'placeOrder';

    var CLEAR_CHECKOUT_DELIVERY_ADDRESS = '[Checkout] Clear Checkout Delivery Address';
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Clear Checkout Delivery Address Success';
    var CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL = '[Checkout] Clear Checkout Delivery Address Fail';
    var CLEAR_CHECKOUT_DELIVERY_MODE = '[Checkout] Clear Checkout Delivery Mode';
    var CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS = '[Checkout] Clear Checkout Delivery Mode Success';
    var CLEAR_CHECKOUT_DELIVERY_MODE_FAIL = '[Checkout] Clear Checkout Delivery Mode Fail';
    var ADD_DELIVERY_ADDRESS = '[Checkout] Add Delivery Address';
    var ADD_DELIVERY_ADDRESS_FAIL = '[Checkout] Add Delivery Address Fail';
    var ADD_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Add Delivery Address Success';
    var SET_DELIVERY_ADDRESS = '[Checkout] Set Delivery Address';
    var SET_DELIVERY_ADDRESS_FAIL = '[Checkout] Set Delivery Address Fail';
    var SET_DELIVERY_ADDRESS_SUCCESS = '[Checkout] Set Delivery Address Success';
    var RESET_SET_DELIVERY_ADDRESS_PROCESS = '[Checkout] Reset Set Delivery Address Process';
    var LOAD_SUPPORTED_DELIVERY_MODES = '[Checkout] Load Supported Delivery Modes';
    var LOAD_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Load Supported Delivery Modes Fail';
    var LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Load Supported Delivery Modes Success';
    var CLEAR_SUPPORTED_DELIVERY_MODES = '[Checkout] Clear Supported Delivery Modes';
    var SET_DELIVERY_MODE = '[Checkout] Set Delivery Mode';
    var SET_DELIVERY_MODE_FAIL = '[Checkout] Set Delivery Mode Fail';
    var SET_DELIVERY_MODE_SUCCESS = '[Checkout] Set Delivery Mode Success';
    var RESET_SET_DELIVERY_MODE_PROCESS = '[Checkout] Reset Set Delivery Mode Process';
    var SET_SUPPORTED_DELIVERY_MODES = '[Checkout] Set Supported Delivery Modes';
    var SET_SUPPORTED_DELIVERY_MODES_FAIL = '[Checkout] Set Supported Delivery Modes Fail';
    var SET_SUPPORTED_DELIVERY_MODES_SUCCESS = '[Checkout] Set Supported Delivery Modes Success';
    var RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS = '[Checkout] Reset Set Supported Delivery Modes Process';
    var CREATE_PAYMENT_DETAILS = '[Checkout] Create Payment Details';
    var CREATE_PAYMENT_DETAILS_FAIL = '[Checkout] Create Payment Details Fail';
    var CREATE_PAYMENT_DETAILS_SUCCESS = '[Checkout] Create Payment Details Success';
    var SET_PAYMENT_DETAILS = '[Checkout] Set Payment Details';
    var SET_PAYMENT_DETAILS_FAIL = '[Checkout] Set Payment Details Fail';
    var SET_PAYMENT_DETAILS_SUCCESS = '[Checkout] Set Payment Details Success';
    var RESET_SET_PAYMENT_DETAILS_PROCESS = '[Checkout] Reset Set Payment Details Process';
    var PLACE_ORDER = '[Checkout] Place Order';
    var PLACE_ORDER_FAIL = '[Checkout] Place Order Fail';
    var PLACE_ORDER_SUCCESS = '[Checkout] Place Order Success';
    var CLEAR_PLACE_ORDER = '[Checkout] Clear Place Order';
    var CLEAR_CHECKOUT_STEP = '[Checkout] Clear One Checkout Step';
    var CLEAR_CHECKOUT_DATA = '[Checkout] Clear Checkout Data';
    var LOAD_CHECKOUT_DETAILS = '[Checkout] Load Checkout Details';
    var LOAD_CHECKOUT_DETAILS_FAIL = '[Checkout] Load Checkout Details Fail';
    var LOAD_CHECKOUT_DETAILS_SUCCESS = '[Checkout] Load Checkout Details Success';
    var CHECKOUT_CLEAR_MISCS_DATA = '[Checkout] Clear Miscs Data';
    var PAYMENT_PROCESS_SUCCESS = '[Checkout] Payment Process Success';
    var SET_COST_CENTER = '[Checkout] Set Cost Center';
    var SET_COST_CENTER_FAIL = '[Checkout] Set Cost Center Fail';
    var SET_COST_CENTER_SUCCESS = '[Checkout] Set Cost Center Success';
    var RESET_SET_COST_CENTER_PROCESS = '[Checkout] Reset Set Cost Center Process';
    var AddDeliveryAddress = /** @class */ (function () {
        function AddDeliveryAddress(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS;
        }
        return AddDeliveryAddress;
    }());
    var AddDeliveryAddressFail = /** @class */ (function () {
        function AddDeliveryAddressFail(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS_FAIL;
        }
        return AddDeliveryAddressFail;
    }());
    var AddDeliveryAddressSuccess = /** @class */ (function () {
        function AddDeliveryAddressSuccess(payload) {
            this.payload = payload;
            this.type = ADD_DELIVERY_ADDRESS_SUCCESS;
        }
        return AddDeliveryAddressSuccess;
    }());
    var SetDeliveryAddress = /** @class */ (function (_super) {
        __extends(SetDeliveryAddress, _super);
        function SetDeliveryAddress(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS;
            return _this;
        }
        return SetDeliveryAddress;
    }(i2.StateUtils.EntityLoadAction));
    var SetDeliveryAddressFail = /** @class */ (function (_super) {
        __extends(SetDeliveryAddressFail, _super);
        function SetDeliveryAddressFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS_FAIL;
            return _this;
        }
        return SetDeliveryAddressFail;
    }(i2.StateUtils.EntityFailAction));
    var SetDeliveryAddressSuccess = /** @class */ (function (_super) {
        __extends(SetDeliveryAddressSuccess, _super);
        function SetDeliveryAddressSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_ADDRESS_SUCCESS;
            return _this;
        }
        return SetDeliveryAddressSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ResetSetDeliveryAddressProcess = /** @class */ (function (_super) {
        __extends(ResetSetDeliveryAddressProcess, _super);
        function ResetSetDeliveryAddressProcess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_ADDRESS_PROCESS_ID) || this;
            _this.type = RESET_SET_DELIVERY_ADDRESS_PROCESS;
            return _this;
        }
        return ResetSetDeliveryAddressProcess;
    }(i2.StateUtils.EntityLoaderResetAction));
    var LoadSupportedDeliveryModes = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModes, _super);
        function LoadSupportedDeliveryModes(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES;
            return _this;
        }
        return LoadSupportedDeliveryModes;
    }(i2.StateUtils.EntityLoadAction));
    var LoadSupportedDeliveryModesFail = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModesFail, _super);
        function LoadSupportedDeliveryModesFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES_FAIL;
            return _this;
        }
        return LoadSupportedDeliveryModesFail;
    }(i2.StateUtils.EntityFailAction));
    var LoadSupportedDeliveryModesSuccess = /** @class */ (function (_super) {
        __extends(LoadSupportedDeliveryModesSuccess, _super);
        function LoadSupportedDeliveryModesSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS;
            return _this;
        }
        return LoadSupportedDeliveryModesSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ResetLoadSupportedDeliveryModesProcess = /** @class */ (function (_super) {
        __extends(ResetLoadSupportedDeliveryModesProcess, _super);
        function ResetLoadSupportedDeliveryModesProcess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID) || this;
            _this.type = RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS;
            return _this;
        }
        return ResetLoadSupportedDeliveryModesProcess;
    }(i2.StateUtils.EntityLoaderResetAction));
    var SetDeliveryMode = /** @class */ (function (_super) {
        __extends(SetDeliveryMode, _super);
        function SetDeliveryMode(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE;
            return _this;
        }
        return SetDeliveryMode;
    }(i2.StateUtils.EntityLoadAction));
    var SetDeliveryModeFail = /** @class */ (function (_super) {
        __extends(SetDeliveryModeFail, _super);
        function SetDeliveryModeFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE_FAIL;
            return _this;
        }
        return SetDeliveryModeFail;
    }(i2.StateUtils.EntityFailAction));
    var SetDeliveryModeSuccess = /** @class */ (function (_super) {
        __extends(SetDeliveryModeSuccess, _super);
        function SetDeliveryModeSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_DELIVERY_MODE_SUCCESS;
            return _this;
        }
        return SetDeliveryModeSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ResetSetDeliveryModeProcess = /** @class */ (function (_super) {
        __extends(ResetSetDeliveryModeProcess, _super);
        function ResetSetDeliveryModeProcess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_DELIVERY_MODE_PROCESS_ID) || this;
            _this.type = RESET_SET_DELIVERY_MODE_PROCESS;
            return _this;
        }
        return ResetSetDeliveryModeProcess;
    }(i2.StateUtils.EntityLoaderResetAction));
    var CreatePaymentDetails = /** @class */ (function (_super) {
        __extends(CreatePaymentDetails, _super);
        function CreatePaymentDetails(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CREATE_PAYMENT_DETAILS;
            return _this;
        }
        return CreatePaymentDetails;
    }(i2.StateUtils.EntityLoadAction));
    var CreatePaymentDetailsFail = /** @class */ (function (_super) {
        __extends(CreatePaymentDetailsFail, _super);
        function CreatePaymentDetailsFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = CREATE_PAYMENT_DETAILS_FAIL;
            return _this;
        }
        return CreatePaymentDetailsFail;
    }(i2.StateUtils.EntityFailAction));
    var CreatePaymentDetailsSuccess = /** @class */ (function () {
        function CreatePaymentDetailsSuccess(payload) {
            this.payload = payload;
            this.type = CREATE_PAYMENT_DETAILS_SUCCESS;
        }
        return CreatePaymentDetailsSuccess;
    }());
    var PaymentProcessSuccess = /** @class */ (function (_super) {
        __extends(PaymentProcessSuccess, _super);
        function PaymentProcessSuccess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.type = PAYMENT_PROCESS_SUCCESS;
            return _this;
        }
        return PaymentProcessSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var SetPaymentDetails = /** @class */ (function (_super) {
        __extends(SetPaymentDetails, _super);
        function SetPaymentDetails(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS;
            return _this;
        }
        return SetPaymentDetails;
    }(i2.StateUtils.EntityLoadAction));
    var SetPaymentDetailsFail = /** @class */ (function (_super) {
        __extends(SetPaymentDetailsFail, _super);
        function SetPaymentDetailsFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS_FAIL;
            return _this;
        }
        return SetPaymentDetailsFail;
    }(i2.StateUtils.EntityFailAction));
    var SetPaymentDetailsSuccess = /** @class */ (function (_super) {
        __extends(SetPaymentDetailsSuccess, _super);
        function SetPaymentDetailsSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_PAYMENT_DETAILS_SUCCESS;
            return _this;
        }
        return SetPaymentDetailsSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ResetSetPaymentDetailsProcess = /** @class */ (function (_super) {
        __extends(ResetSetPaymentDetailsProcess, _super);
        function ResetSetPaymentDetailsProcess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_PAYMENT_DETAILS_PROCESS_ID) || this;
            _this.type = RESET_SET_PAYMENT_DETAILS_PROCESS;
            return _this;
        }
        return ResetSetPaymentDetailsProcess;
    }(i2.StateUtils.EntityLoaderResetAction));
    var PlaceOrder = /** @class */ (function (_super) {
        __extends(PlaceOrder, _super);
        function PlaceOrder(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = PLACE_ORDER;
            return _this;
        }
        return PlaceOrder;
    }(i2.StateUtils.EntityLoadAction));
    var PlaceOrderFail = /** @class */ (function (_super) {
        __extends(PlaceOrderFail, _super);
        function PlaceOrderFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = PLACE_ORDER_FAIL;
            return _this;
        }
        return PlaceOrderFail;
    }(i2.StateUtils.EntityFailAction));
    var PlaceOrderSuccess = /** @class */ (function (_super) {
        __extends(PlaceOrderSuccess, _super);
        function PlaceOrderSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = PLACE_ORDER_SUCCESS;
            return _this;
        }
        return PlaceOrderSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ClearPlaceOrder = /** @class */ (function (_super) {
        __extends(ClearPlaceOrder, _super);
        function ClearPlaceOrder() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.type = CLEAR_PLACE_ORDER;
            return _this;
        }
        return ClearPlaceOrder;
    }(i2.StateUtils.EntityLoaderResetAction));
    var ClearSupportedDeliveryModes = /** @class */ (function () {
        function ClearSupportedDeliveryModes() {
            this.type = CLEAR_SUPPORTED_DELIVERY_MODES;
        }
        return ClearSupportedDeliveryModes;
    }());
    var ClearCheckoutStep = /** @class */ (function () {
        function ClearCheckoutStep(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_STEP;
        }
        return ClearCheckoutStep;
    }());
    var ClearCheckoutData = /** @class */ (function () {
        function ClearCheckoutData() {
            this.type = CLEAR_CHECKOUT_DATA;
        }
        return ClearCheckoutData;
    }());
    var LoadCheckoutDetails = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetails, _super);
        function LoadCheckoutDetails(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS;
            return _this;
        }
        return LoadCheckoutDetails;
    }(i2.StateUtils.LoaderLoadAction));
    var LoadCheckoutDetailsFail = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetailsFail, _super);
        function LoadCheckoutDetailsFail(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS, payload) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS_FAIL;
            return _this;
        }
        return LoadCheckoutDetailsFail;
    }(i2.StateUtils.LoaderFailAction));
    var LoadCheckoutDetailsSuccess = /** @class */ (function (_super) {
        __extends(LoadCheckoutDetailsSuccess, _super);
        function LoadCheckoutDetailsSuccess(payload) {
            var _this = _super.call(this, CHECKOUT_DETAILS) || this;
            _this.payload = payload;
            _this.type = LOAD_CHECKOUT_DETAILS_SUCCESS;
            return _this;
        }
        return LoadCheckoutDetailsSuccess;
    }(i2.StateUtils.LoaderSuccessAction));
    var CheckoutClearMiscsData = /** @class */ (function () {
        function CheckoutClearMiscsData() {
            this.type = CHECKOUT_CLEAR_MISCS_DATA;
        }
        return CheckoutClearMiscsData;
    }());
    var ClearCheckoutDeliveryAddress = /** @class */ (function () {
        function ClearCheckoutDeliveryAddress(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS;
        }
        return ClearCheckoutDeliveryAddress;
    }());
    var ClearCheckoutDeliveryAddressSuccess = /** @class */ (function () {
        function ClearCheckoutDeliveryAddressSuccess() {
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS;
        }
        return ClearCheckoutDeliveryAddressSuccess;
    }());
    var ClearCheckoutDeliveryAddressFail = /** @class */ (function () {
        function ClearCheckoutDeliveryAddressFail(payload) {
            this.payload = payload;
            this.type = CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL;
        }
        return ClearCheckoutDeliveryAddressFail;
    }());
    var ClearCheckoutDeliveryMode = /** @class */ (function (_super) {
        __extends(ClearCheckoutDeliveryMode, _super);
        function ClearCheckoutDeliveryMode(payload) {
            var _this = _super.call(this, i2.MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CLEAR_CHECKOUT_DELIVERY_MODE;
            return _this;
        }
        return ClearCheckoutDeliveryMode;
    }(i2.StateUtils.EntityProcessesIncrementAction));
    var ClearCheckoutDeliveryModeSuccess = /** @class */ (function (_super) {
        __extends(ClearCheckoutDeliveryModeSuccess, _super);
        function ClearCheckoutDeliveryModeSuccess(payload) {
            var _this = _super.call(this, i2.MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS;
            return _this;
        }
        return ClearCheckoutDeliveryModeSuccess;
    }(i2.StateUtils.EntityProcessesDecrementAction));
    var ClearCheckoutDeliveryModeFail = /** @class */ (function (_super) {
        __extends(ClearCheckoutDeliveryModeFail, _super);
        function ClearCheckoutDeliveryModeFail(payload) {
            var _this = _super.call(this, i2.MULTI_CART_DATA, payload.cartId) || this;
            _this.payload = payload;
            _this.type = CLEAR_CHECKOUT_DELIVERY_MODE_FAIL;
            return _this;
        }
        return ClearCheckoutDeliveryModeFail;
    }(i2.StateUtils.EntityProcessesDecrementAction));
    var SetCostCenter = /** @class */ (function (_super) {
        __extends(SetCostCenter, _super);
        function SetCostCenter(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_COST_CENTER;
            return _this;
        }
        return SetCostCenter;
    }(i2.StateUtils.EntityLoadAction));
    var SetCostCenterFail = /** @class */ (function (_super) {
        __extends(SetCostCenterFail, _super);
        function SetCostCenterFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SET_COST_CENTER_FAIL;
            return _this;
        }
        return SetCostCenterFail;
    }(i2.StateUtils.EntityFailAction));
    var SetCostCenterSuccess = /** @class */ (function (_super) {
        __extends(SetCostCenterSuccess, _super);
        function SetCostCenterSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SET_COST_CENTER_SUCCESS;
            return _this;
        }
        return SetCostCenterSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ResetSetCostCenterProcess = /** @class */ (function (_super) {
        __extends(ResetSetCostCenterProcess, _super);
        function ResetSetCostCenterProcess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, SET_COST_CENTER_PROCESS_ID) || this;
            _this.type = RESET_SET_COST_CENTER_PROCESS;
            return _this;
        }
        return ResetSetCostCenterProcess;
    }(i2.StateUtils.EntityLoaderResetAction));

    var SET_ORDER_TYPE = '[Checkout] Set Order Type';
    var SetOrderType = /** @class */ (function () {
        function SetOrderType(payload) {
            this.payload = payload;
            this.type = SET_ORDER_TYPE;
        }
        return SetOrderType;
    }());

    var LOAD_PAYMENT_TYPES = '[Checkout] Load Payment Types';
    var LOAD_PAYMENT_TYPES_FAIL = '[Checkout] Load Payment Types Fail';
    var LOAD_PAYMENT_TYPES_SUCCESS = '[Checkout] Load Payment Types Success';
    var RESET_LOAD_PAYMENT_TYPES_PROCESS_ID = '[Checkout] Reset Load Payment Type Process';
    var SET_PAYMENT_TYPE = '[Checkout] Set Payment Type';
    var SET_PAYMENT_TYPE_FAIL = '[Checkout] Set Payment Type Fail';
    var SET_PAYMENT_TYPE_SUCCESS = '[Checkout] Set Payment Type Success';
    var LoadPaymentTypes = /** @class */ (function (_super) {
        __extends(LoadPaymentTypes, _super);
        function LoadPaymentTypes() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.type = LOAD_PAYMENT_TYPES;
            return _this;
        }
        return LoadPaymentTypes;
    }(i2.StateUtils.EntityLoadAction));
    var LoadPaymentTypesFail = /** @class */ (function (_super) {
        __extends(LoadPaymentTypesFail, _super);
        function LoadPaymentTypesFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_PAYMENT_TYPES_FAIL;
            return _this;
        }
        return LoadPaymentTypesFail;
    }(i2.StateUtils.EntityFailAction));
    var LoadPaymentTypesSuccess = /** @class */ (function (_super) {
        __extends(LoadPaymentTypesSuccess, _super);
        function LoadPaymentTypesSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = LOAD_PAYMENT_TYPES_SUCCESS;
            return _this;
        }
        return LoadPaymentTypesSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ResetLoadPaymentTypesProcess = /** @class */ (function (_super) {
        __extends(ResetLoadPaymentTypesProcess, _super);
        function ResetLoadPaymentTypesProcess() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, GET_PAYMENT_TYPES_PROCESS_ID) || this;
            _this.type = RESET_LOAD_PAYMENT_TYPES_PROCESS_ID;
            return _this;
        }
        return ResetLoadPaymentTypesProcess;
    }(i2.StateUtils.EntityLoaderResetAction));
    var SetPaymentType = /** @class */ (function () {
        function SetPaymentType(payload) {
            this.payload = payload;
            this.type = SET_PAYMENT_TYPE;
        }
        return SetPaymentType;
    }());
    var SetPaymentTypeFail = /** @class */ (function () {
        function SetPaymentTypeFail(payload) {
            this.payload = payload;
            this.type = SET_PAYMENT_TYPE_FAIL;
        }
        return SetPaymentTypeFail;
    }());
    var SetPaymentTypeSuccess = /** @class */ (function () {
        function SetPaymentTypeSuccess(payload) {
            this.payload = payload;
            this.type = SET_PAYMENT_TYPE_SUCCESS;
        }
        return SetPaymentTypeSuccess;
    }());

    var SCHEDULE_REPLENISHMENT_ORDER = '[Checkout] Schedule Replenishment Order';
    var SCHEDULE_REPLENISHMENT_ORDER_SUCCESS = '[Checkout] Schedule Replenishment Order Success';
    var SCHEDULE_REPLENISHMENT_ORDER_FAIL = '[Checkout] Schedule Replenishment Order Fail';
    var CLEAR_SCHEDULE_REPLENISHMENT_ORDER = '[Checkout] Clear Schedule Replenishment Data';
    var ScheduleReplenishmentOrder = /** @class */ (function (_super) {
        __extends(ScheduleReplenishmentOrder, _super);
        function ScheduleReplenishmentOrder(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SCHEDULE_REPLENISHMENT_ORDER;
            return _this;
        }
        return ScheduleReplenishmentOrder;
    }(i2.StateUtils.EntityLoadAction));
    var ScheduleReplenishmentOrderSuccess = /** @class */ (function (_super) {
        __extends(ScheduleReplenishmentOrderSuccess, _super);
        function ScheduleReplenishmentOrderSuccess(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.payload = payload;
            _this.type = SCHEDULE_REPLENISHMENT_ORDER_SUCCESS;
            return _this;
        }
        return ScheduleReplenishmentOrderSuccess;
    }(i2.StateUtils.EntitySuccessAction));
    var ScheduleReplenishmentOrderFail = /** @class */ (function (_super) {
        __extends(ScheduleReplenishmentOrderFail, _super);
        function ScheduleReplenishmentOrderFail(payload) {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID, payload) || this;
            _this.payload = payload;
            _this.type = SCHEDULE_REPLENISHMENT_ORDER_FAIL;
            return _this;
        }
        return ScheduleReplenishmentOrderFail;
    }(i2.StateUtils.EntityFailAction));
    var ClearScheduleReplenishmentOrderAction = /** @class */ (function (_super) {
        __extends(ClearScheduleReplenishmentOrderAction, _super);
        function ClearScheduleReplenishmentOrderAction() {
            var _this = _super.call(this, i2.PROCESS_FEATURE, PLACED_ORDER_PROCESS_ID) || this;
            _this.type = CLEAR_SCHEDULE_REPLENISHMENT_ORDER;
            return _this;
        }
        return ClearScheduleReplenishmentOrderAction;
    }(i2.StateUtils.EntityLoaderResetAction));

    var checkoutGroup_actions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        LOAD_CARD_TYPES: LOAD_CARD_TYPES,
        LOAD_CARD_TYPES_FAIL: LOAD_CARD_TYPES_FAIL,
        LOAD_CARD_TYPES_SUCCESS: LOAD_CARD_TYPES_SUCCESS,
        LoadCardTypes: LoadCardTypes,
        LoadCardTypesFail: LoadCardTypesFail,
        LoadCardTypesSuccess: LoadCardTypesSuccess,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS: CLEAR_CHECKOUT_DELIVERY_ADDRESS_SUCCESS,
        CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL: CLEAR_CHECKOUT_DELIVERY_ADDRESS_FAIL,
        CLEAR_CHECKOUT_DELIVERY_MODE: CLEAR_CHECKOUT_DELIVERY_MODE,
        CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS: CLEAR_CHECKOUT_DELIVERY_MODE_SUCCESS,
        CLEAR_CHECKOUT_DELIVERY_MODE_FAIL: CLEAR_CHECKOUT_DELIVERY_MODE_FAIL,
        ADD_DELIVERY_ADDRESS: ADD_DELIVERY_ADDRESS,
        ADD_DELIVERY_ADDRESS_FAIL: ADD_DELIVERY_ADDRESS_FAIL,
        ADD_DELIVERY_ADDRESS_SUCCESS: ADD_DELIVERY_ADDRESS_SUCCESS,
        SET_DELIVERY_ADDRESS: SET_DELIVERY_ADDRESS,
        SET_DELIVERY_ADDRESS_FAIL: SET_DELIVERY_ADDRESS_FAIL,
        SET_DELIVERY_ADDRESS_SUCCESS: SET_DELIVERY_ADDRESS_SUCCESS,
        RESET_SET_DELIVERY_ADDRESS_PROCESS: RESET_SET_DELIVERY_ADDRESS_PROCESS,
        LOAD_SUPPORTED_DELIVERY_MODES: LOAD_SUPPORTED_DELIVERY_MODES,
        LOAD_SUPPORTED_DELIVERY_MODES_FAIL: LOAD_SUPPORTED_DELIVERY_MODES_FAIL,
        LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS,
        CLEAR_SUPPORTED_DELIVERY_MODES: CLEAR_SUPPORTED_DELIVERY_MODES,
        SET_DELIVERY_MODE: SET_DELIVERY_MODE,
        SET_DELIVERY_MODE_FAIL: SET_DELIVERY_MODE_FAIL,
        SET_DELIVERY_MODE_SUCCESS: SET_DELIVERY_MODE_SUCCESS,
        RESET_SET_DELIVERY_MODE_PROCESS: RESET_SET_DELIVERY_MODE_PROCESS,
        SET_SUPPORTED_DELIVERY_MODES: SET_SUPPORTED_DELIVERY_MODES,
        SET_SUPPORTED_DELIVERY_MODES_FAIL: SET_SUPPORTED_DELIVERY_MODES_FAIL,
        SET_SUPPORTED_DELIVERY_MODES_SUCCESS: SET_SUPPORTED_DELIVERY_MODES_SUCCESS,
        RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS: RESET_SUPPORTED_SET_DELIVERY_MODES_PROCESS,
        CREATE_PAYMENT_DETAILS: CREATE_PAYMENT_DETAILS,
        CREATE_PAYMENT_DETAILS_FAIL: CREATE_PAYMENT_DETAILS_FAIL,
        CREATE_PAYMENT_DETAILS_SUCCESS: CREATE_PAYMENT_DETAILS_SUCCESS,
        SET_PAYMENT_DETAILS: SET_PAYMENT_DETAILS,
        SET_PAYMENT_DETAILS_FAIL: SET_PAYMENT_DETAILS_FAIL,
        SET_PAYMENT_DETAILS_SUCCESS: SET_PAYMENT_DETAILS_SUCCESS,
        RESET_SET_PAYMENT_DETAILS_PROCESS: RESET_SET_PAYMENT_DETAILS_PROCESS,
        PLACE_ORDER: PLACE_ORDER,
        PLACE_ORDER_FAIL: PLACE_ORDER_FAIL,
        PLACE_ORDER_SUCCESS: PLACE_ORDER_SUCCESS,
        CLEAR_PLACE_ORDER: CLEAR_PLACE_ORDER,
        CLEAR_CHECKOUT_STEP: CLEAR_CHECKOUT_STEP,
        CLEAR_CHECKOUT_DATA: CLEAR_CHECKOUT_DATA,
        LOAD_CHECKOUT_DETAILS: LOAD_CHECKOUT_DETAILS,
        LOAD_CHECKOUT_DETAILS_FAIL: LOAD_CHECKOUT_DETAILS_FAIL,
        LOAD_CHECKOUT_DETAILS_SUCCESS: LOAD_CHECKOUT_DETAILS_SUCCESS,
        CHECKOUT_CLEAR_MISCS_DATA: CHECKOUT_CLEAR_MISCS_DATA,
        PAYMENT_PROCESS_SUCCESS: PAYMENT_PROCESS_SUCCESS,
        SET_COST_CENTER: SET_COST_CENTER,
        SET_COST_CENTER_FAIL: SET_COST_CENTER_FAIL,
        SET_COST_CENTER_SUCCESS: SET_COST_CENTER_SUCCESS,
        RESET_SET_COST_CENTER_PROCESS: RESET_SET_COST_CENTER_PROCESS,
        AddDeliveryAddress: AddDeliveryAddress,
        AddDeliveryAddressFail: AddDeliveryAddressFail,
        AddDeliveryAddressSuccess: AddDeliveryAddressSuccess,
        SetDeliveryAddress: SetDeliveryAddress,
        SetDeliveryAddressFail: SetDeliveryAddressFail,
        SetDeliveryAddressSuccess: SetDeliveryAddressSuccess,
        ResetSetDeliveryAddressProcess: ResetSetDeliveryAddressProcess,
        LoadSupportedDeliveryModes: LoadSupportedDeliveryModes,
        LoadSupportedDeliveryModesFail: LoadSupportedDeliveryModesFail,
        LoadSupportedDeliveryModesSuccess: LoadSupportedDeliveryModesSuccess,
        ResetLoadSupportedDeliveryModesProcess: ResetLoadSupportedDeliveryModesProcess,
        SetDeliveryMode: SetDeliveryMode,
        SetDeliveryModeFail: SetDeliveryModeFail,
        SetDeliveryModeSuccess: SetDeliveryModeSuccess,
        ResetSetDeliveryModeProcess: ResetSetDeliveryModeProcess,
        CreatePaymentDetails: CreatePaymentDetails,
        CreatePaymentDetailsFail: CreatePaymentDetailsFail,
        CreatePaymentDetailsSuccess: CreatePaymentDetailsSuccess,
        PaymentProcessSuccess: PaymentProcessSuccess,
        SetPaymentDetails: SetPaymentDetails,
        SetPaymentDetailsFail: SetPaymentDetailsFail,
        SetPaymentDetailsSuccess: SetPaymentDetailsSuccess,
        ResetSetPaymentDetailsProcess: ResetSetPaymentDetailsProcess,
        PlaceOrder: PlaceOrder,
        PlaceOrderFail: PlaceOrderFail,
        PlaceOrderSuccess: PlaceOrderSuccess,
        ClearPlaceOrder: ClearPlaceOrder,
        ClearSupportedDeliveryModes: ClearSupportedDeliveryModes,
        ClearCheckoutStep: ClearCheckoutStep,
        ClearCheckoutData: ClearCheckoutData,
        LoadCheckoutDetails: LoadCheckoutDetails,
        LoadCheckoutDetailsFail: LoadCheckoutDetailsFail,
        LoadCheckoutDetailsSuccess: LoadCheckoutDetailsSuccess,
        CheckoutClearMiscsData: CheckoutClearMiscsData,
        ClearCheckoutDeliveryAddress: ClearCheckoutDeliveryAddress,
        ClearCheckoutDeliveryAddressSuccess: ClearCheckoutDeliveryAddressSuccess,
        ClearCheckoutDeliveryAddressFail: ClearCheckoutDeliveryAddressFail,
        ClearCheckoutDeliveryMode: ClearCheckoutDeliveryMode,
        ClearCheckoutDeliveryModeSuccess: ClearCheckoutDeliveryModeSuccess,
        ClearCheckoutDeliveryModeFail: ClearCheckoutDeliveryModeFail,
        SetCostCenter: SetCostCenter,
        SetCostCenterFail: SetCostCenterFail,
        SetCostCenterSuccess: SetCostCenterSuccess,
        ResetSetCostCenterProcess: ResetSetCostCenterProcess,
        SET_ORDER_TYPE: SET_ORDER_TYPE,
        SetOrderType: SetOrderType,
        LOAD_PAYMENT_TYPES: LOAD_PAYMENT_TYPES,
        LOAD_PAYMENT_TYPES_FAIL: LOAD_PAYMENT_TYPES_FAIL,
        LOAD_PAYMENT_TYPES_SUCCESS: LOAD_PAYMENT_TYPES_SUCCESS,
        RESET_LOAD_PAYMENT_TYPES_PROCESS_ID: RESET_LOAD_PAYMENT_TYPES_PROCESS_ID,
        SET_PAYMENT_TYPE: SET_PAYMENT_TYPE,
        SET_PAYMENT_TYPE_FAIL: SET_PAYMENT_TYPE_FAIL,
        SET_PAYMENT_TYPE_SUCCESS: SET_PAYMENT_TYPE_SUCCESS,
        LoadPaymentTypes: LoadPaymentTypes,
        LoadPaymentTypesFail: LoadPaymentTypesFail,
        LoadPaymentTypesSuccess: LoadPaymentTypesSuccess,
        ResetLoadPaymentTypesProcess: ResetLoadPaymentTypesProcess,
        SetPaymentType: SetPaymentType,
        SetPaymentTypeFail: SetPaymentTypeFail,
        SetPaymentTypeSuccess: SetPaymentTypeSuccess,
        SCHEDULE_REPLENISHMENT_ORDER: SCHEDULE_REPLENISHMENT_ORDER,
        SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: SCHEDULE_REPLENISHMENT_ORDER_SUCCESS,
        SCHEDULE_REPLENISHMENT_ORDER_FAIL: SCHEDULE_REPLENISHMENT_ORDER_FAIL,
        CLEAR_SCHEDULE_REPLENISHMENT_ORDER: CLEAR_SCHEDULE_REPLENISHMENT_ORDER,
        ScheduleReplenishmentOrder: ScheduleReplenishmentOrder,
        ScheduleReplenishmentOrderSuccess: ScheduleReplenishmentOrderSuccess,
        ScheduleReplenishmentOrderFail: ScheduleReplenishmentOrderFail,
        ClearScheduleReplenishmentOrderAction: ClearScheduleReplenishmentOrderAction
    });

    var CheckoutEventBuilder = /** @class */ (function () {
        function CheckoutEventBuilder(stateEventService) {
            this.stateEventService = stateEventService;
            this.register();
        }
        /**
         * Registers checkout events
         */
        CheckoutEventBuilder.prototype.register = function () {
            this.orderPlacedEvent();
        };
        /**
         * Register an order successfully placed event
         */
        CheckoutEventBuilder.prototype.orderPlacedEvent = function () {
            this.stateEventService.register({
                action: PLACE_ORDER_SUCCESS,
                event: i1.OrderPlacedEvent,
            });
        };
        return CheckoutEventBuilder;
    }());
    CheckoutEventBuilder.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventBuilder, deps: [{ token: i2__namespace.StateEventService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutEventBuilder.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventBuilder });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventBuilder, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i2__namespace.StateEventService }]; } });

    var CheckoutEventListener = /** @class */ (function () {
        function CheckoutEventListener(checkoutDeliveryFacade, clearCheckoutFacade, eventService) {
            this.checkoutDeliveryFacade = checkoutDeliveryFacade;
            this.clearCheckoutFacade = clearCheckoutFacade;
            this.eventService = eventService;
            this.subscription = new rxjs.Subscription();
            this.onUserAddressChange();
            this.onSavedCartChange();
        }
        /**
         * Clears the checkout delivery info when an address in the address book is
         * changed ( updated, set as default or deleted )
         *
         * Listens for UpdateUserAddressEvent or DeleteUserAddressEvent
         */
        CheckoutEventListener.prototype.onUserAddressChange = function () {
            var _this = this;
            this.subscription.add(this.eventService
                .get(i2.UserAddressEvent)
                .pipe(operators.filter(function (event) {
                return (event instanceof i2.UpdateUserAddressEvent ||
                    event instanceof i2.DeleteUserAddressEvent);
            }))
                .subscribe(function (_event) {
                _this.checkoutDeliveryFacade.clearCheckoutDeliveryDetails();
            }));
        };
        /**
         * What te active cart is saved for later or when a saved card is restored,
         * the whole checkout state is reset.
         *
         * Listens for SaveCartSuccessEvent or RestoreSavedCartSuccessEvent
         */
        CheckoutEventListener.prototype.onSavedCartChange = function () {
            var _this = this;
            this.subscription.add(this.eventService
                .get(root.SavedCartEvent)
                .pipe(operators.filter(function (event) {
                return (event instanceof root.SaveCartSuccessEvent ||
                    event instanceof root.RestoreSavedCartSuccessEvent);
            }))
                .subscribe(function (_event) {
                _this.clearCheckoutFacade.resetCheckoutProcesses();
            }));
        };
        CheckoutEventListener.prototype.ngOnDestroy = function () {
            var _a;
            (_a = this.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();
        };
        return CheckoutEventListener;
    }());
    CheckoutEventListener.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventListener, deps: [{ token: i1__namespace.CheckoutDeliveryFacade }, { token: i1__namespace.ClearCheckoutFacade }, { token: i2__namespace.EventService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutEventListener.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventListener, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventListener, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i1__namespace.CheckoutDeliveryFacade }, { type: i1__namespace.ClearCheckoutFacade }, { type: i2__namespace.EventService }]; } });

    var CheckoutEventModule = /** @class */ (function () {
        function CheckoutEventModule(_checkoutEventBuilder, _checkoutEventListener) {
        }
        return CheckoutEventModule;
    }());
    CheckoutEventModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventModule, deps: [{ token: CheckoutEventBuilder }, { token: CheckoutEventListener }], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutEventModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventModule });
    CheckoutEventModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEventModule, decorators: [{
                type: i0.NgModule,
                args: [{}]
            }], ctorParameters: function () { return [{ type: CheckoutEventBuilder }, { type: CheckoutEventListener }]; } });

    var initialState$3 = {
        entities: {},
    };
    function reducer$3(state, action) {
        if (state === void 0) { state = initialState$3; }
        switch (action.type) {
            case LOAD_CARD_TYPES_SUCCESS: {
                var cardTypes = action.payload;
                var entities = cardTypes.reduce(function (cardTypesEntities, name) {
                    var _a;
                    return Object.assign(Object.assign({}, cardTypesEntities), (_a = {}, _a[name.code] = name, _a));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return initialState$3;
            }
        }
        return state;
    }
    var getCardTypesEntites$1 = function (state) { return state.entities; };

    var getDeliveryAddressSelector = function (state) { return state.address; };
    var getDeliveryModeSelector = function (state) { return state.deliveryMode; };
    var getPaymentDetailsSelector = function (state) { return state.paymentDetails; };
    var getOrderDetailsSelector = function (state) { return state.orderDetails; };
    var getCheckoutState = i1$1.createFeatureSelector(CHECKOUT_FEATURE);
    var getCheckoutStepsState = i1$1.createSelector(getCheckoutState, function (checkoutState) { return checkoutState.steps; });
    var getCheckoutSteps = i1$1.createSelector(getCheckoutStepsState, function (state) { return i2.StateUtils.loaderValueSelector(state); });
    var getDeliveryAddress = i1$1.createSelector(getCheckoutSteps, getDeliveryAddressSelector);
    var getDeliveryMode = i1$1.createSelector(getCheckoutSteps, getDeliveryModeSelector);
    var getSupportedDeliveryModes = i1$1.createSelector(getDeliveryMode, function (deliveryMode) {
        return (deliveryMode &&
            Object.keys(deliveryMode.supported).map(function (code) { return deliveryMode.supported[code]; }));
    });
    var getSelectedDeliveryModeCode = i1$1.createSelector(getDeliveryMode, function (deliveryMode) {
        return deliveryMode && deliveryMode.selected;
    });
    var getSelectedDeliveryMode = i1$1.createSelector(getDeliveryMode, function (deliveryMode) {
        if (deliveryMode.selected !== '') {
            if (Object.keys(deliveryMode.supported).length === 0) {
                return null;
            }
            return deliveryMode.supported[deliveryMode.selected];
        }
    });
    var getPaymentDetails = i1$1.createSelector(getCheckoutSteps, getPaymentDetailsSelector);
    var getCheckoutOrderDetails = i1$1.createSelector(getCheckoutSteps, getOrderDetailsSelector);
    var getCheckoutDetailsLoaded = i1$1.createSelector(getCheckoutStepsState, function (state) { return i2.StateUtils.loaderSuccessSelector(state) &&
        !i2.StateUtils.loaderLoadingSelector(state); });
    var getCheckoutLoading = i1$1.createSelector(getCheckoutStepsState, function (state) { return i2.StateUtils.loaderLoadingSelector(state); });
    var getPoNumer = i1$1.createSelector(getCheckoutSteps, function (state) { return state.poNumber.po; });
    var getCostCenter = i1$1.createSelector(getCheckoutSteps, function (state) { return state.poNumber.costCenter; });

    var getCardTypesState = i1$1.createSelector(getCheckoutState, function (state) { return state.cardTypes; });
    var getCardTypesEntites = i1$1.createSelector(getCardTypesState, getCardTypesEntites$1);
    var getAllCardTypes = i1$1.createSelector(getCardTypesEntites, function (entites) {
        return Object.keys(entites).map(function (code) { return entites[code]; });
    });

    var getSelectedOrderTypeSelector = function (state) { return state.selected; };
    var getOrderTypesState = i1$1.createSelector(getCheckoutState, function (state) { return state.orderType; });
    var getSelectedOrderType = i1$1.createSelector(getOrderTypesState, getSelectedOrderTypeSelector);

    var initialState$2 = {
        entities: {},
        selected: undefined,
    };
    function reducer$2(state, action) {
        if (state === void 0) { state = initialState$2; }
        var _a;
        switch (action.type) {
            case LOAD_PAYMENT_TYPES_SUCCESS: {
                var paymentTypes = action.payload;
                var entities = paymentTypes.reduce(function (paymentTypesEntities, name) {
                    var _b;
                    return Object.assign(Object.assign({}, paymentTypesEntities), (_b = {}, _b[name.code] = name, _b));
                }, Object.assign({}, state.entities));
                return Object.assign(Object.assign({}, state), { entities: entities });
            }
            case SET_PAYMENT_TYPE_SUCCESS: {
                return Object.assign(Object.assign({}, state), { selected: (_a = action.payload.paymentType) === null || _a === void 0 ? void 0 : _a.code });
            }
            case CLEAR_CHECKOUT_DATA: {
                return Object.assign(Object.assign({}, state), { selected: undefined });
            }
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return initialState$2;
            }
        }
        return state;
    }
    var getPaymentTypesEntites$1 = function (state) { return state.entities; };
    var getSelectedPaymentType$1 = function (state) { return state.selected; };

    var getPaymentTypesState = i1$1.createSelector(getCheckoutState, function (state) { return state.paymentTypes; });
    var getPaymentTypesEntites = i1$1.createSelector(getPaymentTypesState, getPaymentTypesEntites$1);
    var getAllPaymentTypes = i1$1.createSelector(getPaymentTypesEntites, function (entites) {
        return Object.keys(entites).map(function (code) { return entites[code]; });
    });
    var getSelectedPaymentType = i1$1.createSelector(getPaymentTypesState, getSelectedPaymentType$1);

    var checkoutGroup_selectors = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getCardTypesState: getCardTypesState,
        getCardTypesEntites: getCardTypesEntites,
        getAllCardTypes: getAllCardTypes,
        getCheckoutState: getCheckoutState,
        getCheckoutStepsState: getCheckoutStepsState,
        getCheckoutSteps: getCheckoutSteps,
        getDeliveryAddress: getDeliveryAddress,
        getDeliveryMode: getDeliveryMode,
        getSupportedDeliveryModes: getSupportedDeliveryModes,
        getSelectedDeliveryModeCode: getSelectedDeliveryModeCode,
        getSelectedDeliveryMode: getSelectedDeliveryMode,
        getPaymentDetails: getPaymentDetails,
        getCheckoutOrderDetails: getCheckoutOrderDetails,
        getCheckoutDetailsLoaded: getCheckoutDetailsLoaded,
        getCheckoutLoading: getCheckoutLoading,
        getPoNumer: getPoNumer,
        getCostCenter: getCostCenter,
        getSelectedOrderTypeSelector: getSelectedOrderTypeSelector,
        getOrderTypesState: getOrderTypesState,
        getSelectedOrderType: getSelectedOrderType,
        getPaymentTypesState: getPaymentTypesState,
        getPaymentTypesEntites: getPaymentTypesEntites,
        getAllPaymentTypes: getAllPaymentTypes,
        getSelectedPaymentType: getSelectedPaymentType
    });

    var CheckoutCostCenterService = /** @class */ (function () {
        function CheckoutCostCenterService(checkoutStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Set cost center to cart
         * @param costCenterId : cost center id
         */
        CheckoutCostCenterService.prototype.setCostCenter = function (costCenterId) {
            var _this = this;
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .pipe(operators.take(1))
                .subscribe(function (activeCartId) { return (cartId = activeCartId); });
            this.userIdService.takeUserId(true).subscribe(function (userId) {
                if (cartId) {
                    _this.checkoutStore.dispatch(new SetCostCenter({
                        userId: userId,
                        cartId: cartId,
                        costCenterId: costCenterId,
                    }));
                }
            }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        /**
         * Get cost center id from cart
         */
        CheckoutCostCenterService.prototype.getCostCenter = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.checkoutStore.pipe(i1$1.select(getCostCenter)),
            ]).pipe(operators.filter(function (_a) {
                var _b = __read(_a, 1), cart = _b[0];
                return Boolean(cart);
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), cart = _b[0], costCenterId = _b[1];
                if (costCenterId === undefined && cart.costCenter) {
                    costCenterId = cart.costCenter.code;
                    _this.checkoutStore.dispatch(new SetCostCenterSuccess(cart.costCenter.code));
                }
                return costCenterId;
            }));
        };
        return CheckoutCostCenterService;
    }());
    CheckoutCostCenterService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCostCenterService, deps: [{ token: i1__namespace$1.Store }, { token: i2__namespace.ActiveCartService }, { token: i2__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutCostCenterService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCostCenterService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCostCenterService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Store }, { type: i2__namespace.ActiveCartService }, { type: i2__namespace.UserIdService }]; } });

    var CheckoutDeliveryService = /** @class */ (function () {
        function CheckoutDeliveryService(checkoutStore, processStateStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.processStateStore = processStateStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Get supported delivery modes
         */
        CheckoutDeliveryService.prototype.getSupportedDeliveryModes = function () {
            var _this = this;
            return this.checkoutStore.pipe(i1$1.select(getSupportedDeliveryModes), operators.withLatestFrom(this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)))), operators.tap(function (_a) {
                var _b = __read(_a, 2), loadingState = _b[1];
                if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                    _this.loadSupportedDeliveryModes();
                }
            }), operators.pluck(0), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Get selected delivery mode
         */
        CheckoutDeliveryService.prototype.getSelectedDeliveryMode = function () {
            return this.checkoutStore.pipe(i1$1.select(getSelectedDeliveryMode));
        };
        /**
         * Get selected delivery mode code
         */
        CheckoutDeliveryService.prototype.getSelectedDeliveryModeCode = function () {
            return this.checkoutStore.pipe(i1$1.select(getSelectedDeliveryModeCode));
        };
        /**
         * Get delivery address
         */
        CheckoutDeliveryService.prototype.getDeliveryAddress = function () {
            return this.checkoutStore.pipe(i1$1.select(getDeliveryAddress));
        };
        /**
         * Get status about successfully set Delivery Address
         */
        CheckoutDeliveryService.prototype.getSetDeliveryAddressProcess = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessStateFactory(SET_DELIVERY_ADDRESS_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Delivery Address
         */
        CheckoutDeliveryService.prototype.resetSetDeliveryAddressProcess = function () {
            this.checkoutStore.dispatch(new ResetSetDeliveryAddressProcess());
        };
        /**
         * Get status about of set Delivery Mode process
         */
        CheckoutDeliveryService.prototype.getSetDeliveryModeProcess = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessStateFactory(SET_DELIVERY_MODE_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Delivery Mode
         */
        CheckoutDeliveryService.prototype.resetSetDeliveryModeProcess = function () {
            this.checkoutStore.dispatch(new ResetSetDeliveryModeProcess());
        };
        /**
         * Clear info about process of setting Supported Delivery Modes
         */
        CheckoutDeliveryService.prototype.resetLoadSupportedDeliveryModesProcess = function () {
            this.checkoutStore.dispatch(new ResetLoadSupportedDeliveryModesProcess());
        };
        /**
         * Get status about of set supported Delivery Modes process
         */
        CheckoutDeliveryService.prototype.getLoadSupportedDeliveryModeProcess = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessStateFactory(SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID)));
        };
        /**
         * Clear supported delivery modes loaded in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryModes = function () {
            this.checkoutStore.dispatch(new ClearSupportedDeliveryModes());
        };
        /**
         * Create and set a delivery address using the address param
         * @param address : the Address to be created and set
         */
        CheckoutDeliveryService.prototype.createAndSetAddress = function (address) {
            if (this.actionAllowed()) {
                var userId_1;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                    .unsubscribe();
                var cartId_1;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                    .unsubscribe();
                if (userId_1 && cartId_1) {
                    this.checkoutStore.dispatch(new AddDeliveryAddress({
                        userId: userId_1,
                        cartId: cartId_1,
                        address: address,
                    }));
                }
            }
        };
        /**
         * Load supported delivery modes
         */
        CheckoutDeliveryService.prototype.loadSupportedDeliveryModes = function () {
            if (this.actionAllowed()) {
                var userId_2;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_2 = occUserId); })
                    .unsubscribe();
                var cartId_2;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_2 = activeCartId); })
                    .unsubscribe();
                if (userId_2 && cartId_2) {
                    this.checkoutStore.dispatch(new LoadSupportedDeliveryModes({
                        userId: userId_2,
                        cartId: cartId_2,
                    }));
                }
            }
        };
        /**
         * Set delivery mode
         * @param mode : The delivery mode to be set
         */
        CheckoutDeliveryService.prototype.setDeliveryMode = function (mode) {
            var _this = this;
            if (this.actionAllowed()) {
                var userId_3 = i2.getLastValueSync(this.userIdService.getUserId());
                var cartId_3 = i2.getLastValueSync(this.activeCartService.getActiveCartId());
                if (userId_3 && cartId_3) {
                    rxjs.combineLatest([
                        this.activeCartService.isStable(),
                        this.checkoutStore.pipe(i1$1.select(getCheckoutLoading)),
                    ])
                        .pipe(operators.filter(function (_a) {
                        var _b = __read(_a, 2), isStable = _b[0], isLoading = _b[1];
                        return isStable && !isLoading;
                    }), operators.take(1))
                        .subscribe(function () {
                        _this.checkoutStore.dispatch(new SetDeliveryMode({
                            userId: userId_3,
                            cartId: cartId_3,
                            selectedModeId: mode,
                        }));
                    });
                }
            }
        };
        /**
         * Set delivery address
         * @param address : The address to be set
         */
        CheckoutDeliveryService.prototype.setDeliveryAddress = function (address) {
            if (this.actionAllowed()) {
                var userId_4;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_4 = occUserId); })
                    .unsubscribe();
                var cartId_4;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_4 = activeCartId); })
                    .unsubscribe();
                if (cartId_4 && userId_4) {
                    this.checkoutStore.dispatch(new SetDeliveryAddress({
                        userId: userId_4,
                        cartId: cartId_4,
                        address: address,
                    }));
                }
            }
        };
        /**
         * Clear address already setup in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryAddress = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId = activeCartId); })
                .unsubscribe();
            if (userId && cartId) {
                this.checkoutStore.dispatch(new ClearCheckoutDeliveryAddress({
                    userId: userId,
                    cartId: cartId,
                }));
            }
        };
        /**
         * Clear selected delivery mode setup in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryMode = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .subscribe(function (activeCartId) { return (cartId = activeCartId); })
                .unsubscribe();
            if (userId && cartId) {
                this.checkoutStore.dispatch(new ClearCheckoutDeliveryMode({
                    userId: userId,
                    cartId: cartId,
                }));
            }
        };
        /**
         * Clear address and delivery mode already setup in last checkout process
         */
        CheckoutDeliveryService.prototype.clearCheckoutDeliveryDetails = function () {
            this.clearCheckoutDeliveryAddress();
            this.clearCheckoutDeliveryMode();
            this.clearCheckoutDeliveryModes();
        };
        CheckoutDeliveryService.prototype.actionAllowed = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            return ((userId && userId !== i2.OCC_USER_ID_ANONYMOUS) ||
                this.activeCartService.isGuestCart());
        };
        return CheckoutDeliveryService;
    }());
    CheckoutDeliveryService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDeliveryService, deps: [{ token: i1__namespace$1.Store }, { token: i1__namespace$1.Store }, { token: i2__namespace.ActiveCartService }, { token: i2__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutDeliveryService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDeliveryService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutDeliveryService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Store }, { type: i1__namespace$1.Store }, { type: i2__namespace.ActiveCartService }, { type: i2__namespace.UserIdService }]; } });

    var CheckoutPaymentService = /** @class */ (function () {
        function CheckoutPaymentService(checkoutStore, processStateStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.processStateStore = processStateStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Get card types
         */
        CheckoutPaymentService.prototype.getCardTypes = function () {
            return this.checkoutStore.pipe(i1$1.select(getAllCardTypes));
        };
        /**
         * Get payment details
         */
        CheckoutPaymentService.prototype.getPaymentDetails = function () {
            return this.checkoutStore.pipe(i1$1.select(getPaymentDetails));
        };
        /**
         * Get status about set Payment Details process
         */
        CheckoutPaymentService.prototype.getSetPaymentDetailsResultProcess = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessStateFactory(SET_PAYMENT_DETAILS_PROCESS_ID)));
        };
        /**
         * Clear info about process of setting Payment Details
         */
        CheckoutPaymentService.prototype.resetSetPaymentDetailsProcess = function () {
            this.checkoutStore.dispatch(new ResetSetPaymentDetailsProcess());
        };
        /**
         * Load the supported card types
         */
        CheckoutPaymentService.prototype.loadSupportedCardTypes = function () {
            this.checkoutStore.dispatch(new LoadCardTypes());
        };
        /**
         * Create payment details using the given paymentDetails param
         * @param paymentDetails: the PaymentDetails to be created
         */
        CheckoutPaymentService.prototype.createPaymentDetails = function (paymentDetails) {
            if (this.actionAllowed()) {
                var userId_1;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                    .unsubscribe();
                var cartId_1;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                    .unsubscribe();
                if (userId_1 && cartId_1) {
                    this.checkoutStore.dispatch(new CreatePaymentDetails({
                        userId: userId_1,
                        cartId: cartId_1,
                        paymentDetails: paymentDetails,
                    }));
                }
            }
        };
        /**
         * Set payment details
         * @param paymentDetails : the PaymentDetails to be set
         */
        CheckoutPaymentService.prototype.setPaymentDetails = function (paymentDetails) {
            var _this = this;
            if (this.actionAllowed()) {
                var userId_2 = i2.getLastValueSync(this.userIdService.getUserId());
                var cartId_2 = i2.getLastValueSync(this.activeCartService.getActiveCartId());
                if (userId_2 && cartId_2) {
                    rxjs.combineLatest([
                        this.activeCartService.isStable(),
                        this.checkoutStore.pipe(i1$1.select(getCheckoutLoading)),
                    ])
                        .pipe(operators.filter(function (_a) {
                        var _b = __read(_a, 2), isStable = _b[0], isLoading = _b[1];
                        return isStable && !isLoading;
                    }), operators.take(1))
                        .subscribe(function () {
                        _this.checkoutStore.dispatch(new SetPaymentDetails({
                            userId: userId_2,
                            cartId: cartId_2,
                            paymentDetails: paymentDetails,
                        }));
                    });
                }
            }
        };
        /**
         * Sets payment loading to true without having the flicker issue (GH-3102)
         */
        CheckoutPaymentService.prototype.paymentProcessSuccess = function () {
            this.checkoutStore.dispatch(new PaymentProcessSuccess());
        };
        CheckoutPaymentService.prototype.actionAllowed = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            return ((userId && userId !== i2.OCC_USER_ID_ANONYMOUS) ||
                this.activeCartService.isGuestCart());
        };
        return CheckoutPaymentService;
    }());
    CheckoutPaymentService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPaymentService, deps: [{ token: i1__namespace$1.Store }, { token: i1__namespace$1.Store }, { token: i2__namespace.ActiveCartService }, { token: i2__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutPaymentService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPaymentService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPaymentService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Store }, { type: i1__namespace$1.Store }, { type: i2__namespace.ActiveCartService }, { type: i2__namespace.UserIdService }]; } });

    var CheckoutService = /** @class */ (function () {
        function CheckoutService(checkoutStore, processStateStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.processStateStore = processStateStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Places an order
         */
        CheckoutService.prototype.placeOrder = function (termsChecked) {
            if (this.actionAllowed()) {
                var userId_1;
                this.userIdService
                    .getUserId()
                    .subscribe(function (occUserId) { return (userId_1 = occUserId); })
                    .unsubscribe();
                var cartId_1;
                this.activeCartService
                    .getActiveCartId()
                    .subscribe(function (activeCartId) { return (cartId_1 = activeCartId); })
                    .unsubscribe();
                if (userId_1 && cartId_1) {
                    this.checkoutStore.dispatch(new PlaceOrder({
                        userId: userId_1,
                        cartId: cartId_1,
                        termsChecked: termsChecked,
                    }));
                }
            }
        };
        /**
         * Schedule a replenishment order
         */
        CheckoutService.prototype.scheduleReplenishmentOrder = function (scheduleReplenishmentForm, termsChecked) {
            var _this = this;
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .pipe(operators.take(1))
                .subscribe(function (activeCartId) { return (cartId = activeCartId); });
            this.userIdService.takeUserId(true).subscribe(function (userId) {
                if (Boolean(cartId) && Boolean(userId)) {
                    _this.checkoutStore.dispatch(new ScheduleReplenishmentOrder({
                        cartId: cartId,
                        scheduleReplenishmentForm: scheduleReplenishmentForm,
                        termsChecked: termsChecked,
                        userId: userId,
                    }));
                }
            }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        /**
         * Returns the place or schedule replenishment order's loading flag
         */
        CheckoutService.prototype.getPlaceOrderLoading = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessLoadingFactory(PLACED_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the place or schedule replenishment order's success flag
         */
        CheckoutService.prototype.getPlaceOrderSuccess = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessSuccessFactory(PLACED_ORDER_PROCESS_ID)));
        };
        /**
         * Returns the place or schedule replenishment order's error flag
         */
        CheckoutService.prototype.getPlaceOrderError = function () {
            return this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessErrorFactory(PLACED_ORDER_PROCESS_ID)));
        };
        /**
         * Resets the place or schedule replenishment order's processing state
         */
        CheckoutService.prototype.clearPlaceOrderState = function () {
            this.checkoutStore.dispatch(new ClearPlaceOrder());
        };
        /**
         * Clear checkout data
         */
        CheckoutService.prototype.clearCheckoutData = function () {
            this.checkoutStore.dispatch(new ClearCheckoutData());
        };
        /**
         * Clear checkout step
         * @param stepNumber : the step number to be cleared
         */
        CheckoutService.prototype.clearCheckoutStep = function (stepNumber) {
            this.checkoutStore.dispatch(new ClearCheckoutStep(stepNumber));
        };
        /**
         * Load checkout details data
         * @param cartId : string Cart ID of loaded cart
         */
        CheckoutService.prototype.loadCheckoutDetails = function (cartId) {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            if (userId) {
                this.checkoutStore.dispatch(new LoadCheckoutDetails({
                    userId: userId,
                    cartId: cartId,
                }));
            }
        };
        /**
         * Get status of checkout details loaded
         */
        CheckoutService.prototype.getCheckoutDetailsLoaded = function () {
            return this.checkoutStore.pipe(i1$1.select(getCheckoutDetailsLoaded));
        };
        /**
         * Check if checkout details are stable (no longer loading)
         */
        CheckoutService.prototype.isLoading = function () {
            return this.checkoutStore.pipe(i1$1.select(getCheckoutLoading));
        };
        /**
         * Get order details
         */
        CheckoutService.prototype.getOrderDetails = function () {
            return this.checkoutStore.pipe(i1$1.select(getCheckoutOrderDetails));
        };
        /**
         * Set checkout order type
         * @param orderType : an enum of types of order we are placing
         */
        CheckoutService.prototype.setOrderType = function (orderType) {
            this.checkoutStore.dispatch(new SetOrderType(orderType));
        };
        /**
         * Get current checkout order type
         */
        CheckoutService.prototype.getCurrentOrderType = function () {
            return this.checkoutStore.pipe(i1$1.select(getSelectedOrderType));
        };
        CheckoutService.prototype.actionAllowed = function () {
            var userId;
            this.userIdService
                .getUserId()
                .subscribe(function (occUserId) { return (userId = occUserId); })
                .unsubscribe();
            return ((userId && userId !== i2.OCC_USER_ID_ANONYMOUS) ||
                this.activeCartService.isGuestCart());
        };
        return CheckoutService;
    }());
    CheckoutService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutService, deps: [{ token: i1__namespace$1.Store }, { token: i1__namespace$1.Store }, { token: i2__namespace.ActiveCartService }, { token: i2__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Store }, { type: i1__namespace$1.Store }, { type: i2__namespace.ActiveCartService }, { type: i2__namespace.UserIdService }]; } });

    var ClearCheckoutService = /** @class */ (function () {
        function ClearCheckoutService(checkoutDeliveryFacade, checkoutPaymentFacade) {
            this.checkoutDeliveryFacade = checkoutDeliveryFacade;
            this.checkoutPaymentFacade = checkoutPaymentFacade;
        }
        /**
         * Use it to clear checkout state
         */
        ClearCheckoutService.prototype.resetCheckoutProcesses = function () {
            this.checkoutDeliveryFacade.resetSetDeliveryAddressProcess();
            this.checkoutDeliveryFacade.resetSetDeliveryModeProcess();
            this.checkoutPaymentFacade.resetSetPaymentDetailsProcess();
        };
        return ClearCheckoutService;
    }());
    ClearCheckoutService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ClearCheckoutService, deps: [{ token: i1__namespace.CheckoutDeliveryFacade }, { token: i1__namespace.CheckoutPaymentFacade }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ClearCheckoutService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ClearCheckoutService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ClearCheckoutService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace.CheckoutDeliveryFacade }, { type: i1__namespace.CheckoutPaymentFacade }]; } });

    var PaymentTypeService = /** @class */ (function () {
        function PaymentTypeService(checkoutStore, processStateStore, activeCartService, userIdService) {
            this.checkoutStore = checkoutStore;
            this.processStateStore = processStateStore;
            this.activeCartService = activeCartService;
            this.userIdService = userIdService;
        }
        /**
         * Get payment types
         */
        PaymentTypeService.prototype.getPaymentTypes = function () {
            var _this = this;
            return this.checkoutStore.pipe(i1$1.select(getAllPaymentTypes), operators.withLatestFrom(this.processStateStore.pipe(i1$1.select(i2.ProcessSelectors.getProcessStateFactory(GET_PAYMENT_TYPES_PROCESS_ID)))), operators.tap(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], loadingState = _b[1];
                if (!(loadingState.loading || loadingState.success || loadingState.error)) {
                    _this.loadPaymentTypes();
                }
            }), operators.pluck(0), operators.shareReplay({ bufferSize: 1, refCount: true }));
        };
        /**
         * Load the supported payment types
         */
        PaymentTypeService.prototype.loadPaymentTypes = function () {
            this.checkoutStore.dispatch(new LoadPaymentTypes());
        };
        /**
         * Set payment type to cart
         * @param typeCode
         * @param poNumber : purchase order number
         */
        PaymentTypeService.prototype.setPaymentType = function (typeCode, poNumber) {
            var _this = this;
            var cartId;
            this.activeCartService
                .getActiveCartId()
                .pipe(operators.take(1))
                .subscribe(function (activeCartId) { return (cartId = activeCartId); });
            this.userIdService.takeUserId(true).subscribe(function (userId) {
                if (cartId) {
                    _this.checkoutStore.dispatch(new SetPaymentType({
                        userId: userId,
                        cartId: cartId,
                        typeCode: typeCode,
                        poNumber: poNumber,
                    }));
                }
            }, function () {
                // TODO: for future releases, refactor this part to thrown errors
            });
        };
        /**
         * Get the selected payment type
         */
        PaymentTypeService.prototype.getSelectedPaymentType = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.checkoutStore.pipe(i1$1.select(getSelectedPaymentType)),
            ]).pipe(operators.tap(function (_a) {
                var _b = __read(_a, 2), cart = _b[0], selected = _b[1];
                if (selected === undefined) {
                    // in b2b, cart always has paymentType (default value 'CARD')
                    if (cart && cart.paymentType) {
                        _this.checkoutStore.dispatch(new SetPaymentTypeSuccess(cart));
                    }
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), selected = _b[1];
                return selected;
            }));
        };
        /**
         * Get whether the selected payment type is "ACCOUNT" payment
         */
        PaymentTypeService.prototype.isAccountPayment = function () {
            return this.getSelectedPaymentType().pipe(operators.map(function (selected) { return selected === i2.B2BPaymentTypeEnum.ACCOUNT_PAYMENT; }));
        };
        /**
         * Get PO Number
         */
        PaymentTypeService.prototype.getPoNumber = function () {
            var _this = this;
            return rxjs.combineLatest([
                this.activeCartService.getActive(),
                this.checkoutStore.pipe(i1$1.select(getPoNumer)),
            ]).pipe(operators.tap(function (_a) {
                var _b = __read(_a, 2), cart = _b[0], po = _b[1];
                if (po === undefined && cart && cart.purchaseOrderNumber) {
                    _this.checkoutStore.dispatch(new SetPaymentTypeSuccess(cart));
                }
            }), operators.map(function (_a) {
                var _b = __read(_a, 2), _ = _b[0], po = _b[1];
                return po;
            }));
        };
        return PaymentTypeService;
    }());
    PaymentTypeService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeService, deps: [{ token: i1__namespace$1.Store }, { token: i1__namespace$1.Store }, { token: i2__namespace.ActiveCartService }, { token: i2__namespace.UserIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentTypeService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypeService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$1.Store }, { type: i1__namespace$1.Store }, { type: i2__namespace.ActiveCartService }, { type: i2__namespace.UserIdService }]; } });

    var facadeProviders = [
        CheckoutDeliveryService,
        {
            provide: i1.CheckoutDeliveryFacade,
            useExisting: CheckoutDeliveryService,
        },
        CheckoutPaymentService,
        {
            provide: i1.CheckoutPaymentFacade,
            useExisting: CheckoutPaymentService,
        },
        CheckoutService,
        {
            provide: i1.CheckoutFacade,
            useExisting: CheckoutService,
        },
        PaymentTypeService,
        {
            provide: i1.PaymentTypeFacade,
            useExisting: PaymentTypeService,
        },
        CheckoutCostCenterService,
        {
            provide: i1.CheckoutCostCenterFacade,
            useExisting: CheckoutCostCenterService,
        },
        ClearCheckoutService,
        {
            provide: i1.ClearCheckoutFacade,
            useExisting: ClearCheckoutService,
        },
    ];

    /**
     * Resolves the page data for all Content Pages based on the `PageType.CONTENT_PAGE`
     * and the `MultiStepCheckoutSummaryPageTemplate`. If the checkout page matches this template,
     * the more generic `ContentPageMetaResolver` is overridden by this resolver.
     *
     * The page title and robots are resolved in this implementation only.
     */
    var CheckoutPageMetaResolver = /** @class */ (function (_super) {
        __extends(CheckoutPageMetaResolver, _super);
        function CheckoutPageMetaResolver(translation, activeCartService, basePageMetaResolver) {
            var _this = _super.call(this) || this;
            _this.translation = translation;
            _this.activeCartService = activeCartService;
            _this.basePageMetaResolver = basePageMetaResolver;
            _this.cart$ = _this.activeCartService.getActive();
            _this.pageType = i2.PageType.CONTENT_PAGE;
            _this.pageTemplate = 'MultiStepCheckoutSummaryPageTemplate';
            return _this;
        }
        /**
         * @override
         * Resolves the page title from the translation `pageMetaResolver.checkout.title`. The
         * cart total item `count` is passed to the translation, so it can be used in the title.
         *
         * The title from the page data is ignored for this page title.
         */
        CheckoutPageMetaResolver.prototype.resolveTitle = function () {
            var _this = this;
            return this.cart$.pipe(operators.switchMap(function (c) { return _this.translation.translate('pageMetaResolver.checkout.title', {
                count: c.totalItems,
            }); }));
        };
        CheckoutPageMetaResolver.prototype.resolveDescription = function () {
            return this.basePageMetaResolver.resolveDescription();
        };
        CheckoutPageMetaResolver.prototype.resolveRobots = function () {
            return this.basePageMetaResolver.resolveRobots();
        };
        return CheckoutPageMetaResolver;
    }(i2.PageMetaResolver));
    CheckoutPageMetaResolver.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPageMetaResolver, deps: [{ token: i2__namespace.TranslationService }, { token: i2__namespace.ActiveCartService }, { token: i2__namespace.BasePageMetaResolver }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutPageMetaResolver.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPageMetaResolver, providedIn: 'root' });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutPageMetaResolver, decorators: [{
                type: i0.Injectable,
                args: [{
                        providedIn: 'root',
                    }]
            }], ctorParameters: function () { return [{ type: i2__namespace.TranslationService }, { type: i2__namespace.ActiveCartService }, { type: i2__namespace.BasePageMetaResolver }]; } });

    var CardTypesEffects = /** @class */ (function () {
        function CardTypesEffects(actions$, checkoutPaymentConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutPaymentConnector = checkoutPaymentConnector;
            this.loadCardTypes$ = this.actions$.pipe(i1$2.ofType(LOAD_CARD_TYPES), operators.switchMap(function () {
                return _this.checkoutPaymentConnector.getCardTypes().pipe(operators.map(function (cardTypes) { return new LoadCardTypesSuccess(cardTypes); }), operators.catchError(function (error) { return rxjs.of(new LoadCardTypesFail(i2.normalizeHttpError(error))); }));
            }));
        }
        return CardTypesEffects;
    }());
    CardTypesEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardTypesEffects, deps: [{ token: i1__namespace$2.Actions }, { token: CheckoutPaymentConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CardTypesEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardTypesEffects });
    __decorate([
        i1$2.Effect()
    ], CardTypesEffects.prototype, "loadCardTypes$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CardTypesEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Actions }, { type: CheckoutPaymentConnector }]; }, propDecorators: { loadCardTypes$: [] } });

    var CheckoutEffects = /** @class */ (function () {
        function CheckoutEffects(actions$, checkoutDeliveryConnector, checkoutPaymentConnector, checkoutCostCenterConnector, checkoutConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutDeliveryConnector = checkoutDeliveryConnector;
            this.checkoutPaymentConnector = checkoutPaymentConnector;
            this.checkoutCostCenterConnector = checkoutCostCenterConnector;
            this.checkoutConnector = checkoutConnector;
            this.contextChange$ = this.actions$.pipe(i1$2.ofType(i2.SiteContextActions.CURRENCY_CHANGE, i2.SiteContextActions.LANGUAGE_CHANGE));
            this.addDeliveryAddress$ = this.actions$.pipe(i1$2.ofType(ADD_DELIVERY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) { return _this.checkoutDeliveryConnector
                .createAddress(payload.userId, payload.cartId, payload.address)
                .pipe(operators.mergeMap(function (address) {
                address['titleCode'] = payload.address.titleCode;
                if (payload.address.region && payload.address.region.isocodeShort) {
                    Object.assign(address.region, {
                        isocodeShort: payload.address.region.isocodeShort,
                    });
                }
                if (payload.userId === i2.OCC_USER_ID_ANONYMOUS) {
                    return [
                        new SetDeliveryAddress({
                            userId: payload.userId,
                            cartId: payload.cartId,
                            address: address,
                        }),
                    ];
                }
                else {
                    return [
                        new i2.UserActions.LoadUserAddresses(payload.userId),
                        new SetDeliveryAddress({
                            userId: payload.userId,
                            cartId: payload.cartId,
                            address: address,
                        }),
                    ];
                }
            }), operators.catchError(function (error) { return rxjs.of(new AddDeliveryAddressFail(i2.normalizeHttpError(error))); })); }), i2.withdrawOn(this.contextChange$));
            this.setDeliveryAddress$ = this.actions$.pipe(i1$2.ofType(SET_DELIVERY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutDeliveryConnector
                    .setAddress(payload.userId, payload.cartId, payload.address.id)
                    .pipe(operators.mergeMap(function () { return [
                    new SetDeliveryAddressSuccess(payload.address),
                    new ClearCheckoutDeliveryMode({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                    new ClearSupportedDeliveryModes(),
                    new ResetLoadSupportedDeliveryModesProcess(),
                    new LoadSupportedDeliveryModes({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]; }), operators.catchError(function (error) { return rxjs.of(new SetDeliveryAddressFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.loadSupportedDeliveryModes$ = this.actions$.pipe(i1$2.ofType(LOAD_SUPPORTED_DELIVERY_MODES), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutDeliveryConnector
                    .getSupportedModes(payload.userId, payload.cartId)
                    .pipe(operators.map(function (data) {
                    return new LoadSupportedDeliveryModesSuccess(data);
                }), operators.catchError(function (error) { return rxjs.of(new LoadSupportedDeliveryModesFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.clearCheckoutMiscsDataOnLanguageChange$ = this.actions$.pipe(i1$2.ofType(i2.SiteContextActions.LANGUAGE_CHANGE), operators.mergeMap(function () { return [
                new ResetLoadSupportedDeliveryModesProcess(),
                new ResetLoadPaymentTypesProcess(),
                new CheckoutClearMiscsData(),
            ]; }));
            this.clearDeliveryModesOnCurrencyChange$ = this.actions$.pipe(i1$2.ofType(i2.SiteContextActions.CURRENCY_CHANGE), operators.map(function () { return new ClearSupportedDeliveryModes(); }));
            this.clearCheckoutDataOnLogout$ = this.actions$.pipe(i1$2.ofType(i2.AuthActions.LOGOUT), operators.mergeMap(function () { return [
                new ClearCheckoutData(),
                new ResetLoadSupportedDeliveryModesProcess(),
                new ResetLoadPaymentTypesProcess(),
            ]; }));
            this.clearCheckoutDataOnLogin$ = this.actions$.pipe(i1$2.ofType(i2.AuthActions.LOGIN), operators.map(function () { return new ClearCheckoutData(); }));
            this.setDeliveryMode$ = this.actions$.pipe(i1$2.ofType(SET_DELIVERY_MODE), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutDeliveryConnector
                    .setMode(payload.userId, payload.cartId, payload.selectedModeId)
                    .pipe(operators.mergeMap(function () {
                    return [
                        new SetDeliveryModeSuccess(payload.selectedModeId),
                        new i2.CartActions.LoadCart({
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new SetDeliveryModeFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.createPaymentDetails$ = this.actions$.pipe(i1$2.ofType(CREATE_PAYMENT_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                // get information for creating a subscription directly with payment provider
                return _this.checkoutPaymentConnector
                    .create(payload.userId, payload.cartId, payload.paymentDetails)
                    .pipe(operators.mergeMap(function (details) {
                    if (payload.userId === i2.OCC_USER_ID_ANONYMOUS) {
                        return [new CreatePaymentDetailsSuccess(details)];
                    }
                    else {
                        return [
                            new i2.UserActions.LoadUserPaymentMethods(payload.userId),
                            new CreatePaymentDetailsSuccess(details),
                        ];
                    }
                }), operators.catchError(function (error) { return rxjs.of(new CreatePaymentDetailsFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.setPaymentDetails$ = this.actions$.pipe(i1$2.ofType(SET_PAYMENT_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutPaymentConnector
                    .set(payload.userId, payload.cartId, payload.paymentDetails.id)
                    .pipe(operators.map(function () { return new SetPaymentDetailsSuccess(payload.paymentDetails); }), operators.catchError(function (error) { return rxjs.of(new SetPaymentDetailsFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.placeOrder$ = this.actions$.pipe(i1$2.ofType(PLACE_ORDER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutConnector
                    .placeOrder(payload.userId, payload.cartId, payload.termsChecked)
                    .pipe(operators.switchMap(function (data) { return [
                    new i2.CartActions.RemoveCart({ cartId: payload.cartId }),
                    new PlaceOrderSuccess(data),
                ]; }), operators.catchError(function (error) { return rxjs.of(new PlaceOrderFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.loadCheckoutDetails$ = this.actions$.pipe(i1$2.ofType(LOAD_CHECKOUT_DETAILS), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutConnector
                    .loadCheckoutDetails(payload.userId, payload.cartId)
                    .pipe(operators.map(function (data) { return new LoadCheckoutDetailsSuccess(data); }), operators.catchError(function (error) { return rxjs.of(new LoadCheckoutDetailsFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.reloadDetailsOnMergeCart$ = this.actions$.pipe(i1$2.ofType(i2.CartActions.MERGE_CART_SUCCESS), operators.map(function (action) { return action.payload; }), operators.map(function (payload) {
                return new LoadCheckoutDetails({
                    userId: payload.userId,
                    cartId: payload.cartId,
                });
            }));
            this.clearCheckoutDeliveryAddress$ = this.actions$.pipe(i1$2.ofType(CLEAR_CHECKOUT_DELIVERY_ADDRESS), operators.map(function (action) { return action.payload; }), operators.filter(function (payload) { return Boolean(payload.cartId); }), operators.switchMap(function (payload) {
                return _this.checkoutConnector
                    .clearCheckoutDeliveryAddress(payload.userId, payload.cartId)
                    .pipe(operators.map(function () { return new ClearCheckoutDeliveryAddressSuccess(); }), operators.catchError(function (error) { return rxjs.of(new ClearCheckoutDeliveryAddressFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
            this.clearCheckoutDeliveryMode$ = this.actions$.pipe(i1$2.ofType(CLEAR_CHECKOUT_DELIVERY_MODE), operators.map(function (action) { return action.payload; }), operators.filter(function (payload) { return Boolean(payload.cartId); }), operators.concatMap(function (payload) {
                return _this.checkoutConnector
                    .clearCheckoutDeliveryMode(payload.userId, payload.cartId)
                    .pipe(operators.mergeMap(function () { return [
                    new ClearCheckoutDeliveryModeSuccess(Object.assign({}, payload)),
                    new i2.CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]; }), operators.catchError(function (error) { return rxjs.from([
                    new ClearCheckoutDeliveryModeFail(Object.assign(Object.assign({}, payload), { error: i2.normalizeHttpError(error) })),
                    new i2.CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                ]); }));
            }), i2.withdrawOn(this.contextChange$));
            this.setCostCenter$ = this.actions$.pipe(i1$2.ofType(SET_COST_CENTER), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.checkoutCostCenterConnector
                    .setCostCenter(payload.userId, payload.cartId, payload.costCenterId)
                    .pipe(operators.mergeMap(function (_data) { return [
                    new i2.CartActions.LoadCart({
                        cartId: payload.cartId,
                        userId: payload.userId,
                    }),
                    new SetCostCenterSuccess(payload.costCenterId),
                    new ClearCheckoutDeliveryAddress({
                        userId: payload.userId,
                        cartId: payload.cartId,
                    }),
                ]; }), operators.catchError(function (error) { return rxjs.of(new SetCostCenterFail(i2.normalizeHttpError(error))); }));
            }), i2.withdrawOn(this.contextChange$));
        }
        return CheckoutEffects;
    }());
    CheckoutEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEffects, deps: [{ token: i1__namespace$2.Actions }, { token: CheckoutDeliveryConnector }, { token: CheckoutPaymentConnector }, { token: CheckoutCostCenterConnector }, { token: CheckoutConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    CheckoutEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEffects });
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "addDeliveryAddress$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "setDeliveryAddress$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "loadSupportedDeliveryModes$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutMiscsDataOnLanguageChange$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "clearDeliveryModesOnCurrencyChange$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDataOnLogout$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDataOnLogin$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "setDeliveryMode$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "createPaymentDetails$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "setPaymentDetails$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "placeOrder$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "loadCheckoutDetails$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "reloadDetailsOnMergeCart$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDeliveryAddress$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "clearCheckoutDeliveryMode$", void 0);
    __decorate([
        i1$2.Effect()
    ], CheckoutEffects.prototype, "setCostCenter$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Actions }, { type: CheckoutDeliveryConnector }, { type: CheckoutPaymentConnector }, { type: CheckoutCostCenterConnector }, { type: CheckoutConnector }]; }, propDecorators: { addDeliveryAddress$: [], setDeliveryAddress$: [], loadSupportedDeliveryModes$: [], clearCheckoutMiscsDataOnLanguageChange$: [], clearDeliveryModesOnCurrencyChange$: [], clearCheckoutDataOnLogout$: [], clearCheckoutDataOnLogin$: [], setDeliveryMode$: [], createPaymentDetails$: [], setPaymentDetails$: [], placeOrder$: [], loadCheckoutDetails$: [], reloadDetailsOnMergeCart$: [], clearCheckoutDeliveryAddress$: [], clearCheckoutDeliveryMode$: [], setCostCenter$: [] } });

    var PaymentTypesEffects = /** @class */ (function () {
        function PaymentTypesEffects(actions$, paymentTypeConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.paymentTypeConnector = paymentTypeConnector;
            this.loadPaymentTypes$ = this.actions$.pipe(i1$2.ofType(LOAD_PAYMENT_TYPES), operators.switchMap(function () {
                return _this.paymentTypeConnector.getPaymentTypes().pipe(operators.map(function (paymentTypes) { return new LoadPaymentTypesSuccess(paymentTypes); }), operators.catchError(function (error) { return rxjs.of(new LoadPaymentTypesFail(i2.normalizeHttpError(error))); }));
            }));
            this.setPaymentType$ = this.actions$.pipe(i1$2.ofType(SET_PAYMENT_TYPE), operators.map(function (action) { return action.payload; }), operators.switchMap(function (payload) {
                return _this.paymentTypeConnector
                    .setPaymentType(payload.userId, payload.cartId, payload.typeCode, payload.poNumber)
                    .pipe(operators.mergeMap(function (data) {
                    return [
                        new i2.CartActions.LoadCartSuccess({
                            cart: data,
                            userId: payload.userId,
                            cartId: payload.cartId,
                        }),
                        new ClearCheckoutData(),
                        new SetPaymentTypeSuccess(data),
                    ];
                }), operators.catchError(function (error) { return rxjs.of(new SetPaymentTypeFail(i2.normalizeHttpError(error))); }));
            }));
        }
        return PaymentTypesEffects;
    }());
    PaymentTypesEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypesEffects, deps: [{ token: i1__namespace$2.Actions }, { token: PaymentTypeConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    PaymentTypesEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypesEffects });
    __decorate([
        i1$2.Effect()
    ], PaymentTypesEffects.prototype, "loadPaymentTypes$", void 0);
    __decorate([
        i1$2.Effect()
    ], PaymentTypesEffects.prototype, "setPaymentType$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: PaymentTypesEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Actions }, { type: PaymentTypeConnector }]; }, propDecorators: { loadPaymentTypes$: [], setPaymentType$: [] } });

    var DELIVERY_MODE_NORMALIZER = new i0.InjectionToken('DeliveryModeNormalizer');

    var PAYMENT_TYPE_NORMALIZER = new i0.InjectionToken('PaymentTypeNormalizer');

    var PAYMENT_DETAILS_SERIALIZER = new i0.InjectionToken('PaymentDetailsSerializer');
    var CARD_TYPE_NORMALIZER = new i0.InjectionToken('CardTypeNormalizer');

    var REPLENISHMENT_ORDER_FORM_SERIALIZER = new i0.InjectionToken('ReplenishmentOrderFormSerializer');

    var ReplenishmentOrderEffects = /** @class */ (function () {
        function ReplenishmentOrderEffects(actions$, checkoutReplOrderConnector) {
            var _this = this;
            this.actions$ = actions$;
            this.checkoutReplOrderConnector = checkoutReplOrderConnector;
            this.scheduleReplenishmentOrder$ = this.actions$.pipe(i1$2.ofType(SCHEDULE_REPLENISHMENT_ORDER), operators.map(function (action) { return action.payload; }), operators.mergeMap(function (payload) {
                return _this.checkoutReplOrderConnector
                    .scheduleReplenishmentOrder(payload.cartId, payload.scheduleReplenishmentForm, payload.termsChecked, payload.userId)
                    .pipe(operators.switchMap(function (data) { return [
                    new i2.CartActions.RemoveCart({ cartId: payload.cartId }),
                    new ScheduleReplenishmentOrderSuccess(data),
                ]; }), operators.catchError(function (error) { return rxjs.of(new ScheduleReplenishmentOrderFail(i2.normalizeHttpError(error))); }));
            }));
        }
        return ReplenishmentOrderEffects;
    }());
    ReplenishmentOrderEffects.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderEffects, deps: [{ token: i1__namespace$2.Actions }, { token: CheckoutReplenishmentOrderConnector }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    ReplenishmentOrderEffects.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderEffects });
    __decorate([
        i1$2.Effect()
    ], ReplenishmentOrderEffects.prototype, "scheduleReplenishmentOrder$", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: ReplenishmentOrderEffects, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () { return [{ type: i1__namespace$2.Actions }, { type: CheckoutReplenishmentOrderConnector }]; }, propDecorators: { scheduleReplenishmentOrder$: [] } });

    var effects = [
        CheckoutEffects,
        CardTypesEffects,
        PaymentTypesEffects,
        ReplenishmentOrderEffects,
    ];

    var initialState$1 = {
        poNumber: { po: undefined, costCenter: undefined },
        address: {},
        deliveryMode: {
            supported: {},
            selected: '',
        },
        paymentDetails: {},
        orderDetails: {},
    };
    function reducer$1(state, action) {
        if (state === void 0) { state = initialState$1; }
        switch (action.type) {
            case SET_PAYMENT_TYPE_SUCCESS: {
                var cart = action.payload;
                return Object.assign(Object.assign({}, state), { poNumber: Object.assign(Object.assign({}, state.poNumber), { po: cart.purchaseOrderNumber }) });
            }
            case SET_COST_CENTER_SUCCESS: {
                return Object.assign(Object.assign({}, state), { poNumber: Object.assign(Object.assign({}, state.poNumber), { costCenter: action.payload }) });
            }
            case ADD_DELIVERY_ADDRESS_SUCCESS:
            case SET_DELIVERY_ADDRESS_SUCCESS: {
                var address = action.payload;
                return Object.assign(Object.assign({}, state), { address: address });
            }
            case LOAD_SUPPORTED_DELIVERY_MODES_SUCCESS: {
                var supportedModes = action.payload;
                if (!supportedModes) {
                    return state;
                }
                var supported = supportedModes.reduce(function (modes, mode) {
                    var _a;
                    return Object.assign(Object.assign({}, modes), (_a = {}, _a[mode.code] = mode, _a));
                }, Object.assign({}, state.deliveryMode.supported));
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: supported }) });
            }
            case SET_DELIVERY_MODE_SUCCESS: {
                var selected = action.payload;
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: selected }) });
            }
            case CREATE_PAYMENT_DETAILS_SUCCESS:
            case SET_PAYMENT_DETAILS_SUCCESS: {
                return Object.assign(Object.assign({}, state), { paymentDetails: action.payload });
            }
            case CREATE_PAYMENT_DETAILS_FAIL: {
                var paymentDetails = action.payload;
                if (paymentDetails['hasError']) {
                    return Object.assign(Object.assign({}, state), { paymentDetails: paymentDetails });
                }
                return state;
            }
            case PLACE_ORDER_SUCCESS:
            case SCHEDULE_REPLENISHMENT_ORDER_SUCCESS: {
                var orderDetails = action.payload;
                return Object.assign(Object.assign({}, state), { orderDetails: orderDetails });
            }
            case CLEAR_CHECKOUT_DATA: {
                return initialState$1;
            }
            case CLEAR_CHECKOUT_STEP: {
                var stepNumber = action.payload;
                switch (stepNumber) {
                    case 1: {
                        return Object.assign(Object.assign({}, state), { address: {} });
                    }
                    case 2: {
                        return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: {}, selected: '' }) });
                    }
                    case 3: {
                        return Object.assign(Object.assign({}, state), { paymentDetails: {} });
                    }
                }
                return state;
            }
            case CLEAR_SUPPORTED_DELIVERY_MODES:
            case CHECKOUT_CLEAR_MISCS_DATA: {
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { supported: {} }) });
            }
            case LOAD_CHECKOUT_DETAILS_SUCCESS: {
                return Object.assign(Object.assign({}, state), { address: action.payload.deliveryAddress, deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: action.payload.deliveryMode &&
                            action.payload.deliveryMode.code }), paymentDetails: action.payload.paymentInfo });
            }
            case CLEAR_CHECKOUT_DELIVERY_ADDRESS: {
                return Object.assign(Object.assign({}, state), { address: {} });
            }
            case CLEAR_CHECKOUT_DELIVERY_MODE: {
                return Object.assign(Object.assign({}, state), { deliveryMode: Object.assign(Object.assign({}, state.deliveryMode), { selected: '' }) });
            }
        }
        return state;
    }

    var initialState = {
        selected: i2.ORDER_TYPE.PLACE_ORDER,
    };
    function reducer(state, action) {
        if (state === void 0) { state = initialState; }
        switch (action.type) {
            case SET_ORDER_TYPE: {
                return Object.assign(Object.assign({}, state), { selected: action.payload });
            }
            case CLEAR_CHECKOUT_DATA: {
                return initialState;
            }
            default: {
                return state;
            }
        }
    }

    function getReducers() {
        return {
            steps: i2.StateUtils.loaderReducer(CHECKOUT_DETAILS, reducer$1),
            cardTypes: reducer$3,
            paymentTypes: reducer$2,
            orderType: reducer,
        };
    }
    var reducerToken = new i0.InjectionToken('CheckoutReducers');
    var reducerProvider = {
        provide: reducerToken,
        useFactory: getReducers,
    };

    var CheckoutStoreModule = /** @class */ (function () {
        function CheckoutStoreModule() {
        }
        return CheckoutStoreModule;
    }());
    CheckoutStoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutStoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStoreModule, imports: [common.CommonModule, i1__namespace$1.StoreFeatureModule, i1__namespace$2.EffectsFeatureModule] });
    CheckoutStoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStoreModule, providers: [reducerProvider], imports: [[
                common.CommonModule,
                i1$1.StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),
                i1$2.EffectsModule.forFeature(effects),
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutStoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            common.CommonModule,
                            i1$1.StoreModule.forFeature(CHECKOUT_FEATURE, reducerToken),
                            i1$2.EffectsModule.forFeature(effects),
                        ],
                        providers: [reducerProvider],
                    }]
            }] });

    var CheckoutCoreModule = /** @class */ (function () {
        function CheckoutCoreModule() {
        }
        return CheckoutCoreModule;
    }());
    CheckoutCoreModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCoreModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    CheckoutCoreModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCoreModule, imports: [CheckoutStoreModule, CheckoutEventModule] });
    CheckoutCoreModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCoreModule, providers: __spreadArray(__spreadArray([], __read(facadeProviders)), [
            CheckoutDeliveryConnector,
            CheckoutCostCenterConnector,
            CheckoutConnector,
            CheckoutPaymentConnector,
            PaymentTypeConnector,
            CheckoutReplenishmentOrderConnector,
            CheckoutEventBuilder,
            CheckoutPageMetaResolver,
            {
                provide: i2.PageMetaResolver,
                useExisting: CheckoutPageMetaResolver,
                multi: true,
            },
        ]), imports: [[CheckoutStoreModule, CheckoutEventModule]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0__namespace, type: CheckoutCoreModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [CheckoutStoreModule, CheckoutEventModule],
                        providers: __spreadArray(__spreadArray([], __read(facadeProviders)), [
                            CheckoutDeliveryConnector,
                            CheckoutCostCenterConnector,
                            CheckoutConnector,
                            CheckoutPaymentConnector,
                            PaymentTypeConnector,
                            CheckoutReplenishmentOrderConnector,
                            CheckoutEventBuilder,
                            CheckoutPageMetaResolver,
                            {
                                provide: i2.PageMetaResolver,
                                useExisting: CheckoutPageMetaResolver,
                                multi: true,
                            },
                        ]),
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CARD_TYPE_NORMALIZER = CARD_TYPE_NORMALIZER;
    exports.CHECKOUT_DETAILS = CHECKOUT_DETAILS;
    exports.CHECKOUT_FEATURE = CHECKOUT_FEATURE;
    exports.CheckoutActions = checkoutGroup_actions;
    exports.CheckoutAdapter = CheckoutAdapter;
    exports.CheckoutConnector = CheckoutConnector;
    exports.CheckoutCoreModule = CheckoutCoreModule;
    exports.CheckoutCostCenterAdapter = CheckoutCostCenterAdapter;
    exports.CheckoutCostCenterConnector = CheckoutCostCenterConnector;
    exports.CheckoutCostCenterService = CheckoutCostCenterService;
    exports.CheckoutDeliveryAdapter = CheckoutDeliveryAdapter;
    exports.CheckoutDeliveryConnector = CheckoutDeliveryConnector;
    exports.CheckoutDeliveryService = CheckoutDeliveryService;
    exports.CheckoutEventBuilder = CheckoutEventBuilder;
    exports.CheckoutEventListener = CheckoutEventListener;
    exports.CheckoutEventModule = CheckoutEventModule;
    exports.CheckoutPageMetaResolver = CheckoutPageMetaResolver;
    exports.CheckoutPaymentAdapter = CheckoutPaymentAdapter;
    exports.CheckoutPaymentConnector = CheckoutPaymentConnector;
    exports.CheckoutPaymentService = CheckoutPaymentService;
    exports.CheckoutReplenishmentOrderAdapter = CheckoutReplenishmentOrderAdapter;
    exports.CheckoutReplenishmentOrderConnector = CheckoutReplenishmentOrderConnector;
    exports.CheckoutSelectors = checkoutGroup_selectors;
    exports.CheckoutService = CheckoutService;
    exports.ClearCheckoutService = ClearCheckoutService;
    exports.DELIVERY_MODE_NORMALIZER = DELIVERY_MODE_NORMALIZER;
    exports.GET_PAYMENT_TYPES_PROCESS_ID = GET_PAYMENT_TYPES_PROCESS_ID;
    exports.PAYMENT_DETAILS_SERIALIZER = PAYMENT_DETAILS_SERIALIZER;
    exports.PAYMENT_TYPE_NORMALIZER = PAYMENT_TYPE_NORMALIZER;
    exports.PLACED_ORDER_PROCESS_ID = PLACED_ORDER_PROCESS_ID;
    exports.PaymentTypeAdapter = PaymentTypeAdapter;
    exports.PaymentTypeConnector = PaymentTypeConnector;
    exports.PaymentTypeService = PaymentTypeService;
    exports.REPLENISHMENT_ORDER_FORM_SERIALIZER = REPLENISHMENT_ORDER_FORM_SERIALIZER;
    exports.SET_COST_CENTER_PROCESS_ID = SET_COST_CENTER_PROCESS_ID;
    exports.SET_DELIVERY_ADDRESS_PROCESS_ID = SET_DELIVERY_ADDRESS_PROCESS_ID;
    exports.SET_DELIVERY_MODE_PROCESS_ID = SET_DELIVERY_MODE_PROCESS_ID;
    exports.SET_PAYMENT_DETAILS_PROCESS_ID = SET_PAYMENT_DETAILS_PROCESS_ID;
    exports.SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID = SET_SUPPORTED_DELIVERY_MODE_PROCESS_ID;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=spartacus-checkout-core.umd.js.map
