import { Component } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/storefinder/core";
import * as i2 from "@angular/router";
import * as i3 from "@spartacus/storefront";
import * as i4 from "./store-finder-list/store-finder-list.component";
import * as i5 from "@angular/common";
import * as i6 from "@spartacus/core";
export class StoreFinderSearchResultComponent {
    constructor(storeFinderService, route, config) {
        this.storeFinderService = storeFinderService;
        this.route = route;
        this.config = config;
        this.countryCode = null;
        this.searchConfig = {
            currentPage: 0,
        };
    }
    ngOnInit() {
        this.subscription = this.route.queryParams.subscribe((params) => this.initialize(params));
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    viewPage(pageNumber) {
        this.searchConfig = Object.assign(Object.assign({}, this.searchConfig), { currentPage: pageNumber });
        this.storeFinderService.findStoresAction(this.searchQuery.queryText, this.searchConfig, this.geolocation, this.countryCode, this.useMyLocation, this.radius);
    }
    initialize(params) {
        this.searchQuery = this.parseParameters(params);
        this.useMyLocation = params && params.useMyLocation ? true : false;
        this.searchConfig = Object.assign(Object.assign({}, this.searchConfig), { currentPage: 0 });
        this.radius = this.config.googleMaps.radius;
        this.storeFinderService.findStoresAction(this.searchQuery.queryText, this.searchConfig, this.geolocation, this.countryCode, this.useMyLocation, this.radius);
        this.isLoading$ = this.storeFinderService.getStoresLoading();
        this.locations$ = this.storeFinderService.getFindStoresEntities();
    }
    parseParameters(queryParams) {
        let searchQuery;
        if (queryParams.query) {
            searchQuery = { queryText: queryParams.query };
        }
        else {
            searchQuery = { queryText: '' };
        }
        searchQuery.useMyLocation =
            queryParams.useMyLocation != null &&
                queryParams.useMyLocation.toUpperCase() === 'TRUE';
        return searchQuery;
    }
}
StoreFinderSearchResultComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StoreFinderSearchResultComponent, deps: [{ token: i1.StoreFinderService }, { token: i2.ActivatedRoute }, { token: i1.StoreFinderConfig }], target: i0.ɵɵFactoryTarget.Component });
StoreFinderSearchResultComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: StoreFinderSearchResultComponent, selector: "cx-store-finder-search-result", ngImport: i0, template: "<div\n  *ngIf=\"\n    !(isLoading$ | async) && (locations$ | async) as locations;\n    else loading\n  \"\n>\n  <div *ngIf=\"locations?.stores.length\">\n    <div class=\"cx-pagination\">\n      <cx-pagination\n        [pagination]=\"locations.pagination\"\n        (viewPageEvent)=\"viewPage($event)\"\n      ></cx-pagination>\n    </div>\n  </div>\n  <cx-store-finder-list\n    *ngIf=\"locations?.stores.length\"\n    [locations]=\"locations\"\n    [useMylocation]=\"useMyLocation\"\n  ></cx-store-finder-list>\n  <div class=\"container\" *ngIf=\"!locations?.stores.length\">\n    <div class=\"row\">\n      <span class=\"cx-no-stores\" role=\"alert\">\n        {{ 'storeFinder.noStoresMessage' | cxTranslate }}\n      </span>\n    </div>\n  </div>\n</div>\n<ng-template #loading>\n  <div class=\"cx-spinner\">\n    <cx-spinner></cx-spinner>\n  </div>\n</ng-template>\n", components: [{ type: i3.PaginationComponent, selector: "cx-pagination", inputs: ["pageRoute", "queryParam", "defaultPage", "pagination"], outputs: ["viewPageEvent"] }, { type: i4.StoreFinderListComponent, selector: "cx-store-finder-list", inputs: ["locations", "useMylocation"] }, { type: i3.SpinnerComponent, selector: "cx-spinner" }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe, "cxTranslate": i6.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StoreFinderSearchResultComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-store-finder-search-result',
                    templateUrl: './store-finder-search-result.component.html',
                }]
        }], ctorParameters: function () { return [{ type: i1.StoreFinderService }, { type: i2.ActivatedRoute }, { type: i1.StoreFinderConfig }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtZmluZGVyLXNlYXJjaC1yZXN1bHQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3N0b3JlZmluZGVyL2NvbXBvbmVudHMvc3RvcmUtZmluZGVyLXNlYXJjaC1yZXN1bHQvc3RvcmUtZmluZGVyLXNlYXJjaC1yZXN1bHQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3N0b3JlZmluZGVyL2NvbXBvbmVudHMvc3RvcmUtZmluZGVyLXNlYXJjaC1yZXN1bHQvc3RvcmUtZmluZGVyLXNlYXJjaC1yZXN1bHQuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBcUIsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7O0FBYzdELE1BQU0sT0FBTyxnQ0FBZ0M7SUFjM0MsWUFDVSxrQkFBc0MsRUFDdEMsS0FBcUIsRUFDbkIsTUFBeUI7UUFGM0IsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFvQjtRQUN0QyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQWJyQyxnQkFBVyxHQUFXLElBQUksQ0FBQztRQUMzQixpQkFBWSxHQUFpQjtZQUMzQixXQUFXLEVBQUUsQ0FBQztTQUNmLENBQUM7SUFXQyxDQUFDO0lBRUosUUFBUTtRQUNOLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FDOUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDeEIsQ0FBQztJQUNKLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ3JCLElBQUksQ0FBQyxZQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDakM7SUFDSCxDQUFDO0lBRUQsUUFBUSxDQUFDLFVBQWtCO1FBQ3pCLElBQUksQ0FBQyxZQUFZLG1DQUFRLElBQUksQ0FBQyxZQUFZLEtBQUUsV0FBVyxFQUFFLFVBQVUsR0FBRSxDQUFDO1FBQ3RFLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQzFCLElBQUksQ0FBQyxZQUFZLEVBQ2pCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxXQUFXLEVBQ2hCLElBQUksQ0FBQyxhQUFhLEVBQ2xCLElBQUksQ0FBQyxNQUFNLENBQ1osQ0FBQztJQUNKLENBQUM7SUFFTyxVQUFVLENBQUMsTUFBYztRQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbkUsSUFBSSxDQUFDLFlBQVksbUNBQVEsSUFBSSxDQUFDLFlBQVksS0FBRSxXQUFXLEVBQUUsQ0FBQyxHQUFFLENBQUM7UUFDN0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUM7UUFDNUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUN0QyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFDMUIsSUFBSSxDQUFDLFlBQVksRUFDakIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLFdBQVcsRUFDaEIsSUFBSSxDQUFDLGFBQWEsRUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FDWixDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM3RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3BFLENBQUM7SUFFTyxlQUFlLENBQUMsV0FFdkI7UUFDQyxJQUFJLFdBQW1DLENBQUM7UUFFeEMsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO1lBQ3JCLFdBQVcsR0FBRyxFQUFFLFNBQVMsRUFBRSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEQ7YUFBTTtZQUNMLFdBQVcsR0FBRyxFQUFFLFNBQVMsRUFBRSxFQUFFLEVBQUUsQ0FBQztTQUNqQztRQUVELFdBQVcsQ0FBQyxhQUFhO1lBQ3ZCLFdBQVcsQ0FBQyxhQUFhLElBQUksSUFBSTtnQkFDakMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsS0FBSyxNQUFNLENBQUM7UUFFckQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQzs7NkhBOUVVLGdDQUFnQztpSEFBaEMsZ0NBQWdDLHFFQ2Q3Qyx5MkJBZ0NBOzJGRGxCYSxnQ0FBZ0M7a0JBSjVDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLCtCQUErQjtvQkFDekMsV0FBVyxFQUFFLDZDQUE2QztpQkFDM0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSwgUGFyYW1zIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IEdlb1BvaW50LCBTZWFyY2hDb25maWcgfSBmcm9tICdAc3BhcnRhY3VzL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBTdG9yZUZpbmRlclNlYXJjaFF1ZXJ5LFxuICBTdG9yZUZpbmRlclNlcnZpY2UsXG4gIFN0b3JlRmluZGVyQ29uZmlnLFxufSBmcm9tICdAc3BhcnRhY3VzL3N0b3JlZmluZGVyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjeC1zdG9yZS1maW5kZXItc2VhcmNoLXJlc3VsdCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zdG9yZS1maW5kZXItc2VhcmNoLXJlc3VsdC5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFN0b3JlRmluZGVyU2VhcmNoUmVzdWx0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBsb2NhdGlvbnM6IGFueTtcbiAgc3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb247XG4gIHVzZU15TG9jYXRpb246IGJvb2xlYW47XG4gIGNvdW50cnlDb2RlOiBzdHJpbmcgPSBudWxsO1xuICBzZWFyY2hDb25maWc6IFNlYXJjaENvbmZpZyA9IHtcbiAgICBjdXJyZW50UGFnZTogMCxcbiAgfTtcbiAgcmFkaXVzOiBudW1iZXI7XG4gIHNlYXJjaFF1ZXJ5OiBTdG9yZUZpbmRlclNlYXJjaFF1ZXJ5O1xuICBnZW9sb2NhdGlvbjogR2VvUG9pbnQ7XG4gIGxvY2F0aW9ucyQ6IE9ic2VydmFibGU8YW55PjtcbiAgaXNMb2FkaW5nJDogT2JzZXJ2YWJsZTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgc3RvcmVGaW5kZXJTZXJ2aWNlOiBTdG9yZUZpbmRlclNlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJvdGVjdGVkIGNvbmZpZzogU3RvcmVGaW5kZXJDb25maWdcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5yb3V0ZS5xdWVyeVBhcmFtcy5zdWJzY3JpYmUoKHBhcmFtcykgPT5cbiAgICAgIHRoaXMuaW5pdGlhbGl6ZShwYXJhbXMpXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9XG4gIH1cblxuICB2aWV3UGFnZShwYWdlTnVtYmVyOiBudW1iZXIpIHtcbiAgICB0aGlzLnNlYXJjaENvbmZpZyA9IHsgLi4udGhpcy5zZWFyY2hDb25maWcsIGN1cnJlbnRQYWdlOiBwYWdlTnVtYmVyIH07XG4gICAgdGhpcy5zdG9yZUZpbmRlclNlcnZpY2UuZmluZFN0b3Jlc0FjdGlvbihcbiAgICAgIHRoaXMuc2VhcmNoUXVlcnkucXVlcnlUZXh0LFxuICAgICAgdGhpcy5zZWFyY2hDb25maWcsXG4gICAgICB0aGlzLmdlb2xvY2F0aW9uLFxuICAgICAgdGhpcy5jb3VudHJ5Q29kZSxcbiAgICAgIHRoaXMudXNlTXlMb2NhdGlvbixcbiAgICAgIHRoaXMucmFkaXVzXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgaW5pdGlhbGl6ZShwYXJhbXM6IFBhcmFtcykge1xuICAgIHRoaXMuc2VhcmNoUXVlcnkgPSB0aGlzLnBhcnNlUGFyYW1ldGVycyhwYXJhbXMpO1xuICAgIHRoaXMudXNlTXlMb2NhdGlvbiA9IHBhcmFtcyAmJiBwYXJhbXMudXNlTXlMb2NhdGlvbiA/IHRydWUgOiBmYWxzZTtcbiAgICB0aGlzLnNlYXJjaENvbmZpZyA9IHsgLi4udGhpcy5zZWFyY2hDb25maWcsIGN1cnJlbnRQYWdlOiAwIH07XG4gICAgdGhpcy5yYWRpdXMgPSB0aGlzLmNvbmZpZy5nb29nbGVNYXBzLnJhZGl1cztcbiAgICB0aGlzLnN0b3JlRmluZGVyU2VydmljZS5maW5kU3RvcmVzQWN0aW9uKFxuICAgICAgdGhpcy5zZWFyY2hRdWVyeS5xdWVyeVRleHQsXG4gICAgICB0aGlzLnNlYXJjaENvbmZpZyxcbiAgICAgIHRoaXMuZ2VvbG9jYXRpb24sXG4gICAgICB0aGlzLmNvdW50cnlDb2RlLFxuICAgICAgdGhpcy51c2VNeUxvY2F0aW9uLFxuICAgICAgdGhpcy5yYWRpdXNcbiAgICApO1xuXG4gICAgdGhpcy5pc0xvYWRpbmckID0gdGhpcy5zdG9yZUZpbmRlclNlcnZpY2UuZ2V0U3RvcmVzTG9hZGluZygpO1xuICAgIHRoaXMubG9jYXRpb25zJCA9IHRoaXMuc3RvcmVGaW5kZXJTZXJ2aWNlLmdldEZpbmRTdG9yZXNFbnRpdGllcygpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZVBhcmFtZXRlcnMocXVlcnlQYXJhbXM6IHtcbiAgICBba2V5OiBzdHJpbmddOiBhbnk7XG4gIH0pOiBTdG9yZUZpbmRlclNlYXJjaFF1ZXJ5IHtcbiAgICBsZXQgc2VhcmNoUXVlcnk6IFN0b3JlRmluZGVyU2VhcmNoUXVlcnk7XG5cbiAgICBpZiAocXVlcnlQYXJhbXMucXVlcnkpIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ID0geyBxdWVyeVRleHQ6IHF1ZXJ5UGFyYW1zLnF1ZXJ5IH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlYXJjaFF1ZXJ5ID0geyBxdWVyeVRleHQ6ICcnIH07XG4gICAgfVxuXG4gICAgc2VhcmNoUXVlcnkudXNlTXlMb2NhdGlvbiA9XG4gICAgICBxdWVyeVBhcmFtcy51c2VNeUxvY2F0aW9uICE9IG51bGwgJiZcbiAgICAgIHF1ZXJ5UGFyYW1zLnVzZU15TG9jYXRpb24udG9VcHBlckNhc2UoKSA9PT0gJ1RSVUUnO1xuXG4gICAgcmV0dXJuIHNlYXJjaFF1ZXJ5O1xuICB9XG59XG4iLCI8ZGl2XG4gICpuZ0lmPVwiXG4gICAgIShpc0xvYWRpbmckIHwgYXN5bmMpICYmIChsb2NhdGlvbnMkIHwgYXN5bmMpIGFzIGxvY2F0aW9ucztcbiAgICBlbHNlIGxvYWRpbmdcbiAgXCJcbj5cbiAgPGRpdiAqbmdJZj1cImxvY2F0aW9ucz8uc3RvcmVzLmxlbmd0aFwiPlxuICAgIDxkaXYgY2xhc3M9XCJjeC1wYWdpbmF0aW9uXCI+XG4gICAgICA8Y3gtcGFnaW5hdGlvblxuICAgICAgICBbcGFnaW5hdGlvbl09XCJsb2NhdGlvbnMucGFnaW5hdGlvblwiXG4gICAgICAgICh2aWV3UGFnZUV2ZW50KT1cInZpZXdQYWdlKCRldmVudClcIlxuICAgICAgPjwvY3gtcGFnaW5hdGlvbj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG4gIDxjeC1zdG9yZS1maW5kZXItbGlzdFxuICAgICpuZ0lmPVwibG9jYXRpb25zPy5zdG9yZXMubGVuZ3RoXCJcbiAgICBbbG9jYXRpb25zXT1cImxvY2F0aW9uc1wiXG4gICAgW3VzZU15bG9jYXRpb25dPVwidXNlTXlMb2NhdGlvblwiXG4gID48L2N4LXN0b3JlLWZpbmRlci1saXN0PlxuICA8ZGl2IGNsYXNzPVwiY29udGFpbmVyXCIgKm5nSWY9XCIhbG9jYXRpb25zPy5zdG9yZXMubGVuZ3RoXCI+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJjeC1uby1zdG9yZXNcIiByb2xlPVwiYWxlcnRcIj5cbiAgICAgICAge3sgJ3N0b3JlRmluZGVyLm5vU3RvcmVzTWVzc2FnZScgfCBjeFRyYW5zbGF0ZSB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICA8L2Rpdj5cbjwvZGl2PlxuPG5nLXRlbXBsYXRlICNsb2FkaW5nPlxuICA8ZGl2IGNsYXNzPVwiY3gtc3Bpbm5lclwiPlxuICAgIDxjeC1zcGlubmVyPjwvY3gtc3Bpbm5lcj5cbiAgPC9kaXY+XG48L25nLXRlbXBsYXRlPlxuIl19