import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@spartacus/core";
export class StoreFinderPaginationDetailsComponent {
    constructor() { }
    getResultsPerPage() {
        if (this.pagination.totalResults > this.pagination.pageSize) {
            const firstItem = this.pagination.currentPage * this.pagination.pageSize + 1;
            let resultsPerPage = (this.pagination.currentPage + 1) * this.pagination.pageSize;
            if (resultsPerPage > this.pagination.totalResults) {
                resultsPerPage = this.pagination.totalResults;
            }
            return `${firstItem} - ${resultsPerPage}`;
        }
        else {
            return `1 - ${this.pagination.totalResults}`;
        }
    }
}
StoreFinderPaginationDetailsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StoreFinderPaginationDetailsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
StoreFinderPaginationDetailsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.0.5", type: StoreFinderPaginationDetailsComponent, selector: "cx-store-finder-pagination-details", inputs: { pagination: "pagination" }, ngImport: i0, template: "<span class=\"cx-pagination-details\">\n  {{ getResultsPerPage() }}\n  {{\n    'storeFinder.fromStoresFound'\n      | cxTranslate: { count: pagination.totalResults }\n  }}\n</span>\n", pipes: { "cxTranslate": i1.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.5", ngImport: i0, type: StoreFinderPaginationDetailsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'cx-store-finder-pagination-details',
                    templateUrl: './store-finder-pagination-details.component.html',
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { pagination: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmUtZmluZGVyLXBhZ2luYXRpb24tZGV0YWlscy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9mZWF0dXJlLWxpYnMvc3RvcmVmaW5kZXIvY29tcG9uZW50cy9zdG9yZS1maW5kZXItcGFnaW5hdGlvbi1kZXRhaWxzL3N0b3JlLWZpbmRlci1wYWdpbmF0aW9uLWRldGFpbHMuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vZmVhdHVyZS1saWJzL3N0b3JlZmluZGVyL2NvbXBvbmVudHMvc3RvcmUtZmluZGVyLXBhZ2luYXRpb24tZGV0YWlscy9zdG9yZS1maW5kZXItcGFnaW5hdGlvbi1kZXRhaWxzLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7QUFPakQsTUFBTSxPQUFPLHFDQUFxQztJQUloRCxnQkFBZSxDQUFDO0lBRWhCLGlCQUFpQjtRQUNmLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUU7WUFDM0QsTUFBTSxTQUFTLEdBQ2IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBRTdELElBQUksY0FBYyxHQUNoQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBRS9ELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFO2dCQUNqRCxjQUFjLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUM7YUFDL0M7WUFFRCxPQUFPLEdBQUcsU0FBUyxNQUFNLGNBQWMsRUFBRSxDQUFDO1NBQzNDO2FBQU07WUFDTCxPQUFPLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUM5QztJQUNILENBQUM7O2tJQXRCVSxxQ0FBcUM7c0hBQXJDLHFDQUFxQyxnSENQbEQsd0xBT0E7MkZEQWEscUNBQXFDO2tCQUpqRCxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxvQ0FBb0M7b0JBQzlDLFdBQVcsRUFBRSxrREFBa0Q7aUJBQ2hFOzBFQUdDLFVBQVU7c0JBRFQsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFBhZ2luYXRpb25Nb2RlbCB9IGZyb20gJ0BzcGFydGFjdXMvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2N4LXN0b3JlLWZpbmRlci1wYWdpbmF0aW9uLWRldGFpbHMnLFxuICB0ZW1wbGF0ZVVybDogJy4vc3RvcmUtZmluZGVyLXBhZ2luYXRpb24tZGV0YWlscy5jb21wb25lbnQuaHRtbCcsXG59KVxuZXhwb3J0IGNsYXNzIFN0b3JlRmluZGVyUGFnaW5hdGlvbkRldGFpbHNDb21wb25lbnQge1xuICBASW5wdXQoKVxuICBwYWdpbmF0aW9uOiBQYWdpbmF0aW9uTW9kZWw7XG5cbiAgY29uc3RydWN0b3IoKSB7fVxuXG4gIGdldFJlc3VsdHNQZXJQYWdlKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMucGFnaW5hdGlvbi50b3RhbFJlc3VsdHMgPiB0aGlzLnBhZ2luYXRpb24ucGFnZVNpemUpIHtcbiAgICAgIGNvbnN0IGZpcnN0SXRlbSA9XG4gICAgICAgIHRoaXMucGFnaW5hdGlvbi5jdXJyZW50UGFnZSAqIHRoaXMucGFnaW5hdGlvbi5wYWdlU2l6ZSArIDE7XG5cbiAgICAgIGxldCByZXN1bHRzUGVyUGFnZSA9XG4gICAgICAgICh0aGlzLnBhZ2luYXRpb24uY3VycmVudFBhZ2UgKyAxKSAqIHRoaXMucGFnaW5hdGlvbi5wYWdlU2l6ZTtcblxuICAgICAgaWYgKHJlc3VsdHNQZXJQYWdlID4gdGhpcy5wYWdpbmF0aW9uLnRvdGFsUmVzdWx0cykge1xuICAgICAgICByZXN1bHRzUGVyUGFnZSA9IHRoaXMucGFnaW5hdGlvbi50b3RhbFJlc3VsdHM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBgJHtmaXJzdEl0ZW19IC0gJHtyZXN1bHRzUGVyUGFnZX1gO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYDEgLSAke3RoaXMucGFnaW5hdGlvbi50b3RhbFJlc3VsdHN9YDtcbiAgICB9XG4gIH1cbn1cbiIsIjxzcGFuIGNsYXNzPVwiY3gtcGFnaW5hdGlvbi1kZXRhaWxzXCI+XG4gIHt7IGdldFJlc3VsdHNQZXJQYWdlKCkgfX1cbiAge3tcbiAgICAnc3RvcmVGaW5kZXIuZnJvbVN0b3Jlc0ZvdW5kJ1xuICAgICAgfCBjeFRyYW5zbGF0ZTogeyBjb3VudDogcGFnaW5hdGlvbi50b3RhbFJlc3VsdHMgfVxuICB9fVxuPC9zcGFuPlxuIl19