{"version":3,"file":"spartacus-storefinder-core.js","sources":["../../../feature-libs/storefinder/core/config/store-finder-config.ts","../../../feature-libs/storefinder/core/connectors/store-finder.adapter.ts","../../../feature-libs/storefinder/core/connectors/store-finder.connector.ts","../../../feature-libs/storefinder/core/connectors/converters.ts","../../../feature-libs/storefinder/core/store/store-finder-state.ts","../../../feature-libs/storefinder/core/store/actions/find-stores.action.ts","../../../feature-libs/storefinder/core/store/actions/view-all-stores.action.ts","../../../feature-libs/storefinder/core/store/selectors/feature.selector.ts","../../../feature-libs/storefinder/core/store/selectors/find-stores.selectors.ts","../../../feature-libs/storefinder/core/store/selectors/view-all-stores.selectors.ts","../../../feature-libs/storefinder/core/facade/store-finder.service.ts","../../../feature-libs/storefinder/core/service/google-map-renderer.service.ts","../../../feature-libs/storefinder/core/config/default-store-finder-config.ts","../../../feature-libs/storefinder/core/store/reducers/find-stores.reducer.ts","../../../feature-libs/storefinder/core/store/reducers/view-all-stores.reducer.ts","../../../feature-libs/storefinder/core/store/reducers/index.ts","../../../feature-libs/storefinder/core/store/effects/find-stores.effect.ts","../../../feature-libs/storefinder/core/store/effects/view-all-stores.effect.ts","../../../feature-libs/storefinder/core/store/effects/index.ts","../../../feature-libs/storefinder/core/store/store-finder-store.module.ts","../../../feature-libs/storefinder/core/store-finder-core.module.ts","../../../feature-libs/storefinder/core/spartacus-storefinder-core.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Config } from '@spartacus/core';\n\n@Injectable({\n  providedIn: 'root',\n  useExisting: Config,\n})\nexport abstract class StoreFinderConfig {\n  googleMaps?: {\n    apiUrl?: string;\n    apiKey?: string;\n    scale?: number;\n    selectedMarkerScale?: number;\n    radius?: number;\n  };\n}\n\ndeclare module '@spartacus/core' {\n  interface Config extends StoreFinderConfig {}\n}\n","import { Observable } from 'rxjs';\nimport { GeoPoint, PointOfService, SearchConfig } from '@spartacus/core';\nimport { StoreCount, StoreFinderSearchPage } from '../model/store-finder.model';\n\nexport abstract class StoreFinderAdapter {\n  abstract search(\n    query: string,\n    searchConfig: SearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage>;\n\n  abstract loadCounts(): Observable<StoreCount[]>;\n\n  abstract load(storeId: string): Observable<PointOfService>;\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { StoreFinderAdapter } from './store-finder.adapter';\nimport { GeoPoint, PointOfService, SearchConfig } from '@spartacus/core';\nimport { StoreCount, StoreFinderSearchPage } from '../model/store-finder.model';\n\n@Injectable({ providedIn: 'root' })\nexport class StoreFinderConnector {\n  constructor(protected adapter: StoreFinderAdapter) {}\n\n  search(\n    query: string,\n    searchConfig: SearchConfig,\n    longitudeLatitude?: GeoPoint,\n    radius?: number\n  ): Observable<StoreFinderSearchPage> {\n    return this.adapter.search(query, searchConfig, longitudeLatitude, radius);\n  }\n\n  getCounts(): Observable<StoreCount[]> {\n    return this.adapter.loadCounts();\n  }\n\n  get(storeId: string): Observable<PointOfService> {\n    return this.adapter.load(storeId);\n  }\n}\n","import { InjectionToken } from '@angular/core';\nimport { Converter } from '@spartacus/core';\nimport { StoreCount, StoreFinderSearchPage } from '../model/store-finder.model';\n\nexport const STORE_FINDER_SEARCH_PAGE_NORMALIZER = new InjectionToken<\n  Converter<any, StoreFinderSearchPage>\n>('StoreFinderSearchPageNormalizer');\n\nexport const STORE_COUNT_NORMALIZER = new InjectionToken<\n  Converter<any, StoreCount>\n>('StoreCountNormalizer');\n","import { StoreEntities } from '../model/store-entities';\nimport { StateUtils } from '@spartacus/core';\n\nexport const STORE_FINDER_FEATURE = 'stores';\nexport const STORE_FINDER_DATA = '[StoreFinder] Store Finder Data';\n\nexport interface StateWithStoreFinder {\n  [STORE_FINDER_FEATURE]: StoresState;\n}\n\nexport interface StoresState {\n  findStores: StateUtils.LoaderState<FindStoresState>;\n  viewAllStores: StateUtils.LoaderState<ViewAllStoresState>;\n}\n\nexport interface FindStoresState {\n  findStoresEntities: StoreEntities;\n  findStoreEntityById: StoreEntities;\n}\n\nexport interface ViewAllStoresState {\n  viewAllStoresEntities: StoreEntities;\n}\n","import { STORE_FINDER_DATA } from '../store-finder-state';\nimport { GeoPoint, SearchConfig, StateUtils } from '@spartacus/core';\n\nexport const FIND_STORES_ON_HOLD = '[StoreFinder] On Hold';\nexport const FIND_STORES = '[StoreFinder] Find Stores';\nexport const FIND_STORES_FAIL = '[StoreFinder] Find Stores Fail';\nexport const FIND_STORES_SUCCESS = '[StoreFinder] Find Stores Success';\n\nexport const FIND_STORE_BY_ID = '[StoreFinder] Find a Store by Id';\nexport const FIND_STORE_BY_ID_FAIL = '[StoreFinder] Find a Store by Id Fail';\nexport const FIND_STORE_BY_ID_SUCCESS =\n  '[StoreFinder] Find a Store by Id Success';\n\nexport class FindStoresOnHold extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES_ON_HOLD;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStores extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORES;\n  constructor(\n    public payload: {\n      queryText: string;\n      searchConfig?: SearchConfig;\n      longitudeLatitude?: GeoPoint;\n      useMyLocation?: boolean;\n      countryIsoCode?: string;\n      radius?: number;\n    }\n  ) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreById extends StateUtils.LoaderLoadAction {\n  readonly type = FIND_STORE_BY_ID;\n  constructor(public payload: { storeId: string }) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class FindStoreByIdFail extends StateUtils.LoaderFailAction {\n  readonly type = FIND_STORE_BY_ID_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class FindStoreByIdSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = FIND_STORE_BY_ID_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport type FindStoresAction =\n  | FindStoresOnHold\n  | FindStores\n  | FindStoresFail\n  | FindStoresSuccess\n  | FindStoreById\n  | FindStoreByIdFail\n  | FindStoreByIdSuccess;\n","import { STORE_FINDER_DATA } from '../store-finder-state';\nimport { StateUtils } from '@spartacus/core';\nimport { Action } from '@ngrx/store';\n\nexport const VIEW_ALL_STORES = '[StoreFinder] View All Stores';\nexport const VIEW_ALL_STORES_FAIL = '[StoreFinder] View All Stores Fail';\nexport const VIEW_ALL_STORES_SUCCESS = '[StoreFinder] View All Stores Success';\nexport const CLEAR_STORE_FINDER_DATA = '[StoreFinder] Clear Data';\n\nexport class ViewAllStores extends StateUtils.LoaderLoadAction {\n  readonly type = VIEW_ALL_STORES;\n  constructor() {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ViewAllStoresFail extends StateUtils.LoaderFailAction {\n  readonly type = VIEW_ALL_STORES_FAIL;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA, payload);\n  }\n}\n\nexport class ViewAllStoresSuccess extends StateUtils.LoaderSuccessAction {\n  readonly type = VIEW_ALL_STORES_SUCCESS;\n  constructor(public payload: any) {\n    super(STORE_FINDER_DATA);\n  }\n}\n\nexport class ClearStoreFinderData implements Action {\n  readonly type = CLEAR_STORE_FINDER_DATA;\n}\n\nexport type ViewAllStoresAction =\n  | ViewAllStores\n  | ViewAllStoresFail\n  | ViewAllStoresSuccess\n  | ClearStoreFinderData;\n","import { createFeatureSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  STORE_FINDER_FEATURE,\n} from '../store-finder-state';\n\nexport const getStoreFinderState: MemoizedSelector<\n  StateWithStoreFinder,\n  StoresState\n> = createFeatureSelector<StoresState>(STORE_FINDER_FEATURE);\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  FindStoresState,\n  StateWithStoreFinder,\n  StoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\nimport { StateUtils } from '@spartacus/core';\n\nexport const getFindStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  StateUtils.LoaderState<FindStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.findStores\n);\n\nexport const getFindStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  FindStoresState\n> = createSelector(getFindStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getStoresLoading: MemoizedSelector<StateWithStoreFinder, boolean> =\n  createSelector(getFindStoresState, (state) =>\n    StateUtils.loaderLoadingSelector(state)\n  );\n\nexport const getStoresSuccess: MemoizedSelector<StateWithStoreFinder, boolean> =\n  createSelector(getFindStoresState, (state) =>\n    StateUtils.loaderSuccessSelector(state)\n  );\n","import { createSelector, MemoizedSelector } from '@ngrx/store';\nimport {\n  StateWithStoreFinder,\n  StoresState,\n  ViewAllStoresState,\n} from '../store-finder-state';\nimport { getStoreFinderState } from './feature.selector';\nimport { StateUtils } from '@spartacus/core';\n\nexport const getViewAllStoresState: MemoizedSelector<\n  StateWithStoreFinder,\n  StateUtils.LoaderState<ViewAllStoresState>\n> = createSelector(\n  getStoreFinderState,\n  (storesState: StoresState) => storesState.viewAllStores\n);\n\nexport const getViewAllStoresEntities: MemoizedSelector<\n  StateWithStoreFinder,\n  ViewAllStoresState\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderValueSelector(state)\n);\n\nexport const getViewAllStoresLoading: MemoizedSelector<\n  StateWithStoreFinder,\n  boolean\n> = createSelector(getViewAllStoresState, (state) =>\n  StateUtils.loaderLoadingSelector(state)\n);\n","import { isPlatformBrowser } from '@angular/common';\nimport { Inject, Injectable, OnDestroy, PLATFORM_ID } from '@angular/core';\nimport { Action, select, Store } from '@ngrx/store';\nimport {\n  GeoPoint,\n  GlobalMessageService,\n  GlobalMessageType,\n  PointOfService,\n  RoutingService,\n  SearchConfig,\n  WindowRef,\n} from '@spartacus/core';\nimport { Observable, Subscription } from 'rxjs';\nimport { filter, map, withLatestFrom } from 'rxjs/operators';\nimport { StoreEntities } from '../model';\nimport { StoreFinderActions } from '../store/actions/index';\nimport { StoreFinderSelectors } from '../store/selectors/index';\nimport { StateWithStoreFinder } from '../store/store-finder-state';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StoreFinderService implements OnDestroy {\n  private geolocationWatchId: number | null = null;\n  protected subscription = new Subscription();\n\n  constructor(\n    protected store: Store<StateWithStoreFinder>,\n    protected winRef: WindowRef,\n    protected globalMessageService: GlobalMessageService,\n    protected routingService: RoutingService,\n    @Inject(PLATFORM_ID) protected platformId: any\n  ) {\n    this.reloadStoreEntitiesOnContextChange();\n  }\n\n  /**\n   * Returns boolean observable for store's loading state\n   */\n  getStoresLoading(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresLoading));\n  }\n\n  /**\n   * Returns boolean observable for store's success state\n   */\n  getStoresLoaded(): Observable<boolean> {\n    return this.store.pipe(select(StoreFinderSelectors.getStoresSuccess));\n  }\n\n  /**\n   * Returns observable for store's entities\n   */\n  getFindStoresEntities(): Observable<StoreEntities> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getFindStoresEntities),\n      map((data) => data.findStoresEntities)\n    );\n  }\n\n  /**\n   * Returns observable for a single store by Id\n   */\n  getFindStoreEntityById(): Observable<StoreEntities> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getFindStoresEntities),\n      map((data) => data.findStoreEntityById)\n    );\n  }\n\n  /**\n   * Returns boolean observable for view all store's loading state\n   */\n  getViewAllStoresLoading(): Observable<boolean> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresLoading)\n    );\n  }\n\n  /**\n   * Returns observable for view all store's entities\n   */\n  getViewAllStoresEntities(): Observable<StoreEntities> {\n    return this.store.pipe(\n      select(StoreFinderSelectors.getViewAllStoresEntities),\n      map((data) => data.viewAllStoresEntities)\n    );\n  }\n\n  /**\n   * Store finding action functionality\n   * @param queryText text query\n   * @param searchConfig search configuration\n   * @param longitudeLatitude longitude and latitude coordinates\n   * @param countryIsoCode country ISO code\n   * @param useMyLocation current location coordinates\n   * @param radius radius of the scope from the center point\n   */\n  findStoresAction(\n    queryText: string,\n    searchConfig?: SearchConfig,\n    longitudeLatitude?: GeoPoint,\n    countryIsoCode?: string,\n    useMyLocation?: boolean,\n    radius?: number\n  ) {\n    if (useMyLocation && this.winRef.nativeWindow) {\n      this.clearWatchGeolocation(new StoreFinderActions.FindStoresOnHold());\n      this.geolocationWatchId =\n        this.winRef.nativeWindow.navigator.geolocation.watchPosition(\n          (pos: GeolocationPosition) => {\n            const position: GeoPoint = {\n              longitude: pos.coords.longitude,\n              latitude: pos.coords.latitude,\n            };\n\n            this.clearWatchGeolocation(\n              new StoreFinderActions.FindStores({\n                queryText: queryText,\n                searchConfig: searchConfig,\n                longitudeLatitude: position,\n                countryIsoCode: countryIsoCode,\n                radius: radius,\n              })\n            );\n          },\n          () => {\n            this.globalMessageService.add(\n              { key: 'storeFinder.geolocationNotEnabled' },\n              GlobalMessageType.MSG_TYPE_ERROR\n            );\n            this.routingService.go(['/store-finder']);\n          }\n        );\n    } else {\n      this.clearWatchGeolocation(\n        new StoreFinderActions.FindStores({\n          queryText: queryText,\n          searchConfig: searchConfig,\n          longitudeLatitude: longitudeLatitude,\n          countryIsoCode: countryIsoCode,\n          radius: radius,\n        })\n      );\n    }\n  }\n\n  /**\n   * View all stores\n   */\n  viewAllStores() {\n    this.clearWatchGeolocation(new StoreFinderActions.ViewAllStores());\n  }\n\n  /**\n   * View all stores by id\n   * @param storeId store id\n   */\n  viewStoreById(storeId: string) {\n    this.clearWatchGeolocation(\n      new StoreFinderActions.FindStoreById({ storeId })\n    );\n  }\n\n  private clearWatchGeolocation(callbackAction: Action) {\n    if (this.geolocationWatchId !== null) {\n      this.winRef.nativeWindow?.navigator.geolocation.clearWatch(\n        this.geolocationWatchId\n      );\n      this.geolocationWatchId = null;\n    }\n    this.store.dispatch(callbackAction);\n  }\n\n  private isEmpty(store: StoreEntities): boolean {\n    return (\n      !store || (typeof store === 'object' && Object.keys(store).length === 0)\n    );\n  }\n\n  /**\n   * Reload store data when store entities are empty because of the context change\n   */\n  protected reloadStoreEntitiesOnContextChange(): void {\n    if (isPlatformBrowser(this.platformId) || !this.platformId) {\n      this.subscription = this.getFindStoresEntities()\n        .pipe(\n          filter((data) => this.isEmpty(data)),\n          withLatestFrom(\n            this.getStoresLoading(),\n            this.getStoresLoaded(),\n            this.routingService.getParams()\n          )\n        )\n        .subscribe(([, loading, loaded, routeParams]) => {\n          if (!loading && !loaded) {\n            if (routeParams.country && !routeParams.store) {\n              this.callFindStoresAction(routeParams);\n            }\n            if (routeParams.store) {\n              this.viewStoreById(routeParams.store);\n            }\n          }\n        });\n    }\n  }\n\n  callFindStoresAction(routeParams: { [key: string]: string }): void {\n    this.findStoresAction(\n      '',\n      {\n        pageSize: -1,\n      },\n      undefined,\n      routeParams.country\n    );\n  }\n\n  ngOnDestroy() {\n    this.subscription?.unsubscribe();\n  }\n\n  /**\n   * Returns store latitude\n   * @param location store location\n   */\n  getStoreLatitude(location: PointOfService): number | undefined {\n    return location?.geoPoint?.latitude;\n  }\n\n  /**\n   * Returns store longitude\n   * @param location store location\n   */\n  getStoreLongitude(location: PointOfService): number | undefined {\n    return location?.geoPoint?.longitude;\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { Injectable } from '@angular/core';\nimport { ScriptLoader } from '@spartacus/core';\nimport { StoreFinderConfig } from '../config/store-finder-config';\nimport { StoreFinderService } from '../facade/store-finder.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GoogleMapRendererService {\n  private googleMap: google.maps.Map = null;\n  private markers: google.maps.Marker[];\n\n  constructor(\n    protected config: StoreFinderConfig,\n    protected storeFinderService: StoreFinderService,\n    protected scriptLoader: ScriptLoader\n  ) {}\n\n  /**\n   * Renders google map on the given element and draws markers on it.\n   * If map already exists it will use an existing map otherwise it will create one\n   * @param mapElement HTML element inside of which the map will be displayed\n   * @param locations array containign geo data to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  renderMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    if (Object.entries(locations[Object.keys(locations)[0]]).length > 0)\n      if (this.googleMap === null) {\n        this.scriptLoader.embedScript({\n          src: this.config.googleMaps.apiUrl,\n          params: { key: this.config.googleMaps.apiKey },\n          attributes: { type: 'text/javascript' },\n          callback: () => {\n            this.drawMap(mapElement, locations, selectMarkerHandler);\n          },\n        });\n      } else {\n        this.drawMap(mapElement, locations, selectMarkerHandler);\n      }\n  }\n\n  /**\n   * Centers the map to the given point\n   * @param latitute latitude of the new center\n   * @param longitude longitude of the new center\n   */\n  centerMap(latitute: number, longitude: number): void {\n    this.googleMap.panTo({ lat: latitute, lng: longitude });\n    this.googleMap.setZoom(this.config.googleMaps.selectedMarkerScale);\n  }\n\n  /**\n   * Defines and returns {@link google.maps.LatLng} representing a point where the map will be centered\n   * @param locations list of locations\n   */\n  private defineMapCenter(locations: any[]): google.maps.LatLng {\n    return new google.maps.LatLng(\n      this.storeFinderService.getStoreLatitude(locations[0]),\n      this.storeFinderService.getStoreLongitude(locations[0])\n    );\n  }\n\n  /**\n   * Creates google map inside if the given HTML element centered to the given point\n   * @param mapElement {@link HTMLElement} inside of which the map will be created\n   * @param mapCenter {@link google.maps.LatLng} the point where the map will be centered\n   */\n  private initMap(\n    mapElement: HTMLElement,\n    mapCenter: google.maps.LatLng\n  ): void {\n    type GestureHandlingOptions = 'cooperative' | 'greedy' | 'none' | 'auto';\n    const gestureOption: GestureHandlingOptions = 'greedy';\n\n    const mapProp = {\n      center: mapCenter,\n      zoom: this.config.googleMaps.scale,\n      mapTypeId: google.maps.MapTypeId.ROADMAP,\n      gestureHandling: gestureOption,\n    };\n    this.googleMap = new google.maps.Map(mapElement, mapProp);\n  }\n\n  /**\n   * Erases the current map's markers and create a new one based on the given locations\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private createMarkers(\n    locations: any[],\n    selectMarkerHandler?: Function\n  ): void {\n    this.markers = [];\n    locations.forEach((element, index) => {\n      const marker = new google.maps.Marker({\n        position: new google.maps.LatLng(\n          this.storeFinderService.getStoreLatitude(element),\n          this.storeFinderService.getStoreLongitude(element)\n        ),\n        label: index + 1 + '',\n      });\n      this.markers.push(marker);\n      marker.setMap(this.googleMap);\n      marker.addListener('mouseover', function () {\n        marker.setAnimation(google.maps.Animation.BOUNCE);\n      });\n      marker.addListener('mouseout', function () {\n        marker.setAnimation(null);\n      });\n      if (selectMarkerHandler) {\n        marker.addListener('click', function () {\n          selectMarkerHandler(index);\n        });\n      }\n    });\n  }\n\n  /**\n   * Initialize and draw the map\n   * @param mapElement {@link HTMLElement} inside of which the map will be drawn\n   * @param locations array of locations to be displayed on the map\n   * @param selectMarkerHandler function to handle whenever a marker on a map is clicked\n   */\n  private drawMap(\n    mapElement: HTMLElement,\n    locations: any[],\n    selectMarkerHandler: Function\n  ) {\n    this.initMap(mapElement, this.defineMapCenter(locations));\n    this.createMarkers(locations, selectMarkerHandler);\n  }\n}\n","import { StoreFinderConfig } from './store-finder-config';\n\nexport const defaultStoreFinderConfig: StoreFinderConfig = {\n  googleMaps: {\n    apiUrl: 'https://maps.googleapis.com/maps/api/js',\n    apiKey: '',\n    scale: 5,\n    selectedMarkerScale: 17,\n    radius: 50000,\n  },\n};\n","import { StoreFinderActions } from '../actions/index';\nimport { FindStoresState } from '../store-finder-state';\n\nexport const initialState: FindStoresState = {\n  findStoresEntities: {},\n  findStoreEntityById: {},\n};\n\nexport function findStoresReducer(\n  state = initialState,\n  action: StoreFinderActions.FindStoresAction\n): FindStoresState {\n  switch (action.type) {\n    case StoreFinderActions.FIND_STORES_SUCCESS: {\n      const findStoresEntities = action.payload;\n\n      return { ...state, findStoresEntities };\n    }\n    case StoreFinderActions.FIND_STORE_BY_ID_SUCCESS: {\n      const findStoreEntityById = action.payload;\n\n      return { ...state, findStoreEntityById };\n    }\n  }\n\n  return state;\n}\n","import { StoreFinderActions } from '../actions/index';\nimport { ViewAllStoresState } from '../store-finder-state';\n\nexport const initialState: ViewAllStoresState = {\n  viewAllStoresEntities: {},\n};\n\nexport function viewAllStoresReducer(\n  state = initialState,\n  action: StoreFinderActions.ViewAllStoresAction\n): ViewAllStoresState {\n  switch (action.type) {\n    case StoreFinderActions.VIEW_ALL_STORES_SUCCESS: {\n      const viewAllStoresEntities = action.payload;\n\n      return {\n        ...state,\n        viewAllStoresEntities,\n      };\n    }\n  }\n\n  return state;\n}\n","import {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  MetaReducer,\n} from '@ngrx/store';\n\nimport { InjectionToken, Provider } from '@angular/core';\nimport { StoresState, STORE_FINDER_DATA } from '../store-finder-state';\nimport { SiteContextActions, StateUtils } from '@spartacus/core';\nimport { StoreFinderActions } from '../actions';\nimport { findStoresReducer } from './find-stores.reducer';\nimport { viewAllStoresReducer } from './view-all-stores.reducer';\n\nexport function getReducers(): ActionReducerMap<StoresState> {\n  return {\n    findStores: StateUtils.loaderReducer(STORE_FINDER_DATA, findStoresReducer),\n    viewAllStores: StateUtils.loaderReducer(\n      STORE_FINDER_DATA,\n      viewAllStoresReducer\n    ),\n  };\n}\n\nexport const reducerToken: InjectionToken<ActionReducerMap<StoresState>> =\n  new InjectionToken<ActionReducerMap<StoresState>>('StoreFinderReducers');\n\nexport const reducerProvider: Provider = {\n  provide: reducerToken,\n  useFactory: getReducers,\n};\n\nexport function clearStoreFinderState(\n  reducer: ActionReducer<StoresState, Action>\n): ActionReducer<StoresState, Action> {\n  return function (state, action) {\n    if (action.type === SiteContextActions.LANGUAGE_CHANGE) {\n      state = undefined;\n    }\n    if (action.type === StoreFinderActions.CLEAR_STORE_FINDER_DATA) {\n      state = undefined;\n    }\n    return reducer(state, action);\n  };\n}\n\nexport const metaReducers: MetaReducer<any>[] = [clearStoreFinderState];\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\nimport { normalizeHttpError } from '@spartacus/core';\n\n@Injectable()\nexport class FindStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  findStores$: Observable<\n    StoreFinderActions.FindStoresSuccess | StoreFinderActions.FindStoresFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORES),\n    map((action: StoreFinderActions.FindStores) => action.payload),\n    mergeMap((payload) =>\n      this.storeFinderConnector\n        .search(\n          payload.queryText,\n          payload.searchConfig,\n          payload.longitudeLatitude,\n          payload.radius\n        )\n        .pipe(\n          map((data) => {\n            if (payload.countryIsoCode) {\n              data.stores = data.stores.filter(\n                (store) =>\n                  store.address.country.isocode === payload.countryIsoCode\n              );\n              data.stores.sort((a, b) =>\n                a.name < b.name ? -1 : a.name > b.name ? 1 : 0\n              );\n            }\n\n            return new StoreFinderActions.FindStoresSuccess(data);\n          }),\n          catchError((error) =>\n            of(new StoreFinderActions.FindStoresFail(normalizeHttpError(error)))\n          )\n        )\n    )\n  );\n\n  @Effect()\n  findStoreById$: Observable<\n    | StoreFinderActions.FindStoreByIdSuccess\n    | StoreFinderActions.FindStoreByIdFail\n  > = this.actions$.pipe(\n    ofType(StoreFinderActions.FIND_STORE_BY_ID),\n    map((action: StoreFinderActions.FindStoreById) => action.payload),\n    switchMap((payload) =>\n      this.storeFinderConnector.get(payload.storeId).pipe(\n        map((data) => new StoreFinderActions.FindStoreByIdSuccess(data)),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.FindStoreByIdFail(normalizeHttpError(error))\n          )\n        )\n      )\n    )\n  );\n}\n","import { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\nimport { StoreFinderConnector } from '../../connectors/store-finder.connector';\nimport { StoreFinderActions } from '../actions/index';\nimport { normalizeHttpError, SiteContextActions } from '@spartacus/core';\n\n@Injectable()\nexport class ViewAllStoresEffect {\n  constructor(\n    private actions$: Actions,\n    private storeFinderConnector: StoreFinderConnector\n  ) {}\n\n  @Effect()\n  viewAllStores$: Observable<\n    | StoreFinderActions.ViewAllStoresSuccess\n    | StoreFinderActions.ViewAllStoresFail\n  > = this.actions$.pipe(\n    ofType(\n      StoreFinderActions.VIEW_ALL_STORES,\n      StoreFinderActions.CLEAR_STORE_FINDER_DATA\n    ),\n    switchMap(() => {\n      return this.storeFinderConnector.getCounts().pipe(\n        map((data) => {\n          data.sort((a, b) => (a.name < b.name ? -1 : a.name > b.name ? 1 : 0));\n          return new StoreFinderActions.ViewAllStoresSuccess(data);\n        }),\n        catchError((error) =>\n          of(\n            new StoreFinderActions.ViewAllStoresFail(normalizeHttpError(error))\n          )\n        )\n      );\n    })\n  );\n\n  @Effect()\n  clearStoreFinderData$: Observable<StoreFinderActions.ClearStoreFinderData> = this.actions$.pipe(\n    ofType(\n      SiteContextActions.LANGUAGE_CHANGE,\n      SiteContextActions.CURRENCY_CHANGE\n    ),\n    map(() => {\n      return new StoreFinderActions.ClearStoreFinderData();\n    })\n  );\n}\n","import { FindStoresEffect } from './find-stores.effect';\nimport { ViewAllStoresEffect } from './view-all-stores.effect';\n\nexport const effects: any[] = [FindStoresEffect, ViewAllStoresEffect];\n\nexport * from './find-stores.effect';\nexport * from './view-all-stores.effect';\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { StoreModule } from '@ngrx/store';\nimport { EffectsModule } from '@ngrx/effects';\n\nimport { reducerProvider, reducerToken, metaReducers } from './reducers/index';\nimport { effects } from './effects/index';\nimport { STORE_FINDER_FEATURE } from './store-finder-state';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    StoreModule.forFeature(STORE_FINDER_FEATURE, reducerToken, {\n      metaReducers,\n    }),\n    EffectsModule.forFeature(effects),\n  ],\n  providers: [reducerProvider],\n})\nexport class StoreFinderStoreModule {}\n","import { NgModule } from '@angular/core';\nimport { provideDefaultConfig } from '@spartacus/core';\nimport { defaultStoreFinderConfig } from './config/default-store-finder-config';\nimport { StoreFinderStoreModule } from './store/store-finder-store.module';\nimport { StoreFinderConnector } from './connectors/store-finder.connector';\n\n@NgModule({\n  imports: [StoreFinderStoreModule],\n  providers: [\n    provideDefaultConfig(defaultStoreFinderConfig),\n    StoreFinderConnector,\n  ],\n})\nexport class StoreFinderCoreModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["StoreFinderSelectors.getStoresLoading","StoreFinderSelectors.getStoresSuccess","StoreFinderSelectors.getFindStoresEntities","StoreFinderSelectors.getViewAllStoresLoading","StoreFinderSelectors.getViewAllStoresEntities","StoreFinderActions.FindStoresOnHold","StoreFinderActions.FindStores","StoreFinderActions.ViewAllStores","StoreFinderActions.FindStoreById","initialState","StoreFinderActions.FIND_STORES_SUCCESS","StoreFinderActions.FIND_STORE_BY_ID_SUCCESS","StoreFinderActions.VIEW_ALL_STORES_SUCCESS","StoreFinderActions.CLEAR_STORE_FINDER_DATA","StoreFinderActions.FIND_STORES","StoreFinderActions.FindStoresSuccess","StoreFinderActions.FindStoresFail","StoreFinderActions.FIND_STORE_BY_ID","StoreFinderActions.FindStoreByIdSuccess","StoreFinderActions.FindStoreByIdFail","StoreFinderActions.VIEW_ALL_STORES","StoreFinderActions.ViewAllStoresSuccess","StoreFinderActions.ViewAllStoresFail","StoreFinderActions.ClearStoreFinderData"],"mappings":"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"}