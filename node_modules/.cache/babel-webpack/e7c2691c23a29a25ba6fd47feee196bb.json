{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { UserAccountChangedEvent, UserAccountFacade } from '@spartacus/user/account/root';\nimport * as i2 from '@spartacus/core';\nimport { LoginEvent, LogoutEvent } from '@spartacus/core';\nimport { switchMap } from 'rxjs/operators';\nconst USER_ACCOUNT_NORMALIZER = new InjectionToken('UserAccountNormalizer');\nconst USER_ACCOUNT_SERIALIZER = new InjectionToken('UserAccountSerializer');\nclass UserAccountAdapter {}\nclass UserAccountConnector {\n  constructor(adapter) {\n    this.adapter = adapter;\n  }\n  get(userId) {\n    return this.adapter.load(userId);\n  }\n}\nUserAccountConnector.ɵfac = function UserAccountConnector_Factory(t) {\n  return new (t || UserAccountConnector)(i0.ɵɵinject(UserAccountAdapter));\n};\nUserAccountConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserAccountConnector,\n  factory: UserAccountConnector.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserAccountConnector, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserAccountAdapter\n    }];\n  }, null);\n})();\nclass UserAccountService {\n  constructor(userAccountConnector, userIdService, query) {\n    this.userAccountConnector = userAccountConnector;\n    this.userIdService = userIdService;\n    this.query = query;\n    this.userQuery = this.query.create(() => this.userIdService.takeUserId(true).pipe(switchMap(userId => this.userAccountConnector.get(userId))), {\n      reloadOn: [UserAccountChangedEvent],\n      resetOn: [LoginEvent, LogoutEvent]\n    });\n  }\n  /**\n   * Returns the current user.\n   */\n  get() {\n    return this.userQuery.get();\n  }\n}\nUserAccountService.ɵfac = function UserAccountService_Factory(t) {\n  return new (t || UserAccountService)(i0.ɵɵinject(UserAccountConnector), i0.ɵɵinject(i2.UserIdService), i0.ɵɵinject(i2.QueryService));\n};\nUserAccountService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: UserAccountService,\n  factory: UserAccountService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserAccountService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: UserAccountConnector\n    }, {\n      type: i2.UserIdService\n    }, {\n      type: i2.QueryService\n    }];\n  }, null);\n})();\nconst facadeProviders = [UserAccountService, {\n  provide: UserAccountFacade,\n  useExisting: UserAccountService\n}];\nclass UserAccountCoreModule {}\nUserAccountCoreModule.ɵfac = function UserAccountCoreModule_Factory(t) {\n  return new (t || UserAccountCoreModule)();\n};\nUserAccountCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: UserAccountCoreModule\n});\nUserAccountCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [UserAccountConnector, ...facadeProviders]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(UserAccountCoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [UserAccountConnector, ...facadeProviders]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { USER_ACCOUNT_NORMALIZER, USER_ACCOUNT_SERIALIZER, UserAccountAdapter, UserAccountConnector, UserAccountCoreModule, UserAccountService };\n//# sourceMappingURL=spartacus-user-account-core.js.map","map":{"version":3,"names":["i0","InjectionToken","Injectable","NgModule","UserAccountChangedEvent","UserAccountFacade","i2","LoginEvent","LogoutEvent","switchMap","USER_ACCOUNT_NORMALIZER","USER_ACCOUNT_SERIALIZER","UserAccountAdapter","UserAccountConnector","constructor","adapter","get","userId","load","ɵfac","UserAccountConnector_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","UserAccountService","userAccountConnector","userIdService","query","userQuery","create","takeUserId","pipe","reloadOn","resetOn","UserAccountService_Factory","UserIdService","QueryService","facadeProviders","provide","useExisting","UserAccountCoreModule","UserAccountCoreModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","args"],"sources":["D:/demo_spartacus/node_modules/@spartacus/user/fesm2015/spartacus-user-account-core.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, NgModule } from '@angular/core';\nimport { UserAccountChangedEvent, UserAccountFacade } from '@spartacus/user/account/root';\nimport * as i2 from '@spartacus/core';\nimport { LoginEvent, LogoutEvent } from '@spartacus/core';\nimport { switchMap } from 'rxjs/operators';\n\nconst USER_ACCOUNT_NORMALIZER = new InjectionToken('UserAccountNormalizer');\nconst USER_ACCOUNT_SERIALIZER = new InjectionToken('UserAccountSerializer');\n\nclass UserAccountAdapter {\n}\n\nclass UserAccountConnector {\n    constructor(adapter) {\n        this.adapter = adapter;\n    }\n    get(userId) {\n        return this.adapter.load(userId);\n    }\n}\nUserAccountConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountConnector, deps: [{ token: UserAccountAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nUserAccountConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountConnector });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountConnector, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserAccountAdapter }]; } });\n\nclass UserAccountService {\n    constructor(userAccountConnector, userIdService, query) {\n        this.userAccountConnector = userAccountConnector;\n        this.userIdService = userIdService;\n        this.query = query;\n        this.userQuery = this.query.create(() => this.userIdService\n            .takeUserId(true)\n            .pipe(switchMap((userId) => this.userAccountConnector.get(userId))), {\n            reloadOn: [UserAccountChangedEvent],\n            resetOn: [LoginEvent, LogoutEvent],\n        });\n    }\n    /**\n     * Returns the current user.\n     */\n    get() {\n        return this.userQuery.get();\n    }\n}\nUserAccountService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountService, deps: [{ token: UserAccountConnector }, { token: i2.UserIdService }, { token: i2.QueryService }], target: i0.ɵɵFactoryTarget.Injectable });\nUserAccountService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: UserAccountConnector }, { type: i2.UserIdService }, { type: i2.QueryService }]; } });\n\nconst facadeProviders = [\n    UserAccountService,\n    {\n        provide: UserAccountFacade,\n        useExisting: UserAccountService,\n    },\n];\n\nclass UserAccountCoreModule {\n}\nUserAccountCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nUserAccountCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule });\nUserAccountCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule, providers: [UserAccountConnector, ...facadeProviders] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: UserAccountCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [UserAccountConnector, ...facadeProviders],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { USER_ACCOUNT_NORMALIZER, USER_ACCOUNT_SERIALIZER, UserAccountAdapter, UserAccountConnector, UserAccountCoreModule, UserAccountService };\n//# sourceMappingURL=spartacus-user-account-core.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}