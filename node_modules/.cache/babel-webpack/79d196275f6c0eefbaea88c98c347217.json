{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/core';\nimport { StateUtils, normalizeHttpError, StateModule, provideDefaultConfig, MODULE_INITIALIZER, OccConfig, Config } from '@spartacus/core';\nimport * as i1$2 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport { of, Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, catchError, filter } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport * as i3 from '@spartacus/asm/root';\nconst defaultAsmConfig = {\n  asm: {\n    agentSessionTimer: {\n      startingDelayInSeconds: 600\n    },\n    customerSearch: {\n      maxResults: 20\n    }\n  }\n};\nclass AsmAdapter {}\nclass AsmConnector {\n  constructor(asmAdapter) {\n    this.asmAdapter = asmAdapter;\n  }\n  customerSearch(options) {\n    return this.asmAdapter.customerSearch(options);\n  }\n}\nAsmConnector.ɵfac = function AsmConnector_Factory(t) {\n  return new (t || AsmConnector)(i0.ɵɵinject(AsmAdapter));\n};\nAsmConnector.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmConnector,\n  factory: AsmConnector.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmConnector, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: AsmAdapter\n    }];\n  }, null);\n})();\nconst ASM_UI_UPDATE = '[Asm] UI Update';\nclass AsmUiUpdate {\n  constructor(payload) {\n    this.payload = payload;\n    this.type = ASM_UI_UPDATE;\n  }\n}\nconst ASM_FEATURE = 'asm';\nconst CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\nconst CUSTOMER_SEARCH = '[Asm] Customer Search';\nconst CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nconst CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nconst CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\nclass CustomerSearch extends StateUtils.LoaderLoadAction {\n  constructor(payload) {\n    super(CUSTOMER_SEARCH_DATA);\n    this.payload = payload;\n    this.type = CUSTOMER_SEARCH;\n  }\n}\nclass CustomerSearchFail extends StateUtils.LoaderFailAction {\n  constructor(payload) {\n    super(CUSTOMER_SEARCH_DATA);\n    this.payload = payload;\n    this.type = CUSTOMER_SEARCH_FAIL;\n  }\n}\nclass CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n  constructor(payload) {\n    super(CUSTOMER_SEARCH_DATA);\n    this.payload = payload;\n    this.type = CUSTOMER_SEARCH_SUCCESS;\n  }\n}\nclass CustomerSearchReset extends StateUtils.LoaderResetAction {\n  constructor() {\n    super(CUSTOMER_SEARCH_DATA);\n    this.type = CUSTOMER_SEARCH_RESET;\n  }\n}\nconst LOGOUT_CUSTOMER_SUPPORT_AGENT = '[Auth] Logout Customer Support Agent';\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\nclass LogoutCustomerSupportAgent {\n  constructor() {\n    this.type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n  }\n}\nvar customerGroup_actions = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ASM_UI_UPDATE: ASM_UI_UPDATE,\n  AsmUiUpdate: AsmUiUpdate,\n  CUSTOMER_SEARCH: CUSTOMER_SEARCH,\n  CUSTOMER_SEARCH_FAIL: CUSTOMER_SEARCH_FAIL,\n  CUSTOMER_SEARCH_SUCCESS: CUSTOMER_SEARCH_SUCCESS,\n  CUSTOMER_SEARCH_RESET: CUSTOMER_SEARCH_RESET,\n  CustomerSearch: CustomerSearch,\n  CustomerSearchFail: CustomerSearchFail,\n  CustomerSearchSuccess: CustomerSearchSuccess,\n  CustomerSearchReset: CustomerSearchReset,\n  LOGOUT_CUSTOMER_SUPPORT_AGENT: LOGOUT_CUSTOMER_SUPPORT_AGENT,\n  LogoutCustomerSupportAgent: LogoutCustomerSupportAgent\n});\nclass CustomerEffects {\n  constructor(actions$, asmConnector) {\n    this.actions$ = actions$;\n    this.asmConnector = asmConnector;\n    this.customerSearch$ = this.actions$.pipe(ofType(CUSTOMER_SEARCH), map(action => action.payload), switchMap(options => this.asmConnector.customerSearch(options).pipe(map(customerSearchResults => {\n      return new CustomerSearchSuccess(customerSearchResults);\n    }), catchError(error => of(new CustomerSearchFail(normalizeHttpError(error)))))));\n  }\n}\nCustomerEffects.ɵfac = function CustomerEffects_Factory(t) {\n  return new (t || CustomerEffects)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(AsmConnector));\n};\nCustomerEffects.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: CustomerEffects,\n  factory: CustomerEffects.ɵfac\n});\n__decorate([Effect()], CustomerEffects.prototype, \"customerSearch$\", void 0);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CustomerEffects, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.Actions\n    }, {\n      type: AsmConnector\n    }];\n  }, {\n    customerSearch$: []\n  });\n})();\nconst effects = [CustomerEffects];\nconst initialState = {\n  collapsed: false\n};\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case ASM_UI_UPDATE:\n      {\n        return Object.assign(Object.assign({}, state), action.payload);\n      }\n    default:\n      {\n        return state;\n      }\n  }\n}\nfunction getReducers() {\n  return {\n    customerSearchResult: StateUtils.loaderReducer(CUSTOMER_SEARCH_DATA),\n    asmUi: reducer\n  };\n}\nconst reducerToken = new InjectionToken('AsmReducers');\nconst reducerProvider = {\n  provide: reducerToken,\n  useFactory: getReducers\n};\nfunction clearCustomerSupportAgentAsmState(reducer) {\n  return function (state, action) {\n    if (action.type === LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n      state = Object.assign(Object.assign({}, state), {\n        customerSearchResult: {}\n      });\n    }\n    return reducer(state, action);\n  };\n}\nconst metaReducers = [clearCustomerSupportAgentAsmState];\nconst getAsmState = createFeatureSelector(ASM_FEATURE);\nconst getAsmUi = createSelector(getAsmState, state => state.asmUi);\nconst getCustomerSearchResultsLoaderState = createSelector(getAsmState, state => state.customerSearchResult);\nconst getCustomerSearchResults = createSelector(getCustomerSearchResultsLoaderState, state => StateUtils.loaderValueSelector(state));\nconst getCustomerSearchResultsLoading = createSelector(getCustomerSearchResultsLoaderState, state => StateUtils.loaderLoadingSelector(state));\nvar asmGroup_selectors = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  getAsmUi: getAsmUi,\n  getCustomerSearchResultsLoaderState: getCustomerSearchResultsLoaderState,\n  getCustomerSearchResults: getCustomerSearchResults,\n  getCustomerSearchResultsLoading: getCustomerSearchResultsLoading,\n  getAsmState: getAsmState\n});\n\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\nclass AsmStatePersistenceService {\n  constructor(statePersistenceService, store, authStorageService) {\n    this.statePersistenceService = statePersistenceService;\n    this.store = store;\n    this.authStorageService = authStorageService;\n    this.subscription = new Subscription();\n    /**\n     * Identifier used for storage key.\n     */\n    this.key = 'asm';\n  }\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  initSync() {\n    this.subscription.add(this.statePersistenceService.syncWithStorage({\n      key: this.key,\n      state$: this.getAsmState(),\n      onRead: state => this.onRead(state)\n    }));\n  }\n  /**\n   * Gets and transforms state from different sources into the form that should\n   * be saved in storage.\n   */\n  getAsmState() {\n    return combineLatest([this.store.pipe(\n    // Since getAsmState() may be called while the module is lazy loded\n    // The asm state slice may not exist yet in the first store emissions.\n    filter(store => !!store.asm), select(getAsmUi)), of(this.authStorageService.getEmulatedUserToken()), this.authStorageService.getTokenTarget()]).pipe(map(([ui, emulatedUserToken, tokenTarget]) => {\n      let emulatedToken = emulatedUserToken;\n      if (emulatedToken) {\n        emulatedToken = Object.assign({}, emulatedUserToken);\n        // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n        delete emulatedToken.refresh_token;\n      }\n      return {\n        ui,\n        emulatedUserToken: emulatedToken,\n        tokenTarget\n      };\n    }));\n  }\n  /**\n   * Function called on each browser storage read.\n   * Used to update state from browser -> state.\n   */\n  onRead(state) {\n    if (state) {\n      if (state.ui) {\n        this.store.dispatch(new AsmUiUpdate(state.ui));\n      }\n      if (state.emulatedUserToken) {\n        this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n      }\n      if (state.tokenTarget) {\n        this.authStorageService.setTokenTarget(state.tokenTarget);\n      }\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nAsmStatePersistenceService.ɵfac = function AsmStatePersistenceService_Factory(t) {\n  return new (t || AsmStatePersistenceService)(i0.ɵɵinject(i1$1.StatePersistenceService), i0.ɵɵinject(i1$2.Store), i0.ɵɵinject(i3.AsmAuthStorageService));\n};\nAsmStatePersistenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmStatePersistenceService,\n  factory: AsmStatePersistenceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmStatePersistenceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.StatePersistenceService\n    }, {\n      type: i1$2.Store\n    }, {\n      type: i3.AsmAuthStorageService\n    }];\n  }, null);\n})();\nclass AsmStoreModule {}\nAsmStoreModule.ɵfac = function AsmStoreModule_Factory(t) {\n  return new (t || AsmStoreModule)();\n};\nAsmStoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmStoreModule\n});\nAsmStoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [reducerProvider],\n  imports: [[CommonModule, StateModule, StoreModule.forFeature(ASM_FEATURE, reducerToken, {\n    metaReducers\n  }), EffectsModule.forFeature(effects)]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmStoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, StateModule, StoreModule.forFeature(ASM_FEATURE, reducerToken, {\n        metaReducers\n      }), EffectsModule.forFeature(effects)],\n      providers: [reducerProvider]\n    }]\n  }], null, null);\n})();\nfunction asmStatePersistenceFactory(asmStatePersistenceService) {\n  const result = () => asmStatePersistenceService.initSync();\n  return result;\n}\nclass AsmCoreModule {}\nAsmCoreModule.ɵfac = function AsmCoreModule_Factory(t) {\n  return new (t || AsmCoreModule)();\n};\nAsmCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: AsmCoreModule\n});\nAsmCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [provideDefaultConfig(defaultAsmConfig), AsmConnector, {\n    provide: MODULE_INITIALIZER,\n    useFactory: asmStatePersistenceFactory,\n    deps: [AsmStatePersistenceService],\n    multi: true\n  }],\n  imports: [[CommonModule, AsmStoreModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmCoreModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, AsmStoreModule],\n      providers: [provideDefaultConfig(defaultAsmConfig), AsmConnector, {\n        provide: MODULE_INITIALIZER,\n        useFactory: asmStatePersistenceFactory,\n        deps: [AsmStatePersistenceService],\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\nclass AsmConfig extends OccConfig {}\nAsmConfig.ɵfac = /* @__PURE__ */function () {\n  let ɵAsmConfig_BaseFactory;\n  return function AsmConfig_Factory(t) {\n    return (ɵAsmConfig_BaseFactory || (ɵAsmConfig_BaseFactory = i0.ɵɵgetInheritedFactory(AsmConfig)))(t || AsmConfig);\n  };\n}();\nAsmConfig.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmConfig,\n  factory: function AsmConfig_Factory(t) {\n    let r = null;\n    if (t) {\n      r = new (t || AsmConfig)();\n    } else {\n      r = i0.ɵɵinject(Config);\n    }\n    return r;\n  },\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmConfig, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root',\n      useExisting: Config\n    }]\n  }], null, null);\n})();\nconst CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken('CustomerSearchPageNormalizer');\nclass AsmService {\n  constructor(store) {\n    this.store = store;\n  }\n  /**\n   * Search for customers\n   * @param options\n   */\n  customerSearch(options) {\n    this.store.dispatch(new CustomerSearch(options));\n  }\n  /**\n   * Reset the customer search result data to the initial state.\n   */\n  customerSearchReset() {\n    this.store.dispatch(new CustomerSearchReset());\n  }\n  /**\n   * Returns the customer search result data.\n   */\n  getCustomerSearchResults() {\n    return this.store.pipe(select(getCustomerSearchResults));\n  }\n  /**\n   * Returns the customer search result loading status.\n   */\n  getCustomerSearchResultsLoading() {\n    return this.store.pipe(select(getCustomerSearchResultsLoading));\n  }\n  /**\n   * Updates the state of the ASM UI\n   */\n  updateAsmUiState(asmUi) {\n    this.store.dispatch(new AsmUiUpdate(asmUi));\n  }\n  /**\n   * Get the state of the ASM UI\n   */\n  getAsmUiState() {\n    return this.store.pipe(select(getAsmUi));\n  }\n}\nAsmService.ɵfac = function AsmService_Factory(t) {\n  return new (t || AsmService)(i0.ɵɵinject(i1$2.Store));\n};\nAsmService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: AsmService,\n  factory: AsmService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AsmService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$2.Store\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_FEATURE, customerGroup_actions as AsmActions, AsmAdapter, AsmConfig, AsmConnector, AsmCoreModule, asmGroup_selectors as AsmSelectors, AsmService, AsmStatePersistenceService, CUSTOMER_SEARCH_DATA, CUSTOMER_SEARCH_PAGE_NORMALIZER, asmStatePersistenceFactory };\n//# sourceMappingURL=spartacus-asm-core.js.map","map":{"version":3,"names":["CommonModule","i0","Injectable","InjectionToken","NgModule","i1$1","StateUtils","normalizeHttpError","StateModule","provideDefaultConfig","MODULE_INITIALIZER","OccConfig","Config","i1$2","createFeatureSelector","createSelector","select","StoreModule","of","Subscription","combineLatest","map","switchMap","catchError","filter","__decorate","i1","ofType","Effect","EffectsModule","i3","defaultAsmConfig","asm","agentSessionTimer","startingDelayInSeconds","customerSearch","maxResults","AsmAdapter","AsmConnector","constructor","asmAdapter","options","ɵfac","AsmConnector_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","ASM_UI_UPDATE","AsmUiUpdate","payload","ASM_FEATURE","CUSTOMER_SEARCH_DATA","CUSTOMER_SEARCH","CUSTOMER_SEARCH_FAIL","CUSTOMER_SEARCH_SUCCESS","CUSTOMER_SEARCH_RESET","CustomerSearch","LoaderLoadAction","CustomerSearchFail","LoaderFailAction","CustomerSearchSuccess","LoaderSuccessAction","CustomerSearchReset","LoaderResetAction","LOGOUT_CUSTOMER_SUPPORT_AGENT","LogoutCustomerSupportAgent","customerGroup_actions","Object","freeze","__proto__","CustomerEffects","actions$","asmConnector","customerSearch$","pipe","action","customerSearchResults","error","CustomerEffects_Factory","Actions","prototype","effects","initialState","collapsed","reducer","state","assign","getReducers","customerSearchResult","loaderReducer","asmUi","reducerToken","reducerProvider","provide","useFactory","clearCustomerSupportAgentAsmState","metaReducers","getAsmState","getAsmUi","getCustomerSearchResultsLoaderState","getCustomerSearchResults","loaderValueSelector","getCustomerSearchResultsLoading","loaderLoadingSelector","asmGroup_selectors","AsmStatePersistenceService","statePersistenceService","store","authStorageService","subscription","key","initSync","add","syncWithStorage","state$","onRead","getEmulatedUserToken","getTokenTarget","ui","emulatedUserToken","tokenTarget","emulatedToken","refresh_token","dispatch","setEmulatedUserToken","setTokenTarget","ngOnDestroy","unsubscribe","AsmStatePersistenceService_Factory","StatePersistenceService","Store","AsmAuthStorageService","AsmStoreModule","AsmStoreModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","forFeature","asmStatePersistenceFactory","asmStatePersistenceService","result","AsmCoreModule","AsmCoreModule_Factory","deps","multi","AsmConfig","ɵAsmConfig_BaseFactory","AsmConfig_Factory","ɵɵgetInheritedFactory","r","useExisting","CUSTOMER_SEARCH_PAGE_NORMALIZER","AsmService","customerSearchReset","updateAsmUiState","getAsmUiState","AsmService_Factory","AsmActions","AsmSelectors"],"sources":["D:/demo_spartacus/node_modules/@spartacus/asm/fesm2015/spartacus-asm-core.js"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/core';\nimport { StateUtils, normalizeHttpError, StateModule, provideDefaultConfig, MODULE_INITIALIZER, OccConfig, Config } from '@spartacus/core';\nimport * as i1$2 from '@ngrx/store';\nimport { createFeatureSelector, createSelector, select, StoreModule } from '@ngrx/store';\nimport { of, Subscription, combineLatest } from 'rxjs';\nimport { map, switchMap, catchError, filter } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\nimport * as i1 from '@ngrx/effects';\nimport { ofType, Effect, EffectsModule } from '@ngrx/effects';\nimport * as i3 from '@spartacus/asm/root';\n\nconst defaultAsmConfig = {\n    asm: {\n        agentSessionTimer: {\n            startingDelayInSeconds: 600,\n        },\n        customerSearch: {\n            maxResults: 20,\n        },\n    },\n};\n\nclass AsmAdapter {\n}\n\nclass AsmConnector {\n    constructor(asmAdapter) {\n        this.asmAdapter = asmAdapter;\n    }\n    customerSearch(options) {\n        return this.asmAdapter.customerSearch(options);\n    }\n}\nAsmConnector.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConnector, deps: [{ token: AsmAdapter }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmConnector.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConnector, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConnector, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: AsmAdapter }]; } });\n\nconst ASM_UI_UPDATE = '[Asm] UI Update';\nclass AsmUiUpdate {\n    constructor(payload) {\n        this.payload = payload;\n        this.type = ASM_UI_UPDATE;\n    }\n}\n\nconst ASM_FEATURE = 'asm';\nconst CUSTOMER_SEARCH_DATA = '[asm] Customer search data';\n\nconst CUSTOMER_SEARCH = '[Asm] Customer Search';\nconst CUSTOMER_SEARCH_FAIL = '[Asm] Customer Search Fail';\nconst CUSTOMER_SEARCH_SUCCESS = '[Asm] Customer Search Success';\nconst CUSTOMER_SEARCH_RESET = '[Asm] Customer Search Reset';\nclass CustomerSearch extends StateUtils.LoaderLoadAction {\n    constructor(payload) {\n        super(CUSTOMER_SEARCH_DATA);\n        this.payload = payload;\n        this.type = CUSTOMER_SEARCH;\n    }\n}\nclass CustomerSearchFail extends StateUtils.LoaderFailAction {\n    constructor(payload) {\n        super(CUSTOMER_SEARCH_DATA);\n        this.payload = payload;\n        this.type = CUSTOMER_SEARCH_FAIL;\n    }\n}\nclass CustomerSearchSuccess extends StateUtils.LoaderSuccessAction {\n    constructor(payload) {\n        super(CUSTOMER_SEARCH_DATA);\n        this.payload = payload;\n        this.type = CUSTOMER_SEARCH_SUCCESS;\n    }\n}\nclass CustomerSearchReset extends StateUtils.LoaderResetAction {\n    constructor() {\n        super(CUSTOMER_SEARCH_DATA);\n        this.type = CUSTOMER_SEARCH_RESET;\n    }\n}\n\nconst LOGOUT_CUSTOMER_SUPPORT_AGENT = '[Auth] Logout Customer Support Agent';\n/**\n * Action dispatched after customer support agent logout. Used to clear store data (ui, search results)\n */\nclass LogoutCustomerSupportAgent {\n    constructor() {\n        this.type = LOGOUT_CUSTOMER_SUPPORT_AGENT;\n    }\n}\n\nvar customerGroup_actions = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    ASM_UI_UPDATE: ASM_UI_UPDATE,\n    AsmUiUpdate: AsmUiUpdate,\n    CUSTOMER_SEARCH: CUSTOMER_SEARCH,\n    CUSTOMER_SEARCH_FAIL: CUSTOMER_SEARCH_FAIL,\n    CUSTOMER_SEARCH_SUCCESS: CUSTOMER_SEARCH_SUCCESS,\n    CUSTOMER_SEARCH_RESET: CUSTOMER_SEARCH_RESET,\n    CustomerSearch: CustomerSearch,\n    CustomerSearchFail: CustomerSearchFail,\n    CustomerSearchSuccess: CustomerSearchSuccess,\n    CustomerSearchReset: CustomerSearchReset,\n    LOGOUT_CUSTOMER_SUPPORT_AGENT: LOGOUT_CUSTOMER_SUPPORT_AGENT,\n    LogoutCustomerSupportAgent: LogoutCustomerSupportAgent\n});\n\nclass CustomerEffects {\n    constructor(actions$, asmConnector) {\n        this.actions$ = actions$;\n        this.asmConnector = asmConnector;\n        this.customerSearch$ = this.actions$.pipe(ofType(CUSTOMER_SEARCH), map((action) => action.payload), switchMap((options) => this.asmConnector.customerSearch(options).pipe(map((customerSearchResults) => {\n            return new CustomerSearchSuccess(customerSearchResults);\n        }), catchError((error) => of(new CustomerSearchFail(normalizeHttpError(error)))))));\n    }\n}\nCustomerEffects.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CustomerEffects, deps: [{ token: i1.Actions }, { token: AsmConnector }], target: i0.ɵɵFactoryTarget.Injectable });\nCustomerEffects.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CustomerEffects });\n__decorate([\n    Effect()\n], CustomerEffects.prototype, \"customerSearch$\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: CustomerEffects, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.Actions }, { type: AsmConnector }]; }, propDecorators: { customerSearch$: [] } });\n\nconst effects = [CustomerEffects];\n\nconst initialState = { collapsed: false };\nfunction reducer(state = initialState, action) {\n    switch (action.type) {\n        case ASM_UI_UPDATE: {\n            return Object.assign(Object.assign({}, state), action.payload);\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nfunction getReducers() {\n    return {\n        customerSearchResult: StateUtils.loaderReducer(CUSTOMER_SEARCH_DATA),\n        asmUi: reducer,\n    };\n}\nconst reducerToken = new InjectionToken('AsmReducers');\nconst reducerProvider = {\n    provide: reducerToken,\n    useFactory: getReducers,\n};\nfunction clearCustomerSupportAgentAsmState(reducer) {\n    return function (state, action) {\n        if (action.type === LOGOUT_CUSTOMER_SUPPORT_AGENT) {\n            state = Object.assign(Object.assign({}, state), { customerSearchResult: {} });\n        }\n        return reducer(state, action);\n    };\n}\nconst metaReducers = [\n    clearCustomerSupportAgentAsmState,\n];\n\nconst getAsmState = createFeatureSelector(ASM_FEATURE);\n\nconst getAsmUi = createSelector(getAsmState, (state) => state.asmUi);\n\nconst getCustomerSearchResultsLoaderState = createSelector(getAsmState, (state) => state.customerSearchResult);\nconst getCustomerSearchResults = createSelector(getCustomerSearchResultsLoaderState, (state) => StateUtils.loaderValueSelector(state));\nconst getCustomerSearchResultsLoading = createSelector(getCustomerSearchResultsLoaderState, (state) => StateUtils.loaderLoadingSelector(state));\n\nvar asmGroup_selectors = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getAsmUi: getAsmUi,\n    getCustomerSearchResultsLoaderState: getCustomerSearchResultsLoaderState,\n    getCustomerSearchResults: getCustomerSearchResults,\n    getCustomerSearchResultsLoading: getCustomerSearchResultsLoading,\n    getAsmState: getAsmState\n});\n\n/**\n * Responsible for storing ASM state in the browser storage.\n * Uses `StatePersistenceService` mechanism.\n */\nclass AsmStatePersistenceService {\n    constructor(statePersistenceService, store, authStorageService) {\n        this.statePersistenceService = statePersistenceService;\n        this.store = store;\n        this.authStorageService = authStorageService;\n        this.subscription = new Subscription();\n        /**\n         * Identifier used for storage key.\n         */\n        this.key = 'asm';\n    }\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync() {\n        this.subscription.add(this.statePersistenceService.syncWithStorage({\n            key: this.key,\n            state$: this.getAsmState(),\n            onRead: (state) => this.onRead(state),\n        }));\n    }\n    /**\n     * Gets and transforms state from different sources into the form that should\n     * be saved in storage.\n     */\n    getAsmState() {\n        return combineLatest([\n            this.store.pipe(\n            // Since getAsmState() may be called while the module is lazy loded\n            // The asm state slice may not exist yet in the first store emissions.\n            filter((store) => !!store.asm), select(getAsmUi)),\n            of(this.authStorageService.getEmulatedUserToken()),\n            this.authStorageService.getTokenTarget(),\n        ]).pipe(map(([ui, emulatedUserToken, tokenTarget]) => {\n            let emulatedToken = emulatedUserToken;\n            if (emulatedToken) {\n                emulatedToken = Object.assign({}, emulatedUserToken);\n                // To minimize risk of user account hijacking we don't persist emulated user refresh_token\n                delete emulatedToken.refresh_token;\n            }\n            return {\n                ui,\n                emulatedUserToken: emulatedToken,\n                tokenTarget,\n            };\n        }));\n    }\n    /**\n     * Function called on each browser storage read.\n     * Used to update state from browser -> state.\n     */\n    onRead(state) {\n        if (state) {\n            if (state.ui) {\n                this.store.dispatch(new AsmUiUpdate(state.ui));\n            }\n            if (state.emulatedUserToken) {\n                this.authStorageService.setEmulatedUserToken(state.emulatedUserToken);\n            }\n            if (state.tokenTarget) {\n                this.authStorageService.setTokenTarget(state.tokenTarget);\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nAsmStatePersistenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStatePersistenceService, deps: [{ token: i1$1.StatePersistenceService }, { token: i1$2.Store }, { token: i3.AsmAuthStorageService }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmStatePersistenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStatePersistenceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStatePersistenceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.StatePersistenceService }, { type: i1$2.Store }, { type: i3.AsmAuthStorageService }]; } });\n\nclass AsmStoreModule {\n}\nAsmStoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmStoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, imports: [CommonModule,\n        StateModule, i1$2.StoreFeatureModule, i1.EffectsFeatureModule] });\nAsmStoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, providers: [reducerProvider], imports: [[\n            CommonModule,\n            StateModule,\n            StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n            EffectsModule.forFeature(effects),\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmStoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        StateModule,\n                        StoreModule.forFeature(ASM_FEATURE, reducerToken, { metaReducers }),\n                        EffectsModule.forFeature(effects),\n                    ],\n                    providers: [reducerProvider],\n                }]\n        }] });\n\nfunction asmStatePersistenceFactory(asmStatePersistenceService) {\n    const result = () => asmStatePersistenceService.initSync();\n    return result;\n}\nclass AsmCoreModule {\n}\nAsmCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nAsmCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, imports: [CommonModule, AsmStoreModule] });\nAsmCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, providers: [\n        provideDefaultConfig(defaultAsmConfig),\n        AsmConnector,\n        {\n            provide: MODULE_INITIALIZER,\n            useFactory: asmStatePersistenceFactory,\n            deps: [AsmStatePersistenceService],\n            multi: true,\n        },\n    ], imports: [[CommonModule, AsmStoreModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, AsmStoreModule],\n                    providers: [\n                        provideDefaultConfig(defaultAsmConfig),\n                        AsmConnector,\n                        {\n                            provide: MODULE_INITIALIZER,\n                            useFactory: asmStatePersistenceFactory,\n                            deps: [AsmStatePersistenceService],\n                            multi: true,\n                        },\n                    ],\n                }]\n        }] });\n\nclass AsmConfig extends OccConfig {\n}\nAsmConfig.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConfig, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\nAsmConfig.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConfig, providedIn: 'root', useExisting: Config });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmConfig, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                    useExisting: Config,\n                }]\n        }] });\n\nconst CUSTOMER_SEARCH_PAGE_NORMALIZER = new InjectionToken('CustomerSearchPageNormalizer');\n\nclass AsmService {\n    constructor(store) {\n        this.store = store;\n    }\n    /**\n     * Search for customers\n     * @param options\n     */\n    customerSearch(options) {\n        this.store.dispatch(new CustomerSearch(options));\n    }\n    /**\n     * Reset the customer search result data to the initial state.\n     */\n    customerSearchReset() {\n        this.store.dispatch(new CustomerSearchReset());\n    }\n    /**\n     * Returns the customer search result data.\n     */\n    getCustomerSearchResults() {\n        return this.store.pipe(select(getCustomerSearchResults));\n    }\n    /**\n     * Returns the customer search result loading status.\n     */\n    getCustomerSearchResultsLoading() {\n        return this.store.pipe(select(getCustomerSearchResultsLoading));\n    }\n    /**\n     * Updates the state of the ASM UI\n     */\n    updateAsmUiState(asmUi) {\n        this.store.dispatch(new AsmUiUpdate(asmUi));\n    }\n    /**\n     * Get the state of the ASM UI\n     */\n    getAsmUiState() {\n        return this.store.pipe(select(getAsmUi));\n    }\n}\nAsmService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmService, deps: [{ token: i1$2.Store }], target: i0.ɵɵFactoryTarget.Injectable });\nAsmService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: AsmService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$2.Store }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ASM_FEATURE, customerGroup_actions as AsmActions, AsmAdapter, AsmConfig, AsmConnector, AsmCoreModule, asmGroup_selectors as AsmSelectors, AsmService, AsmStatePersistenceService, CUSTOMER_SEARCH_DATA, CUSTOMER_SEARCH_PAGE_NORMALIZER, asmStatePersistenceFactory };\n//# sourceMappingURL=spartacus-asm-core.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}