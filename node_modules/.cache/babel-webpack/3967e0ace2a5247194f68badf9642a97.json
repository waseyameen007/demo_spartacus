{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/cart/quick-order/root';\nimport { defaultQuickOrderConfig, QuickOrderFacade } from '@spartacus/cart/quick-order/root';\nimport * as i1 from '@spartacus/core';\nimport { CartAddEntrySuccessEvent, CartAddEntryFailEvent, HttpErrorModel, BASE_SITE_CONTEXT_ID, StorageSyncType } from '@spartacus/core';\nimport { Subject, BehaviorSubject, of, timer, Subscription } from 'rxjs';\nimport { map, take, first, switchMap, filter, tap } from 'rxjs/operators';\nclass QuickOrderService {\n  constructor(activeCartService, productAdapter,\n  // TODO(#14059): Remove this service\n  eventService, productSearchConnector //TODO(#14059): Make it required\n  ) {\n    this.activeCartService = activeCartService;\n    this.productAdapter = productAdapter;\n    this.eventService = eventService;\n    this.productSearchConnector = productSearchConnector;\n    this.productAdded$ = new Subject();\n    this.entries$ = new BehaviorSubject([]);\n    this.softDeletedEntries$ = new BehaviorSubject({});\n    this.nonPurchasableProductError$ = new BehaviorSubject(null);\n    this.hardDeleteTimeout = 5000;\n    this.quickOrderListLimit = 0;\n    this.clearDeleteTimeouts = {};\n  }\n  ngOnDestroy() {\n    this.clearDeletedEntries();\n  }\n  /**\n   * Get entries\n   */\n  getEntries() {\n    return this.entries$;\n  }\n  /**\n   * @deprecated since 4.2 - use searchProducts instead\n   * Search product using SKU\n   */\n  search(productCode) {\n    return this.productAdapter.load(productCode);\n  }\n  /**\n   * Search products using query\n   */\n  searchProducts(query, maxProducts) {\n    var _a, _b;\n    // TODO(#14059): Remove condition\n    if (this.productSearchConnector) {\n      const searchConfig = {\n        pageSize: maxProducts || ((_b = (_a = defaultQuickOrderConfig.quickOrder) === null || _a === void 0 ? void 0 : _a.searchForm) === null || _b === void 0 ? void 0 : _b.maxProducts)\n      };\n      return this.productSearchConnector.search(query, searchConfig).pipe(map(searchPage => searchPage.products || []));\n    } else {\n      return of([]);\n    }\n  }\n  /**\n   * Clear a list of added entries\n   */\n  clearList() {\n    this.entries$.next([]);\n  }\n  /**\n   * Get information about the possibility to add the next product\n   */\n  canAdd(code) {\n    if (code) {\n      return of(this.isProductOnTheList(code) || !this.isLimitExceeded());\n    } else {\n      return of(!this.isLimitExceeded());\n    }\n  }\n  /**\n   * Set quick order list limit property\n   */\n  setListLimit(limit) {\n    this.quickOrderListLimit = limit;\n  }\n  /**\n   * Load a list of entries\n   */\n  loadEntries(entries = []) {\n    this.entries$.next(entries);\n  }\n  /**\n   * Load a list of entries\n   */\n  updateEntryQuantity(entryIndex, quantity) {\n    const entries = this.entries$.getValue() || [];\n    entries[entryIndex].quantity = quantity;\n    this.entries$.next(entries);\n  }\n  /**\n   * Delete single entry from the list\n   */\n  softDeleteEntry(index) {\n    this.entries$.pipe(take(1)).subscribe(entries => {\n      const entriesList = entries;\n      this.addSoftEntryDeletion(entriesList[index], true);\n      entriesList.splice(index, 1);\n      this.entries$.next(entriesList);\n    });\n  }\n  /**\n   * @deprecated since 4.2 - use softDeleteEntry instead\n   */\n  removeEntry(index) {\n    this.softDeleteEntry(index);\n  }\n  /**\n   * Add product to the quick order list\n   */\n  addProduct(product, quantity = 1) {\n    const entry = this.generateOrderEntry(product, quantity);\n    this.addEntry(entry);\n  }\n  /**\n   * Return product added subject\n   */\n  getProductAdded() {\n    return this.productAdded$;\n  }\n  /**\n   * Set product added subject\n   */\n  setProductAdded(productCode) {\n    this.productAdded$.next(productCode);\n  }\n  /**\n   * Adding to cart all products from the list\n   */\n  addToCart() {\n    let entries = [];\n    const events = [];\n    const subscription = this.eventService.get(CartAddEntrySuccessEvent).subscribe(cartEvent => {\n      if (cartEvent.quantityAdded === 0 || !!cartEvent.quantityAdded && cartEvent.quantityAdded < cartEvent.quantity) {\n        events.push(this.createQuickOrderResultEvent(cartEvent));\n      }\n    });\n    subscription.add(this.eventService.get(CartAddEntryFailEvent).subscribe(cartEvent => {\n      events.push(this.createQuickOrderResultEvent(cartEvent));\n    }));\n    return this.getEntries().pipe(first(), switchMap(elements => {\n      entries = elements;\n      this.activeCartService.addEntries(elements);\n      this.clearList();\n      return this.activeCartService.isStable();\n    }), filter(isStable => isStable), map(() => [entries, events]), tap(() => subscription.unsubscribe()));\n  }\n  /**\n   * Return soft deleted entries\n   */\n  getSoftDeletedEntries() {\n    return this.softDeletedEntries$;\n  }\n  /**\n   * Restore soft deleted entry\n   */\n  restoreSoftDeletedEntry(productCode) {\n    const entry = this.getSoftDeletedEntry(productCode);\n    this.addEntry(entry);\n    this.hardDeleteEntry(productCode);\n  }\n  /**\n   * Clear deleted entry from the list\n   */\n  hardDeleteEntry(productCode) {\n    const entry = this.getSoftDeletedEntry(productCode);\n    const deletedEntries = this.softDeletedEntries$.getValue();\n    if (entry) {\n      delete deletedEntries[productCode];\n      this.softDeletedEntries$.next(deletedEntries);\n    }\n    this.clearDeleteTimeout(productCode);\n  }\n  /**\n   * Clear all deleted entries and timeout subscriptions\n   */\n  clearDeletedEntries() {\n    Object.values(this.clearDeleteTimeouts).forEach(subscription => subscription.unsubscribe());\n    this.softDeletedEntries$.next({});\n    this.clearDeleteTimeouts = {};\n  }\n  /**\n   *  Return non purchasable product error\n   */\n  getNonPurchasableProductError() {\n    return this.nonPurchasableProductError$;\n  }\n  /**\n   * Set error that selected product is not purchasable\n   */\n  setNonPurchasableProductError(product) {\n    this.nonPurchasableProductError$.next(product);\n  }\n  /**\n   * Clear not purchasable product error\n   */\n  clearNonPurchasableProductError() {\n    this.nonPurchasableProductError$.next(null);\n  }\n  /**\n   * Add soft deleted entry to the cached list\n   */\n  addSoftEntryDeletion(entry, clearTimeout = true) {\n    var _a;\n    const deletedEntries = this.softDeletedEntries$.getValue();\n    const productCode = (_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code;\n    if (productCode) {\n      deletedEntries[productCode] = entry;\n      this.softDeletedEntries$.next(deletedEntries);\n      if (clearTimeout) {\n        const subscription = timer(this.hardDeleteTimeout).subscribe(() => {\n          this.hardDeleteEntry(productCode);\n        });\n        this.clearDeleteTimeouts[productCode] = subscription;\n      }\n    }\n  }\n  /**\n   * Get soft deletion entry\n   */\n  getSoftDeletedEntry(productCode) {\n    const deletedEntries = this.softDeletedEntries$.getValue();\n    return deletedEntries[productCode];\n  }\n  /**\n   * Generate Order Entry from Product\n   */\n  generateOrderEntry(product, quantity) {\n    return {\n      basePrice: product.price,\n      product,\n      quantity,\n      totalPrice: product.price\n    };\n  }\n  /**\n   * Add single entry to the list\n   */\n  addEntry(entry) {\n    var _a, _b, _c, _d, _e;\n    if (((_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code) && !this.isProductOnTheList(entry.product.code) && this.isLimitExceeded()) {\n      return;\n    }\n    const entries = this.entries$.getValue() || [];\n    const entryStockLevel = (_c = (_b = entry.product) === null || _b === void 0 ? void 0 : _b.stock) === null || _c === void 0 ? void 0 : _c.stockLevel;\n    if (entryStockLevel && entry.quantity && entry.quantity > entryStockLevel) {\n      entry.quantity = entryStockLevel;\n    }\n    if (((_d = entry.product) === null || _d === void 0 ? void 0 : _d.code) && this.isProductOnTheList(entry.product.code)) {\n      const entryIndex = entries.findIndex(item => {\n        var _a, _b;\n        return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === ((_b = entry.product) === null || _b === void 0 ? void 0 : _b.code);\n      });\n      let quantity = entries[entryIndex].quantity;\n      if (quantity && entry.quantity) {\n        entries[entryIndex].quantity = quantity + (entry === null || entry === void 0 ? void 0 : entry.quantity);\n        let newQuantity = entries[entryIndex].quantity;\n        if (newQuantity && entryStockLevel && newQuantity > entryStockLevel) {\n          entries[entryIndex].quantity = entryStockLevel;\n        }\n        this.entries$.next([...entries]);\n      }\n    } else {\n      this.entries$.next([...entries, ...[entry]]);\n    }\n    this.productAdded$.next((_e = entry.product) === null || _e === void 0 ? void 0 : _e.code);\n  }\n  /**\n   * Verify if product is already on the list\n   */\n  isProductOnTheList(productCode) {\n    const entries = this.entries$.getValue() || [];\n    return !!entries.find(item => {\n      var _a;\n      return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === productCode;\n    });\n  }\n  isLimitExceeded() {\n    const entries = this.entries$.getValue() || [];\n    return entries.length >= this.quickOrderListLimit;\n  }\n  createQuickOrderResultEvent(cartEvent) {\n    var _a, _b, _c;\n    const evt = {\n      productCode: cartEvent.productCode,\n      quantity: cartEvent.quantity\n    };\n    if ('entry' in cartEvent) {\n      evt.entry = cartEvent.entry;\n    }\n    if ('quantityAdded' in cartEvent) {\n      evt.quantityAdded = cartEvent.quantityAdded;\n    }\n    if ('error' in cartEvent && cartEvent.error instanceof HttpErrorModel) {\n      evt.error = cartEvent.error;\n    }\n    if ((_b = (_a = evt.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.length) {\n      const isOutOfStock = (_c = evt.error) === null || _c === void 0 ? void 0 : _c.details.some(e => e.type === 'InsufficientStockError');\n      evt.quantityAdded = isOutOfStock ? 0 : evt.quantity;\n    }\n    return evt;\n  }\n  clearDeleteTimeout(productCode) {\n    const clearMessageTimout = this.clearDeleteTimeouts[productCode];\n    if (clearMessageTimout) {\n      clearMessageTimout.unsubscribe();\n      delete this.clearDeleteTimeouts[productCode];\n    }\n  }\n}\nQuickOrderService.ɵfac = function QuickOrderService_Factory(t) {\n  return new (t || QuickOrderService)(i0.ɵɵinject(i1.ActiveCartService), i0.ɵɵinject(i1.ProductAdapter), i0.ɵɵinject(i1.EventService), i0.ɵɵinject(i1.ProductSearchConnector));\n};\nQuickOrderService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QuickOrderService,\n  factory: QuickOrderService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuickOrderService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: i1.ActiveCartService\n    }, {\n      type: i1.ProductAdapter\n    }, {\n      type: i1.EventService\n    }, {\n      type: i1.ProductSearchConnector\n    }];\n  }, null);\n})();\nconst facadeProviders = [QuickOrderService, {\n  provide: QuickOrderFacade,\n  useExisting: QuickOrderService\n}];\nclass QuickOrderStatePersistenceService {\n  constructor(quickOrderService, siteContextParamsService, statePersistenceService) {\n    this.quickOrderService = quickOrderService;\n    this.siteContextParamsService = siteContextParamsService;\n    this.statePersistenceService = statePersistenceService;\n    this.subscription = new Subscription();\n    /**\n     * Identifier used for storage key.\n     */\n    this.key = 'quick-order';\n  }\n  /**\n   * Initializes the synchronization between state and browser storage.\n   */\n  initSync() {\n    this.subscription.add(this.statePersistenceService.syncWithStorage({\n      key: this.key,\n      state$: this.quickOrderService.getEntries(),\n      context$: this.siteContextParamsService.getValues([BASE_SITE_CONTEXT_ID]),\n      storageType: StorageSyncType.SESSION_STORAGE,\n      onRead: state => this.onRead(state)\n    }));\n  }\n  onRead(state) {\n    if (state) {\n      this.quickOrderService.loadEntries(state);\n    }\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n}\nQuickOrderStatePersistenceService.ɵfac = function QuickOrderStatePersistenceService_Factory(t) {\n  return new (t || QuickOrderStatePersistenceService)(i0.ɵɵinject(i1$1.QuickOrderFacade), i0.ɵɵinject(i1.SiteContextParamsService), i0.ɵɵinject(i1.StatePersistenceService));\n};\nQuickOrderStatePersistenceService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: QuickOrderStatePersistenceService,\n  factory: QuickOrderStatePersistenceService.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuickOrderStatePersistenceService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: i1$1.QuickOrderFacade\n    }, {\n      type: i1.SiteContextParamsService\n    }, {\n      type: i1.StatePersistenceService\n    }];\n  }, null);\n})();\nclass QuickOrderCoreModule {\n  static forRoot() {\n    return {\n      ngModule: QuickOrderCoreModule\n    };\n  }\n}\nQuickOrderCoreModule.ɵfac = function QuickOrderCoreModule_Factory(t) {\n  return new (t || QuickOrderCoreModule)();\n};\nQuickOrderCoreModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: QuickOrderCoreModule\n});\nQuickOrderCoreModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [...facadeProviders, QuickOrderStatePersistenceService]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(QuickOrderCoreModule, [{\n    type: NgModule,\n    args: [{\n      providers: [...facadeProviders, QuickOrderStatePersistenceService]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuickOrderCoreModule, QuickOrderService, QuickOrderStatePersistenceService };\n//# sourceMappingURL=spartacus-cart-quick-order-core.js.map","map":{"version":3,"names":["i0","Injectable","NgModule","i1$1","defaultQuickOrderConfig","QuickOrderFacade","i1","CartAddEntrySuccessEvent","CartAddEntryFailEvent","HttpErrorModel","BASE_SITE_CONTEXT_ID","StorageSyncType","Subject","BehaviorSubject","of","timer","Subscription","map","take","first","switchMap","filter","tap","QuickOrderService","constructor","activeCartService","productAdapter","eventService","productSearchConnector","productAdded$","entries$","softDeletedEntries$","nonPurchasableProductError$","hardDeleteTimeout","quickOrderListLimit","clearDeleteTimeouts","ngOnDestroy","clearDeletedEntries","getEntries","search","productCode","load","searchProducts","query","maxProducts","_a","_b","searchConfig","pageSize","quickOrder","searchForm","pipe","searchPage","products","clearList","next","canAdd","code","isProductOnTheList","isLimitExceeded","setListLimit","limit","loadEntries","entries","updateEntryQuantity","entryIndex","quantity","getValue","softDeleteEntry","index","subscribe","entriesList","addSoftEntryDeletion","splice","removeEntry","addProduct","product","entry","generateOrderEntry","addEntry","getProductAdded","setProductAdded","addToCart","events","subscription","get","cartEvent","quantityAdded","push","createQuickOrderResultEvent","add","elements","addEntries","isStable","unsubscribe","getSoftDeletedEntries","restoreSoftDeletedEntry","getSoftDeletedEntry","hardDeleteEntry","deletedEntries","clearDeleteTimeout","Object","values","forEach","getNonPurchasableProductError","setNonPurchasableProductError","clearNonPurchasableProductError","clearTimeout","basePrice","price","totalPrice","_c","_d","_e","entryStockLevel","stock","stockLevel","findIndex","item","newQuantity","find","length","evt","error","details","isOutOfStock","some","e","type","clearMessageTimout","ɵfac","QuickOrderService_Factory","t","ɵɵinject","ActiveCartService","ProductAdapter","EventService","ProductSearchConnector","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","facadeProviders","provide","useExisting","QuickOrderStatePersistenceService","quickOrderService","siteContextParamsService","statePersistenceService","key","initSync","syncWithStorage","state$","context$","getValues","storageType","SESSION_STORAGE","onRead","state","QuickOrderStatePersistenceService_Factory","SiteContextParamsService","StatePersistenceService","providedIn","args","QuickOrderCoreModule","forRoot","ngModule","QuickOrderCoreModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers"],"sources":["D:/demo_spartacus/node_modules/@spartacus/cart/fesm2015/spartacus-cart-quick-order-core.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport * as i1$1 from '@spartacus/cart/quick-order/root';\nimport { defaultQuickOrderConfig, QuickOrderFacade } from '@spartacus/cart/quick-order/root';\nimport * as i1 from '@spartacus/core';\nimport { CartAddEntrySuccessEvent, CartAddEntryFailEvent, HttpErrorModel, BASE_SITE_CONTEXT_ID, StorageSyncType } from '@spartacus/core';\nimport { Subject, BehaviorSubject, of, timer, Subscription } from 'rxjs';\nimport { map, take, first, switchMap, filter, tap } from 'rxjs/operators';\n\nclass QuickOrderService {\n    constructor(activeCartService, productAdapter, // TODO(#14059): Remove this service\n    eventService, productSearchConnector //TODO(#14059): Make it required\n    ) {\n        this.activeCartService = activeCartService;\n        this.productAdapter = productAdapter;\n        this.eventService = eventService;\n        this.productSearchConnector = productSearchConnector;\n        this.productAdded$ = new Subject();\n        this.entries$ = new BehaviorSubject([]);\n        this.softDeletedEntries$ = new BehaviorSubject({});\n        this.nonPurchasableProductError$ = new BehaviorSubject(null);\n        this.hardDeleteTimeout = 5000;\n        this.quickOrderListLimit = 0;\n        this.clearDeleteTimeouts = {};\n    }\n    ngOnDestroy() {\n        this.clearDeletedEntries();\n    }\n    /**\n     * Get entries\n     */\n    getEntries() {\n        return this.entries$;\n    }\n    /**\n     * @deprecated since 4.2 - use searchProducts instead\n     * Search product using SKU\n     */\n    search(productCode) {\n        return this.productAdapter.load(productCode);\n    }\n    /**\n     * Search products using query\n     */\n    searchProducts(query, maxProducts) {\n        var _a, _b;\n        // TODO(#14059): Remove condition\n        if (this.productSearchConnector) {\n            const searchConfig = {\n                pageSize: maxProducts ||\n                    ((_b = (_a = defaultQuickOrderConfig.quickOrder) === null || _a === void 0 ? void 0 : _a.searchForm) === null || _b === void 0 ? void 0 : _b.maxProducts),\n            };\n            return this.productSearchConnector\n                .search(query, searchConfig)\n                .pipe(map((searchPage) => searchPage.products || []));\n        }\n        else {\n            return of([]);\n        }\n    }\n    /**\n     * Clear a list of added entries\n     */\n    clearList() {\n        this.entries$.next([]);\n    }\n    /**\n     * Get information about the possibility to add the next product\n     */\n    canAdd(code) {\n        if (code) {\n            return of(this.isProductOnTheList(code) || !this.isLimitExceeded());\n        }\n        else {\n            return of(!this.isLimitExceeded());\n        }\n    }\n    /**\n     * Set quick order list limit property\n     */\n    setListLimit(limit) {\n        this.quickOrderListLimit = limit;\n    }\n    /**\n     * Load a list of entries\n     */\n    loadEntries(entries = []) {\n        this.entries$.next(entries);\n    }\n    /**\n     * Load a list of entries\n     */\n    updateEntryQuantity(entryIndex, quantity) {\n        const entries = this.entries$.getValue() || [];\n        entries[entryIndex].quantity = quantity;\n        this.entries$.next(entries);\n    }\n    /**\n     * Delete single entry from the list\n     */\n    softDeleteEntry(index) {\n        this.entries$.pipe(take(1)).subscribe((entries) => {\n            const entriesList = entries;\n            this.addSoftEntryDeletion(entriesList[index], true);\n            entriesList.splice(index, 1);\n            this.entries$.next(entriesList);\n        });\n    }\n    /**\n     * @deprecated since 4.2 - use softDeleteEntry instead\n     */\n    removeEntry(index) {\n        this.softDeleteEntry(index);\n    }\n    /**\n     * Add product to the quick order list\n     */\n    addProduct(product, quantity = 1) {\n        const entry = this.generateOrderEntry(product, quantity);\n        this.addEntry(entry);\n    }\n    /**\n     * Return product added subject\n     */\n    getProductAdded() {\n        return this.productAdded$;\n    }\n    /**\n     * Set product added subject\n     */\n    setProductAdded(productCode) {\n        this.productAdded$.next(productCode);\n    }\n    /**\n     * Adding to cart all products from the list\n     */\n    addToCart() {\n        let entries = [];\n        const events = [];\n        const subscription = this.eventService\n            .get(CartAddEntrySuccessEvent)\n            .subscribe((cartEvent) => {\n            if (cartEvent.quantityAdded === 0 ||\n                (!!cartEvent.quantityAdded &&\n                    cartEvent.quantityAdded < cartEvent.quantity)) {\n                events.push(this.createQuickOrderResultEvent(cartEvent));\n            }\n        });\n        subscription.add(this.eventService\n            .get(CartAddEntryFailEvent)\n            .subscribe((cartEvent) => {\n            events.push(this.createQuickOrderResultEvent(cartEvent));\n        }));\n        return this.getEntries().pipe(first(), switchMap((elements) => {\n            entries = elements;\n            this.activeCartService.addEntries(elements);\n            this.clearList();\n            return this.activeCartService.isStable();\n        }), filter((isStable) => isStable), map(() => [entries, events]), tap(() => subscription.unsubscribe()));\n    }\n    /**\n     * Return soft deleted entries\n     */\n    getSoftDeletedEntries() {\n        return this.softDeletedEntries$;\n    }\n    /**\n     * Restore soft deleted entry\n     */\n    restoreSoftDeletedEntry(productCode) {\n        const entry = this.getSoftDeletedEntry(productCode);\n        this.addEntry(entry);\n        this.hardDeleteEntry(productCode);\n    }\n    /**\n     * Clear deleted entry from the list\n     */\n    hardDeleteEntry(productCode) {\n        const entry = this.getSoftDeletedEntry(productCode);\n        const deletedEntries = this.softDeletedEntries$.getValue();\n        if (entry) {\n            delete deletedEntries[productCode];\n            this.softDeletedEntries$.next(deletedEntries);\n        }\n        this.clearDeleteTimeout(productCode);\n    }\n    /**\n     * Clear all deleted entries and timeout subscriptions\n     */\n    clearDeletedEntries() {\n        Object.values(this.clearDeleteTimeouts).forEach((subscription) => subscription.unsubscribe());\n        this.softDeletedEntries$.next({});\n        this.clearDeleteTimeouts = {};\n    }\n    /**\n     *  Return non purchasable product error\n     */\n    getNonPurchasableProductError() {\n        return this.nonPurchasableProductError$;\n    }\n    /**\n     * Set error that selected product is not purchasable\n     */\n    setNonPurchasableProductError(product) {\n        this.nonPurchasableProductError$.next(product);\n    }\n    /**\n     * Clear not purchasable product error\n     */\n    clearNonPurchasableProductError() {\n        this.nonPurchasableProductError$.next(null);\n    }\n    /**\n     * Add soft deleted entry to the cached list\n     */\n    addSoftEntryDeletion(entry, clearTimeout = true) {\n        var _a;\n        const deletedEntries = this.softDeletedEntries$.getValue();\n        const productCode = (_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code;\n        if (productCode) {\n            deletedEntries[productCode] = entry;\n            this.softDeletedEntries$.next(deletedEntries);\n            if (clearTimeout) {\n                const subscription = timer(this.hardDeleteTimeout).subscribe(() => {\n                    this.hardDeleteEntry(productCode);\n                });\n                this.clearDeleteTimeouts[productCode] = subscription;\n            }\n        }\n    }\n    /**\n     * Get soft deletion entry\n     */\n    getSoftDeletedEntry(productCode) {\n        const deletedEntries = this.softDeletedEntries$.getValue();\n        return deletedEntries[productCode];\n    }\n    /**\n     * Generate Order Entry from Product\n     */\n    generateOrderEntry(product, quantity) {\n        return {\n            basePrice: product.price,\n            product,\n            quantity,\n            totalPrice: product.price,\n        };\n    }\n    /**\n     * Add single entry to the list\n     */\n    addEntry(entry) {\n        var _a, _b, _c, _d, _e;\n        if (((_a = entry === null || entry === void 0 ? void 0 : entry.product) === null || _a === void 0 ? void 0 : _a.code) &&\n            !this.isProductOnTheList(entry.product.code) &&\n            this.isLimitExceeded()) {\n            return;\n        }\n        const entries = this.entries$.getValue() || [];\n        const entryStockLevel = (_c = (_b = entry.product) === null || _b === void 0 ? void 0 : _b.stock) === null || _c === void 0 ? void 0 : _c.stockLevel;\n        if (entryStockLevel && entry.quantity && entry.quantity > entryStockLevel) {\n            entry.quantity = entryStockLevel;\n        }\n        if (((_d = entry.product) === null || _d === void 0 ? void 0 : _d.code) && this.isProductOnTheList(entry.product.code)) {\n            const entryIndex = entries.findIndex((item) => { var _a, _b; return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === ((_b = entry.product) === null || _b === void 0 ? void 0 : _b.code); });\n            let quantity = entries[entryIndex].quantity;\n            if (quantity && entry.quantity) {\n                entries[entryIndex].quantity = quantity + (entry === null || entry === void 0 ? void 0 : entry.quantity);\n                let newQuantity = entries[entryIndex].quantity;\n                if (newQuantity && entryStockLevel && newQuantity > entryStockLevel) {\n                    entries[entryIndex].quantity = entryStockLevel;\n                }\n                this.entries$.next([...entries]);\n            }\n        }\n        else {\n            this.entries$.next([...entries, ...[entry]]);\n        }\n        this.productAdded$.next((_e = entry.product) === null || _e === void 0 ? void 0 : _e.code);\n    }\n    /**\n     * Verify if product is already on the list\n     */\n    isProductOnTheList(productCode) {\n        const entries = this.entries$.getValue() || [];\n        return !!entries.find((item) => { var _a; return ((_a = item.product) === null || _a === void 0 ? void 0 : _a.code) === productCode; });\n    }\n    isLimitExceeded() {\n        const entries = this.entries$.getValue() || [];\n        return entries.length >= this.quickOrderListLimit;\n    }\n    createQuickOrderResultEvent(cartEvent) {\n        var _a, _b, _c;\n        const evt = {\n            productCode: cartEvent.productCode,\n            quantity: cartEvent.quantity,\n        };\n        if ('entry' in cartEvent) {\n            evt.entry = cartEvent.entry;\n        }\n        if ('quantityAdded' in cartEvent) {\n            evt.quantityAdded = cartEvent.quantityAdded;\n        }\n        if ('error' in cartEvent && cartEvent.error instanceof HttpErrorModel) {\n            evt.error = cartEvent.error;\n        }\n        if ((_b = (_a = evt.error) === null || _a === void 0 ? void 0 : _a.details) === null || _b === void 0 ? void 0 : _b.length) {\n            const isOutOfStock = (_c = evt.error) === null || _c === void 0 ? void 0 : _c.details.some((e) => e.type === 'InsufficientStockError');\n            evt.quantityAdded = isOutOfStock ? 0 : evt.quantity;\n        }\n        return evt;\n    }\n    clearDeleteTimeout(productCode) {\n        const clearMessageTimout = this.clearDeleteTimeouts[productCode];\n        if (clearMessageTimout) {\n            clearMessageTimout.unsubscribe();\n            delete this.clearDeleteTimeouts[productCode];\n        }\n    }\n}\nQuickOrderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderService, deps: [{ token: i1.ActiveCartService }, { token: i1.ProductAdapter }, { token: i1.EventService }, { token: i1.ProductSearchConnector }], target: i0.ɵɵFactoryTarget.Injectable });\nQuickOrderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderService, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i1.ActiveCartService }, { type: i1.ProductAdapter }, { type: i1.EventService }, { type: i1.ProductSearchConnector }]; } });\n\nconst facadeProviders = [\n    QuickOrderService,\n    {\n        provide: QuickOrderFacade,\n        useExisting: QuickOrderService,\n    },\n];\n\nclass QuickOrderStatePersistenceService {\n    constructor(quickOrderService, siteContextParamsService, statePersistenceService) {\n        this.quickOrderService = quickOrderService;\n        this.siteContextParamsService = siteContextParamsService;\n        this.statePersistenceService = statePersistenceService;\n        this.subscription = new Subscription();\n        /**\n         * Identifier used for storage key.\n         */\n        this.key = 'quick-order';\n    }\n    /**\n     * Initializes the synchronization between state and browser storage.\n     */\n    initSync() {\n        this.subscription.add(this.statePersistenceService.syncWithStorage({\n            key: this.key,\n            state$: this.quickOrderService.getEntries(),\n            context$: this.siteContextParamsService.getValues([\n                BASE_SITE_CONTEXT_ID,\n            ]),\n            storageType: StorageSyncType.SESSION_STORAGE,\n            onRead: (state) => this.onRead(state),\n        }));\n    }\n    onRead(state) {\n        if (state) {\n            this.quickOrderService.loadEntries(state);\n        }\n    }\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\nQuickOrderStatePersistenceService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderStatePersistenceService, deps: [{ token: i1$1.QuickOrderFacade }, { token: i1.SiteContextParamsService }, { token: i1.StatePersistenceService }], target: i0.ɵɵFactoryTarget.Injectable });\nQuickOrderStatePersistenceService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderStatePersistenceService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderStatePersistenceService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root',\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.QuickOrderFacade }, { type: i1.SiteContextParamsService }, { type: i1.StatePersistenceService }]; } });\n\nclass QuickOrderCoreModule {\n    static forRoot() {\n        return {\n            ngModule: QuickOrderCoreModule,\n        };\n    }\n}\nQuickOrderCoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nQuickOrderCoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule });\nQuickOrderCoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule, providers: [...facadeProviders, QuickOrderStatePersistenceService] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.5\", ngImport: i0, type: QuickOrderCoreModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    providers: [...facadeProviders, QuickOrderStatePersistenceService],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuickOrderCoreModule, QuickOrderService, QuickOrderStatePersistenceService };\n//# sourceMappingURL=spartacus-cart-quick-order-core.js.map\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}